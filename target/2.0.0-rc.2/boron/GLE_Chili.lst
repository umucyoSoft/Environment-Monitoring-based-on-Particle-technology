
/Users/abdulhannanmustajab/Desktop/Projects/IoT/GLE_Chili_Dryer/GLE_Chili/target/2.0.0-rc.2/boron/GLE_Chili.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006de0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000dae00  000dae00  0000ae00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000dae08  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000031c  2003e0e0  000dae0c  0001e0e0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003f4  2003e400  2003e400  0002e400  2**3
                  ALLOC
  7 .module_info_suffix 00000028  000db128  000db128  0002b128  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000db150  000db150  0002b150  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001838ec  00000000  00000000  0002b154  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0001900f  00000000  00000000  001aea40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002c9f9  00000000  00000000  001c7a4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002948  00000000  00000000  001f4448  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000078e8  00000000  00000000  001f6d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003a9b4  00000000  00000000  001fe678  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003fc66  00000000  00000000  0023902c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010b2ef  00000000  00000000  00278c92  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007bd0  00000000  00000000  00383f84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 ff2b 	bl	d7e8c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 ff33 	bl	d7ea8 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e0e0 	.word	0x2003e0e0
   d404c:	000dae0c 	.word	0x000dae0c
   d4050:	2003e3fc 	.word	0x2003e3fc
   d4054:	2003e400 	.word	0x2003e400
   d4058:	2003e7f1 	.word	0x2003e7f1

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fec3 	bl	d6dec <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000daddc 	.word	0x000daddc
   d4080:	000dae00 	.word	0x000dae00

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 baa2 	b.w	d45cc <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fd6d 	bl	d4b68 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 be6d 	b.w	d6d70 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bd55 	b.w	d5b44 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bd53 	b.w	d5b44 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bd59 	b.w	d5b54 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40b4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40b6:	4904      	ldr	r1, [pc, #16]	; (d40c8 <_Z10measureNow6String+0x14>)
   d40b8:	f002 fbe0 	bl	d687c <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40bc:	b118      	cbz	r0, d40c6 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40be:	4b03      	ldr	r3, [pc, #12]	; (d40cc <_Z10measureNow6String+0x18>)
   d40c0:	2203      	movs	r2, #3
   d40c2:	701a      	strb	r2, [r3, #0]
    return 1;
   d40c4:	2001      	movs	r0, #1
  }
  else return 0;
}
   d40c6:	bd08      	pop	{r3, pc}
   d40c8:	000da90b 	.word	0x000da90b
   d40cc:	2003e504 	.word	0x2003e504

000d40d0 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40d0:	b510      	push	{r4, lr}
   d40d2:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40d4:	6800      	ldr	r0, [r0, #0]
   d40d6:	b108      	cbz	r0, d40dc <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40d8:	f001 fd3c 	bl	d5b54 <free>
class SystemClass {
   d40dc:	4620      	mov	r0, r4
   d40de:	bd10      	pop	{r4, pc}

000d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d40e0:	2300      	movs	r3, #0
   d40e2:	2204      	movs	r2, #4
   d40e4:	f001 bc86 	b.w	d59f4 <spark_variable>

000d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40ea:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d40ee:	431d      	orrs	r5, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f0:	f88d 5000 	strb.w	r5, [sp]
   d40f4:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40f6:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40f8:	f001 ff52 	bl	d5fa0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   d40fc:	4620      	mov	r0, r4
   d40fe:	b003      	add	sp, #12
   d4100:	bd30      	pop	{r4, r5, pc}
	...

000d4104 <_Z17connectToParticlev>:
bool connectToParticle() {
   d4104:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d4108:	f001 fc8c 	bl	d5a24 <spark_cloud_flag_connect>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d410c:	f8df a058 	ldr.w	sl, [pc, #88]	; d4168 <_Z17connectToParticlev+0x64>
   d4110:	f44f 7496 	mov.w	r4, #300	; 0x12c
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4114:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
   d4118:	f240 38e7 	movw	r8, #999	; 0x3e7
   d411c:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4120:	2000      	movs	r0, #0
   d4122:	f001 faf1 	bl	d5708 <hal_timer_millis>
   d4126:	4605      	mov	r5, r0
   d4128:	2000      	movs	r0, #0
   d412a:	f001 faed 	bl	d5708 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d412e:	1b46      	subs	r6, r0, r5
   d4130:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d4134:	45b9      	cmp	r9, r7
   d4136:	bf08      	it	eq
   d4138:	45b0      	cmpeq	r8, r6
   d413a:	d305      	bcc.n	d4148 <_Z17connectToParticlev+0x44>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d413c:	f001 fc7a 	bl	d5a34 <spark_cloud_flag_connected>
   d4140:	b910      	cbnz	r0, d4148 <_Z17connectToParticlev+0x44>
            spark_process();
   d4142:	f001 fc67 	bl	d5a14 <spark_process>
        while (_while() && !_condition()) {
   d4146:	e7ef      	b.n	d4128 <_Z17connectToParticlev+0x24>
   d4148:	f001 fc74 	bl	d5a34 <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d414c:	b118      	cbz	r0, d4156 <_Z17connectToParticlev+0x52>
}
   d414e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4152:	f001 bc6f 	b.w	d5a34 <spark_cloud_flag_connected>
		return HAL_Timer_Get_Milli_Seconds();
   d4156:	f001 faa7 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d415a:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d415e:	f001 fc59 	bl	d5a14 <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4162:	3c01      	subs	r4, #1
   d4164:	d1dc      	bne.n	d4120 <_Z17connectToParticlev+0x1c>
   d4166:	e7f2      	b.n	d414e <_Z17connectToParticlev+0x4a>
   d4168:	2003e79c 	.word	0x2003e79c

000d416c <_Z8BlinkLEDi>:
void BlinkLED(int LED){
   d416c:	b510      	push	{r4, lr}
  digitalWrite(LED,HIGH);
   d416e:	b284      	uxth	r4, r0
   d4170:	2101      	movs	r1, #1
   d4172:	4620      	mov	r0, r4
   d4174:	f002 febb 	bl	d6eee <digitalWrite>
  delay(1000);
   d4178:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d417c:	f001 fd22 	bl	d5bc4 <delay>
  digitalWrite(LED,LOW);
   d4180:	4620      	mov	r0, r4
   d4182:	2100      	movs	r1, #0
   d4184:	f002 feb3 	bl	d6eee <digitalWrite>
}
   d4188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(1000);
   d418c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d4190:	f001 bd18 	b.w	d5bc4 <delay>

000d4194 <_Z20meterParticlePublishv>:
  Serial.println(stateTransitionString);
}


bool meterParticlePublish(void)
{
   d4194:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4196:	f001 fa87 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
   d419a:	4b04      	ldr	r3, [pc, #16]	; (d41ac <_Z20meterParticlePublishv+0x18>)
   d419c:	681b      	ldr	r3, [r3, #0]
   d419e:	1ac0      	subs	r0, r0, r3
  else return 0;
}
   d41a0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d41a4:	bf34      	ite	cc
   d41a6:	2000      	movcc	r0, #0
   d41a8:	2001      	movcs	r0, #1
   d41aa:	bd08      	pop	{r3, pc}
   d41ac:	2003e45c 	.word	0x2003e45c

000d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>:
    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d41b0:	b508      	push	{r3, lr}
        waitUntil(meterParticlePublish);
   d41b2:	f7ff ffef 	bl	d4194 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d41b6:	b910      	cbnz	r0, d41be <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0xe>
            spark_process();
   d41b8:	f001 fc2c 	bl	d5a14 <spark_process>
        while (_while() && !_condition()) {
   d41bc:	e7f9      	b.n	d41b2 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0x2>
    }
   d41be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d41c2:	f7ff bfe7 	b.w	d4194 <_Z20meterParticlePublishv>
	...

000d41c8 <_Z20updateThresholdValuev>:
  updateThresholdValue();
  return 1;
}

// This function updates the threshold value string in the console. 
void updateThresholdValue(){
   d41c8:	b513      	push	{r0, r1, r4, lr}
    snprintf(upperTemperatureThresholdString,sizeof(upperTemperatureThresholdString),"Temp_Max : %3.1f",sensor_data.upperTemperatureThreshold);
   d41ca:	4c15      	ldr	r4, [pc, #84]	; (d4220 <_Z20updateThresholdValuev+0x58>)
   d41cc:	6a20      	ldr	r0, [r4, #32]
   d41ce:	f003 f86d 	bl	d72ac <__aeabi_f2d>
   d41d2:	4a14      	ldr	r2, [pc, #80]	; (d4224 <_Z20updateThresholdValuev+0x5c>)
   d41d4:	e9cd 0100 	strd	r0, r1, [sp]
   d41d8:	2118      	movs	r1, #24
   d41da:	4813      	ldr	r0, [pc, #76]	; (d4228 <_Z20updateThresholdValuev+0x60>)
   d41dc:	f001 fcd2 	bl	d5b84 <snprintf>
    snprintf(lowerTemperatureThresholdString,sizeof(lowerTemperatureThresholdString),"Temp_Mix : %3.1f",sensor_data.lowerTemperatureThreshold);
   d41e0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d41e2:	f003 f863 	bl	d72ac <__aeabi_f2d>
   d41e6:	4a11      	ldr	r2, [pc, #68]	; (d422c <_Z20updateThresholdValuev+0x64>)
   d41e8:	e9cd 0100 	strd	r0, r1, [sp]
   d41ec:	2118      	movs	r1, #24
   d41ee:	4810      	ldr	r0, [pc, #64]	; (d4230 <_Z20updateThresholdValuev+0x68>)
   d41f0:	f001 fcc8 	bl	d5b84 <snprintf>
    snprintf(upperHumidityThresholdString,sizeof(upperHumidityThresholdString),"Humidity_Max: %3.1f",sensor_data.upperHumidityThreshold);
   d41f4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d41f6:	f003 f859 	bl	d72ac <__aeabi_f2d>
   d41fa:	4a0e      	ldr	r2, [pc, #56]	; (d4234 <_Z20updateThresholdValuev+0x6c>)
   d41fc:	e9cd 0100 	strd	r0, r1, [sp]
   d4200:	2118      	movs	r1, #24
   d4202:	480d      	ldr	r0, [pc, #52]	; (d4238 <_Z20updateThresholdValuev+0x70>)
   d4204:	f001 fcbe 	bl	d5b84 <snprintf>
    snprintf(lowerHumidityThresholdString,sizeof(lowerHumidityThresholdString),"Humidity_Min : %3.1f",sensor_data.lowerHumidityThreshold);
   d4208:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d420a:	f003 f84f 	bl	d72ac <__aeabi_f2d>
   d420e:	4a0b      	ldr	r2, [pc, #44]	; (d423c <_Z20updateThresholdValuev+0x74>)
   d4210:	e9cd 0100 	strd	r0, r1, [sp]
   d4214:	2118      	movs	r1, #24
   d4216:	480a      	ldr	r0, [pc, #40]	; (d4240 <_Z20updateThresholdValuev+0x78>)
   d4218:	f001 fcb4 	bl	d5b84 <snprintf>
} 
   d421c:	b002      	add	sp, #8
   d421e:	bd10      	pop	{r4, pc}
   d4220:	2003e4b8 	.word	0x2003e4b8
   d4224:	000da538 	.word	0x000da538
   d4228:	2003e53b 	.word	0x2003e53b
   d422c:	000da549 	.word	0x000da549
   d4230:	2003e47a 	.word	0x2003e47a
   d4234:	000da55a 	.word	0x000da55a
   d4238:	2003e522 	.word	0x2003e522
   d423c:	000da56e 	.word	0x000da56e
   d4240:	2003e461 	.word	0x2003e461

000d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d4244:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d4246:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d4248:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d424a:	b17c      	cbz	r4, d426c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d424c:	6863      	ldr	r3, [r4, #4]
   d424e:	3b01      	subs	r3, #1
   d4250:	6063      	str	r3, [r4, #4]
   d4252:	b95b      	cbnz	r3, d426c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d4254:	6823      	ldr	r3, [r4, #0]
   d4256:	4620      	mov	r0, r4
   d4258:	689b      	ldr	r3, [r3, #8]
   d425a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d425c:	68a3      	ldr	r3, [r4, #8]
   d425e:	3b01      	subs	r3, #1
   d4260:	60a3      	str	r3, [r4, #8]
   d4262:	b91b      	cbnz	r3, d426c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d4264:	6823      	ldr	r3, [r4, #0]
   d4266:	4620      	mov	r0, r4
   d4268:	68db      	ldr	r3, [r3, #12]
   d426a:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d426c:	4628      	mov	r0, r5
   d426e:	bd38      	pop	{r3, r4, r5, pc}

000d4270 <_Z9sendEventv>:
{
   d4270:	b530      	push	{r4, r5, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d4272:	4c28      	ldr	r4, [pc, #160]	; (d4314 <_Z9sendEventv+0xa4>)
   d4274:	b0cd      	sub	sp, #308	; 0x134
   d4276:	2508      	movs	r5, #8
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
   d4278:	f002 fe52 	bl	d6f20 <_Z21__fetch_global_EEPROMv>
   d427c:	4628      	mov	r0, r5
   d427e:	4925      	ldr	r1, [pc, #148]	; (d4314 <_Z9sendEventv+0xa4>)
   d4280:	2240      	movs	r2, #64	; 0x40
   d4282:	3564      	adds	r5, #100	; 0x64
   d4284:	f001 fa28 	bl	d56d8 <HAL_EEPROM_Get>
   for (int i = 0; i < 4; i++) {
   d4288:	f5b5 7fcc 	cmp.w	r5, #408	; 0x198
   d428c:	d1f4      	bne.n	d4278 <_Z9sendEventv+0x8>
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,  \"Lux\":%4.1f,  \"White\":%4.1f,  \"ALS\":%4.1f}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.lux,sensor_data.white,sensor_data.raw_als);
   d428e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d4290:	f003 f80c 	bl	d72ac <__aeabi_f2d>
   d4294:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d4298:	6b60      	ldr	r0, [r4, #52]	; 0x34
   d429a:	f003 f807 	bl	d72ac <__aeabi_f2d>
   d429e:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d42a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
   d42a4:	f003 f802 	bl	d72ac <__aeabi_f2d>
   d42a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d42ac:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d42b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d42b4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   d42b8:	f44f 7180 	mov.w	r1, #256	; 0x100
   d42bc:	e9cd 2300 	strd	r2, r3, [sp]
   d42c0:	a80c      	add	r0, sp, #48	; 0x30
   d42c2:	4a15      	ldr	r2, [pc, #84]	; (d4318 <_Z9sendEventv+0xa8>)
  currentCountTime = Time.now();
   d42c4:	4c15      	ldr	r4, [pc, #84]	; (d431c <_Z9sendEventv+0xac>)
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,  \"Lux\":%4.1f,  \"White\":%4.1f,  \"ALS\":%4.1f}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.lux,sensor_data.white,sensor_data.raw_als);
   d42c6:	f001 fc5d 	bl	d5b84 <snprintf>
  Particle.publish("GLE_HOOK", data, PRIVATE);
   d42ca:	2300      	movs	r3, #0
   d42cc:	f88d 3000 	strb.w	r3, [sp]
   d42d0:	4b13      	ldr	r3, [pc, #76]	; (d4320 <_Z9sendEventv+0xb0>)
   d42d2:	4914      	ldr	r1, [pc, #80]	; (d4324 <_Z9sendEventv+0xb4>)
   d42d4:	781b      	ldrb	r3, [r3, #0]
   d42d6:	aa0c      	add	r2, sp, #48	; 0x30
   d42d8:	a80a      	add	r0, sp, #40	; 0x28
   d42da:	f7ff ff05 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d42de:	a80b      	add	r0, sp, #44	; 0x2c
   d42e0:	f7ff ffb0 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentCountTime = Time.now();
   d42e4:	f002 fb98 	bl	d6a18 <_ZN9TimeClass3nowEv>
   d42e8:	17c1      	asrs	r1, r0, #31
   d42ea:	e9c4 0100 	strd	r0, r1, [r4]
  EEPROM.write(MEM_MAP::currentCountsTimeAddr, currentCountTime);
   d42ee:	f002 fe17 	bl	d6f20 <_Z21__fetch_global_EEPROMv>
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d42f2:	7821      	ldrb	r1, [r4, #0]
   d42f4:	2003      	movs	r0, #3
   d42f6:	f001 f9e7 	bl	d56c8 <HAL_EEPROM_Write>
  currentHourlyPeriod = Time.hour();                                                        // Change the time period
   d42fa:	f002 fb9d 	bl	d6a38 <_ZN9TimeClass4hourEv>
   d42fe:	4b0a      	ldr	r3, [pc, #40]	; (d4328 <_Z9sendEventv+0xb8>)
   d4300:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
   d4302:	4b0a      	ldr	r3, [pc, #40]	; (d432c <_Z9sendEventv+0xbc>)
   d4304:	2201      	movs	r2, #1
   d4306:	701a      	strb	r2, [r3, #0]
   d4308:	f001 f9ce 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d430c:	4b08      	ldr	r3, [pc, #32]	; (d4330 <_Z9sendEventv+0xc0>)
   d430e:	6018      	str	r0, [r3, #0]
}
   d4310:	b04d      	add	sp, #308	; 0x134
   d4312:	bd30      	pop	{r4, r5, pc}
   d4314:	2003e4b8 	.word	0x2003e4b8
   d4318:	000da583 	.word	0x000da583
   d431c:	2003e440 	.word	0x2003e440
   d4320:	2003e425 	.word	0x2003e425
   d4324:	000da5d7 	.word	0x000da5d7
   d4328:	2003e448 	.word	0x2003e448
   d432c:	2003e0e0 	.word	0x2003e0e0
   d4330:	2003e590 	.word	0x2003e590

000d4334 <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4334:	b530      	push	{r4, r5, lr}
   d4336:	4d1e      	ldr	r5, [pc, #120]	; (d43b0 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4338:	b085      	sub	sp, #20
  if (!data) {                                                                    // First check to see if there is any data
   d433a:	460c      	mov	r4, r1
   d433c:	b981      	cbnz	r1, d4360 <_Z14UbidotsHandlerPKcS0_+0x2c>
    if (verboseMode) {
   d433e:	782b      	ldrb	r3, [r5, #0]
   d4340:	b343      	cbz	r3, d4394 <_Z14UbidotsHandlerPKcS0_+0x60>
        return waitConditionWhile(_condition, []{ return true; });
   d4342:	f7ff ff35 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d4346:	4b1b      	ldr	r3, [pc, #108]	; (d43b4 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d4348:	f88d 4000 	strb.w	r4, [sp]
   d434c:	781b      	ldrb	r3, [r3, #0]
   d434e:	4a1a      	ldr	r2, [pc, #104]	; (d43b8 <_Z14UbidotsHandlerPKcS0_+0x84>)
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d4350:	491a      	ldr	r1, [pc, #104]	; (d43bc <_Z14UbidotsHandlerPKcS0_+0x88>)
   d4352:	a802      	add	r0, sp, #8
   d4354:	f7ff fec8 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4358:	a803      	add	r0, sp, #12
   d435a:	f7ff ff73 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d435e:	e019      	b.n	d4394 <_Z14UbidotsHandlerPKcS0_+0x60>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d4360:	4608      	mov	r0, r1
   d4362:	f003 fc8a 	bl	d7c7a <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d4366:	38c8      	subs	r0, #200	; 0xc8
   d4368:	2801      	cmp	r0, #1
    if (verboseMode) {
   d436a:	782b      	ldrb	r3, [r5, #0]
  if ((responseCode == 200) || (responseCode == 201))
   d436c:	d814      	bhi.n	d4398 <_Z14UbidotsHandlerPKcS0_+0x64>
    if (verboseMode) {
   d436e:	b173      	cbz	r3, d438e <_Z14UbidotsHandlerPKcS0_+0x5a>
   d4370:	f7ff ff1e 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("State", "Response Received", PRIVATE);
   d4374:	2300      	movs	r3, #0
   d4376:	f88d 3000 	strb.w	r3, [sp]
   d437a:	4b0e      	ldr	r3, [pc, #56]	; (d43b4 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d437c:	4a10      	ldr	r2, [pc, #64]	; (d43c0 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d437e:	781b      	ldrb	r3, [r3, #0]
   d4380:	4910      	ldr	r1, [pc, #64]	; (d43c4 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d4382:	a802      	add	r0, sp, #8
   d4384:	f7ff feb0 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4388:	a803      	add	r0, sp, #12
   d438a:	f7ff ff5b 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    dataInFlight = false;    
   d438e:	4b0e      	ldr	r3, [pc, #56]	; (d43c8 <_Z14UbidotsHandlerPKcS0_+0x94>)
   d4390:	2200      	movs	r2, #0
   d4392:	701a      	strb	r2, [r3, #0]
}
   d4394:	b005      	add	sp, #20
   d4396:	bd30      	pop	{r4, r5, pc}
  else if (verboseMode) {
   d4398:	2b00      	cmp	r3, #0
   d439a:	d0fb      	beq.n	d4394 <_Z14UbidotsHandlerPKcS0_+0x60>
   d439c:	f7ff ff08 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d43a0:	2300      	movs	r3, #0
   d43a2:	f88d 3000 	strb.w	r3, [sp]
   d43a6:	4b03      	ldr	r3, [pc, #12]	; (d43b4 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d43a8:	4622      	mov	r2, r4
   d43aa:	781b      	ldrb	r3, [r3, #0]
   d43ac:	e7d0      	b.n	d4350 <_Z14UbidotsHandlerPKcS0_+0x1c>
   d43ae:	bf00      	nop
   d43b0:	2003e1bc 	.word	0x2003e1bc
   d43b4:	2003e425 	.word	0x2003e425
   d43b8:	000da5e0 	.word	0x000da5e0
   d43bc:	000da5e8 	.word	0x000da5e8
   d43c0:	000da5f5 	.word	0x000da5f5
   d43c4:	000da607 	.word	0x000da607
   d43c8:	2003e0e0 	.word	0x2003e0e0

000d43cc <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d43cc:	e92d 437f 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r8, r9, lr}
  sensor_data.validData = false;
   d43d0:	4c66      	ldr	r4, [pc, #408]	; (d456c <_Z16takeMeasurementsv+0x1a0>)
  if (sht31.readTemperature()){
   d43d2:	4867      	ldr	r0, [pc, #412]	; (d4570 <_Z16takeMeasurementsv+0x1a4>)
  sensor_data.validData = false;
   d43d4:	2500      	movs	r5, #0
   d43d6:	7025      	strb	r5, [r4, #0]
  if (sht31.readTemperature()){
   d43d8:	f001 f92a 	bl	d5630 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d43dc:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d43e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d43e4:	f000 80af 	beq.w	d4546 <_Z16takeMeasurementsv+0x17a>
    currentCountTime = Time.now();
   d43e8:	f002 fb16 	bl	d6a18 <_ZN9TimeClass3nowEv>
   d43ec:	4b61      	ldr	r3, [pc, #388]	; (d4574 <_Z16takeMeasurementsv+0x1a8>)
   d43ee:	17c1      	asrs	r1, r0, #31
   d43f0:	e9c3 0100 	strd	r0, r1, [r3]
    int currentMinutes = Time.minute();                                // So we only have to check once
   d43f4:	f002 fb2c 	bl	d6a50 <_ZN9TimeClass6minuteEv>
    switch (currentMinutes) {
   d43f8:	281e      	cmp	r0, #30
   d43fa:	f000 80a0 	beq.w	d453e <_Z16takeMeasurementsv+0x172>
   d43fe:	282d      	cmp	r0, #45	; 0x2d
   d4400:	f000 809f 	beq.w	d4542 <_Z16takeMeasurementsv+0x176>
        reportCycle = 0;                                                // This is the first of the sample-only periods
   d4404:	280f      	cmp	r0, #15
   d4406:	bf14      	ite	ne
   d4408:	2603      	movne	r6, #3
   d440a:	462e      	moveq	r6, r5
    sensor_data.temperatureInC = sht31.readTemperature();
   d440c:	4858      	ldr	r0, [pc, #352]	; (d4570 <_Z16takeMeasurementsv+0x1a4>)
   d440e:	f001 f90f 	bl	d5630 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4412:	ee10 0a10 	vmov	r0, s0
   d4416:	f002 ff49 	bl	d72ac <__aeabi_f2d>
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d441a:	4a57      	ldr	r2, [pc, #348]	; (d4578 <_Z16takeMeasurementsv+0x1ac>)
    sensor_data.temperatureInC = sht31.readTemperature();
   d441c:	e9c4 0104 	strd	r0, r1, [r4, #16]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d4420:	e9cd 0100 	strd	r0, r1, [sp]
   d4424:	2110      	movs	r1, #16
   d4426:	4855      	ldr	r0, [pc, #340]	; (d457c <_Z16takeMeasurementsv+0x1b0>)
   d4428:	f001 fbac 	bl	d5b84 <snprintf>
    sensor_data.relativeHumidity = sht31.readHumidity();
   d442c:	4850      	ldr	r0, [pc, #320]	; (d4570 <_Z16takeMeasurementsv+0x1a4>)
   d442e:	f001 f90d 	bl	d564c <_ZN14Adafruit_SHT3112readHumidityEv>
   d4432:	ee10 0a10 	vmov	r0, s0
   d4436:	f002 ff39 	bl	d72ac <__aeabi_f2d>
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d443a:	4a51      	ldr	r2, [pc, #324]	; (d4580 <_Z16takeMeasurementsv+0x1b4>)
    sensor_data.relativeHumidity = sht31.readHumidity();
   d443c:	e9c4 0106 	strd	r0, r1, [r4, #24]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d4440:	e9cd 0100 	strd	r0, r1, [sp]
   d4444:	2110      	movs	r1, #16
   d4446:	484f      	ldr	r0, [pc, #316]	; (d4584 <_Z16takeMeasurementsv+0x1b8>)
   d4448:	f001 fb9c 	bl	d5b84 <snprintf>
    sensor_data.lux = veml.readLux();
   d444c:	484e      	ldr	r0, [pc, #312]	; (d4588 <_Z16takeMeasurementsv+0x1bc>)
   d444e:	f000 feff 	bl	d5250 <_ZN17Adafruit_VEML77007readLuxEv>
    sensor_data.white = veml.readWhite();
   d4452:	484d      	ldr	r0, [pc, #308]	; (d4588 <_Z16takeMeasurementsv+0x1bc>)
    sensor_data.lux = veml.readLux();
   d4454:	ed84 0a0c 	vstr	s0, [r4, #48]	; 0x30
    sensor_data.white = veml.readWhite();
   d4458:	f000 ff1a 	bl	d5290 <_ZN17Adafruit_VEML77009readWhiteEv>
    sensor_data.raw_als = veml.readALS();
   d445c:	484a      	ldr	r0, [pc, #296]	; (d4588 <_Z16takeMeasurementsv+0x1bc>)
    sensor_data.white = veml.readWhite();
   d445e:	ed84 0a0d 	vstr	s0, [r4, #52]	; 0x34
    sensor_data.raw_als = veml.readALS();
   d4462:	f000 fe95 	bl	d5190 <_ZN17Adafruit_VEML77007readALSEv>
   d4466:	ee07 0a90 	vmov	s15, r0
   d446a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    snprintf(luxString,sizeof(luxString),"Lux : %4.1f", sensor_data.lux);
   d446e:	6b20      	ldr	r0, [r4, #48]	; 0x30
    sensor_data.raw_als = veml.readALS();
   d4470:	edc4 7a0e 	vstr	s15, [r4, #56]	; 0x38
    snprintf(luxString,sizeof(luxString),"Lux : %4.1f", sensor_data.lux);
   d4474:	f002 ff1a 	bl	d72ac <__aeabi_f2d>
   d4478:	4a44      	ldr	r2, [pc, #272]	; (d458c <_Z16takeMeasurementsv+0x1c0>)
   d447a:	e9cd 0100 	strd	r0, r1, [sp]
   d447e:	2110      	movs	r1, #16
   d4480:	4843      	ldr	r0, [pc, #268]	; (d4590 <_Z16takeMeasurementsv+0x1c4>)
   d4482:	f001 fb7f 	bl	d5b84 <snprintf>
    snprintf(whiteString,sizeof(whiteString),"White : %4.1f", sensor_data.white);
   d4486:	6b60      	ldr	r0, [r4, #52]	; 0x34
   d4488:	f002 ff10 	bl	d72ac <__aeabi_f2d>
   d448c:	4a41      	ldr	r2, [pc, #260]	; (d4594 <_Z16takeMeasurementsv+0x1c8>)
   d448e:	e9cd 0100 	strd	r0, r1, [sp]
   d4492:	2110      	movs	r1, #16
   d4494:	4840      	ldr	r0, [pc, #256]	; (d4598 <_Z16takeMeasurementsv+0x1cc>)
   d4496:	f001 fb75 	bl	d5b84 <snprintf>
    snprintf(ALSString,sizeof(ALSString),"ALS : %4.1f", sensor_data.raw_als);
   d449a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
   d449c:	f002 ff06 	bl	d72ac <__aeabi_f2d>
   d44a0:	4a3e      	ldr	r2, [pc, #248]	; (d459c <_Z16takeMeasurementsv+0x1d0>)
   d44a2:	e9cd 0100 	strd	r0, r1, [sp]
   d44a6:	2110      	movs	r1, #16
   d44a8:	483d      	ldr	r0, [pc, #244]	; (d45a0 <_Z16takeMeasurementsv+0x1d4>)
   d44aa:	f001 fb6b 	bl	d5b84 <snprintf>
    if (temperatureInC < sensor_data.lowerTemperatureThreshold) lowerTemperatureThresholdCrossed = true;
   d44ae:	4b3d      	ldr	r3, [pc, #244]	; (d45a4 <_Z16takeMeasurementsv+0x1d8>)
   d44b0:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d44b2:	e9d3 8900 	ldrd	r8, r9, [r3]
   d44b6:	f002 fef9 	bl	d72ac <__aeabi_f2d>
   d44ba:	4642      	mov	r2, r8
   d44bc:	464b      	mov	r3, r9
   d44be:	f003 f9dd 	bl	d787c <__aeabi_dcmpgt>
   d44c2:	b110      	cbz	r0, d44ca <_Z16takeMeasurementsv+0xfe>
   d44c4:	4b38      	ldr	r3, [pc, #224]	; (d45a8 <_Z16takeMeasurementsv+0x1dc>)
   d44c6:	2201      	movs	r2, #1
   d44c8:	701a      	strb	r2, [r3, #0]
    if (temperatureInC > sensor_data.upperTemperatureThreshold) upperTemperatureThresholdCrossed = true;
   d44ca:	6a20      	ldr	r0, [r4, #32]
   d44cc:	f002 feee 	bl	d72ac <__aeabi_f2d>
   d44d0:	4602      	mov	r2, r0
   d44d2:	460b      	mov	r3, r1
   d44d4:	4640      	mov	r0, r8
   d44d6:	4649      	mov	r1, r9
   d44d8:	f003 f9d0 	bl	d787c <__aeabi_dcmpgt>
   d44dc:	b110      	cbz	r0, d44e4 <_Z16takeMeasurementsv+0x118>
   d44de:	4b33      	ldr	r3, [pc, #204]	; (d45ac <_Z16takeMeasurementsv+0x1e0>)
   d44e0:	2201      	movs	r2, #1
   d44e2:	701a      	strb	r2, [r3, #0]
    if (relativeHumidity < sensor_data.lowerHumidityThreshold) lowerHumidityThresholdCrossed = true;
   d44e4:	4b32      	ldr	r3, [pc, #200]	; (d45b0 <_Z16takeMeasurementsv+0x1e4>)
   d44e6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   d44e8:	e9d3 8900 	ldrd	r8, r9, [r3]
   d44ec:	f002 fede 	bl	d72ac <__aeabi_f2d>
   d44f0:	4642      	mov	r2, r8
   d44f2:	464b      	mov	r3, r9
   d44f4:	f003 f9c2 	bl	d787c <__aeabi_dcmpgt>
   d44f8:	b110      	cbz	r0, d4500 <_Z16takeMeasurementsv+0x134>
   d44fa:	4b2e      	ldr	r3, [pc, #184]	; (d45b4 <_Z16takeMeasurementsv+0x1e8>)
   d44fc:	2201      	movs	r2, #1
   d44fe:	701a      	strb	r2, [r3, #0]
    if (relativeHumidity > sensor_data.upperHumidityThreshold) upperHumidityThresholdCrossed = true;
   d4500:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d4502:	f002 fed3 	bl	d72ac <__aeabi_f2d>
   d4506:	4602      	mov	r2, r0
   d4508:	460b      	mov	r3, r1
   d450a:	4640      	mov	r0, r8
   d450c:	4649      	mov	r1, r9
   d450e:	f003 f9b5 	bl	d787c <__aeabi_dcmpgt>
   d4512:	b110      	cbz	r0, d451a <_Z16takeMeasurementsv+0x14e>
   d4514:	4b28      	ldr	r3, [pc, #160]	; (d45b8 <_Z16takeMeasurementsv+0x1ec>)
   d4516:	2201      	movs	r2, #1
   d4518:	701a      	strb	r2, [r3, #0]
    sensor_data.validData = true;
   d451a:	2501      	movs	r5, #1
   d451c:	7025      	strb	r5, [r4, #0]
    sensor_data.timeStamp = Time.now();
   d451e:	f002 fa7b 	bl	d6a18 <_ZN9TimeClass3nowEv>
   d4522:	6060      	str	r0, [r4, #4]
    EEPROM.put(8 + 100*reportCycle,sensor_data);     
   d4524:	f002 fcfc 	bl	d6f20 <_Z21__fetch_global_EEPROMv>
   d4528:	2064      	movs	r0, #100	; 0x64
   d452a:	4370      	muls	r0, r6
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d452c:	490f      	ldr	r1, [pc, #60]	; (d456c <_Z16takeMeasurementsv+0x1a0>)
   d452e:	2240      	movs	r2, #64	; 0x40
   d4530:	3008      	adds	r0, #8
   d4532:	f001 f8d9 	bl	d56e8 <HAL_EEPROM_Put>
        return 0;
   d4536:	4628      	mov	r0, r5
}
   d4538:	b004      	add	sp, #16
   d453a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    switch (currentMinutes) {
   d453e:	2601      	movs	r6, #1
   d4540:	e764      	b.n	d440c <_Z16takeMeasurementsv+0x40>
        reportCycle = 2;                                                // This is the third of the sample-only periods
   d4542:	2602      	movs	r6, #2
   d4544:	e762      	b.n	d440c <_Z16takeMeasurementsv+0x40>
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   d4546:	4b1d      	ldr	r3, [pc, #116]	; (d45bc <_Z16takeMeasurementsv+0x1f0>)
   d4548:	f88d 5000 	strb.w	r5, [sp]
   d454c:	781b      	ldrb	r3, [r3, #0]
   d454e:	4a1c      	ldr	r2, [pc, #112]	; (d45c0 <_Z16takeMeasurementsv+0x1f4>)
   d4550:	491c      	ldr	r1, [pc, #112]	; (d45c4 <_Z16takeMeasurementsv+0x1f8>)
   d4552:	a802      	add	r0, sp, #8
   d4554:	f7ff fdc8 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4558:	a803      	add	r0, sp, #12
   d455a:	f7ff fe73 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Serial.println("Failed to take reading!");
   d455e:	f002 fb69 	bl	d6c34 <_Z16_fetch_usbserialv>
   d4562:	4919      	ldr	r1, [pc, #100]	; (d45c8 <_Z16takeMeasurementsv+0x1fc>)
   d4564:	f002 f8a5 	bl	d66b2 <_ZN5Print7printlnEPKc>
   d4568:	e7e5      	b.n	d4536 <_Z16takeMeasurementsv+0x16a>
   d456a:	bf00      	nop
   d456c:	2003e4b8 	.word	0x2003e4b8
   d4570:	2003e4f8 	.word	0x2003e4f8
   d4574:	2003e440 	.word	0x2003e440
   d4578:	000da60d 	.word	0x000da60d
   d457c:	2003e510 	.word	0x2003e510
   d4580:	000da615 	.word	0x000da615
   d4584:	2003e449 	.word	0x2003e449
   d4588:	2003e554 	.word	0x2003e554
   d458c:	000da61d 	.word	0x000da61d
   d4590:	2003e492 	.word	0x2003e492
   d4594:	000da629 	.word	0x000da629
   d4598:	2003e594 	.word	0x2003e594
   d459c:	000da637 	.word	0x000da637
   d45a0:	2003e404 	.word	0x2003e404
   d45a4:	2003e508 	.word	0x2003e508
   d45a8:	2003e479 	.word	0x2003e479
   d45ac:	2003e53a 	.word	0x2003e53a
   d45b0:	2003e4a8 	.word	0x2003e4a8
   d45b4:	2003e460 	.word	0x2003e460
   d45b8:	2003e521 	.word	0x2003e521
   d45bc:	2003e424 	.word	0x2003e424
   d45c0:	000da643 	.word	0x000da643
   d45c4:	000da660 	.word	0x000da660
   d45c8:	000da664 	.word	0x000da664

000d45cc <setup>:
{
   d45cc:	b570      	push	{r4, r5, r6, lr}
   d45ce:	b0bc      	sub	sp, #240	; 0xf0
  Serial.begin(115200);
   d45d0:	f002 fb30 	bl	d6c34 <_Z16_fetch_usbserialv>
   d45d4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d45d8:	f002 fb20 	bl	d6c1c <_ZN9USBSerial5beginEl>
  Serial.println("SHT31 test");
   d45dc:	f002 fb2a 	bl	d6c34 <_Z16_fetch_usbserialv>
   d45e0:	49ac      	ldr	r1, [pc, #688]	; (d4894 <setup+0x2c8>)
   d45e2:	f002 f866 	bl	d66b2 <_ZN5Print7printlnEPKc>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d45e6:	4bac      	ldr	r3, [pc, #688]	; (d4898 <setup+0x2cc>)
   d45e8:	aa0c      	add	r2, sp, #48	; 0x30
   d45ea:	f103 0510 	add.w	r5, r3, #16
   d45ee:	4616      	mov	r6, r2
   d45f0:	6818      	ldr	r0, [r3, #0]
   d45f2:	6859      	ldr	r1, [r3, #4]
   d45f4:	4614      	mov	r4, r2
   d45f6:	c403      	stmia	r4!, {r0, r1}
   d45f8:	3308      	adds	r3, #8
   d45fa:	42ab      	cmp	r3, r5
   d45fc:	4622      	mov	r2, r4
   d45fe:	d1f7      	bne.n	d45f0 <setup+0x24>
   d4600:	8819      	ldrh	r1, [r3, #0]
   d4602:	789b      	ldrb	r3, [r3, #2]
   d4604:	8021      	strh	r1, [r4, #0]
   d4606:	222d      	movs	r2, #45	; 0x2d
   d4608:	70a3      	strb	r3, [r4, #2]
   d460a:	2100      	movs	r1, #0
  state = IDLE_STATE;
   d460c:	4da3      	ldr	r5, [pc, #652]	; (d489c <setup+0x2d0>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d460e:	f10d 0043 	add.w	r0, sp, #67	; 0x43
   d4612:	f003 fc49 	bl	d7ea8 <memset>
  state = IDLE_STATE;
   d4616:	2302      	movs	r3, #2
  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d4618:	2101      	movs	r1, #1
   d461a:	2007      	movs	r0, #7
  state = IDLE_STATE;
   d461c:	702b      	strb	r3, [r5, #0]
  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d461e:	f002 fc55 	bl	d6ecc <pinMode>
  pinMode(tempLED,OUTPUT);
   d4622:	2101      	movs	r1, #1
   d4624:	2005      	movs	r0, #5
   d4626:	f002 fc51 	bl	d6ecc <pinMode>
    static String deviceID(void) { return spark_deviceID(); }
   d462a:	a804      	add	r0, sp, #16
   d462c:	f001 fa0a 	bl	d5a44 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4630:	2300      	movs	r3, #0
   d4632:	227d      	movs	r2, #125	; 0x7d
   d4634:	a91c      	add	r1, sp, #112	; 0x70
   d4636:	a804      	add	r0, sp, #16
   d4638:	f002 f932 	bl	d68a0 <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d463c:	2300      	movs	r3, #0
   d463e:	461a      	mov	r2, r3
   d4640:	e9cd 3300 	strd	r3, r3, [sp]
   d4644:	4996      	ldr	r1, [pc, #600]	; (d48a0 <setup+0x2d4>)
   d4646:	a81c      	add	r0, sp, #112	; 0x70
   d4648:	f001 fa0c 	bl	d5a64 <spark_subscribe>
  Particle.variable("Release",releaseNumber);
   d464c:	4b95      	ldr	r3, [pc, #596]	; (d48a4 <setup+0x2d8>)
        return _variable(varKey, var, STRING);
   d464e:	4896      	ldr	r0, [pc, #600]	; (d48a8 <setup+0x2dc>)
   d4650:	6819      	ldr	r1, [r3, #0]
   d4652:	f7ff fd45 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4656:	4995      	ldr	r1, [pc, #596]	; (d48ac <setup+0x2e0>)
   d4658:	4895      	ldr	r0, [pc, #596]	; (d48b0 <setup+0x2e4>)
   d465a:	f7ff fd41 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d465e:	4995      	ldr	r1, [pc, #596]	; (d48b4 <setup+0x2e8>)
   d4660:	4895      	ldr	r0, [pc, #596]	; (d48b8 <setup+0x2ec>)
   d4662:	f7ff fd3d 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4666:	4993      	ldr	r1, [pc, #588]	; (d48b4 <setup+0x2e8>)
   d4668:	4894      	ldr	r0, [pc, #592]	; (d48bc <setup+0x2f0>)
   d466a:	f7ff fd39 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d466e:	4991      	ldr	r1, [pc, #580]	; (d48b4 <setup+0x2e8>)
   d4670:	4893      	ldr	r0, [pc, #588]	; (d48c0 <setup+0x2f4>)
   d4672:	f7ff fd35 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4676:	498f      	ldr	r1, [pc, #572]	; (d48b4 <setup+0x2e8>)
   d4678:	4892      	ldr	r0, [pc, #584]	; (d48c4 <setup+0x2f8>)
   d467a:	f7ff fd31 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d467e:	4992      	ldr	r1, [pc, #584]	; (d48c8 <setup+0x2fc>)
   d4680:	4892      	ldr	r0, [pc, #584]	; (d48cc <setup+0x300>)
   d4682:	f7ff fd2d 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4686:	4992      	ldr	r1, [pc, #584]	; (d48d0 <setup+0x304>)
   d4688:	4892      	ldr	r0, [pc, #584]	; (d48d4 <setup+0x308>)
   d468a:	f7ff fd29 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d468e:	4992      	ldr	r1, [pc, #584]	; (d48d8 <setup+0x30c>)
   d4690:	4892      	ldr	r0, [pc, #584]	; (d48dc <setup+0x310>)
   d4692:	f7ff fd25 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4696:	4992      	ldr	r1, [pc, #584]	; (d48e0 <setup+0x314>)
   d4698:	4892      	ldr	r0, [pc, #584]	; (d48e4 <setup+0x318>)
   d469a:	f7ff fd21 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d469e:	4992      	ldr	r1, [pc, #584]	; (d48e8 <setup+0x31c>)
   d46a0:	4892      	ldr	r0, [pc, #584]	; (d48ec <setup+0x320>)
   d46a2:	f7ff fd1d 	bl	d40e0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d46a6:	4a92      	ldr	r2, [pc, #584]	; (d48f0 <setup+0x324>)
   d46a8:	4992      	ldr	r1, [pc, #584]	; (d48f4 <setup+0x328>)
   d46aa:	4893      	ldr	r0, [pc, #588]	; (d48f8 <setup+0x32c>)
   d46ac:	f001 fb74 	bl	d5d98 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46b0:	4a92      	ldr	r2, [pc, #584]	; (d48fc <setup+0x330>)
   d46b2:	4993      	ldr	r1, [pc, #588]	; (d4900 <setup+0x334>)
   d46b4:	4890      	ldr	r0, [pc, #576]	; (d48f8 <setup+0x32c>)
   d46b6:	f001 fb6f 	bl	d5d98 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46ba:	4a92      	ldr	r2, [pc, #584]	; (d4904 <setup+0x338>)
   d46bc:	4992      	ldr	r1, [pc, #584]	; (d4908 <setup+0x33c>)
   d46be:	488e      	ldr	r0, [pc, #568]	; (d48f8 <setup+0x32c>)
   d46c0:	f001 fb6a 	bl	d5d98 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46c4:	4a91      	ldr	r2, [pc, #580]	; (d490c <setup+0x340>)
   d46c6:	4992      	ldr	r1, [pc, #584]	; (d4910 <setup+0x344>)
   d46c8:	488b      	ldr	r0, [pc, #556]	; (d48f8 <setup+0x32c>)
   d46ca:	f001 fb65 	bl	d5d98 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46ce:	4a91      	ldr	r2, [pc, #580]	; (d4914 <setup+0x348>)
   d46d0:	4991      	ldr	r1, [pc, #580]	; (d4918 <setup+0x34c>)
   d46d2:	4889      	ldr	r0, [pc, #548]	; (d48f8 <setup+0x32c>)
   d46d4:	f001 fb60 	bl	d5d98 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46d8:	4990      	ldr	r1, [pc, #576]	; (d491c <setup+0x350>)
   d46da:	4a91      	ldr	r2, [pc, #580]	; (d4920 <setup+0x354>)
   d46dc:	4886      	ldr	r0, [pc, #536]	; (d48f8 <setup+0x32c>)
   d46de:	f001 fb5b 	bl	d5d98 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (! sht31.begin(0x44)) {                                                                      // Start the BME680 Sensor
   d46e2:	4890      	ldr	r0, [pc, #576]	; (d4924 <setup+0x358>)
   d46e4:	2144      	movs	r1, #68	; 0x44
   d46e6:	f000 ff0e 	bl	d5506 <_ZN14Adafruit_SHT315beginEh>
   d46ea:	b988      	cbnz	r0, d4710 <setup+0x144>
   d46ec:	f000 ffdc 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d46f0:	4c8d      	ldr	r4, [pc, #564]	; (d4928 <setup+0x35c>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d46f2:	498e      	ldr	r1, [pc, #568]	; (d492c <setup+0x360>)
    resetTimeStamp = millis();
   d46f4:	6020      	str	r0, [r4, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d46f6:	4630      	mov	r0, r6
   d46f8:	f003 fc0c 	bl	d7f14 <strcpy>
    Serial.println("Couldn't find SHT31");
   d46fc:	f002 fa9a 	bl	d6c34 <_Z16_fetch_usbserialv>
   d4700:	498b      	ldr	r1, [pc, #556]	; (d4930 <setup+0x364>)
   d4702:	f001 ffd6 	bl	d66b2 <_ZN5Print7printlnEPKc>
    state = ERROR_STATE;
   d4706:	2301      	movs	r3, #1
   d4708:	702b      	strb	r3, [r5, #0]
   d470a:	f000 ffcd 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d470e:	6020      	str	r0, [r4, #0]
  if (!veml.begin()) {                                                                      // Start the BME680 Sensor
   d4710:	f002 fc34 	bl	d6f7c <_Z19__fetch_global_Wirev>
   d4714:	4601      	mov	r1, r0
   d4716:	4887      	ldr	r0, [pc, #540]	; (d4934 <setup+0x368>)
   d4718:	f000 fddd 	bl	d52d6 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
   d471c:	b988      	cbnz	r0, d4742 <setup+0x176>
   d471e:	f000 ffc3 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4722:	4c81      	ldr	r4, [pc, #516]	; (d4928 <setup+0x35c>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - VEML Initialization");
   d4724:	4984      	ldr	r1, [pc, #528]	; (d4938 <setup+0x36c>)
    resetTimeStamp = millis();
   d4726:	6020      	str	r0, [r4, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - VEML Initialization");
   d4728:	4630      	mov	r0, r6
   d472a:	f003 fbf3 	bl	d7f14 <strcpy>
    Serial.println("Couldn't find VEML");
   d472e:	f002 fa81 	bl	d6c34 <_Z16_fetch_usbserialv>
   d4732:	4982      	ldr	r1, [pc, #520]	; (d493c <setup+0x370>)
   d4734:	f001 ffbd 	bl	d66b2 <_ZN5Print7printlnEPKc>
    state = ERROR_STATE;
   d4738:	2301      	movs	r3, #1
   d473a:	702b      	strb	r3, [r5, #0]
   d473c:	f000 ffb4 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4740:	6020      	str	r0, [r4, #0]
  delay(5000);
   d4742:	f241 3088 	movw	r0, #5000	; 0x1388
   d4746:	f001 fa3d 	bl	d5bc4 <delay>
  if (veml.begin()){
   d474a:	f002 fc17 	bl	d6f7c <_Z19__fetch_global_Wirev>
   d474e:	4601      	mov	r1, r0
   d4750:	4878      	ldr	r0, [pc, #480]	; (d4934 <setup+0x368>)
   d4752:	4c7b      	ldr	r4, [pc, #492]	; (d4940 <setup+0x374>)
   d4754:	f000 fdbf 	bl	d52d6 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
   d4758:	b158      	cbz	r0, d4772 <setup+0x1a6>
        val_(0) {
   d475a:	2300      	movs	r3, #0
    Particle.publish("Sensor","VEML SUCCESSFULL",PRIVATE);
   d475c:	f88d 3000 	strb.w	r3, [sp]
   d4760:	a808      	add	r0, sp, #32
   d4762:	7823      	ldrb	r3, [r4, #0]
   d4764:	4a77      	ldr	r2, [pc, #476]	; (d4944 <setup+0x378>)
   d4766:	4978      	ldr	r1, [pc, #480]	; (d4948 <setup+0x37c>)
   d4768:	f7ff fcbe 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d476c:	a809      	add	r0, sp, #36	; 0x24
   d476e:	f7ff fd69 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  veml.setGain(VEML7700_GAIN_1);
   d4772:	4870      	ldr	r0, [pc, #448]	; (d4934 <setup+0x368>)
   d4774:	2100      	movs	r1, #0
   d4776:	f000 fd25 	bl	d51c4 <_ZN17Adafruit_VEML77007setGainEh>
  veml.setIntegrationTime(VEML7700_IT_800MS);
   d477a:	486e      	ldr	r0, [pc, #440]	; (d4934 <setup+0x368>)
   d477c:	2103      	movs	r1, #3
   d477e:	f000 fd18 	bl	d51b2 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
   switch (veml.getGain())
   d4782:	486c      	ldr	r0, [pc, #432]	; (d4934 <setup+0x368>)
   d4784:	f000 fd21 	bl	d51ca <_ZN17Adafruit_VEML77007getGainEv>
   d4788:	2803      	cmp	r0, #3
   d478a:	d817      	bhi.n	d47bc <setup+0x1f0>
   d478c:	e8df f000 	tbb	[pc, r0]
   d4790:	33333002 	.word	0x33333002
    Particle.publish("Gain",String(1),PRIVATE);
   d4794:	220a      	movs	r2, #10
   d4796:	2101      	movs	r1, #1
    Particle.publish("Gain",String(1/8),PRIVATE);
   d4798:	a808      	add	r0, sp, #32
   d479a:	f002 f85c 	bl	d6856 <_ZN6StringC1Eih>
   d479e:	2300      	movs	r3, #0
   d47a0:	f88d 3000 	strb.w	r3, [sp]
   d47a4:	7823      	ldrb	r3, [r4, #0]
   d47a6:	9a08      	ldr	r2, [sp, #32]
   d47a8:	4968      	ldr	r1, [pc, #416]	; (d494c <setup+0x380>)
   d47aa:	a802      	add	r0, sp, #8
   d47ac:	f7ff fc9c 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d47b0:	a803      	add	r0, sp, #12
   d47b2:	f7ff fd47 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d47b6:	a808      	add	r0, sp, #32
   d47b8:	f001 ffc2 	bl	d6740 <_ZN6StringD1Ev>
   d47bc:	2300      	movs	r3, #0
  Particle.publish("VEML","Integration Time",PRIVATE);
   d47be:	f88d 3000 	strb.w	r3, [sp]
   d47c2:	7823      	ldrb	r3, [r4, #0]
   d47c4:	4a62      	ldr	r2, [pc, #392]	; (d4950 <setup+0x384>)
   d47c6:	4963      	ldr	r1, [pc, #396]	; (d4954 <setup+0x388>)
   d47c8:	a808      	add	r0, sp, #32
   d47ca:	f7ff fc8d 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d47ce:	a809      	add	r0, sp, #36	; 0x24
   d47d0:	f7ff fd38 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  switch (veml.getIntegrationTime())
   d47d4:	4857      	ldr	r0, [pc, #348]	; (d4934 <setup+0x368>)
   d47d6:	f000 fcef 	bl	d51b8 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
   d47da:	280c      	cmp	r0, #12
   d47dc:	d822      	bhi.n	d4824 <setup+0x258>
   d47de:	e8df f000 	tbb	[pc, r0]
   d47e2:	c9c6      	.short	0xc9c6
   d47e4:	2121d0cc 	.word	0x2121d0cc
   d47e8:	21c32121 	.word	0x21c32121
   d47ec:	2121      	.short	0x2121
   d47ee:	0d          	.byte	0x0d
   d47ef:	00          	.byte	0x00
    Particle.publish("Gain",String(2),PRIVATE);
   d47f0:	220a      	movs	r2, #10
   d47f2:	2102      	movs	r1, #2
   d47f4:	e7d0      	b.n	d4798 <setup+0x1cc>
    Particle.publish("Gain",String(1/8),PRIVATE);
   d47f6:	220a      	movs	r2, #10
   d47f8:	2100      	movs	r1, #0
   d47fa:	e7cd      	b.n	d4798 <setup+0x1cc>
    Particle.publish("Integration Time",String(25),PRIVATE);
   d47fc:	220a      	movs	r2, #10
   d47fe:	2119      	movs	r1, #25
    Particle.publish("Integration Time",String(800),PRIVATE);
   d4800:	a808      	add	r0, sp, #32
   d4802:	f002 f828 	bl	d6856 <_ZN6StringC1Eih>
   d4806:	2300      	movs	r3, #0
   d4808:	f88d 3000 	strb.w	r3, [sp]
   d480c:	7823      	ldrb	r3, [r4, #0]
   d480e:	9a08      	ldr	r2, [sp, #32]
   d4810:	494f      	ldr	r1, [pc, #316]	; (d4950 <setup+0x384>)
   d4812:	a802      	add	r0, sp, #8
   d4814:	f7ff fc68 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4818:	a803      	add	r0, sp, #12
   d481a:	f7ff fd13 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d481e:	a808      	add	r0, sp, #32
   d4820:	f001 ff8e 	bl	d6740 <_ZN6StringD1Ev>
  veml.setLowThreshold(10000);
   d4824:	4843      	ldr	r0, [pc, #268]	; (d4934 <setup+0x368>)
   d4826:	f242 7110 	movw	r1, #10000	; 0x2710
   d482a:	f000 fe3d 	bl	d54a8 <_ZN17Adafruit_VEML770015setLowThresholdEt>
  veml.setHighThreshold(20000);
   d482e:	4841      	ldr	r0, [pc, #260]	; (d4934 <setup+0x368>)
   d4830:	f644 6120 	movw	r1, #20000	; 0x4e20
   d4834:	f000 fe3c 	bl	d54b0 <_ZN17Adafruit_VEML770016setHighThresholdEt>
  veml.interruptEnable(true);
   d4838:	2101      	movs	r1, #1
   d483a:	483e      	ldr	r0, [pc, #248]	; (d4934 <setup+0x368>)
   d483c:	f000 fcb3 	bl	d51a6 <_ZN17Adafruit_VEML770015interruptEnableEb>
  takeMeasurements();                                                                      // For the benefit of monitoring the device
   d4840:	f7ff fdc4 	bl	d43cc <_Z16takeMeasurementsv>
  updateThresholdValue();                                                                  // For checking values of each device
   d4844:	f7ff fcc0 	bl	d41c8 <_Z20updateThresholdValuev>
  if(!connectToParticle()) {
   d4848:	f7ff fc5c 	bl	d4104 <_Z17connectToParticlev>
   d484c:	b948      	cbnz	r0, d4862 <setup+0x296>
    state = ERROR_STATE;                                                                   // We failed to connect can reset here or go to the ERROR state for remediation
   d484e:	2301      	movs	r3, #1
   d4850:	702b      	strb	r3, [r5, #0]
   d4852:	f000 ff29 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4856:	4b34      	ldr	r3, [pc, #208]	; (d4928 <setup+0x35c>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d4858:	493f      	ldr	r1, [pc, #252]	; (d4958 <setup+0x38c>)
    resetTimeStamp = millis();
   d485a:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d485c:	4630      	mov	r0, r6
   d485e:	f003 fb59 	bl	d7f14 <strcpy>
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
   d4862:	4b3e      	ldr	r3, [pc, #248]	; (d495c <setup+0x390>)
   d4864:	781b      	ldrb	r3, [r3, #0]
   d4866:	b15b      	cbz	r3, d4880 <setup+0x2b4>
   d4868:	2300      	movs	r3, #0
   d486a:	f88d 3000 	strb.w	r3, [sp]
   d486e:	a808      	add	r0, sp, #32
   d4870:	7823      	ldrb	r3, [r4, #0]
   d4872:	493b      	ldr	r1, [pc, #236]	; (d4960 <setup+0x394>)
   d4874:	4632      	mov	r2, r6
   d4876:	f7ff fc37 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d487a:	a809      	add	r0, sp, #36	; 0x24
   d487c:	f7ff fce2 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4880:	f000 ff12 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
   d4884:	4b37      	ldr	r3, [pc, #220]	; (d4964 <setup+0x398>)
   d4886:	6018      	str	r0, [r3, #0]
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d4888:	a804      	add	r0, sp, #16
   d488a:	f001 ff59 	bl	d6740 <_ZN6StringD1Ev>
}
   d488e:	b03c      	add	sp, #240	; 0xf0
   d4890:	bd70      	pop	{r4, r5, r6, pc}
   d4892:	bf00      	nop
   d4894:	000da67c 	.word	0x000da67c
   d4898:	000da90d 	.word	0x000da90d
   d489c:	2003e504 	.word	0x2003e504
   d48a0:	000d4335 	.word	0x000d4335
   d48a4:	2003e0e4 	.word	0x2003e0e4
   d48a8:	000da687 	.word	0x000da687
   d48ac:	2003e510 	.word	0x2003e510
   d48b0:	000da68f 	.word	0x000da68f
   d48b4:	2003e449 	.word	0x2003e449
   d48b8:	000da69b 	.word	0x000da69b
   d48bc:	000da6a4 	.word	0x000da6a4
   d48c0:	000da6a8 	.word	0x000da6a8
   d48c4:	000da6ae 	.word	0x000da6ae
   d48c8:	2003e53b 	.word	0x2003e53b
   d48cc:	000da6b6 	.word	0x000da6b6
   d48d0:	2003e47a 	.word	0x2003e47a
   d48d4:	000da6c8 	.word	0x000da6c8
   d48d8:	2003e522 	.word	0x2003e522
   d48dc:	000da6da 	.word	0x000da6da
   d48e0:	2003e461 	.word	0x2003e461
   d48e4:	000da6e9 	.word	0x000da6e9
   d48e8:	2003e42c 	.word	0x2003e42c
   d48ec:	000da6f8 	.word	0x000da6f8
   d48f0:	000da700 	.word	0x000da700
   d48f4:	000d40b5 	.word	0x000d40b5
   d48f8:	000d5d6d 	.word	0x000d5d6d
   d48fc:	000da70c 	.word	0x000da70c
   d4900:	000d4a79 	.word	0x000d4a79
   d4904:	000da719 	.word	0x000da719
   d4908:	000d4da9 	.word	0x000d4da9
   d490c:	000da72a 	.word	0x000da72a
   d4910:	000d4dfd 	.word	0x000d4dfd
   d4914:	000da73b 	.word	0x000da73b
   d4918:	000d4ea5 	.word	0x000d4ea5
   d491c:	000d4e51 	.word	0x000d4e51
   d4920:	000da750 	.word	0x000da750
   d4924:	2003e4f8 	.word	0x2003e4f8
   d4928:	2003e4b0 	.word	0x2003e4b0
   d492c:	000da764 	.word	0x000da764
   d4930:	000da781 	.word	0x000da781
   d4934:	2003e554 	.word	0x2003e554
   d4938:	000da795 	.word	0x000da795
   d493c:	000da7b1 	.word	0x000da7b1
   d4940:	2003e425 	.word	0x2003e425
   d4944:	000da7c4 	.word	0x000da7c4
   d4948:	000da7d5 	.word	0x000da7d5
   d494c:	000da7dc 	.word	0x000da7dc
   d4950:	000da7e1 	.word	0x000da7e1
   d4954:	000da7bf 	.word	0x000da7bf
   d4958:	000da7f2 	.word	0x000da7f2
   d495c:	2003e1bc 	.word	0x2003e1bc
   d4960:	000da804 	.word	0x000da804
   d4964:	2003e45c 	.word	0x2003e45c
    Particle.publish("Integration Time",String(50),PRIVATE);
   d4968:	220a      	movs	r2, #10
   d496a:	2132      	movs	r1, #50	; 0x32
   d496c:	e748      	b.n	d4800 <setup+0x234>
    Particle.publish("Integration Time",String(100),PRIVATE);
   d496e:	220a      	movs	r2, #10
   d4970:	2164      	movs	r1, #100	; 0x64
   d4972:	e745      	b.n	d4800 <setup+0x234>
    Particle.publish("Integration Time",String(200),PRIVATE);
   d4974:	220a      	movs	r2, #10
   d4976:	21c8      	movs	r1, #200	; 0xc8
   d4978:	e742      	b.n	d4800 <setup+0x234>
    Particle.publish("Integration Time",String(400),PRIVATE);
   d497a:	220a      	movs	r2, #10
   d497c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d4980:	e73e      	b.n	d4800 <setup+0x234>
    Particle.publish("Integration Time",String(800),PRIVATE);
   d4982:	220a      	movs	r2, #10
   d4984:	f44f 7148 	mov.w	r1, #800	; 0x320
   d4988:	e73a      	b.n	d4800 <setup+0x234>
   d498a:	bf00      	nop

000d498c <_Z16ThresholdCrossedv>:
bool ThresholdCrossed(){
   d498c:	b530      	push	{r4, r5, lr}
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d498e:	4b2d      	ldr	r3, [pc, #180]	; (d4a44 <_Z16ThresholdCrossedv+0xb8>)
   d4990:	4c2d      	ldr	r4, [pc, #180]	; (d4a48 <_Z16ThresholdCrossedv+0xbc>)
   d4992:	781b      	ldrb	r3, [r3, #0]
bool ThresholdCrossed(){
   d4994:	b08d      	sub	sp, #52	; 0x34
  if ((lowerTemperatureThresholdCrossed || upperTemperatureThresholdCrossed)!=0){                               // If lower or upper threshold conditions are True. 
   d4996:	b913      	cbnz	r3, d499e <_Z16ThresholdCrossedv+0x12>
   d4998:	4b2c      	ldr	r3, [pc, #176]	; (d4a4c <_Z16ThresholdCrossedv+0xc0>)
   d499a:	781b      	ldrb	r3, [r3, #0]
   d499c:	b1eb      	cbz	r3, d49da <_Z16ThresholdCrossedv+0x4e>
    snprintf(data,sizeof(data),"{\"alert-temperature\":%4.1f}",temperatureInC);
   d499e:	4b2c      	ldr	r3, [pc, #176]	; (d4a50 <_Z16ThresholdCrossedv+0xc4>)
   d49a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49a4:	2120      	movs	r1, #32
   d49a6:	e9cd 2300 	strd	r2, r3, [sp]
   d49aa:	a804      	add	r0, sp, #16
   d49ac:	4a29      	ldr	r2, [pc, #164]	; (d4a54 <_Z16ThresholdCrossedv+0xc8>)
   d49ae:	f001 f8e9 	bl	d5b84 <snprintf>
    BlinkLED(tempLED);                                                                            // Start Blinking LED
   d49b2:	2005      	movs	r0, #5
   d49b4:	f7ff fbda 	bl	d416c <_Z8BlinkLEDi>
        return waitConditionWhile(_condition, []{ return true; });
   d49b8:	f7ff fbfa 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("cc-alert-webhook",data,PRIVATE);
   d49bc:	2300      	movs	r3, #0
   d49be:	f88d 3000 	strb.w	r3, [sp]
   d49c2:	4b25      	ldr	r3, [pc, #148]	; (d4a58 <_Z16ThresholdCrossedv+0xcc>)
   d49c4:	4925      	ldr	r1, [pc, #148]	; (d4a5c <_Z16ThresholdCrossedv+0xd0>)
   d49c6:	781b      	ldrb	r3, [r3, #0]
   d49c8:	aa04      	add	r2, sp, #16
   d49ca:	a802      	add	r0, sp, #8
   d49cc:	f7ff fb8c 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d49d0:	a803      	add	r0, sp, #12
   d49d2:	f7ff fc37 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true;                                                            // Once, Published the data. Set all flags to false again . 
   d49d6:	2301      	movs	r3, #1
   d49d8:	7023      	strb	r3, [r4, #0]
  if ((upperHumidityThresholdCrossed || lowerHumidityThresholdCrossed)!=0){                       // If lower or upper threshold conditions are True. 
   d49da:	4d21      	ldr	r5, [pc, #132]	; (d4a60 <_Z16ThresholdCrossedv+0xd4>)
   d49dc:	782a      	ldrb	r2, [r5, #0]
   d49de:	b912      	cbnz	r2, d49e6 <_Z16ThresholdCrossedv+0x5a>
   d49e0:	4b20      	ldr	r3, [pc, #128]	; (d4a64 <_Z16ThresholdCrossedv+0xd8>)
   d49e2:	781b      	ldrb	r3, [r3, #0]
   d49e4:	b1eb      	cbz	r3, d4a22 <_Z16ThresholdCrossedv+0x96>
    snprintf(humidity_data,sizeof(humidity_data),"{\"alert-humidity\":%4.1f}",relativeHumidity);
   d49e6:	4b20      	ldr	r3, [pc, #128]	; (d4a68 <_Z16ThresholdCrossedv+0xdc>)
   d49e8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d49ec:	2120      	movs	r1, #32
   d49ee:	e9cd 2300 	strd	r2, r3, [sp]
   d49f2:	a804      	add	r0, sp, #16
   d49f4:	4a1d      	ldr	r2, [pc, #116]	; (d4a6c <_Z16ThresholdCrossedv+0xe0>)
   d49f6:	f001 f8c5 	bl	d5b84 <snprintf>
    BlinkLED(HumidityLED);                                                                        // Start Blinking LED
   d49fa:	2007      	movs	r0, #7
   d49fc:	f7ff fbb6 	bl	d416c <_Z8BlinkLEDi>
   d4a00:	f7ff fbd6 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("cc-alert-webhook",humidity_data,PRIVATE);
   d4a04:	2300      	movs	r3, #0
   d4a06:	f88d 3000 	strb.w	r3, [sp]
   d4a0a:	4b13      	ldr	r3, [pc, #76]	; (d4a58 <_Z16ThresholdCrossedv+0xcc>)
   d4a0c:	4913      	ldr	r1, [pc, #76]	; (d4a5c <_Z16ThresholdCrossedv+0xd0>)
   d4a0e:	781b      	ldrb	r3, [r3, #0]
   d4a10:	aa04      	add	r2, sp, #16
   d4a12:	a802      	add	r0, sp, #8
   d4a14:	f7ff fb68 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4a18:	a803      	add	r0, sp, #12
   d4a1a:	f7ff fc13 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    thresholdCrossAcknowledged = true; 
   d4a1e:	2301      	movs	r3, #1
   d4a20:	7023      	strb	r3, [r4, #0]
  thresholdTimeStamp = Time.minute();
   d4a22:	f002 f815 	bl	d6a50 <_ZN9TimeClass6minuteEv>
   d4a26:	4b12      	ldr	r3, [pc, #72]	; (d4a70 <_Z16ThresholdCrossedv+0xe4>)
   d4a28:	6018      	str	r0, [r3, #0]
  if (thresholdCrossAcknowledged == true)
   d4a2a:	7823      	ldrb	r3, [r4, #0]
   d4a2c:	b133      	cbz	r3, d4a3c <_Z16ThresholdCrossedv+0xb0>
    lowerHumidityThresholdCrossed = false;
   d4a2e:	4a0d      	ldr	r2, [pc, #52]	; (d4a64 <_Z16ThresholdCrossedv+0xd8>)
    upperHumidityThresholdCrossed = false;
   d4a30:	2300      	movs	r3, #0
    lowerHumidityThresholdCrossed = false;
   d4a32:	7013      	strb	r3, [r2, #0]
    upperHumidityThresholdCrossed = false;
   d4a34:	702b      	strb	r3, [r5, #0]
    upperTemperatureThreshold     = false;
   d4a36:	4b0f      	ldr	r3, [pc, #60]	; (d4a74 <_Z16ThresholdCrossedv+0xe8>)
   d4a38:	2200      	movs	r2, #0
   d4a3a:	601a      	str	r2, [r3, #0]
}
   d4a3c:	2001      	movs	r0, #1
   d4a3e:	b00d      	add	sp, #52	; 0x34
   d4a40:	bd30      	pop	{r4, r5, pc}
   d4a42:	bf00      	nop
   d4a44:	2003e479 	.word	0x2003e479
   d4a48:	2003e520 	.word	0x2003e520
   d4a4c:	2003e53a 	.word	0x2003e53a
   d4a50:	2003e508 	.word	0x2003e508
   d4a54:	000da80c 	.word	0x000da80c
   d4a58:	2003e425 	.word	0x2003e425
   d4a5c:	000da828 	.word	0x000da828
   d4a60:	2003e521 	.word	0x2003e521
   d4a64:	2003e460 	.word	0x2003e460
   d4a68:	2003e4a8 	.word	0x2003e4a8
   d4a6c:	000da839 	.word	0x000da839
   d4a70:	2003e420 	.word	0x2003e420
   d4a74:	2003e1b8 	.word	0x2003e1b8

000d4a78 <_Z14setVerboseMode6String>:
{
   d4a78:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4a7a:	4914      	ldr	r1, [pc, #80]	; (d4acc <_Z14setVerboseMode6String+0x54>)
   d4a7c:	b085      	sub	sp, #20
   d4a7e:	4605      	mov	r5, r0
   d4a80:	f001 fefc 	bl	d687c <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4a84:	4604      	mov	r4, r0
   d4a86:	b190      	cbz	r0, d4aae <_Z14setVerboseMode6String+0x36>
    verboseMode = true;
   d4a88:	4b11      	ldr	r3, [pc, #68]	; (d4ad0 <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4a8a:	4a12      	ldr	r2, [pc, #72]	; (d4ad4 <_Z14setVerboseMode6String+0x5c>)
    verboseMode = true;
   d4a8c:	2401      	movs	r4, #1
   d4a8e:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d4a90:	2300      	movs	r3, #0
   d4a92:	f88d 3000 	strb.w	r3, [sp]
   d4a96:	4b10      	ldr	r3, [pc, #64]	; (d4ad8 <_Z14setVerboseMode6String+0x60>)
   d4a98:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4a9a:	4910      	ldr	r1, [pc, #64]	; (d4adc <_Z14setVerboseMode6String+0x64>)
   d4a9c:	a802      	add	r0, sp, #8
   d4a9e:	f7ff fb23 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4aa2:	a803      	add	r0, sp, #12
   d4aa4:	f7ff fbce 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4aa8:	2001      	movs	r0, #1
}
   d4aaa:	b005      	add	sp, #20
   d4aac:	bd30      	pop	{r4, r5, pc}
   d4aae:	490c      	ldr	r1, [pc, #48]	; (d4ae0 <_Z14setVerboseMode6String+0x68>)
   d4ab0:	4628      	mov	r0, r5
   d4ab2:	f001 fee3 	bl	d687c <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4ab6:	2800      	cmp	r0, #0
   d4ab8:	d0f7      	beq.n	d4aaa <_Z14setVerboseMode6String+0x32>
    verboseMode = false;
   d4aba:	4b05      	ldr	r3, [pc, #20]	; (d4ad0 <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4abc:	4a09      	ldr	r2, [pc, #36]	; (d4ae4 <_Z14setVerboseMode6String+0x6c>)
    verboseMode = false;
   d4abe:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d4ac0:	4b05      	ldr	r3, [pc, #20]	; (d4ad8 <_Z14setVerboseMode6String+0x60>)
   d4ac2:	f88d 4000 	strb.w	r4, [sp]
   d4ac6:	781b      	ldrb	r3, [r3, #0]
   d4ac8:	e7e7      	b.n	d4a9a <_Z14setVerboseMode6String+0x22>
   d4aca:	bf00      	nop
   d4acc:	000da90b 	.word	0x000da90b
   d4ad0:	2003e1bc 	.word	0x2003e1bc
   d4ad4:	000da852 	.word	0x000da852
   d4ad8:	2003e425 	.word	0x2003e425
   d4adc:	000da875 	.word	0x000da875
   d4ae0:	000da863 	.word	0x000da863
   d4ae4:	000da865 	.word	0x000da865

000d4ae8 <_Z22publishStateTransitionv>:
{
   d4ae8:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4aea:	4d18      	ldr	r5, [pc, #96]	; (d4b4c <_Z22publishStateTransitionv+0x64>)
   d4aec:	4c18      	ldr	r4, [pc, #96]	; (d4b50 <_Z22publishStateTransitionv+0x68>)
   d4aee:	4919      	ldr	r1, [pc, #100]	; (d4b54 <_Z22publishStateTransitionv+0x6c>)
   d4af0:	782a      	ldrb	r2, [r5, #0]
   d4af2:	7820      	ldrb	r0, [r4, #0]
{
   d4af4:	b08f      	sub	sp, #60	; 0x3c
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4af6:	231a      	movs	r3, #26
   d4af8:	fb03 1202 	mla	r2, r3, r2, r1
   d4afc:	9200      	str	r2, [sp, #0]
   d4afe:	fb03 1300 	mla	r3, r3, r0, r1
   d4b02:	4a15      	ldr	r2, [pc, #84]	; (d4b58 <_Z22publishStateTransitionv+0x70>)
   d4b04:	2128      	movs	r1, #40	; 0x28
   d4b06:	a804      	add	r0, sp, #16
   d4b08:	f001 f83c 	bl	d5b84 <snprintf>
  oldState = state;
   d4b0c:	782b      	ldrb	r3, [r5, #0]
   d4b0e:	7023      	strb	r3, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b10:	f000 ff90 	bl	d5a34 <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d4b14:	b190      	cbz	r0, d4b3c <_Z22publishStateTransitionv+0x54>
   d4b16:	f7ff fb4b 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d4b1a:	2300      	movs	r3, #0
   d4b1c:	f88d 3000 	strb.w	r3, [sp]
   d4b20:	4b0e      	ldr	r3, [pc, #56]	; (d4b5c <_Z22publishStateTransitionv+0x74>)
   d4b22:	490f      	ldr	r1, [pc, #60]	; (d4b60 <_Z22publishStateTransitionv+0x78>)
   d4b24:	781b      	ldrb	r3, [r3, #0]
   d4b26:	aa04      	add	r2, sp, #16
   d4b28:	a802      	add	r0, sp, #8
   d4b2a:	f7ff fadd 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4b2e:	a803      	add	r0, sp, #12
   d4b30:	f7ff fb88 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4b34:	f000 fdb8 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d4b38:	4b0a      	ldr	r3, [pc, #40]	; (d4b64 <_Z22publishStateTransitionv+0x7c>)
   d4b3a:	6018      	str	r0, [r3, #0]
  Serial.println(stateTransitionString);
   d4b3c:	f002 f87a 	bl	d6c34 <_Z16_fetch_usbserialv>
   d4b40:	a904      	add	r1, sp, #16
   d4b42:	f001 fdb6 	bl	d66b2 <_ZN5Print7printlnEPKc>
}
   d4b46:	b00f      	add	sp, #60	; 0x3c
   d4b48:	bd30      	pop	{r4, r5, pc}
   d4b4a:	bf00      	nop
   d4b4c:	2003e504 	.word	0x2003e504
   d4b50:	2003e4a2 	.word	0x2003e4a2
   d4b54:	2003e0e8 	.word	0x2003e0e8
   d4b58:	000da87a 	.word	0x000da87a
   d4b5c:	2003e425 	.word	0x2003e425
   d4b60:	000da888 	.word	0x000da888
   d4b64:	2003e45c 	.word	0x2003e45c

000d4b68 <loop>:
{
   d4b68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  switch(state) {
   d4b6a:	4c7b      	ldr	r4, [pc, #492]	; (d4d58 <loop+0x1f0>)
   d4b6c:	7823      	ldrb	r3, [r4, #0]
   d4b6e:	3b01      	subs	r3, #1
   d4b70:	2b05      	cmp	r3, #5
   d4b72:	d81c      	bhi.n	d4bae <loop+0x46>
   d4b74:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4b78:	000600c4 	.word	0x000600c4
   d4b7c:	0039004b 	.word	0x0039004b
   d4b80:	00960076 	.word	0x00960076
    if (verboseMode && state != oldState) publishStateTransition();
   d4b84:	4b75      	ldr	r3, [pc, #468]	; (d4d5c <loop+0x1f4>)
   d4b86:	781b      	ldrb	r3, [r3, #0]
   d4b88:	b12b      	cbz	r3, d4b96 <loop+0x2e>
   d4b8a:	4b75      	ldr	r3, [pc, #468]	; (d4d60 <loop+0x1f8>)
   d4b8c:	781b      	ldrb	r3, [r3, #0]
   d4b8e:	2b02      	cmp	r3, #2
   d4b90:	d001      	beq.n	d4b96 <loop+0x2e>
   d4b92:	f7ff ffa9 	bl	d4ae8 <_Z22publishStateTransitionv>
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 5) {
   d4b96:	f001 ff4f 	bl	d6a38 <_ZN9TimeClass4hourEv>
   d4b9a:	4b72      	ldr	r3, [pc, #456]	; (d4d64 <loop+0x1fc>)
   d4b9c:	4d72      	ldr	r5, [pc, #456]	; (d4d68 <loop+0x200>)
   d4b9e:	781b      	ldrb	r3, [r3, #0]
   d4ba0:	4298      	cmp	r0, r3
   d4ba2:	d006      	beq.n	d4bb2 <loop+0x4a>
      TimePassed = Time.minute();
   d4ba4:	f001 ff54 	bl	d6a50 <_ZN9TimeClass6minuteEv>
      state = MEASURING_STATE;                                                     
   d4ba8:	2303      	movs	r3, #3
      TimePassed = Time.minute();
   d4baa:	6028      	str	r0, [r5, #0]
      state = THRESHOLD_CROSSED;
   d4bac:	7023      	strb	r3, [r4, #0]
}
   d4bae:	b004      	add	sp, #16
   d4bb0:	bd70      	pop	{r4, r5, r6, pc}
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 5) {
   d4bb2:	f001 ff4d 	bl	d6a50 <_ZN9TimeClass6minuteEv>
   d4bb6:	682b      	ldr	r3, [r5, #0]
   d4bb8:	1ac0      	subs	r0, r0, r3
   d4bba:	2804      	cmp	r0, #4
   d4bbc:	dcf2      	bgt.n	d4ba4 <loop+0x3c>
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 4))                 // Send threshold message after every 10 minutes.
   d4bbe:	4b6b      	ldr	r3, [pc, #428]	; (d4d6c <loop+0x204>)
   d4bc0:	781b      	ldrb	r3, [r3, #0]
   d4bc2:	b94b      	cbnz	r3, d4bd8 <loop+0x70>
    || lowerTemperatureThresholdCrossed \
   d4bc4:	4b6a      	ldr	r3, [pc, #424]	; (d4d70 <loop+0x208>)
   d4bc6:	781b      	ldrb	r3, [r3, #0]
   d4bc8:	b933      	cbnz	r3, d4bd8 <loop+0x70>
    || upperHumidityThresholdCrossed \
   d4bca:	4b6a      	ldr	r3, [pc, #424]	; (d4d74 <loop+0x20c>)
   d4bcc:	781b      	ldrb	r3, [r3, #0]
   d4bce:	b91b      	cbnz	r3, d4bd8 <loop+0x70>
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 4))                 // Send threshold message after every 10 minutes.
   d4bd0:	4b69      	ldr	r3, [pc, #420]	; (d4d78 <loop+0x210>)
   d4bd2:	781b      	ldrb	r3, [r3, #0]
   d4bd4:	2b00      	cmp	r3, #0
   d4bd6:	d0ea      	beq.n	d4bae <loop+0x46>
   d4bd8:	f001 ff3a 	bl	d6a50 <_ZN9TimeClass6minuteEv>
   d4bdc:	4b67      	ldr	r3, [pc, #412]	; (d4d7c <loop+0x214>)
   d4bde:	681b      	ldr	r3, [r3, #0]
   d4be0:	1ac0      	subs	r0, r0, r3
   d4be2:	2804      	cmp	r0, #4
   d4be4:	dde3      	ble.n	d4bae <loop+0x46>
      state = THRESHOLD_CROSSED;
   d4be6:	2304      	movs	r3, #4
   d4be8:	e7e0      	b.n	d4bac <loop+0x44>
    if (verboseMode && state != oldState) publishStateTransition();
   d4bea:	4b5c      	ldr	r3, [pc, #368]	; (d4d5c <loop+0x1f4>)
   d4bec:	781b      	ldrb	r3, [r3, #0]
   d4bee:	b12b      	cbz	r3, d4bfc <loop+0x94>
   d4bf0:	4b5b      	ldr	r3, [pc, #364]	; (d4d60 <loop+0x1f8>)
   d4bf2:	781b      	ldrb	r3, [r3, #0]
   d4bf4:	2b04      	cmp	r3, #4
   d4bf6:	d001      	beq.n	d4bfc <loop+0x94>
   d4bf8:	f7ff ff76 	bl	d4ae8 <_Z22publishStateTransitionv>
    if(takeMeasurements()!=0){                                                                          // Take measurements again before reporting.       
   d4bfc:	f7ff fbe6 	bl	d43cc <_Z16takeMeasurementsv>
   d4c00:	b118      	cbz	r0, d4c0a <loop+0xa2>
      ThresholdCrossed();
   d4c02:	f7ff fec3 	bl	d498c <_Z16ThresholdCrossedv>
     state = IDLE_STATE;
   d4c06:	2302      	movs	r3, #2
   d4c08:	e7d0      	b.n	d4bac <loop+0x44>
      state= ERROR_STATE;
   d4c0a:	2301      	movs	r3, #1
   d4c0c:	e7ce      	b.n	d4bac <loop+0x44>
    if (verboseMode && state != oldState) publishStateTransition();
   d4c0e:	4e53      	ldr	r6, [pc, #332]	; (d4d5c <loop+0x1f4>)
   d4c10:	7832      	ldrb	r2, [r6, #0]
   d4c12:	b12a      	cbz	r2, d4c20 <loop+0xb8>
   d4c14:	4b52      	ldr	r3, [pc, #328]	; (d4d60 <loop+0x1f8>)
   d4c16:	781b      	ldrb	r3, [r3, #0]
   d4c18:	2b03      	cmp	r3, #3
   d4c1a:	d001      	beq.n	d4c20 <loop+0xb8>
   d4c1c:	f7ff ff64 	bl	d4ae8 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4c20:	f7ff fbd4 	bl	d43cc <_Z16takeMeasurementsv>
   d4c24:	4605      	mov	r5, r0
   d4c26:	b9d8      	cbnz	r0, d4c60 <loop+0xf8>
      state = ERROR_STATE;
   d4c28:	2301      	movs	r3, #1
   d4c2a:	7023      	strb	r3, [r4, #0]
   d4c2c:	f000 fd3c 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4c30:	4b53      	ldr	r3, [pc, #332]	; (d4d80 <loop+0x218>)
   d4c32:	6018      	str	r0, [r3, #0]
      if (verboseMode) {
   d4c34:	7833      	ldrb	r3, [r6, #0]
   d4c36:	2b00      	cmp	r3, #0
   d4c38:	d0b9      	beq.n	d4bae <loop+0x46>
   d4c3a:	f7ff fab9 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d4c3e:	4b51      	ldr	r3, [pc, #324]	; (d4d84 <loop+0x21c>)
   d4c40:	f88d 5000 	strb.w	r5, [sp]
   d4c44:	781b      	ldrb	r3, [r3, #0]
   d4c46:	4a50      	ldr	r2, [pc, #320]	; (d4d88 <loop+0x220>)
   d4c48:	4950      	ldr	r1, [pc, #320]	; (d4d8c <loop+0x224>)
   d4c4a:	a802      	add	r0, sp, #8
   d4c4c:	f7ff fa4c 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4c50:	a803      	add	r0, sp, #12
   d4c52:	f7ff faf7 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4c56:	f000 fd27 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
   d4c5a:	4b4d      	ldr	r3, [pc, #308]	; (d4d90 <loop+0x228>)
      resetTimeStamp = millis();
   d4c5c:	6018      	str	r0, [r3, #0]
   d4c5e:	e7a6      	b.n	d4bae <loop+0x46>
    else state = REPORTING_STATE;
   d4c60:	2305      	movs	r3, #5
   d4c62:	e7a3      	b.n	d4bac <loop+0x44>
    if (verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
   d4c64:	4b3d      	ldr	r3, [pc, #244]	; (d4d5c <loop+0x1f4>)
   d4c66:	781b      	ldrb	r3, [r3, #0]
   d4c68:	b12b      	cbz	r3, d4c76 <loop+0x10e>
   d4c6a:	4b3d      	ldr	r3, [pc, #244]	; (d4d60 <loop+0x1f8>)
   d4c6c:	781b      	ldrb	r3, [r3, #0]
   d4c6e:	2b05      	cmp	r3, #5
   d4c70:	d001      	beq.n	d4c76 <loop+0x10e>
   d4c72:	f7ff ff39 	bl	d4ae8 <_Z22publishStateTransitionv>
   d4c76:	f000 fedd 	bl	d5a34 <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4c7a:	b168      	cbz	r0, d4c98 <loop+0x130>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d4c7c:	f001 fedc 	bl	d6a38 <_ZN9TimeClass4hourEv>
   d4c80:	280c      	cmp	r0, #12
   d4c82:	d105      	bne.n	d4c90 <loop+0x128>
   d4c84:	f000 fed6 	bl	d5a34 <spark_cloud_flag_connected>
        if (!connected()) {
   d4c88:	b110      	cbz	r0, d4c90 <loop+0x128>
        return spark_sync_time(NULL);
   d4c8a:	2000      	movs	r0, #0
   d4c8c:	f000 fef2 	bl	d5a74 <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d4c90:	f7ff faee 	bl	d4270 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4c94:	2306      	movs	r3, #6
   d4c96:	e789      	b.n	d4bac <loop+0x44>
      state = ERROR_STATE;
   d4c98:	2301      	movs	r3, #1
   d4c9a:	7023      	strb	r3, [r4, #0]
   d4c9c:	f000 fd04 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4ca0:	4b37      	ldr	r3, [pc, #220]	; (d4d80 <loop+0x218>)
   d4ca2:	e7db      	b.n	d4c5c <loop+0xf4>
    if (verboseMode && state != oldState) publishStateTransition();
   d4ca4:	4b2d      	ldr	r3, [pc, #180]	; (d4d5c <loop+0x1f4>)
   d4ca6:	781b      	ldrb	r3, [r3, #0]
   d4ca8:	b12b      	cbz	r3, d4cb6 <loop+0x14e>
   d4caa:	4b2d      	ldr	r3, [pc, #180]	; (d4d60 <loop+0x1f8>)
   d4cac:	781b      	ldrb	r3, [r3, #0]
   d4cae:	2b06      	cmp	r3, #6
   d4cb0:	d001      	beq.n	d4cb6 <loop+0x14e>
   d4cb2:	f7ff ff19 	bl	d4ae8 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d4cb6:	4b37      	ldr	r3, [pc, #220]	; (d4d94 <loop+0x22c>)
   d4cb8:	781b      	ldrb	r3, [r3, #0]
   d4cba:	2b00      	cmp	r3, #0
   d4cbc:	d0a3      	beq.n	d4c06 <loop+0x9e>
   d4cbe:	f000 fcf3 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d4cc2:	4b35      	ldr	r3, [pc, #212]	; (d4d98 <loop+0x230>)
   d4cc4:	681b      	ldr	r3, [r3, #0]
   d4cc6:	1ac0      	subs	r0, r0, r3
   d4cc8:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4ccc:	4298      	cmp	r0, r3
   d4cce:	f67f af6e 	bls.w	d4bae <loop+0x46>
   d4cd2:	f000 fce9 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4cd6:	4d2a      	ldr	r5, [pc, #168]	; (d4d80 <loop+0x218>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4cd8:	4a30      	ldr	r2, [pc, #192]	; (d4d9c <loop+0x234>)
      resetTimeStamp = millis();
   d4cda:	6028      	str	r0, [r5, #0]
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4cdc:	2300      	movs	r3, #0
   d4cde:	f88d 3000 	strb.w	r3, [sp]
   d4ce2:	4b28      	ldr	r3, [pc, #160]	; (d4d84 <loop+0x21c>)
   d4ce4:	492e      	ldr	r1, [pc, #184]	; (d4da0 <loop+0x238>)
   d4ce6:	781b      	ldrb	r3, [r3, #0]
   d4ce8:	a802      	add	r0, sp, #8
   d4cea:	f7ff f9fd 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4cee:	a803      	add	r0, sp, #12
   d4cf0:	f7ff faa8 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d4cf4:	2301      	movs	r3, #1
   d4cf6:	7023      	strb	r3, [r4, #0]
   d4cf8:	f000 fcd6 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4cfc:	6028      	str	r0, [r5, #0]
   d4cfe:	e756      	b.n	d4bae <loop+0x46>
    if (verboseMode && state != oldState) publishStateTransition();
   d4d00:	4b16      	ldr	r3, [pc, #88]	; (d4d5c <loop+0x1f4>)
   d4d02:	781b      	ldrb	r3, [r3, #0]
   d4d04:	b12b      	cbz	r3, d4d12 <loop+0x1aa>
   d4d06:	4b16      	ldr	r3, [pc, #88]	; (d4d60 <loop+0x1f8>)
   d4d08:	781b      	ldrb	r3, [r3, #0]
   d4d0a:	2b01      	cmp	r3, #1
   d4d0c:	d001      	beq.n	d4d12 <loop+0x1aa>
   d4d0e:	f7ff feeb 	bl	d4ae8 <_Z22publishStateTransitionv>
   d4d12:	f000 fcc9 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4d16:	4b1a      	ldr	r3, [pc, #104]	; (d4d80 <loop+0x218>)
   d4d18:	681b      	ldr	r3, [r3, #0]
   d4d1a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4d1e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d4d22:	4283      	cmp	r3, r0
   d4d24:	f4bf af43 	bcs.w	d4bae <loop+0x46>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4d28:	f000 fe84 	bl	d5a34 <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4d2c:	b160      	cbz	r0, d4d48 <loop+0x1e0>
   d4d2e:	2300      	movs	r3, #0
   d4d30:	f88d 3000 	strb.w	r3, [sp]
   d4d34:	4b13      	ldr	r3, [pc, #76]	; (d4d84 <loop+0x21c>)
   d4d36:	4a1b      	ldr	r2, [pc, #108]	; (d4da4 <loop+0x23c>)
   d4d38:	781b      	ldrb	r3, [r3, #0]
   d4d3a:	4914      	ldr	r1, [pc, #80]	; (d4d8c <loop+0x224>)
   d4d3c:	a802      	add	r0, sp, #8
   d4d3e:	f7ff f9d3 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4d42:	a803      	add	r0, sp, #12
   d4d44:	f7ff fa7e 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);
   d4d48:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4d4c:	f000 ff3a 	bl	d5bc4 <delay>
      System.reset();
   d4d50:	f001 fde0 	bl	d6914 <_ZN11SystemClass5resetEv>
}
   d4d54:	e72b      	b.n	d4bae <loop+0x46>
   d4d56:	bf00      	nop
   d4d58:	2003e504 	.word	0x2003e504
   d4d5c:	2003e1bc 	.word	0x2003e1bc
   d4d60:	2003e4a2 	.word	0x2003e4a2
   d4d64:	2003e448 	.word	0x2003e448
   d4d68:	2003e428 	.word	0x2003e428
   d4d6c:	2003e53a 	.word	0x2003e53a
   d4d70:	2003e479 	.word	0x2003e479
   d4d74:	2003e521 	.word	0x2003e521
   d4d78:	2003e460 	.word	0x2003e460
   d4d7c:	2003e420 	.word	0x2003e420
   d4d80:	2003e4b0 	.word	0x2003e4b0
   d4d84:	2003e425 	.word	0x2003e425
   d4d88:	000da899 	.word	0x000da899
   d4d8c:	000da607 	.word	0x000da607
   d4d90:	2003e45c 	.word	0x2003e45c
   d4d94:	2003e0e0 	.word	0x2003e0e0
   d4d98:	2003e590 	.word	0x2003e590
   d4d9c:	000da67b 	.word	0x000da67b
   d4da0:	000da8b3 	.word	0x000da8b3
   d4da4:	000da8cc 	.word	0x000da8cc

000d4da8 <_Z17setUpperTempLimit6String>:
{
   d4da8:	b500      	push	{lr}
   d4daa:	b08b      	sub	sp, #44	; 0x2c
   d4dac:	9003      	str	r0, [sp, #12]
  sensor_data.upperTemperatureThreshold = value.toFloat();
   d4dae:	f001 fd8f 	bl	d68d0 <_ZNK6String7toFloatEv>
   d4db2:	4b0f      	ldr	r3, [pc, #60]	; (d4df0 <_Z17setUpperTempLimit6String+0x48>)
   d4db4:	ed83 0a08 	vstr	s0, [r3, #32]
   d4db8:	f7ff f9fa 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d4dbc:	9903      	ldr	r1, [sp, #12]
   d4dbe:	a806      	add	r0, sp, #24
   d4dc0:	f001 fd2c 	bl	d681c <_ZN6StringC1ERKS_>
   d4dc4:	2300      	movs	r3, #0
   d4dc6:	f88d 3000 	strb.w	r3, [sp]
   d4dca:	4b0a      	ldr	r3, [pc, #40]	; (d4df4 <_Z17setUpperTempLimit6String+0x4c>)
   d4dcc:	9a06      	ldr	r2, [sp, #24]
   d4dce:	781b      	ldrb	r3, [r3, #0]
   d4dd0:	4909      	ldr	r1, [pc, #36]	; (d4df8 <_Z17setUpperTempLimit6String+0x50>)
   d4dd2:	a804      	add	r0, sp, #16
   d4dd4:	f7ff f988 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4dd8:	a805      	add	r0, sp, #20
   d4dda:	f7ff fa33 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4dde:	a806      	add	r0, sp, #24
   d4de0:	f001 fcae 	bl	d6740 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4de4:	f7ff f9f0 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4de8:	2001      	movs	r0, #1
   d4dea:	b00b      	add	sp, #44	; 0x2c
   d4dec:	f85d fb04 	ldr.w	pc, [sp], #4
   d4df0:	2003e4b8 	.word	0x2003e4b8
   d4df4:	2003e425 	.word	0x2003e425
   d4df8:	000da8e0 	.word	0x000da8e0

000d4dfc <_Z17setLowerTempLimit6String>:
{
   d4dfc:	b500      	push	{lr}
   d4dfe:	b08b      	sub	sp, #44	; 0x2c
   d4e00:	9003      	str	r0, [sp, #12]
  sensor_data.lowerTemperatureThreshold = value.toFloat();
   d4e02:	f001 fd65 	bl	d68d0 <_ZNK6String7toFloatEv>
   d4e06:	4b0f      	ldr	r3, [pc, #60]	; (d4e44 <_Z17setLowerTempLimit6String+0x48>)
   d4e08:	ed83 0a09 	vstr	s0, [r3, #36]	; 0x24
   d4e0c:	f7ff f9d0 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d4e10:	9903      	ldr	r1, [sp, #12]
   d4e12:	a806      	add	r0, sp, #24
   d4e14:	f001 fd02 	bl	d681c <_ZN6StringC1ERKS_>
   d4e18:	2300      	movs	r3, #0
   d4e1a:	f88d 3000 	strb.w	r3, [sp]
   d4e1e:	4b0a      	ldr	r3, [pc, #40]	; (d4e48 <_Z17setLowerTempLimit6String+0x4c>)
   d4e20:	9a06      	ldr	r2, [sp, #24]
   d4e22:	781b      	ldrb	r3, [r3, #0]
   d4e24:	4909      	ldr	r1, [pc, #36]	; (d4e4c <_Z17setLowerTempLimit6String+0x50>)
   d4e26:	a804      	add	r0, sp, #16
   d4e28:	f7ff f95e 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4e2c:	a805      	add	r0, sp, #20
   d4e2e:	f7ff fa09 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e32:	a806      	add	r0, sp, #24
   d4e34:	f001 fc84 	bl	d6740 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4e38:	f7ff f9c6 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4e3c:	2001      	movs	r0, #1
   d4e3e:	b00b      	add	sp, #44	; 0x2c
   d4e40:	f85d fb04 	ldr.w	pc, [sp], #4
   d4e44:	2003e4b8 	.word	0x2003e4b8
   d4e48:	2003e425 	.word	0x2003e425
   d4e4c:	000da8f4 	.word	0x000da8f4

000d4e50 <_Z21setUpperHumidityLimit6String>:
{
   d4e50:	b500      	push	{lr}
   d4e52:	b08b      	sub	sp, #44	; 0x2c
   d4e54:	9003      	str	r0, [sp, #12]
  sensor_data.upperHumidityThreshold = value.toFloat();
   d4e56:	f001 fd3b 	bl	d68d0 <_ZNK6String7toFloatEv>
   d4e5a:	4b0f      	ldr	r3, [pc, #60]	; (d4e98 <_Z21setUpperHumidityLimit6String+0x48>)
   d4e5c:	ed83 0a0a 	vstr	s0, [r3, #40]	; 0x28
   d4e60:	f7ff f9a6 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Upper Threshold Set",String(value),PRIVATE);
   d4e64:	9903      	ldr	r1, [sp, #12]
   d4e66:	a806      	add	r0, sp, #24
   d4e68:	f001 fcd8 	bl	d681c <_ZN6StringC1ERKS_>
   d4e6c:	2300      	movs	r3, #0
   d4e6e:	f88d 3000 	strb.w	r3, [sp]
   d4e72:	4b0a      	ldr	r3, [pc, #40]	; (d4e9c <_Z21setUpperHumidityLimit6String+0x4c>)
   d4e74:	9a06      	ldr	r2, [sp, #24]
   d4e76:	781b      	ldrb	r3, [r3, #0]
   d4e78:	4909      	ldr	r1, [pc, #36]	; (d4ea0 <_Z21setUpperHumidityLimit6String+0x50>)
   d4e7a:	a804      	add	r0, sp, #16
   d4e7c:	f7ff f934 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4e80:	a805      	add	r0, sp, #20
   d4e82:	f7ff f9df 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4e86:	a806      	add	r0, sp, #24
   d4e88:	f001 fc5a 	bl	d6740 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4e8c:	f7ff f99c 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4e90:	2001      	movs	r0, #1
   d4e92:	b00b      	add	sp, #44	; 0x2c
   d4e94:	f85d fb04 	ldr.w	pc, [sp], #4
   d4e98:	2003e4b8 	.word	0x2003e4b8
   d4e9c:	2003e425 	.word	0x2003e425
   d4ea0:	000da8e0 	.word	0x000da8e0

000d4ea4 <_Z21setLowerHumidityLimit6String>:
{
   d4ea4:	b500      	push	{lr}
   d4ea6:	b08b      	sub	sp, #44	; 0x2c
   d4ea8:	9003      	str	r0, [sp, #12]
  sensor_data.lowerHumidityThreshold = value.toFloat();
   d4eaa:	f001 fd11 	bl	d68d0 <_ZNK6String7toFloatEv>
   d4eae:	4b0f      	ldr	r3, [pc, #60]	; (d4eec <_Z21setLowerHumidityLimit6String+0x48>)
   d4eb0:	ed83 0a0b 	vstr	s0, [r3, #44]	; 0x2c
   d4eb4:	f7ff f97c 	bl	d41b0 <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
  Particle.publish("Lower Threshold Set",String(value),PRIVATE);
   d4eb8:	9903      	ldr	r1, [sp, #12]
   d4eba:	a806      	add	r0, sp, #24
   d4ebc:	f001 fcae 	bl	d681c <_ZN6StringC1ERKS_>
   d4ec0:	2300      	movs	r3, #0
   d4ec2:	f88d 3000 	strb.w	r3, [sp]
   d4ec6:	4b0a      	ldr	r3, [pc, #40]	; (d4ef0 <_Z21setLowerHumidityLimit6String+0x4c>)
   d4ec8:	9a06      	ldr	r2, [sp, #24]
   d4eca:	781b      	ldrb	r3, [r3, #0]
   d4ecc:	4909      	ldr	r1, [pc, #36]	; (d4ef4 <_Z21setLowerHumidityLimit6String+0x50>)
   d4ece:	a804      	add	r0, sp, #16
   d4ed0:	f7ff f90a 	bl	d40e8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4ed4:	a805      	add	r0, sp, #20
   d4ed6:	f7ff f9b5 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4eda:	a806      	add	r0, sp, #24
   d4edc:	f001 fc30 	bl	d6740 <_ZN6StringD1Ev>
  updateThresholdValue();
   d4ee0:	f7ff f972 	bl	d41c8 <_Z20updateThresholdValuev>
}
   d4ee4:	2001      	movs	r0, #1
   d4ee6:	b00b      	add	sp, #44	; 0x2c
   d4ee8:	f85d fb04 	ldr.w	pc, [sp], #4
   d4eec:	2003e4b8 	.word	0x2003e4b8
   d4ef0:	2003e425 	.word	0x2003e425
   d4ef4:	000da8f4 	.word	0x000da8f4

000d4ef8 <_GLOBAL__sub_I_veml>:
        val_(val) {
   d4ef8:	4b12      	ldr	r3, [pc, #72]	; (d4f44 <_GLOBAL__sub_I_veml+0x4c>)
Adafruit_VEML7700 veml;
   d4efa:	4813      	ldr	r0, [pc, #76]	; (d4f48 <_GLOBAL__sub_I_veml+0x50>)
} 
   d4efc:	b570      	push	{r4, r5, r6, lr}
   d4efe:	2400      	movs	r4, #0
   d4f00:	701c      	strb	r4, [r3, #0]
   d4f02:	4b12      	ldr	r3, [pc, #72]	; (d4f4c <_GLOBAL__sub_I_veml+0x54>)
              error_(SYSTEM_ERROR_NONE) {
   d4f04:	4d12      	ldr	r5, [pc, #72]	; (d4f50 <_GLOBAL__sub_I_veml+0x58>)
   d4f06:	2601      	movs	r6, #1
   d4f08:	701e      	strb	r6, [r3, #0]
Adafruit_VEML7700 veml;
   d4f0a:	f000 f940 	bl	d518e <_ZN17Adafruit_VEML7700C1Ev>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d4f0e:	4811      	ldr	r0, [pc, #68]	; (d4f54 <_GLOBAL__sub_I_veml+0x5c>)
   d4f10:	f000 fad6 	bl	d54c0 <_ZN14Adafruit_SHT31C1Ev>
    SleepResult() {}
   d4f14:	4b10      	ldr	r3, [pc, #64]	; (d4f58 <_GLOBAL__sub_I_veml+0x60>)
   d4f16:	60ab      	str	r3, [r5, #8]
        set_system_mode(mode);
   d4f18:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   d4f1a:	602c      	str	r4, [r5, #0]
   d4f1c:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4f1e:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d4f20:	f000 fd1a 	bl	d5958 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);                                                               // This will enable user code to start executing automatically.
   d4f24:	4a0d      	ldr	r2, [pc, #52]	; (d4f5c <_GLOBAL__sub_I_veml+0x64>)
   d4f26:	490e      	ldr	r1, [pc, #56]	; (d4f60 <_GLOBAL__sub_I_veml+0x68>)
   d4f28:	4628      	mov	r0, r5
   d4f2a:	f002 f84f 	bl	d6fcc <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                    // Means my code will not be held up by Particle processes.
   d4f2e:	4621      	mov	r1, r4
   d4f30:	4630      	mov	r0, r6
   d4f32:	f000 fd21 	bl	d5978 <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d4f36:	4631      	mov	r1, r6
   d4f38:	2004      	movs	r0, #4
} 
   d4f3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4f3e:	f000 bba3 	b.w	d5688 <HAL_Feature_Set>
   d4f42:	bf00      	nop
   d4f44:	2003e424 	.word	0x2003e424
   d4f48:	2003e554 	.word	0x2003e554
   d4f4c:	2003e425 	.word	0x2003e425
   d4f50:	2003e414 	.word	0x2003e414
   d4f54:	2003e4f8 	.word	0x2003e4f8
   d4f58:	ffff0000 	.word	0xffff0000
   d4f5c:	2003e400 	.word	0x2003e400
   d4f60:	000d40d1 	.word	0x000d40d1

000d4f64 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:

//#define DEBUG_SERIAL Serial

Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d4f64:	6042      	str	r2, [r0, #4]
  _begun = false;
   d4f66:	2200      	movs	r2, #0
  _addr = addr;
   d4f68:	7001      	strb	r1, [r0, #0]
  _begun = false;
   d4f6a:	7202      	strb	r2, [r0, #8]
}
   d4f6c:	4770      	bx	lr

000d4f6e <_ZN18Adafruit_I2CDevice8detectedEv>:
  _begun = true;

  return detected();
}

bool Adafruit_I2CDevice::detected(void) {
   d4f6e:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d4f70:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d4f72:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d4f74:	b153      	cbz	r3, d4f8c <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d4f76:	7821      	ldrb	r1, [r4, #0]
   d4f78:	6860      	ldr	r0, [r4, #4]
   d4f7a:	f001 fa35 	bl	d63e8 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission () == 0) {
   d4f7e:	6860      	ldr	r0, [r4, #4]
   d4f80:	f001 fa3a 	bl	d63f8 <_ZN7TwoWire15endTransmissionEv>
   d4f84:	fab0 f080 	clz	r0, r0
   d4f88:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   d4f8a:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d4f8c:	f000 f803 	bl	d4f96 <_ZN18Adafruit_I2CDevice5beginEv>
   d4f90:	2800      	cmp	r0, #0
   d4f92:	d1f0      	bne.n	d4f76 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d4f94:	e7f9      	b.n	d4f8a <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d4f96 <_ZN18Adafruit_I2CDevice5beginEv>:
bool Adafruit_I2CDevice::begin(void) {
   d4f96:	b510      	push	{r4, lr}
   d4f98:	4604      	mov	r4, r0
  _wire->begin();
   d4f9a:	6840      	ldr	r0, [r0, #4]
   d4f9c:	f001 f9f2 	bl	d6384 <_ZN7TwoWire5beginEv>
  _begun = true;
   d4fa0:	2301      	movs	r3, #1
   d4fa2:	7223      	strb	r3, [r4, #8]
  return detected();
   d4fa4:	4620      	mov	r0, r4
}
   d4fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return detected();
   d4faa:	f7ff bfe0 	b.w	d4f6e <_ZN18Adafruit_I2CDevice8detectedEv>

000d4fae <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>:

bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   d4fae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4fb2:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d4fb6:	461f      	mov	r7, r3
  if ((len+prefix_len) > 32) {
   d4fb8:	1993      	adds	r3, r2, r6
   d4fba:	2b20      	cmp	r3, #32
bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   d4fbc:	4604      	mov	r4, r0
   d4fbe:	4688      	mov	r8, r1
   d4fc0:	4615      	mov	r5, r2
  if ((len+prefix_len) > 32) {
   d4fc2:	d902      	bls.n	d4fca <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x1c>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d4fc4:	2000      	movs	r0, #0
  DEBUG_SERIAL.println();
#endif


  return (_wire -> endTransmission(stop) == 0);
}
   d4fc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d4fca:	7801      	ldrb	r1, [r0, #0]
   d4fcc:	6840      	ldr	r0, [r0, #4]
   d4fce:	f001 fa0b 	bl	d63e8 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d4fd2:	b97e      	cbnz	r6, d4ff4 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x46>
  if (_wire->write(buffer, len) != len) {
   d4fd4:	6860      	ldr	r0, [r4, #4]
   d4fd6:	6803      	ldr	r3, [r0, #0]
   d4fd8:	462a      	mov	r2, r5
   d4fda:	68db      	ldr	r3, [r3, #12]
   d4fdc:	4641      	mov	r1, r8
   d4fde:	4798      	blx	r3
   d4fe0:	4285      	cmp	r5, r0
   d4fe2:	d1ef      	bne.n	d4fc4 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
  return (_wire -> endTransmission(stop) == 0);
   d4fe4:	6860      	ldr	r0, [r4, #4]
   d4fe6:	4639      	mov	r1, r7
   d4fe8:	f001 fa02 	bl	d63f0 <_ZN7TwoWire15endTransmissionEh>
   d4fec:	fab0 f080 	clz	r0, r0
   d4ff0:	0940      	lsrs	r0, r0, #5
   d4ff2:	e7e8      	b.n	d4fc6 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x18>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d4ff4:	f1b9 0f00 	cmp.w	r9, #0
   d4ff8:	d0ec      	beq.n	d4fd4 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>
   d4ffa:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d4ffc:	6803      	ldr	r3, [r0, #0]
   d4ffe:	4632      	mov	r2, r6
   d5000:	68db      	ldr	r3, [r3, #12]
   d5002:	4649      	mov	r1, r9
   d5004:	4798      	blx	r3
   d5006:	42b0      	cmp	r0, r6
   d5008:	d1dc      	bne.n	d4fc4 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
   d500a:	e7e3      	b.n	d4fd4 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>

000d500c <_ZN18Adafruit_I2CDevice4readEPhjb>:

bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  if (len > 32) {
   d500c:	2a20      	cmp	r2, #32
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d500e:	b570      	push	{r4, r5, r6, lr}
   d5010:	4606      	mov	r6, r0
   d5012:	460c      	mov	r4, r1
   d5014:	4615      	mov	r5, r2
  if (len > 32) {
   d5016:	d80f      	bhi.n	d5038 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
    DEBUG_SERIAL.println(F("\tI2CDevice could not read such a large buffer"));
#endif
    return false;
  }

  if (_wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop) != len) {
   d5018:	7801      	ldrb	r1, [r0, #0]
   d501a:	6840      	ldr	r0, [r0, #4]
   d501c:	f001 f9cf 	bl	d63be <_ZN7TwoWire11requestFromEhjh>
   d5020:	42a8      	cmp	r0, r5
   d5022:	d109      	bne.n	d5038 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
   d5024:	1825      	adds	r5, r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice did not receive enough data"));
#endif
    return false;
  }

  for (uint16_t i=0; i<len; i++) {
   d5026:	42a5      	cmp	r5, r4
   d5028:	d008      	beq.n	d503c <_ZN18Adafruit_I2CDevice4readEPhjb+0x30>
    buffer[i] = _wire->read();
   d502a:	6870      	ldr	r0, [r6, #4]
   d502c:	6803      	ldr	r3, [r0, #0]
   d502e:	695b      	ldr	r3, [r3, #20]
   d5030:	4798      	blx	r3
   d5032:	f804 0b01 	strb.w	r0, [r4], #1
  for (uint16_t i=0; i<len; i++) {
   d5036:	e7f6      	b.n	d5026 <_ZN18Adafruit_I2CDevice4readEPhjb+0x1a>
    return false;
   d5038:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d503a:	bd70      	pop	{r4, r5, r6, pc}
   d503c:	2001      	movs	r0, #1
   d503e:	e7fc      	b.n	d503a <_ZN18Adafruit_I2CDevice4readEPhjb+0x2e>

000d5040 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>:


bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   d5040:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d5042:	461d      	mov	r5, r3
  if (! write(write_buffer, write_len, stop)) {
   d5044:	2300      	movs	r3, #0
   d5046:	e9cd 3300 	strd	r3, r3, [sp]
   d504a:	f89d 301c 	ldrb.w	r3, [sp, #28]
bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   d504e:	9e06      	ldr	r6, [sp, #24]
   d5050:	4604      	mov	r4, r0
  if (! write(write_buffer, write_len, stop)) {
   d5052:	f7ff ffac 	bl	d4fae <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
   d5056:	b140      	cbz	r0, d506a <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb+0x2a>
    return false;
  }
  
  return read(read_buffer, read_len);
   d5058:	2301      	movs	r3, #1
   d505a:	4632      	mov	r2, r6
   d505c:	4629      	mov	r1, r5
   d505e:	4620      	mov	r0, r4
}
   d5060:	b002      	add	sp, #8
   d5062:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d5066:	f7ff bfd1 	b.w	d500c <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d506a:	b002      	add	sp, #8
   d506c:	bd70      	pop	{r4, r5, r6, pc}

000d506e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>:
#include "Adafruit_I2CRegister.h"

Adafruit_I2CRegister::Adafruit_I2CRegister(Adafruit_I2CDevice *device, uint16_t reg_addr, uint8_t width, uint8_t bitorder, uint8_t address_width) {
   d506e:	b510      	push	{r4, lr}
  _device = device;
   d5070:	6001      	str	r1, [r0, #0]
  _addrwidth = address_width;
  _address = reg_addr;
   d5072:	8082      	strh	r2, [r0, #4]
  _addrwidth = address_width;
   d5074:	f89d 100c 	ldrb.w	r1, [sp, #12]
  _bitorder = bitorder;
   d5078:	f89d 2008 	ldrb.w	r2, [sp, #8]
  _addrwidth = address_width;
   d507c:	71c1      	strb	r1, [r0, #7]
  _bitorder = bitorder;
   d507e:	7202      	strb	r2, [r0, #8]
  _width = width;
   d5080:	7183      	strb	r3, [r0, #6]
}
   d5082:	bd10      	pop	{r4, pc}

000d5084 <_ZN20Adafruit_I2CRegister5writeEPhh>:


bool Adafruit_I2CRegister::write(uint8_t *buffer, uint8_t len) {
   d5084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF), (uint8_t)(_address>>8)};
   d5086:	8883      	ldrh	r3, [r0, #4]
   d5088:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (! _device->write(buffer, len, true, addrbuffer, _addrwidth)) {
   d508c:	79c3      	ldrb	r3, [r0, #7]
   d508e:	9301      	str	r3, [sp, #4]
   d5090:	ab03      	add	r3, sp, #12
   d5092:	9300      	str	r3, [sp, #0]
   d5094:	6800      	ldr	r0, [r0, #0]
   d5096:	2301      	movs	r3, #1
   d5098:	f7ff ff89 	bl	d4fae <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
    return false;
  }
  return true;
}
   d509c:	b005      	add	sp, #20
   d509e:	f85d fb04 	ldr.w	pc, [sp], #4

000d50a2 <_ZN20Adafruit_I2CRegister5writeEmh>:

bool Adafruit_I2CRegister::write(uint32_t value, uint8_t numbytes) {
   d50a2:	b4f0      	push	{r4, r5, r6, r7}
   d50a4:	460c      	mov	r4, r1
  if (numbytes == 0) {
   d50a6:	b902      	cbnz	r2, d50aa <_ZN20Adafruit_I2CRegister5writeEmh+0x8>
    numbytes = _width;
   d50a8:	7982      	ldrb	r2, [r0, #6]
  }
  if (numbytes > 4) {
   d50aa:	2a04      	cmp	r2, #4
   d50ac:	d813      	bhi.n	d50d6 <_ZN20Adafruit_I2CRegister5writeEmh+0x34>
   d50ae:	f100 0509 	add.w	r5, r0, #9
   d50b2:	1883      	adds	r3, r0, r2
   d50b4:	4629      	mov	r1, r5
    return false;
  }

  for (int i=0; i<numbytes; i++) {
   d50b6:	4283      	cmp	r3, r0
   d50b8:	d009      	beq.n	d50ce <_ZN20Adafruit_I2CRegister5writeEmh+0x2c>
    if (_bitorder == LSBFIRST) {
   d50ba:	7a07      	ldrb	r7, [r0, #8]
   d50bc:	b2e6      	uxtb	r6, r4
   d50be:	b927      	cbnz	r7, d50ca <_ZN20Adafruit_I2CRegister5writeEmh+0x28>
      _buffer[i] = value & 0xFF;
   d50c0:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes-i-1] = value & 0xFF;
    }
    value >>= 8;
   d50c2:	0a24      	lsrs	r4, r4, #8
  for (int i=0; i<numbytes; i++) {
   d50c4:	3501      	adds	r5, #1
   d50c6:	3b01      	subs	r3, #1
   d50c8:	e7f5      	b.n	d50b6 <_ZN20Adafruit_I2CRegister5writeEmh+0x14>
      _buffer[numbytes-i-1] = value & 0xFF;
   d50ca:	721e      	strb	r6, [r3, #8]
   d50cc:	e7f9      	b.n	d50c2 <_ZN20Adafruit_I2CRegister5writeEmh+0x20>
  }
  return write(_buffer, numbytes);
}
   d50ce:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   d50d0:	4618      	mov	r0, r3
   d50d2:	f7ff bfd7 	b.w	d5084 <_ZN20Adafruit_I2CRegister5writeEPhh>
}
   d50d6:	2000      	movs	r0, #0
   d50d8:	bcf0      	pop	{r4, r5, r6, r7}
   d50da:	4770      	bx	lr

000d50dc <_ZN20Adafruit_I2CRegister4readEPhh>:

   return value;
}


bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   d50dc:	b513      	push	{r0, r1, r4, lr}
  _buffer[0] = _address;
   d50de:	4604      	mov	r4, r0
bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   d50e0:	460b      	mov	r3, r1
  _buffer[0] = _address;
   d50e2:	8881      	ldrh	r1, [r0, #4]
   d50e4:	f804 1f09 	strb.w	r1, [r4, #9]!
  if (! _device->write_then_read(_buffer, 1, buffer, len)) {
   d50e8:	2100      	movs	r1, #0
   d50ea:	e9cd 2100 	strd	r2, r1, [sp]
   d50ee:	2201      	movs	r2, #1
   d50f0:	4621      	mov	r1, r4
   d50f2:	6800      	ldr	r0, [r0, #0]
   d50f4:	f7ff ffa4 	bl	d5040 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>
    return false;
  }
  return true;
}
   d50f8:	b002      	add	sp, #8
   d50fa:	bd10      	pop	{r4, pc}

000d50fc <_ZN20Adafruit_I2CRegister4readEv>:
uint32_t Adafruit_I2CRegister::read(void) {
   d50fc:	b538      	push	{r3, r4, r5, lr}
  if (! read(_buffer, _width)) {
   d50fe:	f100 0509 	add.w	r5, r0, #9
   d5102:	7982      	ldrb	r2, [r0, #6]
   d5104:	4629      	mov	r1, r5
uint32_t Adafruit_I2CRegister::read(void) {
   d5106:	4604      	mov	r4, r0
  if (! read(_buffer, _width)) {
   d5108:	f7ff ffe8 	bl	d50dc <_ZN20Adafruit_I2CRegister4readEPhh>
   d510c:	b178      	cbz	r0, d512e <_ZN20Adafruit_I2CRegister4readEv+0x32>
   d510e:	79a2      	ldrb	r2, [r4, #6]
   d5110:	4629      	mov	r1, r5
   d5112:	4422      	add	r2, r4
  uint32_t value = 0;
   d5114:	2000      	movs	r0, #0
   for (int i=0; i < _width; i++) {
   d5116:	42a2      	cmp	r2, r4
   d5118:	d00b      	beq.n	d5132 <_ZN20Adafruit_I2CRegister4readEv+0x36>
     value <<= 8;
   d511a:	0203      	lsls	r3, r0, #8
     if (_bitorder == LSBFIRST) {
   d511c:	7a20      	ldrb	r0, [r4, #8]
   d511e:	b920      	cbnz	r0, d512a <_ZN20Adafruit_I2CRegister4readEv+0x2e>
       value |= _buffer[_width-i-1];
   d5120:	7a10      	ldrb	r0, [r2, #8]
       value |= _buffer[i];
   d5122:	4318      	orrs	r0, r3
   for (int i=0; i < _width; i++) {
   d5124:	3a01      	subs	r2, #1
   d5126:	3101      	adds	r1, #1
   d5128:	e7f5      	b.n	d5116 <_ZN20Adafruit_I2CRegister4readEv+0x1a>
       value |= _buffer[i];
   d512a:	7808      	ldrb	r0, [r1, #0]
   d512c:	e7f9      	b.n	d5122 <_ZN20Adafruit_I2CRegister4readEv+0x26>
    return -1;
   d512e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5132:	bd38      	pop	{r3, r4, r5, pc}

000d5134 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>:
  print(s);
  s->println();
}


Adafruit_I2CRegisterBits::Adafruit_I2CRegisterBits(Adafruit_I2CRegister *reg, uint8_t bits, uint8_t shift) {
   d5134:	b510      	push	{r4, lr}
  _register = reg;
   d5136:	6001      	str	r1, [r0, #0]
  _bits = bits;
   d5138:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   d513a:	7143      	strb	r3, [r0, #5]
}
   d513c:	bd10      	pop	{r4, pc}

000d513e <_ZN24Adafruit_I2CRegisterBits4readEv>:

uint32_t Adafruit_I2CRegisterBits::read(void) {
   d513e:	b510      	push	{r4, lr}
   d5140:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d5142:	6800      	ldr	r0, [r0, #0]
   d5144:	f7ff ffda 	bl	d50fc <_ZN20Adafruit_I2CRegister4readEv>
  val >>= _shift;
  return val & ((1 << (_bits+1)) - 1);
   d5148:	7923      	ldrb	r3, [r4, #4]
   d514a:	1c5a      	adds	r2, r3, #1
   d514c:	2301      	movs	r3, #1
   d514e:	4093      	lsls	r3, r2
  val >>= _shift;
   d5150:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits+1)) - 1);
   d5152:	3b01      	subs	r3, #1
  val >>= _shift;
   d5154:	40d0      	lsrs	r0, r2
}
   d5156:	4018      	ands	r0, r3
   d5158:	bd10      	pop	{r4, pc}

000d515a <_ZN24Adafruit_I2CRegisterBits5writeEm>:

void Adafruit_I2CRegisterBits::write(uint32_t data) {
   d515a:	b570      	push	{r4, r5, r6, lr}
   d515c:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d515e:	6800      	ldr	r0, [r0, #0]
void Adafruit_I2CRegisterBits::write(uint32_t data) {
   d5160:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   d5162:	f7ff ffcb 	bl	d50fc <_ZN20Adafruit_I2CRegister4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits+1)) - 1;
   d5166:	7923      	ldrb	r3, [r4, #4]
   d5168:	2201      	movs	r2, #1
   d516a:	3301      	adds	r3, #1
   d516c:	409a      	lsls	r2, r3
   d516e:	1e53      	subs	r3, r2, #1
  data &= mask;

  mask <<= _shift;
   d5170:	7962      	ldrb	r2, [r4, #5]
   d5172:	fa03 f502 	lsl.w	r5, r3, r2
  val &= ~mask;      // remove the current data at that spot
   d5176:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   d517a:	ea03 0106 	and.w	r1, r3, r6
  val |= data << _shift; // and add in the new data
  
  _register->write(val, _register->width());
   d517e:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   d5180:	4091      	lsls	r1, r2
  _register->write(val, _register->width());
   d5182:	4329      	orrs	r1, r5
   d5184:	7982      	ldrb	r2, [r0, #6]
   d5186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _register->write(val, _register->width());
   d518a:	f7ff bf8a 	b.w	d50a2 <_ZN20Adafruit_I2CRegister5writeEmh>

000d518e <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
   d518e:	4770      	bx	lr

000d5190 <_ZN17Adafruit_VEML77007readALSEv>:
/*!
 *    @brief Read the raw ALS data
 *    @returns 16-bit data value from the ALS register
 */
uint16_t Adafruit_VEML7700::readALS()
{
   d5190:	b508      	push	{r3, lr}
  return ALS_Data->read();
   d5192:	6840      	ldr	r0, [r0, #4]
   d5194:	f7ff ffb2 	bl	d50fc <_ZN20Adafruit_I2CRegister4readEv>
}
   d5198:	b280      	uxth	r0, r0
   d519a:	bd08      	pop	{r3, pc}

000d519c <_ZN17Adafruit_VEML77006enableEb>:
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable)
{
  ALS_Shutdown->write(!enable);
   d519c:	69c0      	ldr	r0, [r0, #28]
   d519e:	f081 0101 	eor.w	r1, r1, #1
   d51a2:	f7ff bfda 	b.w	d515a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d51a6 <_ZN17Adafruit_VEML770015interruptEnableEb>:
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable)
{
  ALS_Interrupt_Enable->write(enable);
   d51a6:	6a00      	ldr	r0, [r0, #32]
   d51a8:	f7ff bfd7 	b.w	d515a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d51ac <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @param pers Persistance constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8   
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers)
{
  ALS_Persistence->write(pers);
   d51ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d51ae:	f7ff bfd4 	b.w	d515a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d51b2 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>:
 *    @param it Can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
void Adafruit_VEML7700::setIntegrationTime(uint8_t it)
{
  ALS_Integration_Time->write(it);
   d51b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d51b4:	f7ff bfd1 	b.w	d515a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d51b8 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
 *    @brief Get ALS integration time
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void)
{
   d51b8:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
   d51ba:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d51bc:	f7ff ffbf 	bl	d513e <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   d51c0:	b2c0      	uxtb	r0, r0
   d51c2:	bd08      	pop	{r3, pc}

000d51c4 <_ZN17Adafruit_VEML77007setGainEh>:
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain)
{
  ALS_Gain->write(gain);
   d51c4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d51c6:	f7ff bfc8 	b.w	d515a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d51ca <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void)
{
   d51ca:	b508      	push	{r3, lr}
  return ALS_Gain->read();
   d51cc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d51ce:	f7ff ffb6 	bl	d513e <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   d51d2:	b2c0      	uxtb	r0, r0
   d51d4:	bd08      	pop	{r3, pc}

000d51d6 <_ZN17Adafruit_VEML77009normalizeEf>:
{
   d51d6:	b510      	push	{r4, lr}
   d51d8:	ed2d 8b02 	vpush	{d8}
   d51dc:	4604      	mov	r4, r0
   d51de:	eeb0 8a40 	vmov.f32	s16, s0
  switch (getGain())
   d51e2:	f7ff fff2 	bl	d51ca <_ZN17Adafruit_VEML77007getGainEv>
   d51e6:	2802      	cmp	r0, #2
   d51e8:	d018      	beq.n	d521c <_ZN17Adafruit_VEML77009normalizeEf+0x46>
   d51ea:	2803      	cmp	r0, #3
   d51ec:	d013      	beq.n	d5216 <_ZN17Adafruit_VEML77009normalizeEf+0x40>
   d51ee:	2801      	cmp	r0, #1
   d51f0:	d103      	bne.n	d51fa <_ZN17Adafruit_VEML77009normalizeEf+0x24>
    value /= 2.0;
   d51f2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    value *= 8;
   d51f6:	ee28 8a27 	vmul.f32	s16, s16, s15
  switch (getIntegrationTime())
   d51fa:	4620      	mov	r0, r4
   d51fc:	f7ff ffdc 	bl	d51b8 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
   d5200:	3801      	subs	r0, #1
   d5202:	280b      	cmp	r0, #11
   d5204:	d814      	bhi.n	d5230 <_ZN17Adafruit_VEML77009normalizeEf+0x5a>
   d5206:	e8df f000 	tbb	[pc, r0]
   d520a:	1b18      	.short	0x1b18
   d520c:	1313131e 	.word	0x1313131e
   d5210:	13131113 	.word	0x13131113
   d5214:	0c13      	.short	0x0c13
    value *= 4;
   d5216:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
   d521a:	e7ec      	b.n	d51f6 <_ZN17Adafruit_VEML77009normalizeEf+0x20>
    value *= 8;
   d521c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   d5220:	e7e9      	b.n	d51f6 <_ZN17Adafruit_VEML77009normalizeEf+0x20>
    value *= 4;
   d5222:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
    value /= 8.0;
   d5226:	ee28 8a27 	vmul.f32	s16, s16, s15
    break;
   d522a:	e001      	b.n	d5230 <_ZN17Adafruit_VEML77009normalizeEf+0x5a>
    value *= 2;
   d522c:	ee38 8a08 	vadd.f32	s16, s16, s16
}
   d5230:	eeb0 0a48 	vmov.f32	s0, s16
   d5234:	ecbd 8b02 	vpop	{d8}
   d5238:	bd10      	pop	{r4, pc}
    value /= 2.0;
   d523a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d523e:	e7f2      	b.n	d5226 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
    value /= 4.0;
   d5240:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   d5244:	e7ef      	b.n	d5226 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
    value /= 8.0;
   d5246:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
   d524a:	e7ec      	b.n	d5226 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
   d524c:	0000      	movs	r0, r0
	...

000d5250 <_ZN17Adafruit_VEML77007readLuxEv>:
{
   d5250:	b510      	push	{r4, lr}
   d5252:	4604      	mov	r4, r0
  return normalize(ALS_Data->read()) * 0.0576; // see app note lux table on page 5
   d5254:	6840      	ldr	r0, [r0, #4]
   d5256:	f7ff ff51 	bl	d50fc <_ZN20Adafruit_I2CRegister4readEv>
   d525a:	ee07 0a90 	vmov	s15, r0
   d525e:	4620      	mov	r0, r4
   d5260:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d5264:	f7ff ffb7 	bl	d51d6 <_ZN17Adafruit_VEML77009normalizeEf>
   d5268:	ee10 0a10 	vmov	r0, s0
   d526c:	f002 f81e 	bl	d72ac <__aeabi_f2d>
   d5270:	a305      	add	r3, pc, #20	; (adr r3, d5288 <_ZN17Adafruit_VEML77007readLuxEv+0x38>)
   d5272:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5276:	f002 f871 	bl	d735c <__aeabi_dmul>
   d527a:	f002 fb29 	bl	d78d0 <__aeabi_d2f>
}
   d527e:	ee00 0a10 	vmov	s0, r0
   d5282:	bd10      	pop	{r4, pc}
   d5284:	f3af 8000 	nop.w
   d5288:	487fcb92 	.word	0x487fcb92
   d528c:	3fad7dbf 	.word	0x3fad7dbf

000d5290 <_ZN17Adafruit_VEML77009readWhiteEv>:
{
   d5290:	b510      	push	{r4, lr}
   d5292:	4604      	mov	r4, r0
  return normalize(White_Data->read()) * 0.0576; // Unclear if this is the right multiplier
   d5294:	6880      	ldr	r0, [r0, #8]
   d5296:	f7ff ff31 	bl	d50fc <_ZN20Adafruit_I2CRegister4readEv>
   d529a:	ee07 0a90 	vmov	s15, r0
   d529e:	4620      	mov	r0, r4
   d52a0:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d52a4:	f7ff ff97 	bl	d51d6 <_ZN17Adafruit_VEML77009normalizeEf>
   d52a8:	ee10 0a10 	vmov	r0, s0
   d52ac:	f001 fffe 	bl	d72ac <__aeabi_f2d>
   d52b0:	a305      	add	r3, pc, #20	; (adr r3, d52c8 <_ZN17Adafruit_VEML77009readWhiteEv+0x38>)
   d52b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d52b6:	f002 f851 	bl	d735c <__aeabi_dmul>
   d52ba:	f002 fb09 	bl	d78d0 <__aeabi_d2f>
}
   d52be:	ee00 0a10 	vmov	s0, r0
   d52c2:	bd10      	pop	{r4, pc}
   d52c4:	f3af 8000 	nop.w
   d52c8:	487fcb92 	.word	0x487fcb92
   d52cc:	3fad7dbf 	.word	0x3fad7dbf

000d52d0 <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable)
{
  PowerSave_Enable->write(enable);
   d52d0:	6b00      	ldr	r0, [r0, #48]	; 0x30
   d52d2:	f7ff bf42 	b.w	d515a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d52d6 <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
{
   d52d6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d52d8:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   d52da:	200c      	movs	r0, #12
{
   d52dc:	9103      	str	r1, [sp, #12]
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   d52de:	f7fe feda 	bl	d4096 <_Znwj>
   d52e2:	4605      	mov	r5, r0
   d52e4:	b118      	cbz	r0, d52ee <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
   d52e6:	9a03      	ldr	r2, [sp, #12]
   d52e8:	2110      	movs	r1, #16
   d52ea:	f7ff fe3b 	bl	d4f64 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d52ee:	63a5      	str	r5, [r4, #56]	; 0x38
  if (!i2c_dev->begin())
   d52f0:	4628      	mov	r0, r5
   d52f2:	f7ff fe50 	bl	d4f96 <_ZN18Adafruit_I2CDevice5beginEv>
   d52f6:	4605      	mov	r5, r0
   d52f8:	2800      	cmp	r0, #0
   d52fa:	f000 80d2 	beq.w	d54a2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1cc>
  ALS_Config = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
   d52fe:	2010      	movs	r0, #16
   d5300:	f7fe fec9 	bl	d4096 <_Znwj>
   d5304:	4606      	mov	r6, r0
   d5306:	b138      	cbz	r0, d5318 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x42>
   d5308:	2301      	movs	r3, #1
   d530a:	2200      	movs	r2, #0
   d530c:	e9cd 2300 	strd	r2, r3, [sp]
   d5310:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5312:	2302      	movs	r3, #2
   d5314:	f7ff feab 	bl	d506e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5318:	6026      	str	r6, [r4, #0]
  ALS_HighThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
   d531a:	2010      	movs	r0, #16
   d531c:	f7fe febb 	bl	d4096 <_Znwj>
   d5320:	4606      	mov	r6, r0
   d5322:	b138      	cbz	r0, d5334 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x5e>
   d5324:	2300      	movs	r3, #0
   d5326:	2201      	movs	r2, #1
   d5328:	e9cd 3200 	strd	r3, r2, [sp]
   d532c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d532e:	2302      	movs	r3, #2
   d5330:	f7ff fe9d 	bl	d506e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5334:	60e6      	str	r6, [r4, #12]
  ALS_LowThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
   d5336:	2010      	movs	r0, #16
   d5338:	f7fe fead 	bl	d4096 <_Znwj>
   d533c:	4606      	mov	r6, r0
   d533e:	b140      	cbz	r0, d5352 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7c>
   d5340:	2300      	movs	r3, #0
   d5342:	2201      	movs	r2, #1
   d5344:	e9cd 3200 	strd	r3, r2, [sp]
   d5348:	2302      	movs	r3, #2
   d534a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d534c:	461a      	mov	r2, r3
   d534e:	f7ff fe8e 	bl	d506e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5352:	6126      	str	r6, [r4, #16]
  Power_Saving = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
   d5354:	2010      	movs	r0, #16
   d5356:	f7fe fe9e 	bl	d4096 <_Znwj>
   d535a:	4606      	mov	r6, r0
   d535c:	b148      	cbz	r0, d5372 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9c>
   d535e:	2300      	movs	r3, #0
   d5360:	f04f 0e01 	mov.w	lr, #1
   d5364:	e9cd 3e00 	strd	r3, lr, [sp]
   d5368:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d536a:	2302      	movs	r3, #2
   d536c:	2203      	movs	r2, #3
   d536e:	f7ff fe7e 	bl	d506e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5372:	6166      	str	r6, [r4, #20]
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
   d5374:	2010      	movs	r0, #16
   d5376:	f7fe fe8e 	bl	d4096 <_Znwj>
   d537a:	4606      	mov	r6, r0
   d537c:	b148      	cbz	r0, d5392 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbc>
   d537e:	2300      	movs	r3, #0
   d5380:	f04f 0c01 	mov.w	ip, #1
   d5384:	e9cd 3c00 	strd	r3, ip, [sp]
   d5388:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d538a:	2302      	movs	r3, #2
   d538c:	2204      	movs	r2, #4
   d538e:	f7ff fe6e 	bl	d506e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5392:	6066      	str	r6, [r4, #4]
  White_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
   d5394:	2010      	movs	r0, #16
   d5396:	f7fe fe7e 	bl	d4096 <_Znwj>
   d539a:	4606      	mov	r6, r0
   d539c:	b140      	cbz	r0, d53b0 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xda>
   d539e:	2300      	movs	r3, #0
   d53a0:	2101      	movs	r1, #1
   d53a2:	e9cd 3100 	strd	r3, r1, [sp]
   d53a6:	2205      	movs	r2, #5
   d53a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d53aa:	2302      	movs	r3, #2
   d53ac:	f7ff fe5f 	bl	d506e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d53b0:	60a6      	str	r6, [r4, #8]
  Interrupt_Status = new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
   d53b2:	2010      	movs	r0, #16
   d53b4:	f7fe fe6f 	bl	d4096 <_Znwj>
   d53b8:	4606      	mov	r6, r0
   d53ba:	b140      	cbz	r0, d53ce <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xf8>
   d53bc:	2300      	movs	r3, #0
   d53be:	2201      	movs	r2, #1
   d53c0:	e9cd 3200 	strd	r3, r2, [sp]
   d53c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d53c6:	2302      	movs	r3, #2
   d53c8:	2206      	movs	r2, #6
   d53ca:	f7ff fe50 	bl	d506e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d53ce:	61a6      	str	r6, [r4, #24]
  ALS_Shutdown = new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
   d53d0:	2008      	movs	r0, #8
   d53d2:	f7fe fe60 	bl	d4096 <_Znwj>
   d53d6:	4606      	mov	r6, r0
   d53d8:	b120      	cbz	r0, d53e4 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x10e>
   d53da:	6821      	ldr	r1, [r4, #0]
   d53dc:	2300      	movs	r3, #0
   d53de:	2201      	movs	r2, #1
   d53e0:	f7ff fea8 	bl	d5134 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d53e4:	61e6      	str	r6, [r4, #28]
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
   d53e6:	2008      	movs	r0, #8
   d53e8:	f7fe fe55 	bl	d4096 <_Znwj>
   d53ec:	4606      	mov	r6, r0
   d53ee:	b120      	cbz	r0, d53fa <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x124>
   d53f0:	2301      	movs	r3, #1
   d53f2:	6821      	ldr	r1, [r4, #0]
   d53f4:	461a      	mov	r2, r3
   d53f6:	f7ff fe9d 	bl	d5134 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d53fa:	6226      	str	r6, [r4, #32]
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
   d53fc:	2008      	movs	r0, #8
   d53fe:	f7fe fe4a 	bl	d4096 <_Znwj>
   d5402:	4606      	mov	r6, r0
   d5404:	b120      	cbz	r0, d5410 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13a>
   d5406:	6821      	ldr	r1, [r4, #0]
   d5408:	2304      	movs	r3, #4
   d540a:	2202      	movs	r2, #2
   d540c:	f7ff fe92 	bl	d5134 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d5410:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
   d5412:	2008      	movs	r0, #8
   d5414:	f7fe fe3f 	bl	d4096 <_Znwj>
   d5418:	4606      	mov	r6, r0
   d541a:	b120      	cbz	r0, d5426 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x150>
   d541c:	6821      	ldr	r1, [r4, #0]
   d541e:	2306      	movs	r3, #6
   d5420:	2204      	movs	r2, #4
   d5422:	f7ff fe87 	bl	d5134 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d5426:	62a6      	str	r6, [r4, #40]	; 0x28
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
   d5428:	2008      	movs	r0, #8
   d542a:	f7fe fe34 	bl	d4096 <_Znwj>
   d542e:	4606      	mov	r6, r0
   d5430:	b120      	cbz	r0, d543c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x166>
   d5432:	6821      	ldr	r1, [r4, #0]
   d5434:	230b      	movs	r3, #11
   d5436:	2202      	movs	r2, #2
   d5438:	f7ff fe7c 	bl	d5134 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d543c:	62e6      	str	r6, [r4, #44]	; 0x2c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
   d543e:	2008      	movs	r0, #8
   d5440:	f7fe fe29 	bl	d4096 <_Znwj>
   d5444:	4606      	mov	r6, r0
   d5446:	b120      	cbz	r0, d5452 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17c>
   d5448:	6961      	ldr	r1, [r4, #20]
   d544a:	2300      	movs	r3, #0
   d544c:	2201      	movs	r2, #1
   d544e:	f7ff fe71 	bl	d5134 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d5452:	6326      	str	r6, [r4, #48]	; 0x30
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   d5454:	2008      	movs	r0, #8
   d5456:	f7fe fe1e 	bl	d4096 <_Znwj>
   d545a:	4606      	mov	r6, r0
   d545c:	b120      	cbz	r0, d5468 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x192>
   d545e:	6961      	ldr	r1, [r4, #20]
   d5460:	2301      	movs	r3, #1
   d5462:	2202      	movs	r2, #2
   d5464:	f7ff fe66 	bl	d5134 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
  enable(false);
   d5468:	2100      	movs	r1, #0
   d546a:	4620      	mov	r0, r4
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   d546c:	6366      	str	r6, [r4, #52]	; 0x34
  enable(false);
   d546e:	f7ff fe95 	bl	d519c <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
   d5472:	2100      	movs	r1, #0
   d5474:	4620      	mov	r0, r4
   d5476:	f7ff fe96 	bl	d51a6 <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
   d547a:	2100      	movs	r1, #0
   d547c:	4620      	mov	r0, r4
   d547e:	f7ff fe95 	bl	d51ac <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1);
   d5482:	2100      	movs	r1, #0
   d5484:	4620      	mov	r0, r4
   d5486:	f7ff fe9d 	bl	d51c4 <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
   d548a:	2100      	movs	r1, #0
   d548c:	4620      	mov	r0, r4
   d548e:	f7ff fe90 	bl	d51b2 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  powerSaveEnable(false);
   d5492:	2100      	movs	r1, #0
   d5494:	4620      	mov	r0, r4
   d5496:	f7ff ff1b 	bl	d52d0 <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
   d549a:	2101      	movs	r1, #1
   d549c:	4620      	mov	r0, r4
   d549e:	f7ff fe7d 	bl	d519c <_ZN17Adafruit_VEML77006enableEb>
}
   d54a2:	4628      	mov	r0, r5
   d54a4:	b004      	add	sp, #16
   d54a6:	bd70      	pop	{r4, r5, r6, pc}

000d54a8 <_ZN17Adafruit_VEML770015setLowThresholdEt>:
 *    @brief Assign the low threshold register data
 *    @param value The 16-bit data to write to VEML7700_ALS_THREHOLD_LOW
 */
void Adafruit_VEML7700::setLowThreshold(uint16_t value)
{
  ALS_LowThreshold->write(value);
   d54a8:	6900      	ldr	r0, [r0, #16]
   d54aa:	2200      	movs	r2, #0
   d54ac:	f7ff bdf9 	b.w	d50a2 <_ZN20Adafruit_I2CRegister5writeEmh>

000d54b0 <_ZN17Adafruit_VEML770016setHighThresholdEt>:
 *    @brief Assign the high threshold register data
 *    @param value The 16-bit data to write to VEML7700_ALS_THREHOLD_HIGH
 */
void Adafruit_VEML7700::setHighThreshold(uint16_t value)
{
  ALS_HighThreshold->write(value);
   d54b0:	68c0      	ldr	r0, [r0, #12]
   d54b2:	2200      	movs	r2, #0
   d54b4:	f7ff bdf5 	b.w	d50a2 <_ZN20Adafruit_I2CRegister5writeEmh>

000d54b8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d54b8:	6803      	ldr	r3, [r0, #0]
   d54ba:	b2c9      	uxtb	r1, r1
   d54bc:	689b      	ldr	r3, [r3, #8]
   d54be:	4718      	bx	r3

000d54c0 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d54c0:	4770      	bx	lr

000d54c2 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d54c2:	b538      	push	{r3, r4, r5, lr}
   d54c4:	4605      	mov	r5, r0
   d54c6:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d54c8:	f001 fd58 	bl	d6f7c <_Z19__fetch_global_Wirev>
   d54cc:	7829      	ldrb	r1, [r5, #0]
   d54ce:	f000 ff8b 	bl	d63e8 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d54d2:	f001 fd53 	bl	d6f7c <_Z19__fetch_global_Wirev>
   d54d6:	0a21      	lsrs	r1, r4, #8
   d54d8:	f7ff ffee 	bl	d54b8 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d54dc:	f001 fd4e 	bl	d6f7c <_Z19__fetch_global_Wirev>
   d54e0:	b2e1      	uxtb	r1, r4
   d54e2:	f7ff ffe9 	bl	d54b8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d54e6:	f001 fd49 	bl	d6f7c <_Z19__fetch_global_Wirev>
}
   d54ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d54ee:	f000 bf83 	b.w	d63f8 <_ZN7TwoWire15endTransmissionEv>

000d54f2 <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d54f2:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d54f4:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d54f8:	f7ff ffe3 	bl	d54c2 <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d54fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d5500:	200a      	movs	r0, #10
   d5502:	f000 bb5f 	b.w	d5bc4 <delay>

000d5506 <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d5506:	b538      	push	{r3, r4, r5, lr}
   d5508:	4604      	mov	r4, r0
   d550a:	460d      	mov	r5, r1
  Wire.begin();
   d550c:	f001 fd36 	bl	d6f7c <_Z19__fetch_global_Wirev>
   d5510:	f000 ff38 	bl	d6384 <_ZN7TwoWire5beginEv>
  reset();
   d5514:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d5516:	7025      	strb	r5, [r4, #0]
  reset();
   d5518:	f7ff ffeb 	bl	d54f2 <_ZN14Adafruit_SHT315resetEv>
}
   d551c:	2001      	movs	r0, #1
   d551e:	bd38      	pop	{r3, r4, r5, pc}

000d5520 <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   d5520:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   d5522:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   d5524:	4291      	cmp	r1, r2
   d5526:	d00e      	beq.n	d5546 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d5528:	f811 3b01 	ldrb.w	r3, [r1], #1
   d552c:	4058      	eors	r0, r3
   d552e:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   d5530:	f010 0f80 	tst.w	r0, #128	; 0x80
   d5534:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   d5538:	bf18      	it	ne
   d553a:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   d553e:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   d5540:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   d5542:	d1f5      	bne.n	d5530 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d5544:	e7ee      	b.n	d5524 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   d5546:	4770      	bx	lr

000d5548 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   d5548:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   d554a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   d554e:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   d5550:	f7ff ffb7 	bl	d54c2 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   d5554:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5558:	f000 fb34 	bl	d5bc4 <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d555c:	f001 fd0e 	bl	d6f7c <_Z19__fetch_global_Wirev>
   d5560:	7829      	ldrb	r1, [r5, #0]
   d5562:	2206      	movs	r2, #6
   d5564:	f000 ff3d 	bl	d63e2 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d5568:	f001 fd08 	bl	d6f7c <_Z19__fetch_global_Wirev>
   d556c:	6803      	ldr	r3, [r0, #0]
   d556e:	691b      	ldr	r3, [r3, #16]
   d5570:	4798      	blx	r3
   d5572:	2806      	cmp	r0, #6
   d5574:	d14b      	bne.n	d560e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
   d5576:	466e      	mov	r6, sp
   d5578:	4604      	mov	r4, r0
    readbuffer[i] = Wire.read();
   d557a:	f001 fcff 	bl	d6f7c <_Z19__fetch_global_Wirev>
   d557e:	6803      	ldr	r3, [r0, #0]
   d5580:	695b      	ldr	r3, [r3, #20]
   d5582:	4798      	blx	r3
   d5584:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<6; i++) {
   d5586:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   d558a:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   d558e:	4669      	mov	r1, sp
   d5590:	d1f3      	bne.n	d557a <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d5592:	2202      	movs	r2, #2
   d5594:	4628      	mov	r0, r5
   d5596:	f7ff ffc3 	bl	d5520 <_ZN14Adafruit_SHT314crc8EPKhi>
   d559a:	f89d 6002 	ldrb.w	r6, [sp, #2]
   d559e:	4286      	cmp	r6, r0
   d55a0:	d135      	bne.n	d560e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d55a2:	2202      	movs	r2, #2
   d55a4:	f10d 0103 	add.w	r1, sp, #3
   d55a8:	4628      	mov	r0, r5
   d55aa:	f7ff ffb9 	bl	d5520 <_ZN14Adafruit_SHT314crc8EPKhi>
   d55ae:	f89d 6005 	ldrb.w	r6, [sp, #5]
   d55b2:	4286      	cmp	r6, r0
   d55b4:	d12b      	bne.n	d560e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  double stemp = ST;
   d55b6:	f8bd 0000 	ldrh.w	r0, [sp]
   d55ba:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   d55be:	ba40      	rev16	r0, r0
   d55c0:	b280      	uxth	r0, r0
   d55c2:	f001 fe51 	bl	d7268 <__aeabi_ui2d>
  stemp *= 175;
   d55c6:	a318      	add	r3, pc, #96	; (adr r3, d5628 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d55c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d55cc:	f001 fec6 	bl	d735c <__aeabi_dmul>
  stemp /= 0xffff;
   d55d0:	a311      	add	r3, pc, #68	; (adr r3, d5618 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d55d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d55d6:	f001 ffeb 	bl	d75b0 <__aeabi_ddiv>
  stemp = -45 + stemp;
   d55da:	4b11      	ldr	r3, [pc, #68]	; (d5620 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d55dc:	2200      	movs	r2, #0
   d55de:	f001 fd05 	bl	d6fec <__aeabi_dsub>
  temp = stemp;
   d55e2:	f002 f975 	bl	d78d0 <__aeabi_d2f>
   d55e6:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   d55e8:	ba60      	rev16	r0, r4
   d55ea:	b280      	uxth	r0, r0
   d55ec:	f001 fe3c 	bl	d7268 <__aeabi_ui2d>
  shum *= 100;
   d55f0:	4b0c      	ldr	r3, [pc, #48]	; (d5624 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d55f2:	2200      	movs	r2, #0
   d55f4:	f001 feb2 	bl	d735c <__aeabi_dmul>
  shum /= 0xFFFF;
   d55f8:	a307      	add	r3, pc, #28	; (adr r3, d5618 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d55fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d55fe:	f001 ffd7 	bl	d75b0 <__aeabi_ddiv>
  humidity = shum;
   d5602:	f002 f965 	bl	d78d0 <__aeabi_d2f>
   d5606:	6068      	str	r0, [r5, #4]
  return true;
   d5608:	2001      	movs	r0, #1
}
   d560a:	b002      	add	sp, #8
   d560c:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d560e:	2000      	movs	r0, #0
   d5610:	e7fb      	b.n	d560a <_ZN14Adafruit_SHT3111readTempHumEv+0xc2>
   d5612:	bf00      	nop
   d5614:	f3af 8000 	nop.w
   d5618:	00000000 	.word	0x00000000
   d561c:	40efffe0 	.word	0x40efffe0
   d5620:	40468000 	.word	0x40468000
   d5624:	40590000 	.word	0x40590000
   d5628:	00000000 	.word	0x00000000
   d562c:	4065e000 	.word	0x4065e000

000d5630 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   d5630:	b510      	push	{r4, lr}
   d5632:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5634:	f7ff ff88 	bl	d5548 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5638:	b110      	cbz	r0, d5640 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   d563a:	ed94 0a02 	vldr	s0, [r4, #8]
}
   d563e:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d5640:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5648 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   d5644:	e7fb      	b.n	d563e <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   d5646:	bf00      	nop
   d5648:	7fc00000 	.word	0x7fc00000

000d564c <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   d564c:	b510      	push	{r4, lr}
   d564e:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5650:	f7ff ff7a 	bl	d5548 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5654:	b110      	cbz	r0, d565c <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   d5656:	ed94 0a01 	vldr	s0, [r4, #4]
}
   d565a:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d565c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5664 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   d5660:	e7fb      	b.n	d565a <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   d5662:	bf00      	nop
   d5664:	7fc00000 	.word	0x7fc00000

000d5668 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <os_mutex_recursive_create+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	00030248 	.word	0x00030248

000d5678 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <os_mutex_recursive_destroy+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	00030248 	.word	0x00030248

000d5688 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <HAL_Feature_Set+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	00030234 	.word	0x00030234

000d5698 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <HAL_RNG_GetRandomNumber+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	685b      	ldr	r3, [r3, #4]
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	00030218 	.word	0x00030218

000d56a8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	695b      	ldr	r3, [r3, #20]
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	bd08      	pop	{r3, pc}
   d56b4:	00030218 	.word	0x00030218

000d56b8 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d56b8:	b508      	push	{r3, lr}
   d56ba:	4b02      	ldr	r3, [pc, #8]	; (d56c4 <HAL_EEPROM_Init+0xc>)
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56c0:	9301      	str	r3, [sp, #4]
   d56c2:	bd08      	pop	{r3, pc}
   d56c4:	00030218 	.word	0x00030218

000d56c8 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <HAL_EEPROM_Write+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	00030218 	.word	0x00030218

000d56d8 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <HAL_EEPROM_Get+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	00030218 	.word	0x00030218

000d56e8 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <HAL_EEPROM_Put+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	00030218 	.word	0x00030218

000d56f8 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <hal_rtc_time_is_valid+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	00030218 	.word	0x00030218

000d5708 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <hal_timer_millis+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	00030218 	.word	0x00030218

000d5718 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <hal_rtc_get_time+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	00030218 	.word	0x00030218

000d5728 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b02      	ldr	r3, [pc, #8]	; (d5734 <HAL_Pin_Mode+0xc>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	689b      	ldr	r3, [r3, #8]
   d5730:	9301      	str	r3, [sp, #4]
   d5732:	bd08      	pop	{r3, pc}
   d5734:	0003022c 	.word	0x0003022c

000d5738 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5738:	b508      	push	{r3, lr}
   d573a:	4b02      	ldr	r3, [pc, #8]	; (d5744 <HAL_Get_Pin_Mode+0xc>)
   d573c:	681b      	ldr	r3, [r3, #0]
   d573e:	68db      	ldr	r3, [r3, #12]
   d5740:	9301      	str	r3, [sp, #4]
   d5742:	bd08      	pop	{r3, pc}
   d5744:	0003022c 	.word	0x0003022c

000d5748 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <HAL_GPIO_Write+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	691b      	ldr	r3, [r3, #16]
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	0003022c 	.word	0x0003022c

000d5758 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b02      	ldr	r3, [pc, #8]	; (d5764 <hal_i2c_begin+0xc>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	68db      	ldr	r3, [r3, #12]
   d5760:	9301      	str	r3, [sp, #4]
   d5762:	bd08      	pop	{r3, pc}
   d5764:	00030228 	.word	0x00030228

000d5768 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5768:	b508      	push	{r3, lr}
   d576a:	4b02      	ldr	r3, [pc, #8]	; (d5774 <hal_i2c_begin_transmission+0xc>)
   d576c:	681b      	ldr	r3, [r3, #0]
   d576e:	699b      	ldr	r3, [r3, #24]
   d5770:	9301      	str	r3, [sp, #4]
   d5772:	bd08      	pop	{r3, pc}
   d5774:	00030228 	.word	0x00030228

000d5778 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5778:	b508      	push	{r3, lr}
   d577a:	4b02      	ldr	r3, [pc, #8]	; (d5784 <hal_i2c_end_transmission+0xc>)
   d577c:	681b      	ldr	r3, [r3, #0]
   d577e:	69db      	ldr	r3, [r3, #28]
   d5780:	9301      	str	r3, [sp, #4]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	00030228 	.word	0x00030228

000d5788 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b02      	ldr	r3, [pc, #8]	; (d5794 <hal_i2c_write+0xc>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	6a1b      	ldr	r3, [r3, #32]
   d5790:	9301      	str	r3, [sp, #4]
   d5792:	bd08      	pop	{r3, pc}
   d5794:	00030228 	.word	0x00030228

000d5798 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <hal_i2c_available+0xc>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	00030228 	.word	0x00030228

000d57a8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b02      	ldr	r3, [pc, #8]	; (d57b4 <hal_i2c_read+0xc>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d57b0:	9301      	str	r3, [sp, #4]
   d57b2:	bd08      	pop	{r3, pc}
   d57b4:	00030228 	.word	0x00030228

000d57b8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d57b8:	b508      	push	{r3, lr}
   d57ba:	4b02      	ldr	r3, [pc, #8]	; (d57c4 <hal_i2c_peek+0xc>)
   d57bc:	681b      	ldr	r3, [r3, #0]
   d57be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57c0:	9301      	str	r3, [sp, #4]
   d57c2:	bd08      	pop	{r3, pc}
   d57c4:	00030228 	.word	0x00030228

000d57c8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d57c8:	b508      	push	{r3, lr}
   d57ca:	4b02      	ldr	r3, [pc, #8]	; (d57d4 <hal_i2c_flush+0xc>)
   d57cc:	681b      	ldr	r3, [r3, #0]
   d57ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d57d0:	9301      	str	r3, [sp, #4]
   d57d2:	bd08      	pop	{r3, pc}
   d57d4:	00030228 	.word	0x00030228

000d57d8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d57d8:	b508      	push	{r3, lr}
   d57da:	4b02      	ldr	r3, [pc, #8]	; (d57e4 <hal_i2c_is_enabled+0xc>)
   d57dc:	681b      	ldr	r3, [r3, #0]
   d57de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d57e0:	9301      	str	r3, [sp, #4]
   d57e2:	bd08      	pop	{r3, pc}
   d57e4:	00030228 	.word	0x00030228

000d57e8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d57e8:	b508      	push	{r3, lr}
   d57ea:	4b02      	ldr	r3, [pc, #8]	; (d57f4 <hal_i2c_init+0xc>)
   d57ec:	681b      	ldr	r3, [r3, #0]
   d57ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d57f0:	9301      	str	r3, [sp, #4]
   d57f2:	bd08      	pop	{r3, pc}
   d57f4:	00030228 	.word	0x00030228

000d57f8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d57f8:	b508      	push	{r3, lr}
   d57fa:	4b02      	ldr	r3, [pc, #8]	; (d5804 <hal_i2c_request_ex+0xc>)
   d57fc:	681b      	ldr	r3, [r3, #0]
   d57fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5800:	9301      	str	r3, [sp, #4]
   d5802:	bd08      	pop	{r3, pc}
   d5804:	00030228 	.word	0x00030228

000d5808 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d5808:	b508      	push	{r3, lr}
   d580a:	4b02      	ldr	r3, [pc, #8]	; (d5814 <inet_inet_ntop+0xc>)
   d580c:	681b      	ldr	r3, [r3, #0]
   d580e:	695b      	ldr	r3, [r3, #20]
   d5810:	9301      	str	r3, [sp, #4]
   d5812:	bd08      	pop	{r3, pc}
   d5814:	00030264 	.word	0x00030264

000d5818 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5818:	b508      	push	{r3, lr}
   d581a:	4b02      	ldr	r3, [pc, #8]	; (d5824 <netdb_freeaddrinfo+0xc>)
   d581c:	681b      	ldr	r3, [r3, #0]
   d581e:	689b      	ldr	r3, [r3, #8]
   d5820:	9301      	str	r3, [sp, #4]
   d5822:	bd08      	pop	{r3, pc}
   d5824:	00030268 	.word	0x00030268

000d5828 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5828:	b508      	push	{r3, lr}
   d582a:	4b02      	ldr	r3, [pc, #8]	; (d5834 <netdb_getaddrinfo+0xc>)
   d582c:	681b      	ldr	r3, [r3, #0]
   d582e:	68db      	ldr	r3, [r3, #12]
   d5830:	9301      	str	r3, [sp, #4]
   d5832:	bd08      	pop	{r3, pc}
   d5834:	00030268 	.word	0x00030268

000d5838 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5838:	b508      	push	{r3, lr}
   d583a:	4b02      	ldr	r3, [pc, #8]	; (d5844 <hal_spi_init+0xc>)
   d583c:	681b      	ldr	r3, [r3, #0]
   d583e:	69db      	ldr	r3, [r3, #28]
   d5840:	9301      	str	r3, [sp, #4]
   d5842:	bd08      	pop	{r3, pc}
   d5844:	00030230 	.word	0x00030230

000d5848 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b02      	ldr	r3, [pc, #8]	; (d5854 <hal_spi_is_enabled+0xc>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	6a1b      	ldr	r3, [r3, #32]
   d5850:	9301      	str	r3, [sp, #4]
   d5852:	bd08      	pop	{r3, pc}
   d5854:	00030230 	.word	0x00030230

000d5858 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5858:	b508      	push	{r3, lr}
   d585a:	4b02      	ldr	r3, [pc, #8]	; (d5864 <hal_usart_init+0xc>)
   d585c:	681b      	ldr	r3, [r3, #0]
   d585e:	681b      	ldr	r3, [r3, #0]
   d5860:	9301      	str	r3, [sp, #4]
   d5862:	bd08      	pop	{r3, pc}
   d5864:	0003023c 	.word	0x0003023c

000d5868 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5868:	b508      	push	{r3, lr}
   d586a:	4b02      	ldr	r3, [pc, #8]	; (d5874 <hal_usart_write+0xc>)
   d586c:	681b      	ldr	r3, [r3, #0]
   d586e:	68db      	ldr	r3, [r3, #12]
   d5870:	9301      	str	r3, [sp, #4]
   d5872:	bd08      	pop	{r3, pc}
   d5874:	0003023c 	.word	0x0003023c

000d5878 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5878:	b508      	push	{r3, lr}
   d587a:	4b02      	ldr	r3, [pc, #8]	; (d5884 <hal_usart_available+0xc>)
   d587c:	681b      	ldr	r3, [r3, #0]
   d587e:	691b      	ldr	r3, [r3, #16]
   d5880:	9301      	str	r3, [sp, #4]
   d5882:	bd08      	pop	{r3, pc}
   d5884:	0003023c 	.word	0x0003023c

000d5888 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5888:	b508      	push	{r3, lr}
   d588a:	4b02      	ldr	r3, [pc, #8]	; (d5894 <hal_usart_read+0xc>)
   d588c:	681b      	ldr	r3, [r3, #0]
   d588e:	695b      	ldr	r3, [r3, #20]
   d5890:	9301      	str	r3, [sp, #4]
   d5892:	bd08      	pop	{r3, pc}
   d5894:	0003023c 	.word	0x0003023c

000d5898 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5898:	b508      	push	{r3, lr}
   d589a:	4b02      	ldr	r3, [pc, #8]	; (d58a4 <hal_usart_peek+0xc>)
   d589c:	681b      	ldr	r3, [r3, #0]
   d589e:	699b      	ldr	r3, [r3, #24]
   d58a0:	9301      	str	r3, [sp, #4]
   d58a2:	bd08      	pop	{r3, pc}
   d58a4:	0003023c 	.word	0x0003023c

000d58a8 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <hal_usart_flush+0xc>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	69db      	ldr	r3, [r3, #28]
   d58b0:	9301      	str	r3, [sp, #4]
   d58b2:	bd08      	pop	{r3, pc}
   d58b4:	0003023c 	.word	0x0003023c

000d58b8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d58b8:	b508      	push	{r3, lr}
   d58ba:	4b02      	ldr	r3, [pc, #8]	; (d58c4 <hal_usart_is_enabled+0xc>)
   d58bc:	681b      	ldr	r3, [r3, #0]
   d58be:	6a1b      	ldr	r3, [r3, #32]
   d58c0:	9301      	str	r3, [sp, #4]
   d58c2:	bd08      	pop	{r3, pc}
   d58c4:	0003023c 	.word	0x0003023c

000d58c8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d58c8:	b508      	push	{r3, lr}
   d58ca:	4b02      	ldr	r3, [pc, #8]	; (d58d4 <hal_usart_available_data_for_write+0xc>)
   d58cc:	681b      	ldr	r3, [r3, #0]
   d58ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d58d0:	9301      	str	r3, [sp, #4]
   d58d2:	bd08      	pop	{r3, pc}
   d58d4:	0003023c 	.word	0x0003023c

000d58d8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d58d8:	b508      	push	{r3, lr}
   d58da:	4b02      	ldr	r3, [pc, #8]	; (d58e4 <HAL_USB_USART_Init+0xc>)
   d58dc:	681b      	ldr	r3, [r3, #0]
   d58de:	681b      	ldr	r3, [r3, #0]
   d58e0:	9301      	str	r3, [sp, #4]
   d58e2:	bd08      	pop	{r3, pc}
   d58e4:	0003024c 	.word	0x0003024c

000d58e8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d58e8:	b508      	push	{r3, lr}
   d58ea:	4b02      	ldr	r3, [pc, #8]	; (d58f4 <HAL_USB_USART_Begin+0xc>)
   d58ec:	681b      	ldr	r3, [r3, #0]
   d58ee:	685b      	ldr	r3, [r3, #4]
   d58f0:	9301      	str	r3, [sp, #4]
   d58f2:	bd08      	pop	{r3, pc}
   d58f4:	0003024c 	.word	0x0003024c

000d58f8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d58f8:	b508      	push	{r3, lr}
   d58fa:	4b02      	ldr	r3, [pc, #8]	; (d5904 <HAL_USB_USART_Available_Data+0xc>)
   d58fc:	681b      	ldr	r3, [r3, #0]
   d58fe:	691b      	ldr	r3, [r3, #16]
   d5900:	9301      	str	r3, [sp, #4]
   d5902:	bd08      	pop	{r3, pc}
   d5904:	0003024c 	.word	0x0003024c

000d5908 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5908:	b508      	push	{r3, lr}
   d590a:	4b02      	ldr	r3, [pc, #8]	; (d5914 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d590c:	681b      	ldr	r3, [r3, #0]
   d590e:	695b      	ldr	r3, [r3, #20]
   d5910:	9301      	str	r3, [sp, #4]
   d5912:	bd08      	pop	{r3, pc}
   d5914:	0003024c 	.word	0x0003024c

000d5918 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5918:	b508      	push	{r3, lr}
   d591a:	4b02      	ldr	r3, [pc, #8]	; (d5924 <HAL_USB_USART_Receive_Data+0xc>)
   d591c:	681b      	ldr	r3, [r3, #0]
   d591e:	699b      	ldr	r3, [r3, #24]
   d5920:	9301      	str	r3, [sp, #4]
   d5922:	bd08      	pop	{r3, pc}
   d5924:	0003024c 	.word	0x0003024c

000d5928 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5928:	b508      	push	{r3, lr}
   d592a:	4b02      	ldr	r3, [pc, #8]	; (d5934 <HAL_USB_USART_Send_Data+0xc>)
   d592c:	681b      	ldr	r3, [r3, #0]
   d592e:	69db      	ldr	r3, [r3, #28]
   d5930:	9301      	str	r3, [sp, #4]
   d5932:	bd08      	pop	{r3, pc}
   d5934:	0003024c 	.word	0x0003024c

000d5938 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5938:	b508      	push	{r3, lr}
   d593a:	4b02      	ldr	r3, [pc, #8]	; (d5944 <HAL_USB_USART_Flush_Data+0xc>)
   d593c:	681b      	ldr	r3, [r3, #0]
   d593e:	6a1b      	ldr	r3, [r3, #32]
   d5940:	9301      	str	r3, [sp, #4]
   d5942:	bd08      	pop	{r3, pc}
   d5944:	0003024c 	.word	0x0003024c

000d5948 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5948:	b508      	push	{r3, lr}
   d594a:	4b02      	ldr	r3, [pc, #8]	; (d5954 <system_mode+0xc>)
   d594c:	681b      	ldr	r3, [r3, #0]
   d594e:	681b      	ldr	r3, [r3, #0]
   d5950:	9301      	str	r3, [sp, #4]
   d5952:	bd08      	pop	{r3, pc}
   d5954:	00030220 	.word	0x00030220

000d5958 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5958:	b508      	push	{r3, lr}
   d595a:	4b02      	ldr	r3, [pc, #8]	; (d5964 <set_system_mode+0xc>)
   d595c:	681b      	ldr	r3, [r3, #0]
   d595e:	685b      	ldr	r3, [r3, #4]
   d5960:	9301      	str	r3, [sp, #4]
   d5962:	bd08      	pop	{r3, pc}
   d5964:	00030220 	.word	0x00030220

000d5968 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5968:	b508      	push	{r3, lr}
   d596a:	4b02      	ldr	r3, [pc, #8]	; (d5974 <system_delay_ms+0xc>)
   d596c:	681b      	ldr	r3, [r3, #0]
   d596e:	695b      	ldr	r3, [r3, #20]
   d5970:	9301      	str	r3, [sp, #4]
   d5972:	bd08      	pop	{r3, pc}
   d5974:	00030220 	.word	0x00030220

000d5978 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5978:	b508      	push	{r3, lr}
   d597a:	4b02      	ldr	r3, [pc, #8]	; (d5984 <system_thread_set_state+0xc>)
   d597c:	681b      	ldr	r3, [r3, #0]
   d597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5980:	9301      	str	r3, [sp, #4]
   d5982:	bd08      	pop	{r3, pc}
   d5984:	00030220 	.word	0x00030220

000d5988 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d5988:	b508      	push	{r3, lr}
   d598a:	4b02      	ldr	r3, [pc, #8]	; (d5994 <application_thread_current+0xc>)
   d598c:	681b      	ldr	r3, [r3, #0]
   d598e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5990:	9301      	str	r3, [sp, #4]
   d5992:	bd08      	pop	{r3, pc}
   d5994:	00030220 	.word	0x00030220

000d5998 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d5998:	b508      	push	{r3, lr}
   d599a:	4b02      	ldr	r3, [pc, #8]	; (d59a4 <application_thread_invoke+0xc>)
   d599c:	681b      	ldr	r3, [r3, #0]
   d599e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d59a0:	9301      	str	r3, [sp, #4]
   d59a2:	bd08      	pop	{r3, pc}
   d59a4:	00030220 	.word	0x00030220

000d59a8 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d59a8:	b508      	push	{r3, lr}
   d59aa:	4b02      	ldr	r3, [pc, #8]	; (d59b4 <system_thread_get_state+0xc>)
   d59ac:	681b      	ldr	r3, [r3, #0]
   d59ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d59b0:	9301      	str	r3, [sp, #4]
   d59b2:	bd08      	pop	{r3, pc}
   d59b4:	00030220 	.word	0x00030220

000d59b8 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d59b8:	b508      	push	{r3, lr}
   d59ba:	4b03      	ldr	r3, [pc, #12]	; (d59c8 <system_ctrl_set_app_request_handler+0x10>)
   d59bc:	681b      	ldr	r3, [r3, #0]
   d59be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d59c2:	9301      	str	r3, [sp, #4]
   d59c4:	bd08      	pop	{r3, pc}
   d59c6:	0000      	.short	0x0000
   d59c8:	00030220 	.word	0x00030220

000d59cc <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d59cc:	b508      	push	{r3, lr}
   d59ce:	4b03      	ldr	r3, [pc, #12]	; (d59dc <system_ctrl_set_result+0x10>)
   d59d0:	681b      	ldr	r3, [r3, #0]
   d59d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d59d6:	9301      	str	r3, [sp, #4]
   d59d8:	bd08      	pop	{r3, pc}
   d59da:	0000      	.short	0x0000
   d59dc:	00030220 	.word	0x00030220

000d59e0 <system_reset>:
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d59e0:	b508      	push	{r3, lr}
   d59e2:	4b03      	ldr	r3, [pc, #12]	; (d59f0 <system_reset+0x10>)
   d59e4:	681b      	ldr	r3, [r3, #0]
   d59e6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d59ea:	9301      	str	r3, [sp, #4]
   d59ec:	bd08      	pop	{r3, pc}
   d59ee:	0000      	.short	0x0000
   d59f0:	00030220 	.word	0x00030220

000d59f4 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d59f4:	b508      	push	{r3, lr}
   d59f6:	4b02      	ldr	r3, [pc, #8]	; (d5a00 <spark_variable+0xc>)
   d59f8:	681b      	ldr	r3, [r3, #0]
   d59fa:	681b      	ldr	r3, [r3, #0]
   d59fc:	9301      	str	r3, [sp, #4]
   d59fe:	bd08      	pop	{r3, pc}
   d5a00:	00030244 	.word	0x00030244

000d5a04 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d5a04:	b508      	push	{r3, lr}
   d5a06:	4b02      	ldr	r3, [pc, #8]	; (d5a10 <spark_function+0xc>)
   d5a08:	681b      	ldr	r3, [r3, #0]
   d5a0a:	685b      	ldr	r3, [r3, #4]
   d5a0c:	9301      	str	r3, [sp, #4]
   d5a0e:	bd08      	pop	{r3, pc}
   d5a10:	00030244 	.word	0x00030244

000d5a14 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5a14:	b508      	push	{r3, lr}
   d5a16:	4b02      	ldr	r3, [pc, #8]	; (d5a20 <spark_process+0xc>)
   d5a18:	681b      	ldr	r3, [r3, #0]
   d5a1a:	689b      	ldr	r3, [r3, #8]
   d5a1c:	9301      	str	r3, [sp, #4]
   d5a1e:	bd08      	pop	{r3, pc}
   d5a20:	00030244 	.word	0x00030244

000d5a24 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5a24:	b508      	push	{r3, lr}
   d5a26:	4b02      	ldr	r3, [pc, #8]	; (d5a30 <spark_cloud_flag_connect+0xc>)
   d5a28:	681b      	ldr	r3, [r3, #0]
   d5a2a:	68db      	ldr	r3, [r3, #12]
   d5a2c:	9301      	str	r3, [sp, #4]
   d5a2e:	bd08      	pop	{r3, pc}
   d5a30:	00030244 	.word	0x00030244

000d5a34 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5a34:	b508      	push	{r3, lr}
   d5a36:	4b02      	ldr	r3, [pc, #8]	; (d5a40 <spark_cloud_flag_connected+0xc>)
   d5a38:	681b      	ldr	r3, [r3, #0]
   d5a3a:	695b      	ldr	r3, [r3, #20]
   d5a3c:	9301      	str	r3, [sp, #4]
   d5a3e:	bd08      	pop	{r3, pc}
   d5a40:	00030244 	.word	0x00030244

000d5a44 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d5a44:	b508      	push	{r3, lr}
   d5a46:	4b02      	ldr	r3, [pc, #8]	; (d5a50 <spark_deviceID+0xc>)
   d5a48:	681b      	ldr	r3, [r3, #0]
   d5a4a:	69db      	ldr	r3, [r3, #28]
   d5a4c:	9301      	str	r3, [sp, #4]
   d5a4e:	bd08      	pop	{r3, pc}
   d5a50:	00030244 	.word	0x00030244

000d5a54 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d5a54:	b508      	push	{r3, lr}
   d5a56:	4b02      	ldr	r3, [pc, #8]	; (d5a60 <spark_send_event+0xc>)
   d5a58:	681b      	ldr	r3, [r3, #0]
   d5a5a:	6a1b      	ldr	r3, [r3, #32]
   d5a5c:	9301      	str	r3, [sp, #4]
   d5a5e:	bd08      	pop	{r3, pc}
   d5a60:	00030244 	.word	0x00030244

000d5a64 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d5a64:	b508      	push	{r3, lr}
   d5a66:	4b02      	ldr	r3, [pc, #8]	; (d5a70 <spark_subscribe+0xc>)
   d5a68:	681b      	ldr	r3, [r3, #0]
   d5a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5a6c:	9301      	str	r3, [sp, #4]
   d5a6e:	bd08      	pop	{r3, pc}
   d5a70:	00030244 	.word	0x00030244

000d5a74 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d5a74:	b508      	push	{r3, lr}
   d5a76:	4b02      	ldr	r3, [pc, #8]	; (d5a80 <spark_sync_time+0xc>)
   d5a78:	681b      	ldr	r3, [r3, #0]
   d5a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5a7c:	9301      	str	r3, [sp, #4]
   d5a7e:	bd08      	pop	{r3, pc}
   d5a80:	00030244 	.word	0x00030244

000d5a84 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5a84:	b508      	push	{r3, lr}
   d5a86:	4b02      	ldr	r3, [pc, #8]	; (d5a90 <spark_sync_time_pending+0xc>)
   d5a88:	681b      	ldr	r3, [r3, #0]
   d5a8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a8c:	9301      	str	r3, [sp, #4]
   d5a8e:	bd08      	pop	{r3, pc}
   d5a90:	00030244 	.word	0x00030244

000d5a94 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5a94:	b508      	push	{r3, lr}
   d5a96:	4b02      	ldr	r3, [pc, #8]	; (d5aa0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5a98:	681b      	ldr	r3, [r3, #0]
   d5a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5a9c:	9301      	str	r3, [sp, #4]
   d5a9e:	bd08      	pop	{r3, pc}
   d5aa0:	00030244 	.word	0x00030244

000d5aa4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5aa4:	b508      	push	{r3, lr}
   d5aa6:	4b02      	ldr	r3, [pc, #8]	; (d5ab0 <network_connect+0xc>)
   d5aa8:	681b      	ldr	r3, [r3, #0]
   d5aaa:	685b      	ldr	r3, [r3, #4]
   d5aac:	9301      	str	r3, [sp, #4]
   d5aae:	bd08      	pop	{r3, pc}
   d5ab0:	00030240 	.word	0x00030240

000d5ab4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5ab4:	b508      	push	{r3, lr}
   d5ab6:	4b02      	ldr	r3, [pc, #8]	; (d5ac0 <network_connecting+0xc>)
   d5ab8:	681b      	ldr	r3, [r3, #0]
   d5aba:	689b      	ldr	r3, [r3, #8]
   d5abc:	9301      	str	r3, [sp, #4]
   d5abe:	bd08      	pop	{r3, pc}
   d5ac0:	00030240 	.word	0x00030240

000d5ac4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5ac4:	b508      	push	{r3, lr}
   d5ac6:	4b02      	ldr	r3, [pc, #8]	; (d5ad0 <network_disconnect+0xc>)
   d5ac8:	681b      	ldr	r3, [r3, #0]
   d5aca:	68db      	ldr	r3, [r3, #12]
   d5acc:	9301      	str	r3, [sp, #4]
   d5ace:	bd08      	pop	{r3, pc}
   d5ad0:	00030240 	.word	0x00030240

000d5ad4 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5ad4:	b508      	push	{r3, lr}
   d5ad6:	4b02      	ldr	r3, [pc, #8]	; (d5ae0 <network_ready+0xc>)
   d5ad8:	681b      	ldr	r3, [r3, #0]
   d5ada:	691b      	ldr	r3, [r3, #16]
   d5adc:	9301      	str	r3, [sp, #4]
   d5ade:	bd08      	pop	{r3, pc}
   d5ae0:	00030240 	.word	0x00030240

000d5ae4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5ae4:	b508      	push	{r3, lr}
   d5ae6:	4b02      	ldr	r3, [pc, #8]	; (d5af0 <network_on+0xc>)
   d5ae8:	681b      	ldr	r3, [r3, #0]
   d5aea:	695b      	ldr	r3, [r3, #20]
   d5aec:	9301      	str	r3, [sp, #4]
   d5aee:	bd08      	pop	{r3, pc}
   d5af0:	00030240 	.word	0x00030240

000d5af4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5af4:	b508      	push	{r3, lr}
   d5af6:	4b02      	ldr	r3, [pc, #8]	; (d5b00 <network_off+0xc>)
   d5af8:	681b      	ldr	r3, [r3, #0]
   d5afa:	699b      	ldr	r3, [r3, #24]
   d5afc:	9301      	str	r3, [sp, #4]
   d5afe:	bd08      	pop	{r3, pc}
   d5b00:	00030240 	.word	0x00030240

000d5b04 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5b04:	b508      	push	{r3, lr}
   d5b06:	4b02      	ldr	r3, [pc, #8]	; (d5b10 <network_listen+0xc>)
   d5b08:	681b      	ldr	r3, [r3, #0]
   d5b0a:	69db      	ldr	r3, [r3, #28]
   d5b0c:	9301      	str	r3, [sp, #4]
   d5b0e:	bd08      	pop	{r3, pc}
   d5b10:	00030240 	.word	0x00030240

000d5b14 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5b14:	b508      	push	{r3, lr}
   d5b16:	4b02      	ldr	r3, [pc, #8]	; (d5b20 <network_listening+0xc>)
   d5b18:	681b      	ldr	r3, [r3, #0]
   d5b1a:	6a1b      	ldr	r3, [r3, #32]
   d5b1c:	9301      	str	r3, [sp, #4]
   d5b1e:	bd08      	pop	{r3, pc}
   d5b20:	00030240 	.word	0x00030240

000d5b24 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5b24:	b508      	push	{r3, lr}
   d5b26:	4b02      	ldr	r3, [pc, #8]	; (d5b30 <network_set_listen_timeout+0xc>)
   d5b28:	681b      	ldr	r3, [r3, #0]
   d5b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b2c:	9301      	str	r3, [sp, #4]
   d5b2e:	bd08      	pop	{r3, pc}
   d5b30:	00030240 	.word	0x00030240

000d5b34 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5b34:	b508      	push	{r3, lr}
   d5b36:	4b02      	ldr	r3, [pc, #8]	; (d5b40 <network_get_listen_timeout+0xc>)
   d5b38:	681b      	ldr	r3, [r3, #0]
   d5b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5b3c:	9301      	str	r3, [sp, #4]
   d5b3e:	bd08      	pop	{r3, pc}
   d5b40:	00030240 	.word	0x00030240

000d5b44 <malloc>:
#include "newlib_impure.h"
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5b44:	b508      	push	{r3, lr}
   d5b46:	4b02      	ldr	r3, [pc, #8]	; (d5b50 <malloc+0xc>)
   d5b48:	681b      	ldr	r3, [r3, #0]
   d5b4a:	681b      	ldr	r3, [r3, #0]
   d5b4c:	9301      	str	r3, [sp, #4]
   d5b4e:	bd08      	pop	{r3, pc}
   d5b50:	0003021c 	.word	0x0003021c

000d5b54 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5b54:	b508      	push	{r3, lr}
   d5b56:	4b02      	ldr	r3, [pc, #8]	; (d5b60 <free+0xc>)
   d5b58:	681b      	ldr	r3, [r3, #0]
   d5b5a:	685b      	ldr	r3, [r3, #4]
   d5b5c:	9301      	str	r3, [sp, #4]
   d5b5e:	bd08      	pop	{r3, pc}
   d5b60:	0003021c 	.word	0x0003021c

000d5b64 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5b64:	b508      	push	{r3, lr}
   d5b66:	4b02      	ldr	r3, [pc, #8]	; (d5b70 <realloc+0xc>)
   d5b68:	681b      	ldr	r3, [r3, #0]
   d5b6a:	689b      	ldr	r3, [r3, #8]
   d5b6c:	9301      	str	r3, [sp, #4]
   d5b6e:	bd08      	pop	{r3, pc}
   d5b70:	0003021c 	.word	0x0003021c

000d5b74 <siscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d5b74:	b508      	push	{r3, lr}
   d5b76:	4b02      	ldr	r3, [pc, #8]	; (d5b80 <siscanf+0xc>)
   d5b78:	681b      	ldr	r3, [r3, #0]
   d5b7a:	699b      	ldr	r3, [r3, #24]
   d5b7c:	9301      	str	r3, [sp, #4]
   d5b7e:	bd08      	pop	{r3, pc}
   d5b80:	0003021c 	.word	0x0003021c

000d5b84 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5b84:	b508      	push	{r3, lr}
   d5b86:	4b02      	ldr	r3, [pc, #8]	; (d5b90 <snprintf+0xc>)
   d5b88:	681b      	ldr	r3, [r3, #0]
   d5b8a:	69db      	ldr	r3, [r3, #28]
   d5b8c:	9301      	str	r3, [sp, #4]
   d5b8e:	bd08      	pop	{r3, pc}
   d5b90:	0003021c 	.word	0x0003021c

000d5b94 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5b94:	b508      	push	{r3, lr}
   d5b96:	4b02      	ldr	r3, [pc, #8]	; (d5ba0 <abort+0xc>)
   d5b98:	681b      	ldr	r3, [r3, #0]
   d5b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5b9c:	9301      	str	r3, [sp, #4]
   d5b9e:	bd08      	pop	{r3, pc}
   d5ba0:	0003021c 	.word	0x0003021c

000d5ba4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5ba4:	b508      	push	{r3, lr}
   d5ba6:	4b02      	ldr	r3, [pc, #8]	; (d5bb0 <_malloc_r+0xc>)
   d5ba8:	681b      	ldr	r3, [r3, #0]
   d5baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5bac:	9301      	str	r3, [sp, #4]
   d5bae:	bd08      	pop	{r3, pc}
   d5bb0:	0003021c 	.word	0x0003021c

000d5bb4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5bb4:	b508      	push	{r3, lr}
   d5bb6:	4b02      	ldr	r3, [pc, #8]	; (d5bc0 <newlib_impure_ptr_callback+0xc>)
   d5bb8:	681b      	ldr	r3, [r3, #0]
   d5bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5bbc:	9301      	str	r3, [sp, #4]
   d5bbe:	bd08      	pop	{r3, pc}
   d5bc0:	0003021c 	.word	0x0003021c

000d5bc4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5bc4:	2100      	movs	r1, #0
   d5bc6:	f7ff becf 	b.w	d5968 <system_delay_ms>

000d5bca <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5bca:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5bcc:	6883      	ldr	r3, [r0, #8]
   d5bce:	4604      	mov	r4, r0
   d5bd0:	b90b      	cbnz	r3, d5bd6 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5bd2:	f001 fa04 	bl	d6fde <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5bd6:	68c3      	ldr	r3, [r0, #12]
   d5bd8:	4798      	blx	r3
      if (_M_manager)
   d5bda:	68a3      	ldr	r3, [r4, #8]
   d5bdc:	b11b      	cbz	r3, d5be6 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5bde:	2203      	movs	r2, #3
   d5be0:	4621      	mov	r1, r4
   d5be2:	4620      	mov	r0, r4
   d5be4:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5be6:	4620      	mov	r0, r4
   d5be8:	2110      	movs	r1, #16
}
   d5bea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5bee:	f001 b9f2 	b.w	d6fd6 <_ZdlPvj>

000d5bf2 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5bf2:	b510      	push	{r4, lr}
   d5bf4:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5bf6:	6800      	ldr	r0, [r0, #0]
   d5bf8:	b108      	cbz	r0, d5bfe <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5bfa:	f7ff fd3d 	bl	d5678 <os_mutex_recursive_destroy>
    }
   d5bfe:	4620      	mov	r0, r4
   d5c00:	bd10      	pop	{r4, pc}

000d5c02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d5c02:	680b      	ldr	r3, [r1, #0]
   d5c04:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d5c06:	b113      	cbz	r3, d5c0e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5c08:	685a      	ldr	r2, [r3, #4]
   d5c0a:	3201      	adds	r2, #1
   d5c0c:	605a      	str	r2, [r3, #4]
      }
   d5c0e:	4770      	bx	lr

000d5c10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5c10:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5c12:	4c06      	ldr	r4, [pc, #24]	; (d5c2c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5c14:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5c16:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5c18:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5c1a:	f7ff fd25 	bl	d5668 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5c1e:	4620      	mov	r0, r4
   d5c20:	4a03      	ldr	r2, [pc, #12]	; (d5c30 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5c22:	4904      	ldr	r1, [pc, #16]	; (d5c34 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5c24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5c28:	f001 b9d0 	b.w	d6fcc <__aeabi_atexit>
   d5c2c:	2003e5a4 	.word	0x2003e5a4
   d5c30:	2003e400 	.word	0x2003e400
   d5c34:	000d5bf3 	.word	0x000d5bf3

000d5c38 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5c38:	2200      	movs	r2, #0
   d5c3a:	6840      	ldr	r0, [r0, #4]
   d5c3c:	4611      	mov	r1, r2
   d5c3e:	f7ff bf49 	b.w	d5ad4 <network_ready>

000d5c42 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d5c42:	2200      	movs	r2, #0
   d5c44:	6840      	ldr	r0, [r0, #4]
   d5c46:	4611      	mov	r1, r2
   d5c48:	f7ff bf64 	b.w	d5b14 <network_listening>

000d5c4c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5c4c:	2200      	movs	r2, #0
   d5c4e:	6840      	ldr	r0, [r0, #4]
   d5c50:	4611      	mov	r1, r2
   d5c52:	f7ff bf6f 	b.w	d5b34 <network_get_listen_timeout>

000d5c56 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5c56:	6840      	ldr	r0, [r0, #4]
   d5c58:	2200      	movs	r2, #0
   d5c5a:	f7ff bf63 	b.w	d5b24 <network_set_listen_timeout>

000d5c5e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5c5e:	6840      	ldr	r0, [r0, #4]
   d5c60:	2200      	movs	r2, #0
   d5c62:	f081 0101 	eor.w	r1, r1, #1
   d5c66:	f7ff bf4d 	b.w	d5b04 <network_listen>

000d5c6a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5c6a:	2300      	movs	r3, #0
   d5c6c:	6840      	ldr	r0, [r0, #4]
   d5c6e:	461a      	mov	r2, r3
   d5c70:	4619      	mov	r1, r3
   d5c72:	f7ff bf3f 	b.w	d5af4 <network_off>

000d5c76 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5c76:	2300      	movs	r3, #0
   d5c78:	6840      	ldr	r0, [r0, #4]
   d5c7a:	461a      	mov	r2, r3
   d5c7c:	4619      	mov	r1, r3
   d5c7e:	f7ff bf31 	b.w	d5ae4 <network_on>

000d5c82 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5c82:	2200      	movs	r2, #0
   d5c84:	6840      	ldr	r0, [r0, #4]
   d5c86:	4611      	mov	r1, r2
   d5c88:	f7ff bf14 	b.w	d5ab4 <network_connecting>

000d5c8c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5c8c:	6840      	ldr	r0, [r0, #4]
   d5c8e:	2200      	movs	r2, #0
   d5c90:	2102      	movs	r1, #2
   d5c92:	f7ff bf17 	b.w	d5ac4 <network_disconnect>

000d5c96 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5c96:	2300      	movs	r3, #0
   d5c98:	6840      	ldr	r0, [r0, #4]
   d5c9a:	461a      	mov	r2, r3
   d5c9c:	f7ff bf02 	b.w	d5aa4 <network_connect>

000d5ca0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5ca0:	4b08      	ldr	r3, [pc, #32]	; (d5cc4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5ca2:	b510      	push	{r4, lr}
   d5ca4:	2428      	movs	r4, #40	; 0x28
   d5ca6:	4622      	mov	r2, r4
   d5ca8:	4618      	mov	r0, r3
   d5caa:	2100      	movs	r1, #0
   d5cac:	f002 f8fc 	bl	d7ea8 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5cb0:	4b05      	ldr	r3, [pc, #20]	; (d5cc8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d5cb2:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d5cb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5cb8:	6042      	str	r2, [r0, #4]
   d5cba:	2204      	movs	r2, #4
   d5cbc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5cbe:	4a03      	ldr	r2, [pc, #12]	; (d5ccc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5cc0:	601a      	str	r2, [r3, #0]
   d5cc2:	bd10      	pop	{r4, pc}
   d5cc4:	2003e5b0 	.word	0x2003e5b0
   d5cc8:	2003e5a8 	.word	0x2003e5a8
   d5ccc:	000da958 	.word	0x000da958

000d5cd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5cd0:	4770      	bx	lr

000d5cd2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5cd2:	2000      	movs	r0, #0
   d5cd4:	4770      	bx	lr

000d5cd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5cd6:	b510      	push	{r4, lr}
   d5cd8:	2110      	movs	r1, #16
   d5cda:	4604      	mov	r4, r0
   d5cdc:	f001 f97b 	bl	d6fd6 <_ZdlPvj>
   d5ce0:	4620      	mov	r0, r4
   d5ce2:	bd10      	pop	{r4, pc}

000d5ce4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5ce4:	b508      	push	{r3, lr}
      { delete this; }
   d5ce6:	f7ff fff6 	bl	d5cd6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5cea:	bd08      	pop	{r3, pc}

000d5cec <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5cec:	b510      	push	{r4, lr}
      if (_M_manager)
   d5cee:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5cf0:	4604      	mov	r4, r0
      if (_M_manager)
   d5cf2:	b113      	cbz	r3, d5cfa <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5cf4:	2203      	movs	r2, #3
   d5cf6:	4601      	mov	r1, r0
   d5cf8:	4798      	blx	r3
    }
   d5cfa:	4620      	mov	r0, r4
   d5cfc:	bd10      	pop	{r4, pc}

000d5cfe <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5cfe:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5d00:	2200      	movs	r2, #0
   d5d02:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5d06:	6002      	str	r2, [r0, #0]
   d5d08:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5d0a:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d0c:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5d0e:	680c      	ldr	r4, [r1, #0]
   d5d10:	8085      	strh	r5, [r0, #4]
   d5d12:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d14:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5d16:	bd30      	pop	{r4, r5, pc}

000d5d18 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5d18:	b510      	push	{r4, lr}
   d5d1a:	4604      	mov	r4, r0
    free((void*)msg_);
   d5d1c:	6800      	ldr	r0, [r0, #0]
   d5d1e:	f7ff ff19 	bl	d5b54 <free>
}
   d5d22:	4620      	mov	r0, r4
   d5d24:	bd10      	pop	{r4, pc}

000d5d26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5d26:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5d28:	68c4      	ldr	r4, [r0, #12]
   d5d2a:	b1f4      	cbz	r4, d5d6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5d2c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5d2e:	2b02      	cmp	r3, #2
   d5d30:	d103      	bne.n	d5d3a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5d32:	f104 000c 	add.w	r0, r4, #12
   d5d36:	f7ff ffef 	bl	d5d18 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5d3a:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5d3c:	b135      	cbz	r5, d5d4c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5d3e:	4628      	mov	r0, r5
   d5d40:	f7ff ffd4 	bl	d5cec <_ZNSt14_Function_baseD1Ev>
   d5d44:	2110      	movs	r1, #16
   d5d46:	4628      	mov	r0, r5
   d5d48:	f001 f945 	bl	d6fd6 <_ZdlPvj>
   d5d4c:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5d4e:	b135      	cbz	r5, d5d5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5d50:	4628      	mov	r0, r5
   d5d52:	f7ff ffcb 	bl	d5cec <_ZNSt14_Function_baseD1Ev>
   d5d56:	2110      	movs	r1, #16
   d5d58:	4628      	mov	r0, r5
   d5d5a:	f001 f93c 	bl	d6fd6 <_ZdlPvj>
   d5d5e:	4620      	mov	r0, r4
   d5d60:	2114      	movs	r1, #20
   d5d62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5d66:	f001 b936 	b.w	d6fd6 <_ZdlPvj>
   d5d6a:	bd38      	pop	{r3, r4, r5, pc}

000d5d6c <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5d6c:	b510      	push	{r4, lr}
   d5d6e:	b088      	sub	sp, #32
   d5d70:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5d72:	4668      	mov	r0, sp
   d5d74:	f000 fd2f 	bl	d67d6 <_ZN6StringC1EPKc>
    return (*fn)(p);
   d5d78:	4669      	mov	r1, sp
   d5d7a:	a804      	add	r0, sp, #16
   d5d7c:	f000 fd4e 	bl	d681c <_ZN6StringC1ERKS_>
   d5d80:	a804      	add	r0, sp, #16
   d5d82:	47a0      	blx	r4
   d5d84:	4604      	mov	r4, r0
   d5d86:	a804      	add	r0, sp, #16
   d5d88:	f000 fcda 	bl	d6740 <_ZN6StringD1Ev>
    String p(param);
   d5d8c:	4668      	mov	r0, sp
   d5d8e:	f000 fcd7 	bl	d6740 <_ZN6StringD1Ev>
}
   d5d92:	4620      	mov	r0, r4
   d5d94:	b008      	add	sp, #32
   d5d96:	bd10      	pop	{r4, pc}

000d5d98 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5d98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d5d9a:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d5d9c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d5da0:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d5da2:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5da4:	461a      	mov	r2, r3
   d5da6:	4669      	mov	r1, sp
   d5da8:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d5daa:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d5dae:	f8ad 4000 	strh.w	r4, [sp]
   d5db2:	f7ff fe27 	bl	d5a04 <spark_function>
}
   d5db6:	b004      	add	sp, #16
   d5db8:	bd10      	pop	{r4, pc}

000d5dba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5dba:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5dbc:	460e      	mov	r6, r1
   d5dbe:	4604      	mov	r4, r0
   d5dc0:	f856 3b04 	ldr.w	r3, [r6], #4
   d5dc4:	9300      	str	r3, [sp, #0]
   d5dc6:	460d      	mov	r5, r1
   d5dc8:	a801      	add	r0, sp, #4
   d5dca:	4631      	mov	r1, r6
   d5dcc:	f7ff ff19 	bl	d5c02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5dd0:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5dd2:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5dd4:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5dd6:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5dd8:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5dda:	2300      	movs	r3, #0
   d5ddc:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5dde:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5de0:	f7fe fa30 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5de4:	4630      	mov	r0, r6
   d5de6:	f7fe fa2d 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5dea:	4628      	mov	r0, r5
   d5dec:	2108      	movs	r1, #8
   d5dee:	f001 f8f2 	bl	d6fd6 <_ZdlPvj>
        return p;
    }
   d5df2:	4620      	mov	r0, r4
   d5df4:	b002      	add	sp, #8
   d5df6:	bd70      	pop	{r4, r5, r6, pc}

000d5df8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5df8:	b513      	push	{r0, r1, r4, lr}
   d5dfa:	460b      	mov	r3, r1
   d5dfc:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5dfe:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5e02:	466c      	mov	r4, sp
   d5e04:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5e08:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5e0c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5e10:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5e14:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5e18:	b002      	add	sp, #8
   d5e1a:	bd10      	pop	{r4, pc}

000d5e1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d5e1c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5e1e:	b510      	push	{r4, lr}
      if (_M_empty())
   d5e20:	b90a      	cbnz	r2, d5e26 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5e22:	f001 f8dc 	bl	d6fde <_ZSt25__throw_bad_function_callv>
    }
   d5e26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e2a:	68c3      	ldr	r3, [r0, #12]
   d5e2c:	4718      	bx	r3

000d5e2e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5e2e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5e30:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5e32:	f100 0110 	add.w	r1, r0, #16
   d5e36:	f7ff fff1 	bl	d5e1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5e3a:	bd08      	pop	{r3, pc}

000d5e3c <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5e3c:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5e3e:	b510      	push	{r4, lr}
      if (_M_empty())
   d5e40:	b90a      	cbnz	r2, d5e46 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5e42:	f001 f8cc 	bl	d6fde <_ZSt25__throw_bad_function_callv>
    }
   d5e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5e4a:	68c3      	ldr	r3, [r0, #12]
   d5e4c:	4718      	bx	r3

000d5e4e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5e4e:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5e50:	6800      	ldr	r0, [r0, #0]
   d5e52:	f100 0110 	add.w	r1, r0, #16
   d5e56:	f7ff fff1 	bl	d5e3c <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5e5a:	bd08      	pop	{r3, pc}

000d5e5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5e5c:	b538      	push	{r3, r4, r5, lr}
   d5e5e:	2300      	movs	r3, #0
   d5e60:	4604      	mov	r4, r0
   d5e62:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e64:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5e66:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e68:	f7fe f915 	bl	d4096 <_Znwj>
   d5e6c:	b128      	cbz	r0, d5e7a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5e6e:	2301      	movs	r3, #1
   d5e70:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5e74:	4b02      	ldr	r3, [pc, #8]	; (d5e80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5e76:	6003      	str	r3, [r0, #0]
   d5e78:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5e7a:	6020      	str	r0, [r4, #0]
	}
   d5e7c:	4620      	mov	r0, r4
   d5e7e:	bd38      	pop	{r3, r4, r5, pc}
   d5e80:	000da98c 	.word	0x000da98c

000d5e84 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5e84:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5e86:	2300      	movs	r3, #0
   d5e88:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5e8a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5e8c:	4604      	mov	r4, r0
   d5e8e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5e90:	b12b      	cbz	r3, d5e9e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5e92:	2202      	movs	r2, #2
   d5e94:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5e96:	68eb      	ldr	r3, [r5, #12]
   d5e98:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5e9a:	68ab      	ldr	r3, [r5, #8]
   d5e9c:	60a3      	str	r3, [r4, #8]
    }
   d5e9e:	4620      	mov	r0, r4
   d5ea0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5ea4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5ea6:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5ea8:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5eaa:	4668      	mov	r0, sp
   d5eac:	f7ff ff27 	bl	d5cfe <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5eb0:	f04f 0302 	mov.w	r3, #2
   d5eb4:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5eb8:	2a00      	cmp	r2, #0
   d5eba:	d103      	bne.n	d5ec4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5ebc:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5ec0:	2900      	cmp	r1, #0
   d5ec2:	d1f7      	bne.n	d5eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5ec4:	d125      	bne.n	d5f12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d5ec6:	f104 050c 	add.w	r5, r4, #12
   d5eca:	4669      	mov	r1, sp
   d5ecc:	4628      	mov	r0, r5
   d5ece:	f7ff ff16 	bl	d5cfe <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5ed2:	f3bf 8f5b 	dmb	ish
   d5ed6:	2301      	movs	r3, #1
   d5ed8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5eda:	2000      	movs	r0, #0
   d5edc:	f104 0308 	add.w	r3, r4, #8
   d5ee0:	f3bf 8f5b 	dmb	ish
   d5ee4:	e853 6f00 	ldrex	r6, [r3]
   d5ee8:	e843 0200 	strex	r2, r0, [r3]
   d5eec:	2a00      	cmp	r2, #0
   d5eee:	d1f9      	bne.n	d5ee4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5ef0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5ef4:	b16e      	cbz	r6, d5f12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d5ef6:	f7ff fd47 	bl	d5988 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5efa:	b178      	cbz	r0, d5f1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5efc:	4629      	mov	r1, r5
   d5efe:	4630      	mov	r0, r6
   d5f00:	f7ff ff8c 	bl	d5e1c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5f04:	4630      	mov	r0, r6
   d5f06:	f7ff fef1 	bl	d5cec <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5f0a:	2110      	movs	r1, #16
   d5f0c:	4630      	mov	r0, r6
   d5f0e:	f001 f862 	bl	d6fd6 <_ZdlPvj>
        p_->setError(std::move(error));
   d5f12:	4668      	mov	r0, sp
   d5f14:	f7ff ff00 	bl	d5d18 <_ZN8particle5ErrorD1Ev>
    }
   d5f18:	b009      	add	sp, #36	; 0x24
   d5f1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5f1c:	4631      	mov	r1, r6
   d5f1e:	a802      	add	r0, sp, #8
   d5f20:	f7ff ffb0 	bl	d5e84 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5f24:	68e0      	ldr	r0, [r4, #12]
   d5f26:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5f2a:	b108      	cbz	r0, d5f30 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5f2c:	f001 fffa 	bl	d7f24 <strdup>
        type_(type) {
   d5f30:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5f32:	2010      	movs	r0, #16
   d5f34:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5f38:	f7fe f8ad 	bl	d4096 <_Znwj>
   d5f3c:	4605      	mov	r5, r0
   d5f3e:	b1e8      	cbz	r0, d5f7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5f40:	2700      	movs	r7, #0
   d5f42:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f44:	2018      	movs	r0, #24
   d5f46:	f7fe f8a6 	bl	d4096 <_Znwj>
   d5f4a:	4604      	mov	r4, r0
   d5f4c:	b188      	cbz	r0, d5f72 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d5f4e:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5f50:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5f52:	a802      	add	r0, sp, #8
   d5f54:	f7ff ff50 	bl	d5df8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f58:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5f5a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f5c:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5f5e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5f60:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5f62:	a906      	add	r1, sp, #24
   d5f64:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5f66:	60e3      	str	r3, [r4, #12]
   d5f68:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5f6c:	9205      	str	r2, [sp, #20]
   d5f6e:	f7ff fec6 	bl	d5cfe <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d5f72:	4b08      	ldr	r3, [pc, #32]	; (d5f94 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d5f74:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5f76:	4b08      	ldr	r3, [pc, #32]	; (d5f98 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5f78:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5f7a:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5f7c:	a806      	add	r0, sp, #24
   d5f7e:	f7ff fecb 	bl	d5d18 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5f82:	a802      	add	r0, sp, #8
   d5f84:	f7ff feb2 	bl	d5cec <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5f88:	2200      	movs	r2, #0
   d5f8a:	4629      	mov	r1, r5
   d5f8c:	4803      	ldr	r0, [pc, #12]	; (d5f9c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5f8e:	f7ff fd03 	bl	d5998 <application_thread_invoke>
   d5f92:	e7b7      	b.n	d5f04 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5f94:	000d5e2f 	.word	0x000d5e2f
   d5f98:	000d60c5 	.word	0x000d60c5
   d5f9c:	000d5bcb 	.word	0x000d5bcb

000d5fa0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5fa4:	b08a      	sub	sp, #40	; 0x28
   d5fa6:	4605      	mov	r5, r0
   d5fa8:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5fac:	460c      	mov	r4, r1
   d5fae:	4617      	mov	r7, r2
   d5fb0:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5fb2:	f7ff fd3f 	bl	d5a34 <spark_cloud_flag_connected>
   d5fb6:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5fb8:	4682      	mov	sl, r0
   d5fba:	bb38      	cbnz	r0, d600c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5fbc:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5fc0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5fc2:	a905      	add	r1, sp, #20
   d5fc4:	4630      	mov	r0, r6
   d5fc6:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5fca:	f7ff fe98 	bl	d5cfe <_ZN8particle5ErrorC1EOS0_>
   d5fce:	2014      	movs	r0, #20
   d5fd0:	f7fe f861 	bl	d4096 <_Znwj>
   d5fd4:	4604      	mov	r4, r0
   d5fd6:	b148      	cbz	r0, d5fec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5fd8:	2302      	movs	r3, #2
   d5fda:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5fdc:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5fde:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5fe2:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5fe4:	4631      	mov	r1, r6
   d5fe6:	300c      	adds	r0, #12
   d5fe8:	f7ff fe89 	bl	d5cfe <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5fec:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5fee:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5ff0:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5ff4:	f7ff ff32 	bl	d5e5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5ff8:	4630      	mov	r0, r6
   d5ffa:	f7ff fe8d 	bl	d5d18 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5ffe:	a805      	add	r0, sp, #20
   d6000:	f7ff fe8a 	bl	d5d18 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d6004:	4628      	mov	r0, r5
   d6006:	b00a      	add	sp, #40	; 0x28
   d6008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d600c:	230c      	movs	r3, #12
   d600e:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d6012:	2014      	movs	r0, #20
   d6014:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d6018:	9307      	str	r3, [sp, #28]
   d601a:	f7fe f83c 	bl	d4096 <_Znwj>
   d601e:	4601      	mov	r1, r0
   d6020:	b128      	cbz	r0, d602e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d6022:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d6026:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d602a:	f880 a001 	strb.w	sl, [r0, #1]
   d602e:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d6030:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d6032:	f7ff ff13 	bl	d5e5c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d6036:	4b22      	ldr	r3, [pc, #136]	; (d60c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d6038:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d603a:	2008      	movs	r0, #8
   d603c:	f7fe f82b 	bl	d4096 <_Znwj>
   d6040:	4682      	mov	sl, r0
   d6042:	b128      	cbz	r0, d6050 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6044:	9b03      	ldr	r3, [sp, #12]
   d6046:	f840 3b04 	str.w	r3, [r0], #4
   d604a:	a904      	add	r1, sp, #16
   d604c:	f7ff fdd9 	bl	d5c02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6050:	9600      	str	r6, [sp, #0]
   d6052:	fa5f f389 	uxtb.w	r3, r9
   d6056:	4642      	mov	r2, r8
   d6058:	4639      	mov	r1, r7
   d605a:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d605c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6060:	f7ff fcf8 	bl	d5a54 <spark_send_event>
   d6064:	b9b8      	cbnz	r0, d6096 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d6066:	9b03      	ldr	r3, [sp, #12]
   d6068:	785b      	ldrb	r3, [r3, #1]
   d606a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d606e:	b993      	cbnz	r3, d6096 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d6070:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d6074:	a905      	add	r1, sp, #20
   d6076:	a803      	add	r0, sp, #12
   d6078:	9205      	str	r2, [sp, #20]
   d607a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d607e:	f7ff ff11 	bl	d5ea4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d6082:	a805      	add	r0, sp, #20
   d6084:	f7ff fe48 	bl	d5d18 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6088:	a805      	add	r0, sp, #20
   d608a:	9909      	ldr	r1, [sp, #36]	; 0x24
   d608c:	f7ff fe95 	bl	d5dba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d6090:	a806      	add	r0, sp, #24
   d6092:	f7fe f8d7 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6096:	9b03      	ldr	r3, [sp, #12]
   d6098:	9305      	str	r3, [sp, #20]
   d609a:	a904      	add	r1, sp, #16
   d609c:	a806      	add	r0, sp, #24
   d609e:	f7ff fdb0 	bl	d5c02 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d60a2:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d60a4:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d60a6:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d60a8:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d60aa:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d60ac:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d60ae:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d60b0:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d60b2:	f7fe f8c7 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d60b6:	a804      	add	r0, sp, #16
   d60b8:	f7fe f8c4 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d60bc:	e7a2      	b.n	d6004 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d60be:	bf00      	nop
   d60c0:	000d6189 	.word	0x000d6189

000d60c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d60c4:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d60c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d60c8:	4605      	mov	r5, r0
	  switch (__op)
   d60ca:	d007      	beq.n	d60dc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d60cc:	2a03      	cmp	r2, #3
   d60ce:	d018      	beq.n	d6102 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d60d0:	2a01      	cmp	r2, #1
   d60d2:	d101      	bne.n	d60d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d60d4:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d60d6:	6003      	str	r3, [r0, #0]
	}
   d60d8:	2000      	movs	r0, #0
   d60da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d60dc:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d60de:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d60e0:	f7fd ffd9 	bl	d4096 <_Znwj>
   d60e4:	4604      	mov	r4, r0
   d60e6:	b150      	cbz	r0, d60fe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d60e8:	4631      	mov	r1, r6
   d60ea:	f7ff fecb 	bl	d5e84 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d60ee:	6930      	ldr	r0, [r6, #16]
   d60f0:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d60f4:	b108      	cbz	r0, d60fa <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d60f6:	f001 ff15 	bl	d7f24 <strdup>
        type_(type) {
   d60fa:	6120      	str	r0, [r4, #16]
   d60fc:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d60fe:	602c      	str	r4, [r5, #0]
	}
   d6100:	e7ea      	b.n	d60d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6102:	6804      	ldr	r4, [r0, #0]
   d6104:	2c00      	cmp	r4, #0
   d6106:	d0e7      	beq.n	d60d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d6108:	f104 0010 	add.w	r0, r4, #16
   d610c:	f7ff fe04 	bl	d5d18 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d6110:	4620      	mov	r0, r4
   d6112:	f7ff fdeb 	bl	d5cec <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d6116:	2118      	movs	r1, #24
   d6118:	4620      	mov	r0, r4
   d611a:	f000 ff5c 	bl	d6fd6 <_ZdlPvj>
   d611e:	e7db      	b.n	d60d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d6120 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d6120:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6122:	2300      	movs	r3, #0
   d6124:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d6126:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d6128:	4604      	mov	r4, r0
   d612a:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d612c:	b12b      	cbz	r3, d613a <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d612e:	2202      	movs	r2, #2
   d6130:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6132:	68eb      	ldr	r3, [r5, #12]
   d6134:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6136:	68ab      	ldr	r3, [r5, #8]
   d6138:	60a3      	str	r3, [r4, #8]
    }
   d613a:	4620      	mov	r0, r4
   d613c:	bd38      	pop	{r3, r4, r5, pc}

000d613e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d613e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6140:	b570      	push	{r4, r5, r6, lr}
   d6142:	4604      	mov	r4, r0
	  switch (__op)
   d6144:	d007      	beq.n	d6156 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d6146:	2a03      	cmp	r2, #3
   d6148:	d012      	beq.n	d6170 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d614a:	2a01      	cmp	r2, #1
   d614c:	d101      	bne.n	d6152 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d614e:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6150:	6003      	str	r3, [r0, #0]
	}
   d6152:	2000      	movs	r0, #0
   d6154:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6156:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d6158:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d615a:	f7fd ff9c 	bl	d4096 <_Znwj>
   d615e:	4605      	mov	r5, r0
   d6160:	b120      	cbz	r0, d616c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d6162:	4631      	mov	r1, r6
   d6164:	f7ff ffdc 	bl	d6120 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6168:	7c33      	ldrb	r3, [r6, #16]
   d616a:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d616c:	6025      	str	r5, [r4, #0]
	}
   d616e:	e7f0      	b.n	d6152 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d6170:	6804      	ldr	r4, [r0, #0]
   d6172:	2c00      	cmp	r4, #0
   d6174:	d0ed      	beq.n	d6152 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d6176:	4620      	mov	r0, r4
   d6178:	f7ff fdb8 	bl	d5cec <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d617c:	2114      	movs	r1, #20
   d617e:	4620      	mov	r0, r4
   d6180:	f000 ff29 	bl	d6fd6 <_ZdlPvj>
   d6184:	e7e5      	b.n	d6152 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d6188 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6188:	b5f0      	push	{r4, r5, r6, r7, lr}
   d618a:	b089      	sub	sp, #36	; 0x24
   d618c:	4604      	mov	r4, r0
   d618e:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6190:	a801      	add	r0, sp, #4
   d6192:	4611      	mov	r1, r2
   d6194:	f7ff fe11 	bl	d5dba <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6198:	b1a4      	cbz	r4, d61c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d619a:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d619c:	b11d      	cbz	r5, d61a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d619e:	4628      	mov	r0, r5
   d61a0:	f001 fec0 	bl	d7f24 <strdup>
   d61a4:	4605      	mov	r5, r0
   d61a6:	a801      	add	r0, sp, #4
   d61a8:	a903      	add	r1, sp, #12
        type_(type) {
   d61aa:	9503      	str	r5, [sp, #12]
   d61ac:	f8ad 4010 	strh.w	r4, [sp, #16]
   d61b0:	f7ff fe78 	bl	d5ea4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d61b4:	a803      	add	r0, sp, #12
   d61b6:	f7ff fdaf 	bl	d5d18 <_ZN8particle5ErrorD1Ev>
   d61ba:	a802      	add	r0, sp, #8
   d61bc:	f7fe f842 	bl	d4244 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d61c0:	b009      	add	sp, #36	; 0x24
   d61c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d61c4:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d61c6:	2301      	movs	r3, #1
   d61c8:	e8d5 2f4f 	ldrexb	r2, [r5]
   d61cc:	2a00      	cmp	r2, #0
   d61ce:	d103      	bne.n	d61d8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d61d0:	e8c5 3f41 	strexb	r1, r3, [r5]
   d61d4:	2900      	cmp	r1, #0
   d61d6:	d1f7      	bne.n	d61c8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d61d8:	d1ef      	bne.n	d61ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d61da:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d61dc:	f3bf 8f5b 	dmb	ish
   d61e0:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d61e2:	1d2b      	adds	r3, r5, #4
   d61e4:	f3bf 8f5b 	dmb	ish
   d61e8:	e853 6f00 	ldrex	r6, [r3]
   d61ec:	e843 4200 	strex	r2, r4, [r3]
   d61f0:	2a00      	cmp	r2, #0
   d61f2:	d1f9      	bne.n	d61e8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d61f4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d61f8:	2e00      	cmp	r6, #0
   d61fa:	d0de      	beq.n	d61ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d61fc:	4620      	mov	r0, r4
   d61fe:	f7ff fbc3 	bl	d5988 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d6202:	4607      	mov	r7, r0
   d6204:	b160      	cbz	r0, d6220 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6206:	f105 010c 	add.w	r1, r5, #12
   d620a:	4630      	mov	r0, r6
   d620c:	f7ff fe16 	bl	d5e3c <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d6210:	4630      	mov	r0, r6
   d6212:	f7ff fd6b 	bl	d5cec <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d6216:	2110      	movs	r1, #16
   d6218:	4630      	mov	r0, r6
   d621a:	f000 fedc 	bl	d6fd6 <_ZdlPvj>
   d621e:	e7cc      	b.n	d61ba <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6220:	4631      	mov	r1, r6
   d6222:	a803      	add	r0, sp, #12
   d6224:	f7ff ff7c 	bl	d6120 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6228:	7b2b      	ldrb	r3, [r5, #12]
   d622a:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d622e:	2010      	movs	r0, #16
   d6230:	f7fd ff31 	bl	d4096 <_Znwj>
   d6234:	4605      	mov	r5, r0
   d6236:	b1d0      	cbz	r0, d626e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6238:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d623a:	2014      	movs	r0, #20
   d623c:	f7fd ff2b 	bl	d4096 <_Znwj>
   d6240:	4604      	mov	r4, r0
   d6242:	b178      	cbz	r0, d6264 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d6244:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d6246:	4601      	mov	r1, r0
   d6248:	a803      	add	r0, sp, #12
   d624a:	f7ff fdd5 	bl	d5df8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d624e:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6250:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6252:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6254:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d6256:	9205      	str	r2, [sp, #20]
   d6258:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d625a:	60e3      	str	r3, [r4, #12]
   d625c:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6260:	9206      	str	r2, [sp, #24]
   d6262:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d6264:	4b06      	ldr	r3, [pc, #24]	; (d6280 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d6266:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6268:	4b06      	ldr	r3, [pc, #24]	; (d6284 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d626a:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d626c:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d626e:	a803      	add	r0, sp, #12
   d6270:	f7ff fd3c 	bl	d5cec <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6274:	2200      	movs	r2, #0
   d6276:	4629      	mov	r1, r5
   d6278:	4803      	ldr	r0, [pc, #12]	; (d6288 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d627a:	f7ff fb8d 	bl	d5998 <application_thread_invoke>
   d627e:	e7c7      	b.n	d6210 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d6280:	000d5e4f 	.word	0x000d5e4f
   d6284:	000d613f 	.word	0x000d613f
   d6288:	000d5bcb 	.word	0x000d5bcb

000d628c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d628c:	2200      	movs	r2, #0
   d628e:	6840      	ldr	r0, [r0, #4]
   d6290:	4611      	mov	r1, r2
   d6292:	f7ff bc3f 	b.w	d5b14 <network_listening>

000d6296 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6296:	2200      	movs	r2, #0
   d6298:	6840      	ldr	r0, [r0, #4]
   d629a:	4611      	mov	r1, r2
   d629c:	f7ff bc4a 	b.w	d5b34 <network_get_listen_timeout>

000d62a0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d62a0:	6840      	ldr	r0, [r0, #4]
   d62a2:	2200      	movs	r2, #0
   d62a4:	f7ff bc3e 	b.w	d5b24 <network_set_listen_timeout>

000d62a8 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d62a8:	6840      	ldr	r0, [r0, #4]
   d62aa:	2200      	movs	r2, #0
   d62ac:	f081 0101 	eor.w	r1, r1, #1
   d62b0:	f7ff bc28 	b.w	d5b04 <network_listen>

000d62b4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d62b4:	2300      	movs	r3, #0
   d62b6:	6840      	ldr	r0, [r0, #4]
   d62b8:	461a      	mov	r2, r3
   d62ba:	4619      	mov	r1, r3
   d62bc:	f7ff bc1a 	b.w	d5af4 <network_off>

000d62c0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d62c0:	2300      	movs	r3, #0
   d62c2:	6840      	ldr	r0, [r0, #4]
   d62c4:	461a      	mov	r2, r3
   d62c6:	4619      	mov	r1, r3
   d62c8:	f7ff bc0c 	b.w	d5ae4 <network_on>

000d62cc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d62cc:	2200      	movs	r2, #0
   d62ce:	6840      	ldr	r0, [r0, #4]
   d62d0:	4611      	mov	r1, r2
   d62d2:	f7ff bbff 	b.w	d5ad4 <network_ready>

000d62d6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d62d6:	2200      	movs	r2, #0
   d62d8:	6840      	ldr	r0, [r0, #4]
   d62da:	4611      	mov	r1, r2
   d62dc:	f7ff bbea 	b.w	d5ab4 <network_connecting>

000d62e0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d62e0:	6840      	ldr	r0, [r0, #4]
   d62e2:	2200      	movs	r2, #0
   d62e4:	2102      	movs	r1, #2
   d62e6:	f7ff bbed 	b.w	d5ac4 <network_disconnect>

000d62ea <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d62ea:	2300      	movs	r3, #0
   d62ec:	6840      	ldr	r0, [r0, #4]
   d62ee:	461a      	mov	r2, r3
   d62f0:	f7ff bbd8 	b.w	d5aa4 <network_connect>

000d62f4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d62f4:	4b02      	ldr	r3, [pc, #8]	; (d6300 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d62f6:	2203      	movs	r2, #3
   d62f8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d62fa:	4a02      	ldr	r2, [pc, #8]	; (d6304 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d62fc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d62fe:	4770      	bx	lr
   d6300:	2003e5d8 	.word	0x2003e5d8
   d6304:	000da9a8 	.word	0x000da9a8

000d6308 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6308:	4770      	bx	lr

000d630a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d630a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d630c:	4606      	mov	r6, r0
   d630e:	4615      	mov	r5, r2
   d6310:	460c      	mov	r4, r1
   d6312:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6314:	42bc      	cmp	r4, r7
   d6316:	d006      	beq.n	d6326 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6318:	6833      	ldr	r3, [r6, #0]
   d631a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d631e:	689b      	ldr	r3, [r3, #8]
   d6320:	4630      	mov	r0, r6
   d6322:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d6324:	e7f6      	b.n	d6314 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d6326:	4628      	mov	r0, r5
   d6328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d632a <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d632a:	7c00      	ldrb	r0, [r0, #16]
   d632c:	2200      	movs	r2, #0
   d632e:	f7ff ba2b 	b.w	d5788 <hal_i2c_write>

000d6332 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d6332:	7c00      	ldrb	r0, [r0, #16]
   d6334:	2100      	movs	r1, #0
   d6336:	f7ff ba2f 	b.w	d5798 <hal_i2c_available>

000d633a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d633a:	7c00      	ldrb	r0, [r0, #16]
   d633c:	2100      	movs	r1, #0
   d633e:	f7ff ba33 	b.w	d57a8 <hal_i2c_read>

000d6342 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d6342:	7c00      	ldrb	r0, [r0, #16]
   d6344:	2100      	movs	r1, #0
   d6346:	f7ff ba37 	b.w	d57b8 <hal_i2c_peek>

000d634a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d634a:	7c00      	ldrb	r0, [r0, #16]
   d634c:	2100      	movs	r1, #0
   d634e:	f7ff ba3b 	b.w	d57c8 <hal_i2c_flush>

000d6352 <_ZN7TwoWireD0Ev>:
   d6352:	b510      	push	{r4, lr}
   d6354:	2114      	movs	r1, #20
   d6356:	4604      	mov	r4, r0
   d6358:	f000 fe3d 	bl	d6fd6 <_ZdlPvj>
   d635c:	4620      	mov	r0, r4
   d635e:	bd10      	pop	{r4, pc}

000d6360 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6360:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6362:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6366:	4604      	mov	r4, r0
   d6368:	4608      	mov	r0, r1
   d636a:	2100      	movs	r1, #0
   d636c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6370:	4b03      	ldr	r3, [pc, #12]	; (d6380 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d6372:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d6374:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d6376:	4611      	mov	r1, r2
   d6378:	f7ff fa36 	bl	d57e8 <hal_i2c_init>
}
   d637c:	4620      	mov	r0, r4
   d637e:	bd10      	pop	{r4, pc}
   d6380:	000da9dc 	.word	0x000da9dc

000d6384 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d6384:	2300      	movs	r3, #0
   d6386:	7c00      	ldrb	r0, [r0, #16]
   d6388:	461a      	mov	r2, r3
   d638a:	4619      	mov	r1, r3
   d638c:	f7ff b9e4 	b.w	d5758 <hal_i2c_begin>

000d6390 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d6390:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d6392:	2200      	movs	r2, #0
   d6394:	2314      	movs	r3, #20
   d6396:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d639a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d639e:	780b      	ldrb	r3, [r1, #0]
   d63a0:	f88d 3008 	strb.w	r3, [sp, #8]
   d63a4:	684b      	ldr	r3, [r1, #4]
   d63a6:	9303      	str	r3, [sp, #12]
   d63a8:	68cb      	ldr	r3, [r1, #12]
   d63aa:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d63ac:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d63ae:	7a0b      	ldrb	r3, [r1, #8]
   d63b0:	9305      	str	r3, [sp, #20]
   d63b2:	a901      	add	r1, sp, #4
   d63b4:	f7ff fa20 	bl	d57f8 <hal_i2c_request_ex>
}
   d63b8:	b007      	add	sp, #28
   d63ba:	f85d fb04 	ldr.w	pc, [sp], #4

000d63be <_ZN7TwoWire11requestFromEhjh>:
{
   d63be:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d63c0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d63c2:	f88d 1000 	strb.w	r1, [sp]
   d63c6:	f04f 0164 	mov.w	r1, #100	; 0x64
   d63ca:	9103      	str	r1, [sp, #12]
   d63cc:	bf18      	it	ne
   d63ce:	2301      	movne	r3, #1
   d63d0:	4669      	mov	r1, sp
    size_ = size;
   d63d2:	9201      	str	r2, [sp, #4]
   d63d4:	f88d 3008 	strb.w	r3, [sp, #8]
   d63d8:	f7ff ffda 	bl	d6390 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d63dc:	b005      	add	sp, #20
   d63de:	f85d fb04 	ldr.w	pc, [sp], #4

000d63e2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d63e2:	2301      	movs	r3, #1
   d63e4:	f7ff bfeb 	b.w	d63be <_ZN7TwoWire11requestFromEhjh>

000d63e8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d63e8:	7c00      	ldrb	r0, [r0, #16]
   d63ea:	2200      	movs	r2, #0
   d63ec:	f7ff b9bc 	b.w	d5768 <hal_i2c_begin_transmission>

000d63f0 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d63f0:	7c00      	ldrb	r0, [r0, #16]
   d63f2:	2200      	movs	r2, #0
   d63f4:	f7ff b9c0 	b.w	d5778 <hal_i2c_end_transmission>

000d63f8 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d63f8:	2101      	movs	r1, #1
   d63fa:	f7ff bff9 	b.w	d63f0 <_ZN7TwoWire15endTransmissionEh>

000d63fe <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d63fe:	4770      	bx	lr

000d6400 <_ZN9IPAddressD0Ev>:
   d6400:	b510      	push	{r4, lr}
   d6402:	2118      	movs	r1, #24
   d6404:	4604      	mov	r4, r0
   d6406:	f000 fde6 	bl	d6fd6 <_ZdlPvj>
   d640a:	4620      	mov	r0, r4
   d640c:	bd10      	pop	{r4, pc}

000d640e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d640e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6410:	7d03      	ldrb	r3, [r0, #20]
   d6412:	2b06      	cmp	r3, #6
{
   d6414:	b08d      	sub	sp, #52	; 0x34
   d6416:	460e      	mov	r6, r1
   d6418:	f100 0704 	add.w	r7, r0, #4
   d641c:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6420:	d012      	beq.n	d6448 <_ZNK9IPAddress7printToER5Print+0x3a>
   d6422:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6426:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d642a:	220a      	movs	r2, #10
   d642c:	4630      	mov	r0, r6
   d642e:	f000 f94a 	bl	d66c6 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6432:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6434:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6436:	d019      	beq.n	d646c <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6438:	2c00      	cmp	r4, #0
   d643a:	d0f4      	beq.n	d6426 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d643c:	212e      	movs	r1, #46	; 0x2e
   d643e:	4630      	mov	r0, r6
   d6440:	f000 f928 	bl	d6694 <_ZN5Print5printEc>
   d6444:	4404      	add	r4, r0
   d6446:	e7ee      	b.n	d6426 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6448:	232f      	movs	r3, #47	; 0x2f
   d644a:	466a      	mov	r2, sp
   d644c:	4639      	mov	r1, r7
   d644e:	200a      	movs	r0, #10
		buf[0] = 0;
   d6450:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6454:	f7ff f9d8 	bl	d5808 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6458:	4668      	mov	r0, sp
   d645a:	f001 fd80 	bl	d7f5e <strlen>
   d645e:	6833      	ldr	r3, [r6, #0]
   d6460:	4602      	mov	r2, r0
   d6462:	68db      	ldr	r3, [r3, #12]
   d6464:	4669      	mov	r1, sp
   d6466:	4630      	mov	r0, r6
   d6468:	4798      	blx	r3
   d646a:	4604      	mov	r4, r0
    }
    return n;
}
   d646c:	4620      	mov	r0, r4
   d646e:	b00d      	add	sp, #52	; 0x34
   d6470:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6474 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6474:	b510      	push	{r4, lr}
   d6476:	4b05      	ldr	r3, [pc, #20]	; (d648c <_ZN9IPAddressC1Ev+0x18>)
   d6478:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d647a:	2211      	movs	r2, #17
   d647c:	f840 3b04 	str.w	r3, [r0], #4
   d6480:	2100      	movs	r1, #0
   d6482:	f001 fd11 	bl	d7ea8 <memset>
}
   d6486:	4620      	mov	r0, r4
   d6488:	bd10      	pop	{r4, pc}
   d648a:	bf00      	nop
   d648c:	000daa04 	.word	0x000daa04

000d6490 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6490:	4603      	mov	r3, r0
   d6492:	4a07      	ldr	r2, [pc, #28]	; (d64b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6494:	b510      	push	{r4, lr}
   d6496:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d649a:	f101 0210 	add.w	r2, r1, #16
   d649e:	f851 4b04 	ldr.w	r4, [r1], #4
   d64a2:	f843 4b04 	str.w	r4, [r3], #4
   d64a6:	4291      	cmp	r1, r2
   d64a8:	d1f9      	bne.n	d649e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d64aa:	780a      	ldrb	r2, [r1, #0]
   d64ac:	701a      	strb	r2, [r3, #0]
}
   d64ae:	bd10      	pop	{r4, pc}
   d64b0:	000daa04 	.word	0x000daa04

000d64b4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d64b4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d64b6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d64ba:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d64be:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d64c2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d64c6:	2304      	movs	r3, #4
   d64c8:	6041      	str	r1, [r0, #4]
   d64ca:	7503      	strb	r3, [r0, #20]
}
   d64cc:	bd10      	pop	{r4, pc}

000d64ce <_ZN9IPAddressaSEPKh>:
{
   d64ce:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d64d0:	78cb      	ldrb	r3, [r1, #3]
   d64d2:	9300      	str	r3, [sp, #0]
   d64d4:	788b      	ldrb	r3, [r1, #2]
   d64d6:	784a      	ldrb	r2, [r1, #1]
   d64d8:	7809      	ldrb	r1, [r1, #0]
   d64da:	f7ff ffeb 	bl	d64b4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d64de:	b002      	add	sp, #8
   d64e0:	bd10      	pop	{r4, pc}
	...

000d64e4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d64e4:	4b01      	ldr	r3, [pc, #4]	; (d64ec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d64e6:	4a02      	ldr	r2, [pc, #8]	; (d64f0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d64e8:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d64ea:	4770      	bx	lr
   d64ec:	2003e5e0 	.word	0x2003e5e0
   d64f0:	000daa10 	.word	0x000daa10

000d64f4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d64f4:	2300      	movs	r3, #0
   d64f6:	6840      	ldr	r0, [r0, #4]
   d64f8:	461a      	mov	r2, r3
   d64fa:	f7ff bad3 	b.w	d5aa4 <network_connect>

000d64fe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d64fe:	6840      	ldr	r0, [r0, #4]
   d6500:	2200      	movs	r2, #0
   d6502:	2102      	movs	r1, #2
   d6504:	f7ff bade 	b.w	d5ac4 <network_disconnect>

000d6508 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6508:	2200      	movs	r2, #0
   d650a:	6840      	ldr	r0, [r0, #4]
   d650c:	4611      	mov	r1, r2
   d650e:	f7ff bad1 	b.w	d5ab4 <network_connecting>

000d6512 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6512:	2200      	movs	r2, #0
   d6514:	6840      	ldr	r0, [r0, #4]
   d6516:	4611      	mov	r1, r2
   d6518:	f7ff badc 	b.w	d5ad4 <network_ready>

000d651c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d651c:	2300      	movs	r3, #0
   d651e:	6840      	ldr	r0, [r0, #4]
   d6520:	461a      	mov	r2, r3
   d6522:	4619      	mov	r1, r3
   d6524:	f7ff bade 	b.w	d5ae4 <network_on>

000d6528 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6528:	2300      	movs	r3, #0
   d652a:	6840      	ldr	r0, [r0, #4]
   d652c:	461a      	mov	r2, r3
   d652e:	4619      	mov	r1, r3
   d6530:	f7ff bae0 	b.w	d5af4 <network_off>

000d6534 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6534:	6840      	ldr	r0, [r0, #4]
   d6536:	2200      	movs	r2, #0
   d6538:	f081 0101 	eor.w	r1, r1, #1
   d653c:	f7ff bae2 	b.w	d5b04 <network_listen>

000d6540 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6540:	6840      	ldr	r0, [r0, #4]
   d6542:	2200      	movs	r2, #0
   d6544:	f7ff baee 	b.w	d5b24 <network_set_listen_timeout>

000d6548 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6548:	2200      	movs	r2, #0
   d654a:	6840      	ldr	r0, [r0, #4]
   d654c:	4611      	mov	r1, r2
   d654e:	f7ff baf1 	b.w	d5b34 <network_get_listen_timeout>

000d6552 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6552:	2200      	movs	r2, #0
   d6554:	6840      	ldr	r0, [r0, #4]
   d6556:	4611      	mov	r1, r2
   d6558:	f7ff badc 	b.w	d5b14 <network_listening>

000d655c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d655c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6560:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d6562:	b095      	sub	sp, #84	; 0x54
   d6564:	4616      	mov	r6, r2
   d6566:	460d      	mov	r5, r1
   d6568:	4607      	mov	r7, r0
    IPAddress addr;
   d656a:	f7ff ff83 	bl	d6474 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d656e:	4621      	mov	r1, r4
   d6570:	2218      	movs	r2, #24
   d6572:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d6574:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6576:	f001 fc97 	bl	d7ea8 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d657a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d657c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6580:	4621      	mov	r1, r4
   d6582:	466b      	mov	r3, sp
   d6584:	aa0c      	add	r2, sp, #48	; 0x30
   d6586:	4630      	mov	r0, r6
   d6588:	f7ff f94e 	bl	d5828 <netdb_getaddrinfo>
    if (!r) {
   d658c:	4604      	mov	r4, r0
   d658e:	2800      	cmp	r0, #0
   d6590:	d146      	bne.n	d6620 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6592:	4602      	mov	r2, r0
   d6594:	2101      	movs	r1, #1
   d6596:	6868      	ldr	r0, [r5, #4]
   d6598:	f7ff fa9c 	bl	d5ad4 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d659c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d659e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d65a0:	4622      	mov	r2, r4
   d65a2:	6868      	ldr	r0, [r5, #4]
   d65a4:	f7ff fa96 	bl	d5ad4 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d65a8:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d65aa:	4681      	mov	r9, r0
        bool ok = false;
   d65ac:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d65ae:	2e00      	cmp	r6, #0
   d65b0:	d036      	beq.n	d6620 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d65b2:	2900      	cmp	r1, #0
   d65b4:	d134      	bne.n	d6620 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d65b6:	6873      	ldr	r3, [r6, #4]
   d65b8:	2b02      	cmp	r3, #2
   d65ba:	d003      	beq.n	d65c4 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d65bc:	2b0a      	cmp	r3, #10
   d65be:	d00b      	beq.n	d65d8 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d65c0:	69f6      	ldr	r6, [r6, #28]
   d65c2:	e7f4      	b.n	d65ae <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d65c4:	f1b8 0f00 	cmp.w	r8, #0
   d65c8:	d004      	beq.n	d65d4 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d65ca:	6971      	ldr	r1, [r6, #20]
   d65cc:	4638      	mov	r0, r7
   d65ce:	3104      	adds	r1, #4
   d65d0:	f7ff ff7d 	bl	d64ce <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d65d4:	4641      	mov	r1, r8
   d65d6:	e7f3      	b.n	d65c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d65d8:	f1b9 0f00 	cmp.w	r9, #0
   d65dc:	d101      	bne.n	d65e2 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d65de:	4649      	mov	r1, r9
   d65e0:	e7ee      	b.n	d65c0 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d65e2:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d65e4:	2210      	movs	r2, #16
   d65e6:	a801      	add	r0, sp, #4
   d65e8:	f001 fc5e 	bl	d7ea8 <memset>
                    a.v = 6;
   d65ec:	2306      	movs	r3, #6
   d65ee:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d65f2:	ad01      	add	r5, sp, #4
   d65f4:	f104 0308 	add.w	r3, r4, #8
   d65f8:	3418      	adds	r4, #24
   d65fa:	6818      	ldr	r0, [r3, #0]
   d65fc:	6859      	ldr	r1, [r3, #4]
   d65fe:	462a      	mov	r2, r5
   d6600:	c203      	stmia	r2!, {r0, r1}
   d6602:	3308      	adds	r3, #8
   d6604:	42a3      	cmp	r3, r4
   d6606:	4615      	mov	r5, r2
   d6608:	d1f7      	bne.n	d65fa <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d660a:	a901      	add	r1, sp, #4
   d660c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d660e:	ad07      	add	r5, sp, #28
   d6610:	f7ff ff3e 	bl	d6490 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6614:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6616:	1d3c      	adds	r4, r7, #4
   d6618:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d661a:	682b      	ldr	r3, [r5, #0]
   d661c:	7023      	strb	r3, [r4, #0]
   d661e:	e7de      	b.n	d65de <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6620:	9800      	ldr	r0, [sp, #0]
   d6622:	f7ff f8f9 	bl	d5818 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6626:	4638      	mov	r0, r7
   d6628:	b015      	add	sp, #84	; 0x54
   d662a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6630 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6630:	4b02      	ldr	r3, [pc, #8]	; (d663c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6632:	4a03      	ldr	r2, [pc, #12]	; (d6640 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6634:	601a      	str	r2, [r3, #0]
   d6636:	2200      	movs	r2, #0
   d6638:	605a      	str	r2, [r3, #4]

} // spark
   d663a:	4770      	bx	lr
   d663c:	2003e5e4 	.word	0x2003e5e4
   d6640:	000daa1c 	.word	0x000daa1c

000d6644 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6646:	4606      	mov	r6, r0
   d6648:	460d      	mov	r5, r1
  size_t n = 0;
   d664a:	188f      	adds	r7, r1, r2
   d664c:	2400      	movs	r4, #0
  while (size--) {
   d664e:	42bd      	cmp	r5, r7
   d6650:	d00c      	beq.n	d666c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6652:	6833      	ldr	r3, [r6, #0]
   d6654:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6658:	689b      	ldr	r3, [r3, #8]
   d665a:	4630      	mov	r0, r6
   d665c:	4798      	blx	r3
     if (chunk>=0)
   d665e:	1e03      	subs	r3, r0, #0
   d6660:	db01      	blt.n	d6666 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6662:	441c      	add	r4, r3
  while (size--) {
   d6664:	e7f3      	b.n	d664e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6666:	2c00      	cmp	r4, #0
   d6668:	bf08      	it	eq
   d666a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d666c:	4620      	mov	r0, r4
   d666e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6670 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d6670:	b513      	push	{r0, r1, r4, lr}
   d6672:	4604      	mov	r4, r0
    }
   d6674:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6676:	b159      	cbz	r1, d6690 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6678:	9101      	str	r1, [sp, #4]
   d667a:	f001 fc70 	bl	d7f5e <strlen>
   d667e:	6823      	ldr	r3, [r4, #0]
   d6680:	9901      	ldr	r1, [sp, #4]
   d6682:	68db      	ldr	r3, [r3, #12]
   d6684:	4602      	mov	r2, r0
   d6686:	4620      	mov	r0, r4
    }
   d6688:	b002      	add	sp, #8
   d668a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d668e:	4718      	bx	r3
    }
   d6690:	b002      	add	sp, #8
   d6692:	bd10      	pop	{r4, pc}

000d6694 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6694:	6803      	ldr	r3, [r0, #0]
   d6696:	689b      	ldr	r3, [r3, #8]
   d6698:	4718      	bx	r3

000d669a <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d669a:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d669c:	210d      	movs	r1, #13
{
   d669e:	4605      	mov	r5, r0
  size_t n = print('\r');
   d66a0:	f7ff fff8 	bl	d6694 <_ZN5Print5printEc>
  n += print('\n');
   d66a4:	210a      	movs	r1, #10
  size_t n = print('\r');
   d66a6:	4604      	mov	r4, r0
  n += print('\n');
   d66a8:	4628      	mov	r0, r5
   d66aa:	f7ff fff3 	bl	d6694 <_ZN5Print5printEc>
  return n;
}
   d66ae:	4420      	add	r0, r4
   d66b0:	bd38      	pop	{r3, r4, r5, pc}

000d66b2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d66b2:	b538      	push	{r3, r4, r5, lr}
   d66b4:	4605      	mov	r5, r0
  return write(str);
   d66b6:	f7ff ffdb 	bl	d6670 <_ZN5Print5writeEPKc>
   d66ba:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d66bc:	4628      	mov	r0, r5
   d66be:	f7ff ffec 	bl	d669a <_ZN5Print7printlnEv>
  return n;
}
   d66c2:	4420      	add	r0, r4
   d66c4:	bd38      	pop	{r3, r4, r5, pc}

000d66c6 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d66c6:	b530      	push	{r4, r5, lr}
   d66c8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d66ca:	2300      	movs	r3, #0
   d66cc:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d66d0:	2a01      	cmp	r2, #1
   d66d2:	bf98      	it	ls
   d66d4:	220a      	movls	r2, #10
   d66d6:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d66d8:	460d      	mov	r5, r1
   d66da:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d66de:	fb01 5312 	mls	r3, r1, r2, r5
   d66e2:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d66e6:	2b09      	cmp	r3, #9
   d66e8:	bf94      	ite	ls
   d66ea:	3330      	addls	r3, #48	; 0x30
   d66ec:	3337      	addhi	r3, #55	; 0x37
   d66ee:	b2db      	uxtb	r3, r3
  } while(n);
   d66f0:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d66f2:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d66f6:	d9ef      	bls.n	d66d8 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d66f8:	4621      	mov	r1, r4
   d66fa:	f7ff ffb9 	bl	d6670 <_ZN5Print5writeEPKc>
}
   d66fe:	b00b      	add	sp, #44	; 0x2c
   d6700:	bd30      	pop	{r4, r5, pc}

000d6702 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6702:	b510      	push	{r4, lr}
   d6704:	4604      	mov	r4, r0
   d6706:	f7ff faf1 	bl	d5cec <_ZNSt14_Function_baseD1Ev>
   d670a:	4620      	mov	r0, r4
   d670c:	bd10      	pop	{r4, pc}
	...

000d6710 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6710:	4803      	ldr	r0, [pc, #12]	; (d6720 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6712:	4a04      	ldr	r2, [pc, #16]	; (d6724 <_GLOBAL__sub_I_RGB+0x14>)
   d6714:	4904      	ldr	r1, [pc, #16]	; (d6728 <_GLOBAL__sub_I_RGB+0x18>)
   d6716:	2300      	movs	r3, #0
   d6718:	6083      	str	r3, [r0, #8]
   d671a:	f000 bc57 	b.w	d6fcc <__aeabi_atexit>
   d671e:	bf00      	nop
   d6720:	2003e5ec 	.word	0x2003e5ec
   d6724:	2003e400 	.word	0x2003e400
   d6728:	000d6703 	.word	0x000d6703

000d672c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d672c:	b510      	push	{r4, lr}
   d672e:	4604      	mov	r4, r0
   d6730:	4608      	mov	r0, r1
{
    _spi = spi;
   d6732:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d6734:	f7ff f880 	bl	d5838 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6738:	2300      	movs	r3, #0
   d673a:	6063      	str	r3, [r4, #4]
}
   d673c:	4620      	mov	r0, r4
   d673e:	bd10      	pop	{r4, pc}

000d6740 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6740:	b510      	push	{r4, lr}
   d6742:	4604      	mov	r4, r0
{
	free(buffer);
   d6744:	6800      	ldr	r0, [r0, #0]
   d6746:	f7ff fa05 	bl	d5b54 <free>
}
   d674a:	4620      	mov	r0, r4
   d674c:	bd10      	pop	{r4, pc}

000d674e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d674e:	b510      	push	{r4, lr}
   d6750:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6752:	6800      	ldr	r0, [r0, #0]
   d6754:	b108      	cbz	r0, d675a <_ZN6String10invalidateEv+0xc>
   d6756:	f7ff f9fd 	bl	d5b54 <free>
	buffer = NULL;
   d675a:	2300      	movs	r3, #0
	capacity = len = 0;
   d675c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6760:	6023      	str	r3, [r4, #0]
}
   d6762:	bd10      	pop	{r4, pc}

000d6764 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6764:	b538      	push	{r3, r4, r5, lr}
   d6766:	4604      	mov	r4, r0
   d6768:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d676a:	6800      	ldr	r0, [r0, #0]
   d676c:	3101      	adds	r1, #1
   d676e:	f7ff f9f9 	bl	d5b64 <realloc>
	if (newbuffer) {
   d6772:	b110      	cbz	r0, d677a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6774:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6778:	2001      	movs	r0, #1
	}
	return 0;
}
   d677a:	bd38      	pop	{r3, r4, r5, pc}

000d677c <_ZN6String7reserveEj>:
{
   d677c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d677e:	6803      	ldr	r3, [r0, #0]
{
   d6780:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6782:	b123      	cbz	r3, d678e <_ZN6String7reserveEj+0x12>
   d6784:	6843      	ldr	r3, [r0, #4]
   d6786:	428b      	cmp	r3, r1
   d6788:	d301      	bcc.n	d678e <_ZN6String7reserveEj+0x12>
   d678a:	2001      	movs	r0, #1
}
   d678c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d678e:	4620      	mov	r0, r4
   d6790:	f7ff ffe8 	bl	d6764 <_ZN6String12changeBufferEj>
   d6794:	2800      	cmp	r0, #0
   d6796:	d0f9      	beq.n	d678c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6798:	68a3      	ldr	r3, [r4, #8]
   d679a:	2b00      	cmp	r3, #0
   d679c:	d1f5      	bne.n	d678a <_ZN6String7reserveEj+0xe>
   d679e:	6822      	ldr	r2, [r4, #0]
   d67a0:	7013      	strb	r3, [r2, #0]
   d67a2:	e7f2      	b.n	d678a <_ZN6String7reserveEj+0xe>

000d67a4 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d67a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d67a6:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d67a8:	4611      	mov	r1, r2
   d67aa:	9201      	str	r2, [sp, #4]
{
   d67ac:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d67ae:	f7ff ffe5 	bl	d677c <_ZN6String7reserveEj>
   d67b2:	9a01      	ldr	r2, [sp, #4]
   d67b4:	b928      	cbnz	r0, d67c2 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d67b6:	4620      	mov	r0, r4
   d67b8:	f7ff ffc9 	bl	d674e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d67bc:	4620      	mov	r0, r4
   d67be:	b003      	add	sp, #12
   d67c0:	bd30      	pop	{r4, r5, pc}
	len = length;
   d67c2:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d67c4:	4629      	mov	r1, r5
   d67c6:	6820      	ldr	r0, [r4, #0]
   d67c8:	f001 fb60 	bl	d7e8c <memcpy>
	buffer[len] = 0;
   d67cc:	6822      	ldr	r2, [r4, #0]
   d67ce:	68a3      	ldr	r3, [r4, #8]
   d67d0:	2100      	movs	r1, #0
   d67d2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d67d4:	e7f2      	b.n	d67bc <_ZN6String4copyEPKcj+0x18>

000d67d6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d67d6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d67d8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d67da:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d67de:	4604      	mov	r4, r0
	len = 0;
   d67e0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d67e2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d67e4:	b141      	cbz	r1, d67f8 <_ZN6StringC1EPKc+0x22>
   d67e6:	4608      	mov	r0, r1
   d67e8:	9101      	str	r1, [sp, #4]
   d67ea:	f001 fbb8 	bl	d7f5e <strlen>
   d67ee:	9901      	ldr	r1, [sp, #4]
   d67f0:	4602      	mov	r2, r0
   d67f2:	4620      	mov	r0, r4
   d67f4:	f7ff ffd6 	bl	d67a4 <_ZN6String4copyEPKcj>
}
   d67f8:	4620      	mov	r0, r4
   d67fa:	b002      	add	sp, #8
   d67fc:	bd10      	pop	{r4, pc}

000d67fe <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d67fe:	4288      	cmp	r0, r1
{
   d6800:	b510      	push	{r4, lr}
   d6802:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6804:	d005      	beq.n	d6812 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6806:	680b      	ldr	r3, [r1, #0]
   d6808:	b12b      	cbz	r3, d6816 <_ZN6StringaSERKS_+0x18>
   d680a:	688a      	ldr	r2, [r1, #8]
   d680c:	4619      	mov	r1, r3
   d680e:	f7ff ffc9 	bl	d67a4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6812:	4620      	mov	r0, r4
   d6814:	bd10      	pop	{r4, pc}
	else invalidate();
   d6816:	f7ff ff9a 	bl	d674e <_ZN6String10invalidateEv>
   d681a:	e7fa      	b.n	d6812 <_ZN6StringaSERKS_+0x14>

000d681c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d681c:	b510      	push	{r4, lr}
	buffer = NULL;
   d681e:	2300      	movs	r3, #0
String::String(const String &value)
   d6820:	4604      	mov	r4, r0
	capacity = 0;
   d6822:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6826:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6828:	7303      	strb	r3, [r0, #12]
	*this = value;
   d682a:	f7ff ffe8 	bl	d67fe <_ZN6StringaSERKS_>
}
   d682e:	4620      	mov	r0, r4
   d6830:	bd10      	pop	{r4, pc}

000d6832 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6832:	b513      	push	{r0, r1, r4, lr}
   d6834:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6836:	b159      	cbz	r1, d6850 <_ZN6StringaSEPKc+0x1e>
   d6838:	4608      	mov	r0, r1
   d683a:	9101      	str	r1, [sp, #4]
   d683c:	f001 fb8f 	bl	d7f5e <strlen>
   d6840:	9901      	ldr	r1, [sp, #4]
   d6842:	4602      	mov	r2, r0
   d6844:	4620      	mov	r0, r4
   d6846:	f7ff ffad 	bl	d67a4 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d684a:	4620      	mov	r0, r4
   d684c:	b002      	add	sp, #8
   d684e:	bd10      	pop	{r4, pc}
	else invalidate();
   d6850:	f7ff ff7d 	bl	d674e <_ZN6String10invalidateEv>
   d6854:	e7f9      	b.n	d684a <_ZN6StringaSEPKc+0x18>

000d6856 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d6856:	b510      	push	{r4, lr}
   d6858:	4604      	mov	r4, r0
   d685a:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d685c:	2300      	movs	r3, #0
	capacity = 0;
   d685e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6862:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6864:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d6866:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d6868:	a901      	add	r1, sp, #4
   d686a:	f000 fa49 	bl	d6d00 <itoa>
	*this = buf;
   d686e:	a901      	add	r1, sp, #4
   d6870:	4620      	mov	r0, r4
   d6872:	f7ff ffde 	bl	d6832 <_ZN6StringaSEPKc>
}
   d6876:	4620      	mov	r0, r4
   d6878:	b00a      	add	sp, #40	; 0x28
   d687a:	bd10      	pop	{r4, pc}

000d687c <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d687c:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d687e:	6882      	ldr	r2, [r0, #8]
   d6880:	b93a      	cbnz	r2, d6892 <_ZNK6String6equalsEPKc+0x16>
   d6882:	b121      	cbz	r1, d688e <_ZNK6String6equalsEPKc+0x12>
   d6884:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d6886:	fab0 f080 	clz	r0, r0
   d688a:	0940      	lsrs	r0, r0, #5
   d688c:	e000      	b.n	d6890 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d688e:	2001      	movs	r0, #1
}
   d6890:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d6892:	6800      	ldr	r0, [r0, #0]
   d6894:	b909      	cbnz	r1, d689a <_ZNK6String6equalsEPKc+0x1e>
   d6896:	7800      	ldrb	r0, [r0, #0]
   d6898:	e7f5      	b.n	d6886 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d689a:	f001 fb31 	bl	d7f00 <strcmp>
   d689e:	e7f2      	b.n	d6886 <_ZNK6String6equalsEPKc+0xa>

000d68a0 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d68a0:	b558      	push	{r3, r4, r6, lr}
   d68a2:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d68a4:	b12a      	cbz	r2, d68b2 <_ZNK6String8getBytesEPhjj+0x12>
   d68a6:	b121      	cbz	r1, d68b2 <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d68a8:	6884      	ldr	r4, [r0, #8]
   d68aa:	429c      	cmp	r4, r3
   d68ac:	d802      	bhi.n	d68b4 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d68ae:	2300      	movs	r3, #0
   d68b0:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d68b2:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d68b4:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d68b6:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d68b8:	6801      	ldr	r1, [r0, #0]
   d68ba:	4294      	cmp	r4, r2
   d68bc:	bf28      	it	cs
   d68be:	4614      	movcs	r4, r2
   d68c0:	4419      	add	r1, r3
   d68c2:	4622      	mov	r2, r4
   d68c4:	4630      	mov	r0, r6
   d68c6:	f001 fb64 	bl	d7f92 <strncpy>
	buf[n] = 0;
   d68ca:	2300      	movs	r3, #0
   d68cc:	5533      	strb	r3, [r6, r4]
   d68ce:	e7f0      	b.n	d68b2 <_ZNK6String8getBytesEPhjj+0x12>

000d68d0 <_ZNK6String7toFloatEv>:
	return 0;
}


float String::toFloat(void) const
{
   d68d0:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
   d68d2:	6800      	ldr	r0, [r0, #0]
   d68d4:	b140      	cbz	r0, d68e8 <_ZNK6String7toFloatEv+0x18>
   d68d6:	f001 f9cd 	bl	d7c74 <atof>
   d68da:	ec51 0b10 	vmov	r0, r1, d0
   d68de:	f000 fff7 	bl	d78d0 <__aeabi_d2f>
   d68e2:	ee00 0a10 	vmov	s0, r0
	return 0;
}
   d68e6:	bd08      	pop	{r3, pc}
	return 0;
   d68e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; d68f0 <_ZNK6String7toFloatEv+0x20>
   d68ec:	e7fb      	b.n	d68e6 <_ZNK6String7toFloatEv+0x16>
   d68ee:	bf00      	nop
   d68f0:	00000000 	.word	0x00000000

000d68f4 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d68f4:	b507      	push	{r0, r1, r2, lr}
   d68f6:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d68f8:	2100      	movs	r1, #0
{
   d68fa:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d68fc:	9100      	str	r1, [sp, #0]
   d68fe:	2001      	movs	r0, #1
   d6900:	218c      	movs	r1, #140	; 0x8c
   d6902:	f7ff f86d 	bl	d59e0 <system_reset>
}
   d6906:	b003      	add	sp, #12
   d6908:	f85d fb04 	ldr.w	pc, [sp], #4

000d690c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d690c:	4601      	mov	r1, r0
    reset(0, flags);
   d690e:	2000      	movs	r0, #0
   d6910:	f7ff bff0 	b.w	d68f4 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d6914 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d6914:	2000      	movs	r0, #0
   d6916:	f7ff bff9 	b.w	d690c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d691c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d691c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d691e:	4b09      	ldr	r3, [pc, #36]	; (d6944 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d6920:	4c09      	ldr	r4, [pc, #36]	; (d6948 <_GLOBAL__sub_I_System+0x2c>)
   d6922:	2202      	movs	r2, #2
   d6924:	2000      	movs	r0, #0
   d6926:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6928:	4b08      	ldr	r3, [pc, #32]	; (d694c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d692a:	6020      	str	r0, [r4, #0]
   d692c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d692e:	71a0      	strb	r0, [r4, #6]
   d6930:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6932:	f7ff f811 	bl	d5958 <set_system_mode>
SystemClass System;
   d6936:	4620      	mov	r0, r4
   d6938:	4a05      	ldr	r2, [pc, #20]	; (d6950 <_GLOBAL__sub_I_System+0x34>)
   d693a:	4906      	ldr	r1, [pc, #24]	; (d6954 <_GLOBAL__sub_I_System+0x38>)
   d693c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6940:	f000 bb44 	b.w	d6fcc <__aeabi_atexit>
   d6944:	2003e608 	.word	0x2003e608
   d6948:	2003e5fc 	.word	0x2003e5fc
   d694c:	ffff0000 	.word	0xffff0000
   d6950:	2003e400 	.word	0x2003e400
   d6954:	000d40d1 	.word	0x000d40d1

000d6958 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d6958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d695c:	4a15      	ldr	r2, [pc, #84]	; (d69b4 <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d695e:	f8df 8060 	ldr.w	r8, [pc, #96]	; d69c0 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d6962:	e9d2 3200 	ldrd	r3, r2, [r2]
   d6966:	18c0      	adds	r0, r0, r3
   d6968:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d696c:	4a12      	ldr	r2, [pc, #72]	; (d69b8 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d696e:	e9d2 3200 	ldrd	r3, r2, [r2]
   d6972:	18c6      	adds	r6, r0, r3
   d6974:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d6978:	e9d8 2300 	ldrd	r2, r3, [r8]
   d697c:	42bb      	cmp	r3, r7
   d697e:	bf08      	it	eq
   d6980:	42b2      	cmpeq	r2, r6
{
   d6982:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d6984:	d013      	beq.n	d69ae <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d6986:	a903      	add	r1, sp, #12
   d6988:	4668      	mov	r0, sp
   d698a:	e9cd 6700 	strd	r6, r7, [sp]
   d698e:	f001 f987 	bl	d7ca0 <localtime_r>
	calendar_time.tm_year += 1900;
   d6992:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d6994:	4d09      	ldr	r5, [pc, #36]	; (d69bc <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d6996:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d699a:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d699c:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d699e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d69a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d69a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d69a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d69a6:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d69aa:	6823      	ldr	r3, [r4, #0]
   d69ac:	602b      	str	r3, [r5, #0]
    }
}
   d69ae:	b00c      	add	sp, #48	; 0x30
   d69b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d69b4:	2003e640 	.word	0x2003e640
   d69b8:	2003e638 	.word	0x2003e638
   d69bc:	2003e610 	.word	0x2003e610
   d69c0:	2003e648 	.word	0x2003e648

000d69c4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d69c4:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d69c6:	2000      	movs	r0, #0
   d69c8:	f7ff f85c 	bl	d5a84 <spark_sync_time_pending>
   d69cc:	b128      	cbz	r0, d69da <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d69ce:	f7ff f831 	bl	d5a34 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d69d2:	f080 0001 	eor.w	r0, r0, #1
   d69d6:	b2c0      	uxtb	r0, r0
    }
   d69d8:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d69da:	2001      	movs	r0, #1
   d69dc:	e7fc      	b.n	d69d8 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d69de <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d69de:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d69e0:	2000      	movs	r0, #0
   d69e2:	f7fe fe89 	bl	d56f8 <hal_rtc_time_is_valid>
    if (rtcstate)
   d69e6:	4604      	mov	r4, r0
   d69e8:	b9a0      	cbnz	r0, d6a14 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d69ea:	f7fe ffad 	bl	d5948 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d69ee:	2801      	cmp	r0, #1
   d69f0:	d110      	bne.n	d6a14 <_ZN9TimeClass7isValidEv+0x36>
   d69f2:	4620      	mov	r0, r4
   d69f4:	f7fe ffd8 	bl	d59a8 <system_thread_get_state>
   d69f8:	b960      	cbnz	r0, d6a14 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d69fa:	f7ff ffe3 	bl	d69c4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d69fe:	b910      	cbnz	r0, d6a06 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d6a00:	f7ff f808 	bl	d5a14 <spark_process>
        while (_while() && !_condition()) {
   d6a04:	e7f9      	b.n	d69fa <_ZN9TimeClass7isValidEv+0x1c>
   d6a06:	f7ff ffdd 	bl	d69c4 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d6a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d6a0e:	2000      	movs	r0, #0
   d6a10:	f7fe be72 	b.w	d56f8 <hal_rtc_time_is_valid>
}
   d6a14:	4620      	mov	r0, r4
   d6a16:	bd10      	pop	{r4, pc}

000d6a18 <_ZN9TimeClass3nowEv>:
{
   d6a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d6a1a:	f7ff ffe0 	bl	d69de <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d6a1e:	2210      	movs	r2, #16
   d6a20:	2100      	movs	r1, #0
   d6a22:	4668      	mov	r0, sp
   d6a24:	f001 fa40 	bl	d7ea8 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d6a28:	2100      	movs	r1, #0
   d6a2a:	4668      	mov	r0, sp
   d6a2c:	f7fe fe74 	bl	d5718 <hal_rtc_get_time>
}
   d6a30:	9800      	ldr	r0, [sp, #0]
   d6a32:	b005      	add	sp, #20
   d6a34:	f85d fb04 	ldr.w	pc, [sp], #4

000d6a38 <_ZN9TimeClass4hourEv>:
{
   d6a38:	b508      	push	{r3, lr}
	return hour(now());
   d6a3a:	f7ff ffed 	bl	d6a18 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d6a3e:	17c1      	asrs	r1, r0, #31
   d6a40:	f7ff ff8a 	bl	d6958 <_ZL22Refresh_UnixTime_Cachex>
}
   d6a44:	4b01      	ldr	r3, [pc, #4]	; (d6a4c <_ZN9TimeClass4hourEv+0x14>)
   d6a46:	6898      	ldr	r0, [r3, #8]
   d6a48:	bd08      	pop	{r3, pc}
   d6a4a:	bf00      	nop
   d6a4c:	2003e610 	.word	0x2003e610

000d6a50 <_ZN9TimeClass6minuteEv>:
{
   d6a50:	b508      	push	{r3, lr}
	return minute(now());
   d6a52:	f7ff ffe1 	bl	d6a18 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d6a56:	17c1      	asrs	r1, r0, #31
   d6a58:	f7ff ff7e 	bl	d6958 <_ZL22Refresh_UnixTime_Cachex>
}
   d6a5c:	4b01      	ldr	r3, [pc, #4]	; (d6a64 <_ZN9TimeClass6minuteEv+0x14>)
   d6a5e:	6858      	ldr	r0, [r3, #4]
   d6a60:	bd08      	pop	{r3, pc}
   d6a62:	bf00      	nop
   d6a64:	2003e610 	.word	0x2003e610

000d6a68 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6a68:	4b02      	ldr	r3, [pc, #8]	; (d6a74 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6a6a:	681a      	ldr	r2, [r3, #0]
   d6a6c:	4b02      	ldr	r3, [pc, #8]	; (d6a78 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6a6e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6a70:	4770      	bx	lr
   d6a72:	bf00      	nop
   d6a74:	2003e1c0 	.word	0x2003e1c0
   d6a78:	2003e60c 	.word	0x2003e60c

000d6a7c <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d6a7c:	4770      	bx	lr

000d6a7e <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6a7e:	7441      	strb	r1, [r0, #17]
}
   d6a80:	4770      	bx	lr

000d6a82 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d6a82:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d6a84:	7c00      	ldrb	r0, [r0, #16]
   d6a86:	f7fe ff1f 	bl	d58c8 <hal_usart_available_data_for_write>
}
   d6a8a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a8e:	bd08      	pop	{r3, pc}

000d6a90 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d6a90:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d6a92:	7c00      	ldrb	r0, [r0, #16]
   d6a94:	f7fe fef0 	bl	d5878 <hal_usart_available>
}
   d6a98:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6a9c:	bd08      	pop	{r3, pc}

000d6a9e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d6a9e:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d6aa0:	7c00      	ldrb	r0, [r0, #16]
   d6aa2:	f7fe fef9 	bl	d5898 <hal_usart_peek>
}
   d6aa6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6aaa:	bd08      	pop	{r3, pc}

000d6aac <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d6aac:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d6aae:	7c00      	ldrb	r0, [r0, #16]
   d6ab0:	f7fe feea 	bl	d5888 <hal_usart_read>
}
   d6ab4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6ab8:	bd08      	pop	{r3, pc}

000d6aba <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6aba:	7c00      	ldrb	r0, [r0, #16]
   d6abc:	f7fe bef4 	b.w	d58a8 <hal_usart_flush>

000d6ac0 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6ac0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6ac2:	7c45      	ldrb	r5, [r0, #17]
{
   d6ac4:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6ac6:	b12d      	cbz	r5, d6ad4 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6ac8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6aca:	b003      	add	sp, #12
   d6acc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6ad0:	f7fe beca 	b.w	d5868 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6ad4:	7c00      	ldrb	r0, [r0, #16]
   d6ad6:	9101      	str	r1, [sp, #4]
   d6ad8:	f7fe fef6 	bl	d58c8 <hal_usart_available_data_for_write>
   d6adc:	2800      	cmp	r0, #0
   d6ade:	9901      	ldr	r1, [sp, #4]
   d6ae0:	dcf2      	bgt.n	d6ac8 <_ZN11USARTSerial5writeEh+0x8>
}
   d6ae2:	4628      	mov	r0, r5
   d6ae4:	b003      	add	sp, #12
   d6ae6:	bd30      	pop	{r4, r5, pc}

000d6ae8 <_ZN11USARTSerialD0Ev>:
   d6ae8:	b510      	push	{r4, lr}
   d6aea:	2114      	movs	r1, #20
   d6aec:	4604      	mov	r4, r0
   d6aee:	f000 fa72 	bl	d6fd6 <_ZdlPvj>
   d6af2:	4620      	mov	r0, r4
   d6af4:	bd10      	pop	{r4, pc}
	...

000d6af8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6af8:	b510      	push	{r4, lr}
   d6afa:	f04f 0c00 	mov.w	ip, #0
   d6afe:	4604      	mov	r4, r0
   d6b00:	4608      	mov	r0, r1
   d6b02:	4611      	mov	r1, r2
   d6b04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6b08:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6b0c:	4a04      	ldr	r2, [pc, #16]	; (d6b20 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6b0e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6b10:	2201      	movs	r2, #1
  _serial = serial;
   d6b12:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6b14:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6b16:	461a      	mov	r2, r3
   d6b18:	f7fe fe9e 	bl	d5858 <hal_usart_init>
}
   d6b1c:	4620      	mov	r0, r4
   d6b1e:	bd10      	pop	{r4, pc}
   d6b20:	000daa6c 	.word	0x000daa6c

000d6b24 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6b24:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6b26:	4c0e      	ldr	r4, [pc, #56]	; (d6b60 <_Z22__fetch_global_Serial1v+0x3c>)
   d6b28:	7821      	ldrb	r1, [r4, #0]
   d6b2a:	f3bf 8f5b 	dmb	ish
   d6b2e:	f011 0101 	ands.w	r1, r1, #1
   d6b32:	d112      	bne.n	d6b5a <_Z22__fetch_global_Serial1v+0x36>
   d6b34:	4620      	mov	r0, r4
   d6b36:	9101      	str	r1, [sp, #4]
   d6b38:	f7fd fab3 	bl	d40a2 <__cxa_guard_acquire>
   d6b3c:	9901      	ldr	r1, [sp, #4]
   d6b3e:	b160      	cbz	r0, d6b5a <_Z22__fetch_global_Serial1v+0x36>
   d6b40:	4a08      	ldr	r2, [pc, #32]	; (d6b64 <_Z22__fetch_global_Serial1v+0x40>)
   d6b42:	4b09      	ldr	r3, [pc, #36]	; (d6b68 <_Z22__fetch_global_Serial1v+0x44>)
   d6b44:	4809      	ldr	r0, [pc, #36]	; (d6b6c <_Z22__fetch_global_Serial1v+0x48>)
   d6b46:	f7ff ffd7 	bl	d6af8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6b4a:	4620      	mov	r0, r4
   d6b4c:	f7fd faae 	bl	d40ac <__cxa_guard_release>
   d6b50:	4a07      	ldr	r2, [pc, #28]	; (d6b70 <_Z22__fetch_global_Serial1v+0x4c>)
   d6b52:	4908      	ldr	r1, [pc, #32]	; (d6b74 <_Z22__fetch_global_Serial1v+0x50>)
   d6b54:	4805      	ldr	r0, [pc, #20]	; (d6b6c <_Z22__fetch_global_Serial1v+0x48>)
   d6b56:	f000 fa39 	bl	d6fcc <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6b5a:	4804      	ldr	r0, [pc, #16]	; (d6b6c <_Z22__fetch_global_Serial1v+0x48>)
   d6b5c:	b002      	add	sp, #8
   d6b5e:	bd10      	pop	{r4, pc}
   d6b60:	2003e650 	.word	0x2003e650
   d6b64:	2003e654 	.word	0x2003e654
   d6b68:	2003e6d8 	.word	0x2003e6d8
   d6b6c:	2003e75c 	.word	0x2003e75c
   d6b70:	2003e400 	.word	0x2003e400
   d6b74:	000d6a7d 	.word	0x000d6a7d

000d6b78 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6b78:	7441      	strb	r1, [r0, #17]
}
   d6b7a:	4770      	bx	lr

000d6b7c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6b7c:	4770      	bx	lr

000d6b7e <_ZN9USBSerial4readEv>:
{
   d6b7e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6b80:	2100      	movs	r1, #0
   d6b82:	7c00      	ldrb	r0, [r0, #16]
   d6b84:	f7fe fec8 	bl	d5918 <HAL_USB_USART_Receive_Data>
}
   d6b88:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6b8c:	bd08      	pop	{r3, pc}

000d6b8e <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6b8e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6b90:	2101      	movs	r1, #1
   d6b92:	7c00      	ldrb	r0, [r0, #16]
   d6b94:	f7fe fec0 	bl	d5918 <HAL_USB_USART_Receive_Data>
}
   d6b98:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6b9c:	bd08      	pop	{r3, pc}

000d6b9e <_ZN9USBSerial17availableForWriteEv>:
{
   d6b9e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6ba0:	7c00      	ldrb	r0, [r0, #16]
   d6ba2:	f7fe feb1 	bl	d5908 <HAL_USB_USART_Available_Data_For_Write>
}
   d6ba6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6baa:	bd08      	pop	{r3, pc}

000d6bac <_ZN9USBSerial9availableEv>:
{
   d6bac:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6bae:	7c00      	ldrb	r0, [r0, #16]
   d6bb0:	f7fe fea2 	bl	d58f8 <HAL_USB_USART_Available_Data>
}
   d6bb4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6bb8:	bd08      	pop	{r3, pc}

000d6bba <_ZN9USBSerial5writeEh>:
{
   d6bba:	b513      	push	{r0, r1, r4, lr}
   d6bbc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6bbe:	7c00      	ldrb	r0, [r0, #16]
{
   d6bc0:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6bc2:	f7fe fea1 	bl	d5908 <HAL_USB_USART_Available_Data_For_Write>
   d6bc6:	2800      	cmp	r0, #0
   d6bc8:	9901      	ldr	r1, [sp, #4]
   d6bca:	dc01      	bgt.n	d6bd0 <_ZN9USBSerial5writeEh+0x16>
   d6bcc:	7c60      	ldrb	r0, [r4, #17]
   d6bce:	b120      	cbz	r0, d6bda <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6bd0:	7c20      	ldrb	r0, [r4, #16]
   d6bd2:	f7fe fea9 	bl	d5928 <HAL_USB_USART_Send_Data>
   d6bd6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6bda:	b002      	add	sp, #8
   d6bdc:	bd10      	pop	{r4, pc}

000d6bde <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6bde:	7c00      	ldrb	r0, [r0, #16]
   d6be0:	f7fe beaa 	b.w	d5938 <HAL_USB_USART_Flush_Data>

000d6be4 <_ZN9USBSerialD0Ev>:
   d6be4:	b510      	push	{r4, lr}
   d6be6:	2114      	movs	r1, #20
   d6be8:	4604      	mov	r4, r0
   d6bea:	f000 f9f4 	bl	d6fd6 <_ZdlPvj>
   d6bee:	4620      	mov	r0, r4
   d6bf0:	bd10      	pop	{r4, pc}
	...

000d6bf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6bf4:	b510      	push	{r4, lr}
   d6bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6bfa:	4604      	mov	r4, r0
   d6bfc:	4608      	mov	r0, r1
   d6bfe:	2100      	movs	r1, #0
   d6c00:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6c04:	4b04      	ldr	r3, [pc, #16]	; (d6c18 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6c06:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6c08:	2301      	movs	r3, #1
  _serial = serial;
   d6c0a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6c0c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6c0e:	4611      	mov	r1, r2
   d6c10:	f7fe fe62 	bl	d58d8 <HAL_USB_USART_Init>
}
   d6c14:	4620      	mov	r0, r4
   d6c16:	bd10      	pop	{r4, pc}
   d6c18:	000daa9c 	.word	0x000daa9c

000d6c1c <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6c1c:	7c00      	ldrb	r0, [r0, #16]
   d6c1e:	2200      	movs	r2, #0
   d6c20:	f7fe be62 	b.w	d58e8 <HAL_USB_USART_Begin>

000d6c24 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6c24:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6c26:	2214      	movs	r2, #20
{
   d6c28:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6c2a:	2100      	movs	r1, #0
   d6c2c:	f001 f93c 	bl	d7ea8 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6c30:	4620      	mov	r0, r4
   d6c32:	bd10      	pop	{r4, pc}

000d6c34 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6c34:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6c36:	4c10      	ldr	r4, [pc, #64]	; (d6c78 <_Z16_fetch_usbserialv+0x44>)
{
   d6c38:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6c3a:	a803      	add	r0, sp, #12
   d6c3c:	f7ff fff2 	bl	d6c24 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6c40:	7821      	ldrb	r1, [r4, #0]
   d6c42:	f3bf 8f5b 	dmb	ish
   d6c46:	f011 0101 	ands.w	r1, r1, #1
   d6c4a:	d111      	bne.n	d6c70 <_Z16_fetch_usbserialv+0x3c>
   d6c4c:	4620      	mov	r0, r4
   d6c4e:	9101      	str	r1, [sp, #4]
   d6c50:	f7fd fa27 	bl	d40a2 <__cxa_guard_acquire>
   d6c54:	9901      	ldr	r1, [sp, #4]
   d6c56:	b158      	cbz	r0, d6c70 <_Z16_fetch_usbserialv+0x3c>
   d6c58:	aa03      	add	r2, sp, #12
   d6c5a:	4808      	ldr	r0, [pc, #32]	; (d6c7c <_Z16_fetch_usbserialv+0x48>)
   d6c5c:	f7ff ffca 	bl	d6bf4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6c60:	4620      	mov	r0, r4
   d6c62:	f7fd fa23 	bl	d40ac <__cxa_guard_release>
   d6c66:	4a06      	ldr	r2, [pc, #24]	; (d6c80 <_Z16_fetch_usbserialv+0x4c>)
   d6c68:	4906      	ldr	r1, [pc, #24]	; (d6c84 <_Z16_fetch_usbserialv+0x50>)
   d6c6a:	4804      	ldr	r0, [pc, #16]	; (d6c7c <_Z16_fetch_usbserialv+0x48>)
   d6c6c:	f000 f9ae 	bl	d6fcc <__aeabi_atexit>
	return _usbserial;
}
   d6c70:	4802      	ldr	r0, [pc, #8]	; (d6c7c <_Z16_fetch_usbserialv+0x48>)
   d6c72:	b008      	add	sp, #32
   d6c74:	bd10      	pop	{r4, pc}
   d6c76:	bf00      	nop
   d6c78:	2003e770 	.word	0x2003e770
   d6c7c:	2003e774 	.word	0x2003e774
   d6c80:	2003e400 	.word	0x2003e400
   d6c84:	000d6b7d 	.word	0x000d6b7d

000d6c88 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6c88:	b510      	push	{r4, lr}
   d6c8a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6c8c:	f001 f967 	bl	d7f5e <strlen>
   d6c90:	3801      	subs	r0, #1
   d6c92:	1823      	adds	r3, r4, r0
   d6c94:	4620      	mov	r0, r4
	while(i<j){
   d6c96:	4283      	cmp	r3, r0
   d6c98:	d906      	bls.n	d6ca8 <_Z11str_reversePc+0x20>
		c = *i;
   d6c9a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6c9c:	7819      	ldrb	r1, [r3, #0]
   d6c9e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6ca2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d6ca6:	e7f6      	b.n	d6c96 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d6ca8:	bd10      	pop	{r4, pc}

000d6caa <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6caa:	b570      	push	{r4, r5, r6, lr}
   d6cac:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6cae:	1e91      	subs	r1, r2, #2
   d6cb0:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6cb2:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d6cb4:	d822      	bhi.n	d6cfc <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d6cb6:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d6cb8:	b16d      	cbz	r5, d6cd6 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6cba:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d6cbe:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d6cc2:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d6cc4:	2d09      	cmp	r5, #9
                *ptr += '0';
   d6cc6:	bf94      	ite	ls
   d6cc8:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6cca:	3157      	addhi	r1, #87	; 0x57
   d6ccc:	b2c9      	uxtb	r1, r1
   d6cce:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d6cd2:	4635      	mov	r5, r6
	while(a){
   d6cd4:	e7f0      	b.n	d6cb8 <ultoa+0xe>
   d6cd6:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6cd8:	4423      	add	r3, r4
            *ptr++ = '0';
   d6cda:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6cdc:	4293      	cmp	r3, r2
   d6cde:	d902      	bls.n	d6ce6 <ultoa+0x3c>
            *ptr++ = '0';
   d6ce0:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6ce4:	e7fa      	b.n	d6cdc <ultoa+0x32>
   d6ce6:	1a1a      	subs	r2, r3, r0
   d6ce8:	4283      	cmp	r3, r0
   d6cea:	bf38      	it	cc
   d6cec:	2200      	movcc	r2, #0

	*ptr = '\0';
   d6cee:	2300      	movs	r3, #0
   d6cf0:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d6cf2:	4620      	mov	r0, r4
   d6cf4:	f7ff ffc8 	bl	d6c88 <_Z11str_reversePc>
	return buffer;
   d6cf8:	4620      	mov	r0, r4
}
   d6cfa:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6cfc:	2000      	movs	r0, #0
   d6cfe:	e7fc      	b.n	d6cfa <ultoa+0x50>

000d6d00 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6d00:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6d02:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6d04:	460c      	mov	r4, r1
   d6d06:	4615      	mov	r5, r2
	if(a<0){
   d6d08:	da0e      	bge.n	d6d28 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d6d0e:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6d12:	bf14      	ite	ne
   d6d14:	4258      	negne	r0, r3
   d6d16:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6d18:	2301      	movs	r3, #1
		*buffer = '-';
   d6d1a:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d6d1c:	462a      	mov	r2, r5
   d6d1e:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d6d20:	f7ff ffc3 	bl	d6caa <ultoa>
	}
	return buffer;
}
   d6d24:	4620      	mov	r0, r4
   d6d26:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d6d28:	2301      	movs	r3, #1
   d6d2a:	e7f9      	b.n	d6d20 <itoa+0x20>

000d6d2c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6d2c:	4b01      	ldr	r3, [pc, #4]	; (d6d34 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6d2e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6d30:	4770      	bx	lr
   d6d32:	bf00      	nop
   d6d34:	2003e1c4 	.word	0x2003e1c4

000d6d38 <serialEventRun>:
{
   d6d38:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6d3a:	4b0b      	ldr	r3, [pc, #44]	; (d6d68 <serialEventRun+0x30>)
   d6d3c:	b143      	cbz	r3, d6d50 <serialEventRun+0x18>
   d6d3e:	f7ff ff79 	bl	d6c34 <_Z16_fetch_usbserialv>
   d6d42:	6803      	ldr	r3, [r0, #0]
   d6d44:	691b      	ldr	r3, [r3, #16]
   d6d46:	4798      	blx	r3
   d6d48:	2800      	cmp	r0, #0
   d6d4a:	dd01      	ble.n	d6d50 <serialEventRun+0x18>
        serialEvent();
   d6d4c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6d50:	4b06      	ldr	r3, [pc, #24]	; (d6d6c <serialEventRun+0x34>)
   d6d52:	b143      	cbz	r3, d6d66 <serialEventRun+0x2e>
   d6d54:	f7ff fee6 	bl	d6b24 <_Z22__fetch_global_Serial1v>
   d6d58:	6803      	ldr	r3, [r0, #0]
   d6d5a:	691b      	ldr	r3, [r3, #16]
   d6d5c:	4798      	blx	r3
   d6d5e:	2800      	cmp	r0, #0
   d6d60:	dd01      	ble.n	d6d66 <serialEventRun+0x2e>
        serialEvent1();
   d6d62:	f3af 8000 	nop.w
}
   d6d66:	bd08      	pop	{r3, pc}
	...

000d6d70 <_post_loop>:
{
   d6d70:	b508      	push	{r3, lr}
	serialEventRun();
   d6d72:	f7ff ffe1 	bl	d6d38 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6d76:	f7fe fc97 	bl	d56a8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6d7a:	4b01      	ldr	r3, [pc, #4]	; (d6d80 <_post_loop+0x10>)
   d6d7c:	6018      	str	r0, [r3, #0]
}
   d6d7e:	bd08      	pop	{r3, pc}
   d6d80:	2003e79c 	.word	0x2003e79c

000d6d84 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6d84:	4802      	ldr	r0, [pc, #8]	; (d6d90 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6d86:	4a03      	ldr	r2, [pc, #12]	; (d6d94 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6d88:	4903      	ldr	r1, [pc, #12]	; (d6d98 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6d8a:	1a12      	subs	r2, r2, r0
   d6d8c:	f001 b87e 	b.w	d7e8c <memcpy>
   d6d90:	2003f400 	.word	0x2003f400
   d6d94:	2003f404 	.word	0x2003f404
   d6d98:	000dae08 	.word	0x000dae08

000d6d9c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6d9c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6d9e:	2300      	movs	r3, #0
   d6da0:	9300      	str	r3, [sp, #0]
   d6da2:	461a      	mov	r2, r3
   d6da4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6da8:	f7fe fe10 	bl	d59cc <system_ctrl_set_result>
}
   d6dac:	b003      	add	sp, #12
   d6dae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6db4 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6db4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6db6:	8843      	ldrh	r3, [r0, #2]
   d6db8:	2b0a      	cmp	r3, #10
   d6dba:	d008      	beq.n	d6dce <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6dbc:	2b50      	cmp	r3, #80	; 0x50
   d6dbe:	d10b      	bne.n	d6dd8 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6dc0:	4b09      	ldr	r3, [pc, #36]	; (d6de8 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6dc2:	681b      	ldr	r3, [r3, #0]
   d6dc4:	b14b      	cbz	r3, d6dda <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6dc6:	b003      	add	sp, #12
   d6dc8:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6dcc:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6dce:	f7ff ffe5 	bl	d6d9c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6dd2:	b003      	add	sp, #12
   d6dd4:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6dd8:	2300      	movs	r3, #0
   d6dda:	9300      	str	r3, [sp, #0]
   d6ddc:	461a      	mov	r2, r3
   d6dde:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6de2:	f7fe fdf3 	bl	d59cc <system_ctrl_set_result>
}
   d6de6:	e7f4      	b.n	d6dd2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6de8:	2003e78c 	.word	0x2003e78c

000d6dec <module_user_init_hook>:
{
   d6dec:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6dee:	4c12      	ldr	r4, [pc, #72]	; (d6e38 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6df0:	4812      	ldr	r0, [pc, #72]	; (d6e3c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6df2:	4d13      	ldr	r5, [pc, #76]	; (d6e40 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6df4:	2100      	movs	r1, #0
   d6df6:	f7fe fedd 	bl	d5bb4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6dfa:	6823      	ldr	r3, [r4, #0]
   d6dfc:	42ab      	cmp	r3, r5
   d6dfe:	4b11      	ldr	r3, [pc, #68]	; (d6e44 <module_user_init_hook+0x58>)
   d6e00:	bf0c      	ite	eq
   d6e02:	2201      	moveq	r2, #1
   d6e04:	2200      	movne	r2, #0
   d6e06:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6e08:	d002      	beq.n	d6e10 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6e0a:	f7ff ffbb 	bl	d6d84 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6e0e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6e10:	f7fe fc42 	bl	d5698 <HAL_RNG_GetRandomNumber>
   d6e14:	4604      	mov	r4, r0
    srand(seed);
   d6e16:	f001 f84f 	bl	d7eb8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6e1a:	4b0b      	ldr	r3, [pc, #44]	; (d6e48 <module_user_init_hook+0x5c>)
   d6e1c:	b113      	cbz	r3, d6e24 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6e1e:	4620      	mov	r0, r4
   d6e20:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6e24:	2100      	movs	r1, #0
   d6e26:	4808      	ldr	r0, [pc, #32]	; (d6e48 <module_user_init_hook+0x5c>)
   d6e28:	f7fe fe34 	bl	d5a94 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e30:	4806      	ldr	r0, [pc, #24]	; (d6e4c <module_user_init_hook+0x60>)
   d6e32:	2100      	movs	r1, #0
   d6e34:	f7fe bdc0 	b.w	d59b8 <system_ctrl_set_app_request_handler>
   d6e38:	2003f400 	.word	0x2003f400
   d6e3c:	000d6d2d 	.word	0x000d6d2d
   d6e40:	9a271c1e 	.word	0x9a271c1e
   d6e44:	2003e788 	.word	0x2003e788
   d6e48:	00000000 	.word	0x00000000
   d6e4c:	000d6db5 	.word	0x000d6db5

000d6e50 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6e50:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6e52:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6e54:	d902      	bls.n	d6e5c <pinAvailable+0xc>
    return false;
   d6e56:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6e58:	b002      	add	sp, #8
   d6e5a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6e5c:	f1a0 030b 	sub.w	r3, r0, #11
   d6e60:	2b02      	cmp	r3, #2
   d6e62:	d81a      	bhi.n	d6e9a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6e64:	4c17      	ldr	r4, [pc, #92]	; (d6ec4 <pinAvailable+0x74>)
   d6e66:	7821      	ldrb	r1, [r4, #0]
   d6e68:	f3bf 8f5b 	dmb	ish
   d6e6c:	f011 0101 	ands.w	r1, r1, #1
   d6e70:	d10b      	bne.n	d6e8a <pinAvailable+0x3a>
   d6e72:	4620      	mov	r0, r4
   d6e74:	9101      	str	r1, [sp, #4]
   d6e76:	f7fd f914 	bl	d40a2 <__cxa_guard_acquire>
   d6e7a:	9901      	ldr	r1, [sp, #4]
   d6e7c:	b128      	cbz	r0, d6e8a <pinAvailable+0x3a>
   d6e7e:	4812      	ldr	r0, [pc, #72]	; (d6ec8 <pinAvailable+0x78>)
   d6e80:	f7ff fc54 	bl	d672c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6e84:	4620      	mov	r0, r4
   d6e86:	f7fd f911 	bl	d40ac <__cxa_guard_release>
   d6e8a:	4b0f      	ldr	r3, [pc, #60]	; (d6ec8 <pinAvailable+0x78>)
   d6e8c:	7818      	ldrb	r0, [r3, #0]
   d6e8e:	f7fe fcdb 	bl	d5848 <hal_spi_is_enabled>
   d6e92:	2800      	cmp	r0, #0
   d6e94:	d1df      	bne.n	d6e56 <pinAvailable+0x6>
  return true; // 'pin' is available
   d6e96:	2001      	movs	r0, #1
   d6e98:	e7de      	b.n	d6e58 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6e9a:	2801      	cmp	r0, #1
   d6e9c:	d809      	bhi.n	d6eb2 <pinAvailable+0x62>
   d6e9e:	f000 f86d 	bl	d6f7c <_Z19__fetch_global_Wirev>
   d6ea2:	2100      	movs	r1, #0
   d6ea4:	7c00      	ldrb	r0, [r0, #16]
   d6ea6:	f7fe fc97 	bl	d57d8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6eaa:	f080 0001 	eor.w	r0, r0, #1
   d6eae:	b2c0      	uxtb	r0, r0
   d6eb0:	e7d2      	b.n	d6e58 <pinAvailable+0x8>
   d6eb2:	3809      	subs	r0, #9
   d6eb4:	2801      	cmp	r0, #1
   d6eb6:	d8ee      	bhi.n	d6e96 <pinAvailable+0x46>
   d6eb8:	f7ff fe34 	bl	d6b24 <_Z22__fetch_global_Serial1v>
   d6ebc:	7c00      	ldrb	r0, [r0, #16]
   d6ebe:	f7fe fcfb 	bl	d58b8 <hal_usart_is_enabled>
   d6ec2:	e7f2      	b.n	d6eaa <pinAvailable+0x5a>
   d6ec4:	2003e790 	.word	0x2003e790
   d6ec8:	2003e794 	.word	0x2003e794

000d6ecc <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6ecc:	2823      	cmp	r0, #35	; 0x23
{
   d6ece:	b538      	push	{r3, r4, r5, lr}
   d6ed0:	4604      	mov	r4, r0
   d6ed2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6ed4:	d80a      	bhi.n	d6eec <pinMode+0x20>
   d6ed6:	29ff      	cmp	r1, #255	; 0xff
   d6ed8:	d008      	beq.n	d6eec <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6eda:	f7ff ffb9 	bl	d6e50 <pinAvailable>
   d6ede:	b128      	cbz	r0, d6eec <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6ee0:	4629      	mov	r1, r5
   d6ee2:	4620      	mov	r0, r4
}
   d6ee4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6ee8:	f7fe bc1e 	b.w	d5728 <HAL_Pin_Mode>
}
   d6eec:	bd38      	pop	{r3, r4, r5, pc}

000d6eee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d6eee:	b538      	push	{r3, r4, r5, lr}
   d6ef0:	4604      	mov	r4, r0
   d6ef2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d6ef4:	f7fe fc20 	bl	d5738 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d6ef8:	28ff      	cmp	r0, #255	; 0xff
   d6efa:	d010      	beq.n	d6f1e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d6efc:	2806      	cmp	r0, #6
   d6efe:	d804      	bhi.n	d6f0a <digitalWrite+0x1c>
   d6f00:	234d      	movs	r3, #77	; 0x4d
   d6f02:	fa23 f000 	lsr.w	r0, r3, r0
   d6f06:	07c3      	lsls	r3, r0, #31
   d6f08:	d409      	bmi.n	d6f1e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d6f0a:	4620      	mov	r0, r4
   d6f0c:	f7ff ffa0 	bl	d6e50 <pinAvailable>
   d6f10:	b128      	cbz	r0, d6f1e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d6f12:	4629      	mov	r1, r5
   d6f14:	4620      	mov	r0, r4
}
   d6f16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d6f1a:	f7fe bc15 	b.w	d5748 <HAL_GPIO_Write>
}
   d6f1e:	bd38      	pop	{r3, r4, r5, pc}

000d6f20 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d6f20:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d6f22:	4c08      	ldr	r4, [pc, #32]	; (d6f44 <_Z21__fetch_global_EEPROMv+0x24>)
   d6f24:	7823      	ldrb	r3, [r4, #0]
   d6f26:	f3bf 8f5b 	dmb	ish
   d6f2a:	07db      	lsls	r3, r3, #31
   d6f2c:	d408      	bmi.n	d6f40 <_Z21__fetch_global_EEPROMv+0x20>
   d6f2e:	4620      	mov	r0, r4
   d6f30:	f7fd f8b7 	bl	d40a2 <__cxa_guard_acquire>
   d6f34:	b120      	cbz	r0, d6f40 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d6f36:	f7fe fbbf 	bl	d56b8 <HAL_EEPROM_Init>
   d6f3a:	4620      	mov	r0, r4
   d6f3c:	f7fd f8b6 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d6f40:	4801      	ldr	r0, [pc, #4]	; (d6f48 <_Z21__fetch_global_EEPROMv+0x28>)
   d6f42:	bd10      	pop	{r4, pc}
   d6f44:	2003e7a0 	.word	0x2003e7a0
   d6f48:	2003e7a4 	.word	0x2003e7a4

000d6f4c <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6f4c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6f4e:	2300      	movs	r3, #0
   d6f50:	2520      	movs	r5, #32
   d6f52:	8043      	strh	r3, [r0, #2]
   d6f54:	2314      	movs	r3, #20
{
   d6f56:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6f58:	8003      	strh	r3, [r0, #0]
   d6f5a:	6085      	str	r5, [r0, #8]
   d6f5c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6f5e:	4906      	ldr	r1, [pc, #24]	; (d6f78 <_Z17acquireWireBufferv+0x2c>)
   d6f60:	4628      	mov	r0, r5
   d6f62:	f000 f83a 	bl	d6fda <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6f66:	4904      	ldr	r1, [pc, #16]	; (d6f78 <_Z17acquireWireBufferv+0x2c>)
	};
   d6f68:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6f6a:	4628      	mov	r0, r5
   d6f6c:	f000 f835 	bl	d6fda <_ZnajRKSt9nothrow_t>
	};
   d6f70:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6f72:	4620      	mov	r0, r4
   d6f74:	bd38      	pop	{r3, r4, r5, pc}
   d6f76:	bf00      	nop
   d6f78:	000daac4 	.word	0x000daac4

000d6f7c <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6f7c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6f7e:	4d0f      	ldr	r5, [pc, #60]	; (d6fbc <_Z19__fetch_global_Wirev+0x40>)
   d6f80:	7829      	ldrb	r1, [r5, #0]
   d6f82:	f3bf 8f5b 	dmb	ish
   d6f86:	f011 0401 	ands.w	r4, r1, #1
{
   d6f8a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6f8c:	d113      	bne.n	d6fb6 <_Z19__fetch_global_Wirev+0x3a>
   d6f8e:	4628      	mov	r0, r5
   d6f90:	f7fd f887 	bl	d40a2 <__cxa_guard_acquire>
   d6f94:	b178      	cbz	r0, d6fb6 <_Z19__fetch_global_Wirev+0x3a>
   d6f96:	a801      	add	r0, sp, #4
   d6f98:	f7ff ffd8 	bl	d6f4c <_Z17acquireWireBufferv>
   d6f9c:	aa01      	add	r2, sp, #4
   d6f9e:	4621      	mov	r1, r4
   d6fa0:	4807      	ldr	r0, [pc, #28]	; (d6fc0 <_Z19__fetch_global_Wirev+0x44>)
   d6fa2:	f7ff f9dd 	bl	d6360 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6fa6:	4628      	mov	r0, r5
   d6fa8:	f7fd f880 	bl	d40ac <__cxa_guard_release>
   d6fac:	4a05      	ldr	r2, [pc, #20]	; (d6fc4 <_Z19__fetch_global_Wirev+0x48>)
   d6fae:	4906      	ldr	r1, [pc, #24]	; (d6fc8 <_Z19__fetch_global_Wirev+0x4c>)
   d6fb0:	4803      	ldr	r0, [pc, #12]	; (d6fc0 <_Z19__fetch_global_Wirev+0x44>)
   d6fb2:	f000 f80b 	bl	d6fcc <__aeabi_atexit>
	return wire;
}
   d6fb6:	4802      	ldr	r0, [pc, #8]	; (d6fc0 <_Z19__fetch_global_Wirev+0x44>)
   d6fb8:	b007      	add	sp, #28
   d6fba:	bd30      	pop	{r4, r5, pc}
   d6fbc:	2003e7a8 	.word	0x2003e7a8
   d6fc0:	2003e7ac 	.word	0x2003e7ac
   d6fc4:	2003e400 	.word	0x2003e400
   d6fc8:	000d6309 	.word	0x000d6309

000d6fcc <__aeabi_atexit>:
   d6fcc:	460b      	mov	r3, r1
   d6fce:	4601      	mov	r1, r0
   d6fd0:	4618      	mov	r0, r3
   d6fd2:	f000 be57 	b.w	d7c84 <__cxa_atexit>

000d6fd6 <_ZdlPvj>:
   d6fd6:	f7fd b862 	b.w	d409e <_ZdlPv>

000d6fda <_ZnajRKSt9nothrow_t>:
   d6fda:	f7fd b85e 	b.w	d409a <_Znaj>

000d6fde <_ZSt25__throw_bad_function_callv>:
   d6fde:	b508      	push	{r3, lr}
   d6fe0:	f7fe fdd8 	bl	d5b94 <abort>

000d6fe4 <__aeabi_drsub>:
   d6fe4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6fe8:	e002      	b.n	d6ff0 <__adddf3>
   d6fea:	bf00      	nop

000d6fec <__aeabi_dsub>:
   d6fec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6ff0 <__adddf3>:
   d6ff0:	b530      	push	{r4, r5, lr}
   d6ff2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6ff6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6ffa:	ea94 0f05 	teq	r4, r5
   d6ffe:	bf08      	it	eq
   d7000:	ea90 0f02 	teqeq	r0, r2
   d7004:	bf1f      	itttt	ne
   d7006:	ea54 0c00 	orrsne.w	ip, r4, r0
   d700a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d700e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7012:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7016:	f000 80e2 	beq.w	d71de <__adddf3+0x1ee>
   d701a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d701e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7022:	bfb8      	it	lt
   d7024:	426d      	neglt	r5, r5
   d7026:	dd0c      	ble.n	d7042 <__adddf3+0x52>
   d7028:	442c      	add	r4, r5
   d702a:	ea80 0202 	eor.w	r2, r0, r2
   d702e:	ea81 0303 	eor.w	r3, r1, r3
   d7032:	ea82 0000 	eor.w	r0, r2, r0
   d7036:	ea83 0101 	eor.w	r1, r3, r1
   d703a:	ea80 0202 	eor.w	r2, r0, r2
   d703e:	ea81 0303 	eor.w	r3, r1, r3
   d7042:	2d36      	cmp	r5, #54	; 0x36
   d7044:	bf88      	it	hi
   d7046:	bd30      	pophi	{r4, r5, pc}
   d7048:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d704c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7050:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7054:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7058:	d002      	beq.n	d7060 <__adddf3+0x70>
   d705a:	4240      	negs	r0, r0
   d705c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7060:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7064:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7068:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d706c:	d002      	beq.n	d7074 <__adddf3+0x84>
   d706e:	4252      	negs	r2, r2
   d7070:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7074:	ea94 0f05 	teq	r4, r5
   d7078:	f000 80a7 	beq.w	d71ca <__adddf3+0x1da>
   d707c:	f1a4 0401 	sub.w	r4, r4, #1
   d7080:	f1d5 0e20 	rsbs	lr, r5, #32
   d7084:	db0d      	blt.n	d70a2 <__adddf3+0xb2>
   d7086:	fa02 fc0e 	lsl.w	ip, r2, lr
   d708a:	fa22 f205 	lsr.w	r2, r2, r5
   d708e:	1880      	adds	r0, r0, r2
   d7090:	f141 0100 	adc.w	r1, r1, #0
   d7094:	fa03 f20e 	lsl.w	r2, r3, lr
   d7098:	1880      	adds	r0, r0, r2
   d709a:	fa43 f305 	asr.w	r3, r3, r5
   d709e:	4159      	adcs	r1, r3
   d70a0:	e00e      	b.n	d70c0 <__adddf3+0xd0>
   d70a2:	f1a5 0520 	sub.w	r5, r5, #32
   d70a6:	f10e 0e20 	add.w	lr, lr, #32
   d70aa:	2a01      	cmp	r2, #1
   d70ac:	fa03 fc0e 	lsl.w	ip, r3, lr
   d70b0:	bf28      	it	cs
   d70b2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d70b6:	fa43 f305 	asr.w	r3, r3, r5
   d70ba:	18c0      	adds	r0, r0, r3
   d70bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d70c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d70c4:	d507      	bpl.n	d70d6 <__adddf3+0xe6>
   d70c6:	f04f 0e00 	mov.w	lr, #0
   d70ca:	f1dc 0c00 	rsbs	ip, ip, #0
   d70ce:	eb7e 0000 	sbcs.w	r0, lr, r0
   d70d2:	eb6e 0101 	sbc.w	r1, lr, r1
   d70d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d70da:	d31b      	bcc.n	d7114 <__adddf3+0x124>
   d70dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d70e0:	d30c      	bcc.n	d70fc <__adddf3+0x10c>
   d70e2:	0849      	lsrs	r1, r1, #1
   d70e4:	ea5f 0030 	movs.w	r0, r0, rrx
   d70e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d70ec:	f104 0401 	add.w	r4, r4, #1
   d70f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d70f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d70f8:	f080 809a 	bcs.w	d7230 <__adddf3+0x240>
   d70fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7100:	bf08      	it	eq
   d7102:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7106:	f150 0000 	adcs.w	r0, r0, #0
   d710a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d710e:	ea41 0105 	orr.w	r1, r1, r5
   d7112:	bd30      	pop	{r4, r5, pc}
   d7114:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7118:	4140      	adcs	r0, r0
   d711a:	eb41 0101 	adc.w	r1, r1, r1
   d711e:	3c01      	subs	r4, #1
   d7120:	bf28      	it	cs
   d7122:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d7126:	d2e9      	bcs.n	d70fc <__adddf3+0x10c>
   d7128:	f091 0f00 	teq	r1, #0
   d712c:	bf04      	itt	eq
   d712e:	4601      	moveq	r1, r0
   d7130:	2000      	moveq	r0, #0
   d7132:	fab1 f381 	clz	r3, r1
   d7136:	bf08      	it	eq
   d7138:	3320      	addeq	r3, #32
   d713a:	f1a3 030b 	sub.w	r3, r3, #11
   d713e:	f1b3 0220 	subs.w	r2, r3, #32
   d7142:	da0c      	bge.n	d715e <__adddf3+0x16e>
   d7144:	320c      	adds	r2, #12
   d7146:	dd08      	ble.n	d715a <__adddf3+0x16a>
   d7148:	f102 0c14 	add.w	ip, r2, #20
   d714c:	f1c2 020c 	rsb	r2, r2, #12
   d7150:	fa01 f00c 	lsl.w	r0, r1, ip
   d7154:	fa21 f102 	lsr.w	r1, r1, r2
   d7158:	e00c      	b.n	d7174 <__adddf3+0x184>
   d715a:	f102 0214 	add.w	r2, r2, #20
   d715e:	bfd8      	it	le
   d7160:	f1c2 0c20 	rsble	ip, r2, #32
   d7164:	fa01 f102 	lsl.w	r1, r1, r2
   d7168:	fa20 fc0c 	lsr.w	ip, r0, ip
   d716c:	bfdc      	itt	le
   d716e:	ea41 010c 	orrle.w	r1, r1, ip
   d7172:	4090      	lslle	r0, r2
   d7174:	1ae4      	subs	r4, r4, r3
   d7176:	bfa2      	ittt	ge
   d7178:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d717c:	4329      	orrge	r1, r5
   d717e:	bd30      	popge	{r4, r5, pc}
   d7180:	ea6f 0404 	mvn.w	r4, r4
   d7184:	3c1f      	subs	r4, #31
   d7186:	da1c      	bge.n	d71c2 <__adddf3+0x1d2>
   d7188:	340c      	adds	r4, #12
   d718a:	dc0e      	bgt.n	d71aa <__adddf3+0x1ba>
   d718c:	f104 0414 	add.w	r4, r4, #20
   d7190:	f1c4 0220 	rsb	r2, r4, #32
   d7194:	fa20 f004 	lsr.w	r0, r0, r4
   d7198:	fa01 f302 	lsl.w	r3, r1, r2
   d719c:	ea40 0003 	orr.w	r0, r0, r3
   d71a0:	fa21 f304 	lsr.w	r3, r1, r4
   d71a4:	ea45 0103 	orr.w	r1, r5, r3
   d71a8:	bd30      	pop	{r4, r5, pc}
   d71aa:	f1c4 040c 	rsb	r4, r4, #12
   d71ae:	f1c4 0220 	rsb	r2, r4, #32
   d71b2:	fa20 f002 	lsr.w	r0, r0, r2
   d71b6:	fa01 f304 	lsl.w	r3, r1, r4
   d71ba:	ea40 0003 	orr.w	r0, r0, r3
   d71be:	4629      	mov	r1, r5
   d71c0:	bd30      	pop	{r4, r5, pc}
   d71c2:	fa21 f004 	lsr.w	r0, r1, r4
   d71c6:	4629      	mov	r1, r5
   d71c8:	bd30      	pop	{r4, r5, pc}
   d71ca:	f094 0f00 	teq	r4, #0
   d71ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d71d2:	bf06      	itte	eq
   d71d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d71d8:	3401      	addeq	r4, #1
   d71da:	3d01      	subne	r5, #1
   d71dc:	e74e      	b.n	d707c <__adddf3+0x8c>
   d71de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d71e2:	bf18      	it	ne
   d71e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d71e8:	d029      	beq.n	d723e <__adddf3+0x24e>
   d71ea:	ea94 0f05 	teq	r4, r5
   d71ee:	bf08      	it	eq
   d71f0:	ea90 0f02 	teqeq	r0, r2
   d71f4:	d005      	beq.n	d7202 <__adddf3+0x212>
   d71f6:	ea54 0c00 	orrs.w	ip, r4, r0
   d71fa:	bf04      	itt	eq
   d71fc:	4619      	moveq	r1, r3
   d71fe:	4610      	moveq	r0, r2
   d7200:	bd30      	pop	{r4, r5, pc}
   d7202:	ea91 0f03 	teq	r1, r3
   d7206:	bf1e      	ittt	ne
   d7208:	2100      	movne	r1, #0
   d720a:	2000      	movne	r0, #0
   d720c:	bd30      	popne	{r4, r5, pc}
   d720e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7212:	d105      	bne.n	d7220 <__adddf3+0x230>
   d7214:	0040      	lsls	r0, r0, #1
   d7216:	4149      	adcs	r1, r1
   d7218:	bf28      	it	cs
   d721a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d721e:	bd30      	pop	{r4, r5, pc}
   d7220:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7224:	bf3c      	itt	cc
   d7226:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d722a:	bd30      	popcc	{r4, r5, pc}
   d722c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7230:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7234:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7238:	f04f 0000 	mov.w	r0, #0
   d723c:	bd30      	pop	{r4, r5, pc}
   d723e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7242:	bf1a      	itte	ne
   d7244:	4619      	movne	r1, r3
   d7246:	4610      	movne	r0, r2
   d7248:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d724c:	bf1c      	itt	ne
   d724e:	460b      	movne	r3, r1
   d7250:	4602      	movne	r2, r0
   d7252:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7256:	bf06      	itte	eq
   d7258:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d725c:	ea91 0f03 	teqeq	r1, r3
   d7260:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7264:	bd30      	pop	{r4, r5, pc}
   d7266:	bf00      	nop

000d7268 <__aeabi_ui2d>:
   d7268:	f090 0f00 	teq	r0, #0
   d726c:	bf04      	itt	eq
   d726e:	2100      	moveq	r1, #0
   d7270:	4770      	bxeq	lr
   d7272:	b530      	push	{r4, r5, lr}
   d7274:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7278:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d727c:	f04f 0500 	mov.w	r5, #0
   d7280:	f04f 0100 	mov.w	r1, #0
   d7284:	e750      	b.n	d7128 <__adddf3+0x138>
   d7286:	bf00      	nop

000d7288 <__aeabi_i2d>:
   d7288:	f090 0f00 	teq	r0, #0
   d728c:	bf04      	itt	eq
   d728e:	2100      	moveq	r1, #0
   d7290:	4770      	bxeq	lr
   d7292:	b530      	push	{r4, r5, lr}
   d7294:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7298:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d729c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d72a0:	bf48      	it	mi
   d72a2:	4240      	negmi	r0, r0
   d72a4:	f04f 0100 	mov.w	r1, #0
   d72a8:	e73e      	b.n	d7128 <__adddf3+0x138>
   d72aa:	bf00      	nop

000d72ac <__aeabi_f2d>:
   d72ac:	0042      	lsls	r2, r0, #1
   d72ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d72b2:	ea4f 0131 	mov.w	r1, r1, rrx
   d72b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d72ba:	bf1f      	itttt	ne
   d72bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d72c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d72c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d72c8:	4770      	bxne	lr
   d72ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d72ce:	bf08      	it	eq
   d72d0:	4770      	bxeq	lr
   d72d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d72d6:	bf04      	itt	eq
   d72d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d72dc:	4770      	bxeq	lr
   d72de:	b530      	push	{r4, r5, lr}
   d72e0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d72e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d72e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d72ec:	e71c      	b.n	d7128 <__adddf3+0x138>
   d72ee:	bf00      	nop

000d72f0 <__aeabi_ul2d>:
   d72f0:	ea50 0201 	orrs.w	r2, r0, r1
   d72f4:	bf08      	it	eq
   d72f6:	4770      	bxeq	lr
   d72f8:	b530      	push	{r4, r5, lr}
   d72fa:	f04f 0500 	mov.w	r5, #0
   d72fe:	e00a      	b.n	d7316 <__aeabi_l2d+0x16>

000d7300 <__aeabi_l2d>:
   d7300:	ea50 0201 	orrs.w	r2, r0, r1
   d7304:	bf08      	it	eq
   d7306:	4770      	bxeq	lr
   d7308:	b530      	push	{r4, r5, lr}
   d730a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d730e:	d502      	bpl.n	d7316 <__aeabi_l2d+0x16>
   d7310:	4240      	negs	r0, r0
   d7312:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7316:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d731a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d731e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7322:	f43f aed8 	beq.w	d70d6 <__adddf3+0xe6>
   d7326:	f04f 0203 	mov.w	r2, #3
   d732a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d732e:	bf18      	it	ne
   d7330:	3203      	addne	r2, #3
   d7332:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7336:	bf18      	it	ne
   d7338:	3203      	addne	r2, #3
   d733a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d733e:	f1c2 0320 	rsb	r3, r2, #32
   d7342:	fa00 fc03 	lsl.w	ip, r0, r3
   d7346:	fa20 f002 	lsr.w	r0, r0, r2
   d734a:	fa01 fe03 	lsl.w	lr, r1, r3
   d734e:	ea40 000e 	orr.w	r0, r0, lr
   d7352:	fa21 f102 	lsr.w	r1, r1, r2
   d7356:	4414      	add	r4, r2
   d7358:	e6bd      	b.n	d70d6 <__adddf3+0xe6>
   d735a:	bf00      	nop

000d735c <__aeabi_dmul>:
   d735c:	b570      	push	{r4, r5, r6, lr}
   d735e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7362:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7366:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d736a:	bf1d      	ittte	ne
   d736c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7370:	ea94 0f0c 	teqne	r4, ip
   d7374:	ea95 0f0c 	teqne	r5, ip
   d7378:	f000 f8de 	bleq	d7538 <__aeabi_dmul+0x1dc>
   d737c:	442c      	add	r4, r5
   d737e:	ea81 0603 	eor.w	r6, r1, r3
   d7382:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d7386:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d738a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d738e:	bf18      	it	ne
   d7390:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d7394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7398:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d739c:	d038      	beq.n	d7410 <__aeabi_dmul+0xb4>
   d739e:	fba0 ce02 	umull	ip, lr, r0, r2
   d73a2:	f04f 0500 	mov.w	r5, #0
   d73a6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d73aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d73ae:	fbe0 e503 	umlal	lr, r5, r0, r3
   d73b2:	f04f 0600 	mov.w	r6, #0
   d73b6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d73ba:	f09c 0f00 	teq	ip, #0
   d73be:	bf18      	it	ne
   d73c0:	f04e 0e01 	orrne.w	lr, lr, #1
   d73c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d73c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d73cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d73d0:	d204      	bcs.n	d73dc <__aeabi_dmul+0x80>
   d73d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d73d6:	416d      	adcs	r5, r5
   d73d8:	eb46 0606 	adc.w	r6, r6, r6
   d73dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d73e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d73e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d73e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d73ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d73f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d73f4:	bf88      	it	hi
   d73f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d73fa:	d81e      	bhi.n	d743a <__aeabi_dmul+0xde>
   d73fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d7400:	bf08      	it	eq
   d7402:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7406:	f150 0000 	adcs.w	r0, r0, #0
   d740a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d740e:	bd70      	pop	{r4, r5, r6, pc}
   d7410:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7414:	ea46 0101 	orr.w	r1, r6, r1
   d7418:	ea40 0002 	orr.w	r0, r0, r2
   d741c:	ea81 0103 	eor.w	r1, r1, r3
   d7420:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7424:	bfc2      	ittt	gt
   d7426:	ebd4 050c 	rsbsgt	r5, r4, ip
   d742a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d742e:	bd70      	popgt	{r4, r5, r6, pc}
   d7430:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7434:	f04f 0e00 	mov.w	lr, #0
   d7438:	3c01      	subs	r4, #1
   d743a:	f300 80ab 	bgt.w	d7594 <__aeabi_dmul+0x238>
   d743e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d7442:	bfde      	ittt	le
   d7444:	2000      	movle	r0, #0
   d7446:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d744a:	bd70      	pople	{r4, r5, r6, pc}
   d744c:	f1c4 0400 	rsb	r4, r4, #0
   d7450:	3c20      	subs	r4, #32
   d7452:	da35      	bge.n	d74c0 <__aeabi_dmul+0x164>
   d7454:	340c      	adds	r4, #12
   d7456:	dc1b      	bgt.n	d7490 <__aeabi_dmul+0x134>
   d7458:	f104 0414 	add.w	r4, r4, #20
   d745c:	f1c4 0520 	rsb	r5, r4, #32
   d7460:	fa00 f305 	lsl.w	r3, r0, r5
   d7464:	fa20 f004 	lsr.w	r0, r0, r4
   d7468:	fa01 f205 	lsl.w	r2, r1, r5
   d746c:	ea40 0002 	orr.w	r0, r0, r2
   d7470:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7478:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d747c:	fa21 f604 	lsr.w	r6, r1, r4
   d7480:	eb42 0106 	adc.w	r1, r2, r6
   d7484:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7488:	bf08      	it	eq
   d748a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d748e:	bd70      	pop	{r4, r5, r6, pc}
   d7490:	f1c4 040c 	rsb	r4, r4, #12
   d7494:	f1c4 0520 	rsb	r5, r4, #32
   d7498:	fa00 f304 	lsl.w	r3, r0, r4
   d749c:	fa20 f005 	lsr.w	r0, r0, r5
   d74a0:	fa01 f204 	lsl.w	r2, r1, r4
   d74a4:	ea40 0002 	orr.w	r0, r0, r2
   d74a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d74ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d74b0:	f141 0100 	adc.w	r1, r1, #0
   d74b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d74b8:	bf08      	it	eq
   d74ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d74be:	bd70      	pop	{r4, r5, r6, pc}
   d74c0:	f1c4 0520 	rsb	r5, r4, #32
   d74c4:	fa00 f205 	lsl.w	r2, r0, r5
   d74c8:	ea4e 0e02 	orr.w	lr, lr, r2
   d74cc:	fa20 f304 	lsr.w	r3, r0, r4
   d74d0:	fa01 f205 	lsl.w	r2, r1, r5
   d74d4:	ea43 0302 	orr.w	r3, r3, r2
   d74d8:	fa21 f004 	lsr.w	r0, r1, r4
   d74dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d74e0:	fa21 f204 	lsr.w	r2, r1, r4
   d74e4:	ea20 0002 	bic.w	r0, r0, r2
   d74e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d74ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d74f0:	bf08      	it	eq
   d74f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d74f6:	bd70      	pop	{r4, r5, r6, pc}
   d74f8:	f094 0f00 	teq	r4, #0
   d74fc:	d10f      	bne.n	d751e <__aeabi_dmul+0x1c2>
   d74fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d7502:	0040      	lsls	r0, r0, #1
   d7504:	eb41 0101 	adc.w	r1, r1, r1
   d7508:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d750c:	bf08      	it	eq
   d750e:	3c01      	subeq	r4, #1
   d7510:	d0f7      	beq.n	d7502 <__aeabi_dmul+0x1a6>
   d7512:	ea41 0106 	orr.w	r1, r1, r6
   d7516:	f095 0f00 	teq	r5, #0
   d751a:	bf18      	it	ne
   d751c:	4770      	bxne	lr
   d751e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d7522:	0052      	lsls	r2, r2, #1
   d7524:	eb43 0303 	adc.w	r3, r3, r3
   d7528:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d752c:	bf08      	it	eq
   d752e:	3d01      	subeq	r5, #1
   d7530:	d0f7      	beq.n	d7522 <__aeabi_dmul+0x1c6>
   d7532:	ea43 0306 	orr.w	r3, r3, r6
   d7536:	4770      	bx	lr
   d7538:	ea94 0f0c 	teq	r4, ip
   d753c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7540:	bf18      	it	ne
   d7542:	ea95 0f0c 	teqne	r5, ip
   d7546:	d00c      	beq.n	d7562 <__aeabi_dmul+0x206>
   d7548:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d754c:	bf18      	it	ne
   d754e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7552:	d1d1      	bne.n	d74f8 <__aeabi_dmul+0x19c>
   d7554:	ea81 0103 	eor.w	r1, r1, r3
   d7558:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d755c:	f04f 0000 	mov.w	r0, #0
   d7560:	bd70      	pop	{r4, r5, r6, pc}
   d7562:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7566:	bf06      	itte	eq
   d7568:	4610      	moveq	r0, r2
   d756a:	4619      	moveq	r1, r3
   d756c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7570:	d019      	beq.n	d75a6 <__aeabi_dmul+0x24a>
   d7572:	ea94 0f0c 	teq	r4, ip
   d7576:	d102      	bne.n	d757e <__aeabi_dmul+0x222>
   d7578:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d757c:	d113      	bne.n	d75a6 <__aeabi_dmul+0x24a>
   d757e:	ea95 0f0c 	teq	r5, ip
   d7582:	d105      	bne.n	d7590 <__aeabi_dmul+0x234>
   d7584:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7588:	bf1c      	itt	ne
   d758a:	4610      	movne	r0, r2
   d758c:	4619      	movne	r1, r3
   d758e:	d10a      	bne.n	d75a6 <__aeabi_dmul+0x24a>
   d7590:	ea81 0103 	eor.w	r1, r1, r3
   d7594:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7598:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d759c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d75a0:	f04f 0000 	mov.w	r0, #0
   d75a4:	bd70      	pop	{r4, r5, r6, pc}
   d75a6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d75aa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d75ae:	bd70      	pop	{r4, r5, r6, pc}

000d75b0 <__aeabi_ddiv>:
   d75b0:	b570      	push	{r4, r5, r6, lr}
   d75b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d75b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d75ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d75be:	bf1d      	ittte	ne
   d75c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d75c4:	ea94 0f0c 	teqne	r4, ip
   d75c8:	ea95 0f0c 	teqne	r5, ip
   d75cc:	f000 f8a7 	bleq	d771e <__aeabi_ddiv+0x16e>
   d75d0:	eba4 0405 	sub.w	r4, r4, r5
   d75d4:	ea81 0e03 	eor.w	lr, r1, r3
   d75d8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d75dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d75e0:	f000 8088 	beq.w	d76f4 <__aeabi_ddiv+0x144>
   d75e4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d75e8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d75ec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d75f0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d75f4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d75f8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d75fc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d7600:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7604:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7608:	429d      	cmp	r5, r3
   d760a:	bf08      	it	eq
   d760c:	4296      	cmpeq	r6, r2
   d760e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d7612:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7616:	d202      	bcs.n	d761e <__aeabi_ddiv+0x6e>
   d7618:	085b      	lsrs	r3, r3, #1
   d761a:	ea4f 0232 	mov.w	r2, r2, rrx
   d761e:	1ab6      	subs	r6, r6, r2
   d7620:	eb65 0503 	sbc.w	r5, r5, r3
   d7624:	085b      	lsrs	r3, r3, #1
   d7626:	ea4f 0232 	mov.w	r2, r2, rrx
   d762a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d762e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d7632:	ebb6 0e02 	subs.w	lr, r6, r2
   d7636:	eb75 0e03 	sbcs.w	lr, r5, r3
   d763a:	bf22      	ittt	cs
   d763c:	1ab6      	subcs	r6, r6, r2
   d763e:	4675      	movcs	r5, lr
   d7640:	ea40 000c 	orrcs.w	r0, r0, ip
   d7644:	085b      	lsrs	r3, r3, #1
   d7646:	ea4f 0232 	mov.w	r2, r2, rrx
   d764a:	ebb6 0e02 	subs.w	lr, r6, r2
   d764e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7652:	bf22      	ittt	cs
   d7654:	1ab6      	subcs	r6, r6, r2
   d7656:	4675      	movcs	r5, lr
   d7658:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d765c:	085b      	lsrs	r3, r3, #1
   d765e:	ea4f 0232 	mov.w	r2, r2, rrx
   d7662:	ebb6 0e02 	subs.w	lr, r6, r2
   d7666:	eb75 0e03 	sbcs.w	lr, r5, r3
   d766a:	bf22      	ittt	cs
   d766c:	1ab6      	subcs	r6, r6, r2
   d766e:	4675      	movcs	r5, lr
   d7670:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7674:	085b      	lsrs	r3, r3, #1
   d7676:	ea4f 0232 	mov.w	r2, r2, rrx
   d767a:	ebb6 0e02 	subs.w	lr, r6, r2
   d767e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7682:	bf22      	ittt	cs
   d7684:	1ab6      	subcs	r6, r6, r2
   d7686:	4675      	movcs	r5, lr
   d7688:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d768c:	ea55 0e06 	orrs.w	lr, r5, r6
   d7690:	d018      	beq.n	d76c4 <__aeabi_ddiv+0x114>
   d7692:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7696:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d769a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d769e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d76a2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d76a6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d76aa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d76ae:	d1c0      	bne.n	d7632 <__aeabi_ddiv+0x82>
   d76b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d76b4:	d10b      	bne.n	d76ce <__aeabi_ddiv+0x11e>
   d76b6:	ea41 0100 	orr.w	r1, r1, r0
   d76ba:	f04f 0000 	mov.w	r0, #0
   d76be:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d76c2:	e7b6      	b.n	d7632 <__aeabi_ddiv+0x82>
   d76c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d76c8:	bf04      	itt	eq
   d76ca:	4301      	orreq	r1, r0
   d76cc:	2000      	moveq	r0, #0
   d76ce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d76d2:	bf88      	it	hi
   d76d4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d76d8:	f63f aeaf 	bhi.w	d743a <__aeabi_dmul+0xde>
   d76dc:	ebb5 0c03 	subs.w	ip, r5, r3
   d76e0:	bf04      	itt	eq
   d76e2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d76e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d76ea:	f150 0000 	adcs.w	r0, r0, #0
   d76ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d76f2:	bd70      	pop	{r4, r5, r6, pc}
   d76f4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d76f8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d76fc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d7700:	bfc2      	ittt	gt
   d7702:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d770a:	bd70      	popgt	{r4, r5, r6, pc}
   d770c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7710:	f04f 0e00 	mov.w	lr, #0
   d7714:	3c01      	subs	r4, #1
   d7716:	e690      	b.n	d743a <__aeabi_dmul+0xde>
   d7718:	ea45 0e06 	orr.w	lr, r5, r6
   d771c:	e68d      	b.n	d743a <__aeabi_dmul+0xde>
   d771e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d7722:	ea94 0f0c 	teq	r4, ip
   d7726:	bf08      	it	eq
   d7728:	ea95 0f0c 	teqeq	r5, ip
   d772c:	f43f af3b 	beq.w	d75a6 <__aeabi_dmul+0x24a>
   d7730:	ea94 0f0c 	teq	r4, ip
   d7734:	d10a      	bne.n	d774c <__aeabi_ddiv+0x19c>
   d7736:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d773a:	f47f af34 	bne.w	d75a6 <__aeabi_dmul+0x24a>
   d773e:	ea95 0f0c 	teq	r5, ip
   d7742:	f47f af25 	bne.w	d7590 <__aeabi_dmul+0x234>
   d7746:	4610      	mov	r0, r2
   d7748:	4619      	mov	r1, r3
   d774a:	e72c      	b.n	d75a6 <__aeabi_dmul+0x24a>
   d774c:	ea95 0f0c 	teq	r5, ip
   d7750:	d106      	bne.n	d7760 <__aeabi_ddiv+0x1b0>
   d7752:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7756:	f43f aefd 	beq.w	d7554 <__aeabi_dmul+0x1f8>
   d775a:	4610      	mov	r0, r2
   d775c:	4619      	mov	r1, r3
   d775e:	e722      	b.n	d75a6 <__aeabi_dmul+0x24a>
   d7760:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7764:	bf18      	it	ne
   d7766:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d776a:	f47f aec5 	bne.w	d74f8 <__aeabi_dmul+0x19c>
   d776e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d7772:	f47f af0d 	bne.w	d7590 <__aeabi_dmul+0x234>
   d7776:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d777a:	f47f aeeb 	bne.w	d7554 <__aeabi_dmul+0x1f8>
   d777e:	e712      	b.n	d75a6 <__aeabi_dmul+0x24a>

000d7780 <__gedf2>:
   d7780:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7784:	e006      	b.n	d7794 <__cmpdf2+0x4>
   d7786:	bf00      	nop

000d7788 <__ledf2>:
   d7788:	f04f 0c01 	mov.w	ip, #1
   d778c:	e002      	b.n	d7794 <__cmpdf2+0x4>
   d778e:	bf00      	nop

000d7790 <__cmpdf2>:
   d7790:	f04f 0c01 	mov.w	ip, #1
   d7794:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7798:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d779c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d77a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d77a4:	bf18      	it	ne
   d77a6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d77aa:	d01b      	beq.n	d77e4 <__cmpdf2+0x54>
   d77ac:	b001      	add	sp, #4
   d77ae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d77b2:	bf0c      	ite	eq
   d77b4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d77b8:	ea91 0f03 	teqne	r1, r3
   d77bc:	bf02      	ittt	eq
   d77be:	ea90 0f02 	teqeq	r0, r2
   d77c2:	2000      	moveq	r0, #0
   d77c4:	4770      	bxeq	lr
   d77c6:	f110 0f00 	cmn.w	r0, #0
   d77ca:	ea91 0f03 	teq	r1, r3
   d77ce:	bf58      	it	pl
   d77d0:	4299      	cmppl	r1, r3
   d77d2:	bf08      	it	eq
   d77d4:	4290      	cmpeq	r0, r2
   d77d6:	bf2c      	ite	cs
   d77d8:	17d8      	asrcs	r0, r3, #31
   d77da:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d77de:	f040 0001 	orr.w	r0, r0, #1
   d77e2:	4770      	bx	lr
   d77e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d77e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d77ec:	d102      	bne.n	d77f4 <__cmpdf2+0x64>
   d77ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d77f2:	d107      	bne.n	d7804 <__cmpdf2+0x74>
   d77f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d77f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d77fc:	d1d6      	bne.n	d77ac <__cmpdf2+0x1c>
   d77fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d7802:	d0d3      	beq.n	d77ac <__cmpdf2+0x1c>
   d7804:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7808:	4770      	bx	lr
   d780a:	bf00      	nop

000d780c <__aeabi_cdrcmple>:
   d780c:	4684      	mov	ip, r0
   d780e:	4610      	mov	r0, r2
   d7810:	4662      	mov	r2, ip
   d7812:	468c      	mov	ip, r1
   d7814:	4619      	mov	r1, r3
   d7816:	4663      	mov	r3, ip
   d7818:	e000      	b.n	d781c <__aeabi_cdcmpeq>
   d781a:	bf00      	nop

000d781c <__aeabi_cdcmpeq>:
   d781c:	b501      	push	{r0, lr}
   d781e:	f7ff ffb7 	bl	d7790 <__cmpdf2>
   d7822:	2800      	cmp	r0, #0
   d7824:	bf48      	it	mi
   d7826:	f110 0f00 	cmnmi.w	r0, #0
   d782a:	bd01      	pop	{r0, pc}

000d782c <__aeabi_dcmpeq>:
   d782c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7830:	f7ff fff4 	bl	d781c <__aeabi_cdcmpeq>
   d7834:	bf0c      	ite	eq
   d7836:	2001      	moveq	r0, #1
   d7838:	2000      	movne	r0, #0
   d783a:	f85d fb08 	ldr.w	pc, [sp], #8
   d783e:	bf00      	nop

000d7840 <__aeabi_dcmplt>:
   d7840:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7844:	f7ff ffea 	bl	d781c <__aeabi_cdcmpeq>
   d7848:	bf34      	ite	cc
   d784a:	2001      	movcc	r0, #1
   d784c:	2000      	movcs	r0, #0
   d784e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7852:	bf00      	nop

000d7854 <__aeabi_dcmple>:
   d7854:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7858:	f7ff ffe0 	bl	d781c <__aeabi_cdcmpeq>
   d785c:	bf94      	ite	ls
   d785e:	2001      	movls	r0, #1
   d7860:	2000      	movhi	r0, #0
   d7862:	f85d fb08 	ldr.w	pc, [sp], #8
   d7866:	bf00      	nop

000d7868 <__aeabi_dcmpge>:
   d7868:	f84d ed08 	str.w	lr, [sp, #-8]!
   d786c:	f7ff ffce 	bl	d780c <__aeabi_cdrcmple>
   d7870:	bf94      	ite	ls
   d7872:	2001      	movls	r0, #1
   d7874:	2000      	movhi	r0, #0
   d7876:	f85d fb08 	ldr.w	pc, [sp], #8
   d787a:	bf00      	nop

000d787c <__aeabi_dcmpgt>:
   d787c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7880:	f7ff ffc4 	bl	d780c <__aeabi_cdrcmple>
   d7884:	bf34      	ite	cc
   d7886:	2001      	movcc	r0, #1
   d7888:	2000      	movcs	r0, #0
   d788a:	f85d fb08 	ldr.w	pc, [sp], #8
   d788e:	bf00      	nop

000d7890 <__aeabi_d2uiz>:
   d7890:	004a      	lsls	r2, r1, #1
   d7892:	d211      	bcs.n	d78b8 <__aeabi_d2uiz+0x28>
   d7894:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7898:	d211      	bcs.n	d78be <__aeabi_d2uiz+0x2e>
   d789a:	d50d      	bpl.n	d78b8 <__aeabi_d2uiz+0x28>
   d789c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d78a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d78a4:	d40e      	bmi.n	d78c4 <__aeabi_d2uiz+0x34>
   d78a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d78aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d78ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d78b2:	fa23 f002 	lsr.w	r0, r3, r2
   d78b6:	4770      	bx	lr
   d78b8:	f04f 0000 	mov.w	r0, #0
   d78bc:	4770      	bx	lr
   d78be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d78c2:	d102      	bne.n	d78ca <__aeabi_d2uiz+0x3a>
   d78c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d78c8:	4770      	bx	lr
   d78ca:	f04f 0000 	mov.w	r0, #0
   d78ce:	4770      	bx	lr

000d78d0 <__aeabi_d2f>:
   d78d0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d78d4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d78d8:	bf24      	itt	cs
   d78da:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d78de:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d78e2:	d90d      	bls.n	d7900 <__aeabi_d2f+0x30>
   d78e4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d78e8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d78ec:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d78f0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d78f4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d78f8:	bf08      	it	eq
   d78fa:	f020 0001 	biceq.w	r0, r0, #1
   d78fe:	4770      	bx	lr
   d7900:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7904:	d121      	bne.n	d794a <__aeabi_d2f+0x7a>
   d7906:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d790a:	bfbc      	itt	lt
   d790c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d7910:	4770      	bxlt	lr
   d7912:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7916:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d791a:	f1c2 0218 	rsb	r2, r2, #24
   d791e:	f1c2 0c20 	rsb	ip, r2, #32
   d7922:	fa10 f30c 	lsls.w	r3, r0, ip
   d7926:	fa20 f002 	lsr.w	r0, r0, r2
   d792a:	bf18      	it	ne
   d792c:	f040 0001 	orrne.w	r0, r0, #1
   d7930:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7934:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7938:	fa03 fc0c 	lsl.w	ip, r3, ip
   d793c:	ea40 000c 	orr.w	r0, r0, ip
   d7940:	fa23 f302 	lsr.w	r3, r3, r2
   d7944:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7948:	e7cc      	b.n	d78e4 <__aeabi_d2f+0x14>
   d794a:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d794e:	d107      	bne.n	d7960 <__aeabi_d2f+0x90>
   d7950:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7954:	bf1e      	ittt	ne
   d7956:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d795a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d795e:	4770      	bxne	lr
   d7960:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7964:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7968:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d796c:	4770      	bx	lr
   d796e:	bf00      	nop

000d7970 <__aeabi_d2ulz>:
   d7970:	b5d0      	push	{r4, r6, r7, lr}
   d7972:	4b0c      	ldr	r3, [pc, #48]	; (d79a4 <__aeabi_d2ulz+0x34>)
   d7974:	2200      	movs	r2, #0
   d7976:	4606      	mov	r6, r0
   d7978:	460f      	mov	r7, r1
   d797a:	f7ff fcef 	bl	d735c <__aeabi_dmul>
   d797e:	f7ff ff87 	bl	d7890 <__aeabi_d2uiz>
   d7982:	4604      	mov	r4, r0
   d7984:	f7ff fc70 	bl	d7268 <__aeabi_ui2d>
   d7988:	4b07      	ldr	r3, [pc, #28]	; (d79a8 <__aeabi_d2ulz+0x38>)
   d798a:	2200      	movs	r2, #0
   d798c:	f7ff fce6 	bl	d735c <__aeabi_dmul>
   d7990:	4602      	mov	r2, r0
   d7992:	460b      	mov	r3, r1
   d7994:	4630      	mov	r0, r6
   d7996:	4639      	mov	r1, r7
   d7998:	f7ff fb28 	bl	d6fec <__aeabi_dsub>
   d799c:	f7ff ff78 	bl	d7890 <__aeabi_d2uiz>
   d79a0:	4621      	mov	r1, r4
   d79a2:	bdd0      	pop	{r4, r6, r7, pc}
   d79a4:	3df00000 	.word	0x3df00000
   d79a8:	41f00000 	.word	0x41f00000

000d79ac <__udivmoddi4>:
   d79ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d79b0:	9d08      	ldr	r5, [sp, #32]
   d79b2:	4604      	mov	r4, r0
   d79b4:	468c      	mov	ip, r1
   d79b6:	2b00      	cmp	r3, #0
   d79b8:	f040 8083 	bne.w	d7ac2 <__udivmoddi4+0x116>
   d79bc:	428a      	cmp	r2, r1
   d79be:	4617      	mov	r7, r2
   d79c0:	d947      	bls.n	d7a52 <__udivmoddi4+0xa6>
   d79c2:	fab2 f282 	clz	r2, r2
   d79c6:	b142      	cbz	r2, d79da <__udivmoddi4+0x2e>
   d79c8:	f1c2 0020 	rsb	r0, r2, #32
   d79cc:	fa24 f000 	lsr.w	r0, r4, r0
   d79d0:	4091      	lsls	r1, r2
   d79d2:	4097      	lsls	r7, r2
   d79d4:	ea40 0c01 	orr.w	ip, r0, r1
   d79d8:	4094      	lsls	r4, r2
   d79da:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d79de:	0c23      	lsrs	r3, r4, #16
   d79e0:	fbbc f6f8 	udiv	r6, ip, r8
   d79e4:	fa1f fe87 	uxth.w	lr, r7
   d79e8:	fb08 c116 	mls	r1, r8, r6, ip
   d79ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d79f0:	fb06 f10e 	mul.w	r1, r6, lr
   d79f4:	4299      	cmp	r1, r3
   d79f6:	d909      	bls.n	d7a0c <__udivmoddi4+0x60>
   d79f8:	18fb      	adds	r3, r7, r3
   d79fa:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   d79fe:	f080 8119 	bcs.w	d7c34 <__udivmoddi4+0x288>
   d7a02:	4299      	cmp	r1, r3
   d7a04:	f240 8116 	bls.w	d7c34 <__udivmoddi4+0x288>
   d7a08:	3e02      	subs	r6, #2
   d7a0a:	443b      	add	r3, r7
   d7a0c:	1a5b      	subs	r3, r3, r1
   d7a0e:	b2a4      	uxth	r4, r4
   d7a10:	fbb3 f0f8 	udiv	r0, r3, r8
   d7a14:	fb08 3310 	mls	r3, r8, r0, r3
   d7a18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d7a1c:	fb00 fe0e 	mul.w	lr, r0, lr
   d7a20:	45a6      	cmp	lr, r4
   d7a22:	d909      	bls.n	d7a38 <__udivmoddi4+0x8c>
   d7a24:	193c      	adds	r4, r7, r4
   d7a26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7a2a:	f080 8105 	bcs.w	d7c38 <__udivmoddi4+0x28c>
   d7a2e:	45a6      	cmp	lr, r4
   d7a30:	f240 8102 	bls.w	d7c38 <__udivmoddi4+0x28c>
   d7a34:	3802      	subs	r0, #2
   d7a36:	443c      	add	r4, r7
   d7a38:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d7a3c:	eba4 040e 	sub.w	r4, r4, lr
   d7a40:	2600      	movs	r6, #0
   d7a42:	b11d      	cbz	r5, d7a4c <__udivmoddi4+0xa0>
   d7a44:	40d4      	lsrs	r4, r2
   d7a46:	2300      	movs	r3, #0
   d7a48:	e9c5 4300 	strd	r4, r3, [r5]
   d7a4c:	4631      	mov	r1, r6
   d7a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7a52:	b902      	cbnz	r2, d7a56 <__udivmoddi4+0xaa>
   d7a54:	deff      	udf	#255	; 0xff
   d7a56:	fab2 f282 	clz	r2, r2
   d7a5a:	2a00      	cmp	r2, #0
   d7a5c:	d150      	bne.n	d7b00 <__udivmoddi4+0x154>
   d7a5e:	1bcb      	subs	r3, r1, r7
   d7a60:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d7a64:	fa1f f887 	uxth.w	r8, r7
   d7a68:	2601      	movs	r6, #1
   d7a6a:	fbb3 fcfe 	udiv	ip, r3, lr
   d7a6e:	0c21      	lsrs	r1, r4, #16
   d7a70:	fb0e 331c 	mls	r3, lr, ip, r3
   d7a74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d7a78:	fb08 f30c 	mul.w	r3, r8, ip
   d7a7c:	428b      	cmp	r3, r1
   d7a7e:	d907      	bls.n	d7a90 <__udivmoddi4+0xe4>
   d7a80:	1879      	adds	r1, r7, r1
   d7a82:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
   d7a86:	d202      	bcs.n	d7a8e <__udivmoddi4+0xe2>
   d7a88:	428b      	cmp	r3, r1
   d7a8a:	f200 80e9 	bhi.w	d7c60 <__udivmoddi4+0x2b4>
   d7a8e:	4684      	mov	ip, r0
   d7a90:	1ac9      	subs	r1, r1, r3
   d7a92:	b2a3      	uxth	r3, r4
   d7a94:	fbb1 f0fe 	udiv	r0, r1, lr
   d7a98:	fb0e 1110 	mls	r1, lr, r0, r1
   d7a9c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d7aa0:	fb08 f800 	mul.w	r8, r8, r0
   d7aa4:	45a0      	cmp	r8, r4
   d7aa6:	d907      	bls.n	d7ab8 <__udivmoddi4+0x10c>
   d7aa8:	193c      	adds	r4, r7, r4
   d7aaa:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7aae:	d202      	bcs.n	d7ab6 <__udivmoddi4+0x10a>
   d7ab0:	45a0      	cmp	r8, r4
   d7ab2:	f200 80d9 	bhi.w	d7c68 <__udivmoddi4+0x2bc>
   d7ab6:	4618      	mov	r0, r3
   d7ab8:	eba4 0408 	sub.w	r4, r4, r8
   d7abc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d7ac0:	e7bf      	b.n	d7a42 <__udivmoddi4+0x96>
   d7ac2:	428b      	cmp	r3, r1
   d7ac4:	d909      	bls.n	d7ada <__udivmoddi4+0x12e>
   d7ac6:	2d00      	cmp	r5, #0
   d7ac8:	f000 80b1 	beq.w	d7c2e <__udivmoddi4+0x282>
   d7acc:	2600      	movs	r6, #0
   d7ace:	e9c5 0100 	strd	r0, r1, [r5]
   d7ad2:	4630      	mov	r0, r6
   d7ad4:	4631      	mov	r1, r6
   d7ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7ada:	fab3 f683 	clz	r6, r3
   d7ade:	2e00      	cmp	r6, #0
   d7ae0:	d14a      	bne.n	d7b78 <__udivmoddi4+0x1cc>
   d7ae2:	428b      	cmp	r3, r1
   d7ae4:	d302      	bcc.n	d7aec <__udivmoddi4+0x140>
   d7ae6:	4282      	cmp	r2, r0
   d7ae8:	f200 80b8 	bhi.w	d7c5c <__udivmoddi4+0x2b0>
   d7aec:	1a84      	subs	r4, r0, r2
   d7aee:	eb61 0103 	sbc.w	r1, r1, r3
   d7af2:	2001      	movs	r0, #1
   d7af4:	468c      	mov	ip, r1
   d7af6:	2d00      	cmp	r5, #0
   d7af8:	d0a8      	beq.n	d7a4c <__udivmoddi4+0xa0>
   d7afa:	e9c5 4c00 	strd	r4, ip, [r5]
   d7afe:	e7a5      	b.n	d7a4c <__udivmoddi4+0xa0>
   d7b00:	f1c2 0320 	rsb	r3, r2, #32
   d7b04:	fa20 f603 	lsr.w	r6, r0, r3
   d7b08:	4097      	lsls	r7, r2
   d7b0a:	fa01 f002 	lsl.w	r0, r1, r2
   d7b0e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d7b12:	40d9      	lsrs	r1, r3
   d7b14:	4330      	orrs	r0, r6
   d7b16:	0c03      	lsrs	r3, r0, #16
   d7b18:	fbb1 f6fe 	udiv	r6, r1, lr
   d7b1c:	fa1f f887 	uxth.w	r8, r7
   d7b20:	fb0e 1116 	mls	r1, lr, r6, r1
   d7b24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d7b28:	fb06 f108 	mul.w	r1, r6, r8
   d7b2c:	4299      	cmp	r1, r3
   d7b2e:	fa04 f402 	lsl.w	r4, r4, r2
   d7b32:	d909      	bls.n	d7b48 <__udivmoddi4+0x19c>
   d7b34:	18fb      	adds	r3, r7, r3
   d7b36:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
   d7b3a:	f080 808d 	bcs.w	d7c58 <__udivmoddi4+0x2ac>
   d7b3e:	4299      	cmp	r1, r3
   d7b40:	f240 808a 	bls.w	d7c58 <__udivmoddi4+0x2ac>
   d7b44:	3e02      	subs	r6, #2
   d7b46:	443b      	add	r3, r7
   d7b48:	1a5b      	subs	r3, r3, r1
   d7b4a:	b281      	uxth	r1, r0
   d7b4c:	fbb3 f0fe 	udiv	r0, r3, lr
   d7b50:	fb0e 3310 	mls	r3, lr, r0, r3
   d7b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d7b58:	fb00 f308 	mul.w	r3, r0, r8
   d7b5c:	428b      	cmp	r3, r1
   d7b5e:	d907      	bls.n	d7b70 <__udivmoddi4+0x1c4>
   d7b60:	1879      	adds	r1, r7, r1
   d7b62:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
   d7b66:	d273      	bcs.n	d7c50 <__udivmoddi4+0x2a4>
   d7b68:	428b      	cmp	r3, r1
   d7b6a:	d971      	bls.n	d7c50 <__udivmoddi4+0x2a4>
   d7b6c:	3802      	subs	r0, #2
   d7b6e:	4439      	add	r1, r7
   d7b70:	1acb      	subs	r3, r1, r3
   d7b72:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   d7b76:	e778      	b.n	d7a6a <__udivmoddi4+0xbe>
   d7b78:	f1c6 0c20 	rsb	ip, r6, #32
   d7b7c:	fa03 f406 	lsl.w	r4, r3, r6
   d7b80:	fa22 f30c 	lsr.w	r3, r2, ip
   d7b84:	431c      	orrs	r4, r3
   d7b86:	fa20 f70c 	lsr.w	r7, r0, ip
   d7b8a:	fa01 f306 	lsl.w	r3, r1, r6
   d7b8e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   d7b92:	fa21 f10c 	lsr.w	r1, r1, ip
   d7b96:	431f      	orrs	r7, r3
   d7b98:	0c3b      	lsrs	r3, r7, #16
   d7b9a:	fbb1 f9fe 	udiv	r9, r1, lr
   d7b9e:	fa1f f884 	uxth.w	r8, r4
   d7ba2:	fb0e 1119 	mls	r1, lr, r9, r1
   d7ba6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   d7baa:	fb09 fa08 	mul.w	sl, r9, r8
   d7bae:	458a      	cmp	sl, r1
   d7bb0:	fa02 f206 	lsl.w	r2, r2, r6
   d7bb4:	fa00 f306 	lsl.w	r3, r0, r6
   d7bb8:	d908      	bls.n	d7bcc <__udivmoddi4+0x220>
   d7bba:	1861      	adds	r1, r4, r1
   d7bbc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d7bc0:	d248      	bcs.n	d7c54 <__udivmoddi4+0x2a8>
   d7bc2:	458a      	cmp	sl, r1
   d7bc4:	d946      	bls.n	d7c54 <__udivmoddi4+0x2a8>
   d7bc6:	f1a9 0902 	sub.w	r9, r9, #2
   d7bca:	4421      	add	r1, r4
   d7bcc:	eba1 010a 	sub.w	r1, r1, sl
   d7bd0:	b2bf      	uxth	r7, r7
   d7bd2:	fbb1 f0fe 	udiv	r0, r1, lr
   d7bd6:	fb0e 1110 	mls	r1, lr, r0, r1
   d7bda:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   d7bde:	fb00 f808 	mul.w	r8, r0, r8
   d7be2:	45b8      	cmp	r8, r7
   d7be4:	d907      	bls.n	d7bf6 <__udivmoddi4+0x24a>
   d7be6:	19e7      	adds	r7, r4, r7
   d7be8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   d7bec:	d22e      	bcs.n	d7c4c <__udivmoddi4+0x2a0>
   d7bee:	45b8      	cmp	r8, r7
   d7bf0:	d92c      	bls.n	d7c4c <__udivmoddi4+0x2a0>
   d7bf2:	3802      	subs	r0, #2
   d7bf4:	4427      	add	r7, r4
   d7bf6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   d7bfa:	eba7 0708 	sub.w	r7, r7, r8
   d7bfe:	fba0 8902 	umull	r8, r9, r0, r2
   d7c02:	454f      	cmp	r7, r9
   d7c04:	46c6      	mov	lr, r8
   d7c06:	4649      	mov	r1, r9
   d7c08:	d31a      	bcc.n	d7c40 <__udivmoddi4+0x294>
   d7c0a:	d017      	beq.n	d7c3c <__udivmoddi4+0x290>
   d7c0c:	b15d      	cbz	r5, d7c26 <__udivmoddi4+0x27a>
   d7c0e:	ebb3 020e 	subs.w	r2, r3, lr
   d7c12:	eb67 0701 	sbc.w	r7, r7, r1
   d7c16:	fa07 fc0c 	lsl.w	ip, r7, ip
   d7c1a:	40f2      	lsrs	r2, r6
   d7c1c:	ea4c 0202 	orr.w	r2, ip, r2
   d7c20:	40f7      	lsrs	r7, r6
   d7c22:	e9c5 2700 	strd	r2, r7, [r5]
   d7c26:	2600      	movs	r6, #0
   d7c28:	4631      	mov	r1, r6
   d7c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7c2e:	462e      	mov	r6, r5
   d7c30:	4628      	mov	r0, r5
   d7c32:	e70b      	b.n	d7a4c <__udivmoddi4+0xa0>
   d7c34:	4606      	mov	r6, r0
   d7c36:	e6e9      	b.n	d7a0c <__udivmoddi4+0x60>
   d7c38:	4618      	mov	r0, r3
   d7c3a:	e6fd      	b.n	d7a38 <__udivmoddi4+0x8c>
   d7c3c:	4543      	cmp	r3, r8
   d7c3e:	d2e5      	bcs.n	d7c0c <__udivmoddi4+0x260>
   d7c40:	ebb8 0e02 	subs.w	lr, r8, r2
   d7c44:	eb69 0104 	sbc.w	r1, r9, r4
   d7c48:	3801      	subs	r0, #1
   d7c4a:	e7df      	b.n	d7c0c <__udivmoddi4+0x260>
   d7c4c:	4608      	mov	r0, r1
   d7c4e:	e7d2      	b.n	d7bf6 <__udivmoddi4+0x24a>
   d7c50:	4660      	mov	r0, ip
   d7c52:	e78d      	b.n	d7b70 <__udivmoddi4+0x1c4>
   d7c54:	4681      	mov	r9, r0
   d7c56:	e7b9      	b.n	d7bcc <__udivmoddi4+0x220>
   d7c58:	4666      	mov	r6, ip
   d7c5a:	e775      	b.n	d7b48 <__udivmoddi4+0x19c>
   d7c5c:	4630      	mov	r0, r6
   d7c5e:	e74a      	b.n	d7af6 <__udivmoddi4+0x14a>
   d7c60:	f1ac 0c02 	sub.w	ip, ip, #2
   d7c64:	4439      	add	r1, r7
   d7c66:	e713      	b.n	d7a90 <__udivmoddi4+0xe4>
   d7c68:	3802      	subs	r0, #2
   d7c6a:	443c      	add	r4, r7
   d7c6c:	e724      	b.n	d7ab8 <__udivmoddi4+0x10c>
   d7c6e:	bf00      	nop

000d7c70 <__aeabi_idiv0>:
   d7c70:	4770      	bx	lr
   d7c72:	bf00      	nop

000d7c74 <atof>:
   d7c74:	2100      	movs	r1, #0
   d7c76:	f000 bfc5 	b.w	d8c04 <strtod>

000d7c7a <atoi>:
   d7c7a:	220a      	movs	r2, #10
   d7c7c:	2100      	movs	r1, #0
   d7c7e:	f001 b847 	b.w	d8d10 <strtol>
	...

000d7c84 <__cxa_atexit>:
   d7c84:	b510      	push	{r4, lr}
   d7c86:	4c05      	ldr	r4, [pc, #20]	; (d7c9c <__cxa_atexit+0x18>)
   d7c88:	4613      	mov	r3, r2
   d7c8a:	b12c      	cbz	r4, d7c98 <__cxa_atexit+0x14>
   d7c8c:	460a      	mov	r2, r1
   d7c8e:	4601      	mov	r1, r0
   d7c90:	2002      	movs	r0, #2
   d7c92:	f3af 8000 	nop.w
   d7c96:	bd10      	pop	{r4, pc}
   d7c98:	4620      	mov	r0, r4
   d7c9a:	e7fc      	b.n	d7c96 <__cxa_atexit+0x12>
   d7c9c:	00000000 	.word	0x00000000

000d7ca0 <localtime_r>:
   d7ca0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7ca4:	4607      	mov	r7, r0
   d7ca6:	9101      	str	r1, [sp, #4]
   d7ca8:	f001 fe98 	bl	d99dc <__gettzinfo>
   d7cac:	9901      	ldr	r1, [sp, #4]
   d7cae:	4680      	mov	r8, r0
   d7cb0:	4638      	mov	r0, r7
   d7cb2:	f001 fe97 	bl	d99e4 <gmtime_r>
   d7cb6:	6943      	ldr	r3, [r0, #20]
   d7cb8:	079a      	lsls	r2, r3, #30
   d7cba:	4604      	mov	r4, r0
   d7cbc:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   d7cc0:	d105      	bne.n	d7cce <localtime_r+0x2e>
   d7cc2:	2264      	movs	r2, #100	; 0x64
   d7cc4:	fb96 f3f2 	sdiv	r3, r6, r2
   d7cc8:	fb02 6313 	mls	r3, r2, r3, r6
   d7ccc:	bb7b      	cbnz	r3, d7d2e <localtime_r+0x8e>
   d7cce:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d7cd2:	fb96 f5f3 	sdiv	r5, r6, r3
   d7cd6:	fb03 6515 	mls	r5, r3, r5, r6
   d7cda:	fab5 f585 	clz	r5, r5
   d7cde:	096d      	lsrs	r5, r5, #5
   d7ce0:	4b68      	ldr	r3, [pc, #416]	; (d7e84 <localtime_r+0x1e4>)
   d7ce2:	2230      	movs	r2, #48	; 0x30
   d7ce4:	fb02 3505 	mla	r5, r2, r5, r3
   d7ce8:	f001 f94a 	bl	d8f80 <__tz_lock>
   d7cec:	f001 f954 	bl	d8f98 <_tzset_unlocked>
   d7cf0:	4b65      	ldr	r3, [pc, #404]	; (d7e88 <localtime_r+0x1e8>)
   d7cf2:	681b      	ldr	r3, [r3, #0]
   d7cf4:	b353      	cbz	r3, d7d4c <localtime_r+0xac>
   d7cf6:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d7cfa:	42b3      	cmp	r3, r6
   d7cfc:	d119      	bne.n	d7d32 <localtime_r+0x92>
   d7cfe:	f8d8 1000 	ldr.w	r1, [r8]
   d7d02:	e9d7 6700 	ldrd	r6, r7, [r7]
   d7d06:	e9d8 2308 	ldrd	r2, r3, [r8, #32]
   d7d0a:	b9d1      	cbnz	r1, d7d42 <localtime_r+0xa2>
   d7d0c:	4296      	cmp	r6, r2
   d7d0e:	eb77 0303 	sbcs.w	r3, r7, r3
   d7d12:	da23      	bge.n	d7d5c <localtime_r+0xbc>
   d7d14:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
   d7d18:	4296      	cmp	r6, r2
   d7d1a:	eb77 0303 	sbcs.w	r3, r7, r3
   d7d1e:	bfb4      	ite	lt
   d7d20:	2301      	movlt	r3, #1
   d7d22:	2300      	movge	r3, #0
   d7d24:	6223      	str	r3, [r4, #32]
   d7d26:	db1b      	blt.n	d7d60 <localtime_r+0xc0>
   d7d28:	f8d8 1028 	ldr.w	r1, [r8, #40]	; 0x28
   d7d2c:	e01a      	b.n	d7d64 <localtime_r+0xc4>
   d7d2e:	2501      	movs	r5, #1
   d7d30:	e7d6      	b.n	d7ce0 <localtime_r+0x40>
   d7d32:	4630      	mov	r0, r6
   d7d34:	f001 f87c 	bl	d8e30 <__tzcalc_limits>
   d7d38:	2800      	cmp	r0, #0
   d7d3a:	d1e0      	bne.n	d7cfe <localtime_r+0x5e>
   d7d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7d40:	e004      	b.n	d7d4c <localtime_r+0xac>
   d7d42:	4296      	cmp	r6, r2
   d7d44:	eb77 0303 	sbcs.w	r3, r7, r3
   d7d48:	da02      	bge.n	d7d50 <localtime_r+0xb0>
   d7d4a:	2300      	movs	r3, #0
   d7d4c:	6223      	str	r3, [r4, #32]
   d7d4e:	e7eb      	b.n	d7d28 <localtime_r+0x88>
   d7d50:	e9d8 2312 	ldrd	r2, r3, [r8, #72]	; 0x48
   d7d54:	4296      	cmp	r6, r2
   d7d56:	eb77 0303 	sbcs.w	r3, r7, r3
   d7d5a:	daf6      	bge.n	d7d4a <localtime_r+0xaa>
   d7d5c:	2301      	movs	r3, #1
   d7d5e:	6223      	str	r3, [r4, #32]
   d7d60:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
   d7d64:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7d68:	203c      	movs	r0, #60	; 0x3c
   d7d6a:	fb91 f6f3 	sdiv	r6, r1, r3
   d7d6e:	fb03 1316 	mls	r3, r3, r6, r1
   d7d72:	6861      	ldr	r1, [r4, #4]
   d7d74:	fb93 f2f0 	sdiv	r2, r3, r0
   d7d78:	fb00 3012 	mls	r0, r0, r2, r3
   d7d7c:	6823      	ldr	r3, [r4, #0]
   d7d7e:	1a89      	subs	r1, r1, r2
   d7d80:	68a2      	ldr	r2, [r4, #8]
   d7d82:	6061      	str	r1, [r4, #4]
   d7d84:	1a1b      	subs	r3, r3, r0
   d7d86:	1b92      	subs	r2, r2, r6
   d7d88:	2b3b      	cmp	r3, #59	; 0x3b
   d7d8a:	6023      	str	r3, [r4, #0]
   d7d8c:	60a2      	str	r2, [r4, #8]
   d7d8e:	dd35      	ble.n	d7dfc <localtime_r+0x15c>
   d7d90:	3101      	adds	r1, #1
   d7d92:	6061      	str	r1, [r4, #4]
   d7d94:	3b3c      	subs	r3, #60	; 0x3c
   d7d96:	6023      	str	r3, [r4, #0]
   d7d98:	6863      	ldr	r3, [r4, #4]
   d7d9a:	2b3b      	cmp	r3, #59	; 0x3b
   d7d9c:	dd34      	ble.n	d7e08 <localtime_r+0x168>
   d7d9e:	3201      	adds	r2, #1
   d7da0:	60a2      	str	r2, [r4, #8]
   d7da2:	3b3c      	subs	r3, #60	; 0x3c
   d7da4:	6063      	str	r3, [r4, #4]
   d7da6:	68a3      	ldr	r3, [r4, #8]
   d7da8:	2b17      	cmp	r3, #23
   d7daa:	dd33      	ble.n	d7e14 <localtime_r+0x174>
   d7dac:	69e2      	ldr	r2, [r4, #28]
   d7dae:	3201      	adds	r2, #1
   d7db0:	61e2      	str	r2, [r4, #28]
   d7db2:	69a2      	ldr	r2, [r4, #24]
   d7db4:	3201      	adds	r2, #1
   d7db6:	2a06      	cmp	r2, #6
   d7db8:	bfc8      	it	gt
   d7dba:	2200      	movgt	r2, #0
   d7dbc:	61a2      	str	r2, [r4, #24]
   d7dbe:	68e2      	ldr	r2, [r4, #12]
   d7dc0:	3b18      	subs	r3, #24
   d7dc2:	3201      	adds	r2, #1
   d7dc4:	60a3      	str	r3, [r4, #8]
   d7dc6:	6923      	ldr	r3, [r4, #16]
   d7dc8:	60e2      	str	r2, [r4, #12]
   d7dca:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d7dce:	428a      	cmp	r2, r1
   d7dd0:	dd0e      	ble.n	d7df0 <localtime_r+0x150>
   d7dd2:	2b0b      	cmp	r3, #11
   d7dd4:	eba2 0201 	sub.w	r2, r2, r1
   d7dd8:	60e2      	str	r2, [r4, #12]
   d7dda:	f103 0201 	add.w	r2, r3, #1
   d7dde:	bf09      	itett	eq
   d7de0:	6963      	ldreq	r3, [r4, #20]
   d7de2:	6122      	strne	r2, [r4, #16]
   d7de4:	2200      	moveq	r2, #0
   d7de6:	3301      	addeq	r3, #1
   d7de8:	bf02      	ittt	eq
   d7dea:	6122      	streq	r2, [r4, #16]
   d7dec:	6163      	streq	r3, [r4, #20]
   d7dee:	61e2      	streq	r2, [r4, #28]
   d7df0:	f001 f8cc 	bl	d8f8c <__tz_unlock>
   d7df4:	4620      	mov	r0, r4
   d7df6:	b002      	add	sp, #8
   d7df8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7dfc:	2b00      	cmp	r3, #0
   d7dfe:	dacb      	bge.n	d7d98 <localtime_r+0xf8>
   d7e00:	3901      	subs	r1, #1
   d7e02:	6061      	str	r1, [r4, #4]
   d7e04:	333c      	adds	r3, #60	; 0x3c
   d7e06:	e7c6      	b.n	d7d96 <localtime_r+0xf6>
   d7e08:	2b00      	cmp	r3, #0
   d7e0a:	dacc      	bge.n	d7da6 <localtime_r+0x106>
   d7e0c:	3a01      	subs	r2, #1
   d7e0e:	60a2      	str	r2, [r4, #8]
   d7e10:	333c      	adds	r3, #60	; 0x3c
   d7e12:	e7c7      	b.n	d7da4 <localtime_r+0x104>
   d7e14:	2b00      	cmp	r3, #0
   d7e16:	daeb      	bge.n	d7df0 <localtime_r+0x150>
   d7e18:	69e2      	ldr	r2, [r4, #28]
   d7e1a:	3a01      	subs	r2, #1
   d7e1c:	61e2      	str	r2, [r4, #28]
   d7e1e:	69a2      	ldr	r2, [r4, #24]
   d7e20:	3a01      	subs	r2, #1
   d7e22:	bf48      	it	mi
   d7e24:	2206      	movmi	r2, #6
   d7e26:	61a2      	str	r2, [r4, #24]
   d7e28:	68e2      	ldr	r2, [r4, #12]
   d7e2a:	3318      	adds	r3, #24
   d7e2c:	3a01      	subs	r2, #1
   d7e2e:	60e2      	str	r2, [r4, #12]
   d7e30:	60a3      	str	r3, [r4, #8]
   d7e32:	2a00      	cmp	r2, #0
   d7e34:	d1dc      	bne.n	d7df0 <localtime_r+0x150>
   d7e36:	6923      	ldr	r3, [r4, #16]
   d7e38:	3b01      	subs	r3, #1
   d7e3a:	d405      	bmi.n	d7e48 <localtime_r+0x1a8>
   d7e3c:	6123      	str	r3, [r4, #16]
   d7e3e:	6923      	ldr	r3, [r4, #16]
   d7e40:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d7e44:	60e3      	str	r3, [r4, #12]
   d7e46:	e7d3      	b.n	d7df0 <localtime_r+0x150>
   d7e48:	230b      	movs	r3, #11
   d7e4a:	6123      	str	r3, [r4, #16]
   d7e4c:	6963      	ldr	r3, [r4, #20]
   d7e4e:	1e5a      	subs	r2, r3, #1
   d7e50:	6162      	str	r2, [r4, #20]
   d7e52:	f203 726b 	addw	r2, r3, #1899	; 0x76b
   d7e56:	0793      	lsls	r3, r2, #30
   d7e58:	d105      	bne.n	d7e66 <localtime_r+0x1c6>
   d7e5a:	2164      	movs	r1, #100	; 0x64
   d7e5c:	fb92 f3f1 	sdiv	r3, r2, r1
   d7e60:	fb01 2313 	mls	r3, r1, r3, r2
   d7e64:	b963      	cbnz	r3, d7e80 <localtime_r+0x1e0>
   d7e66:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d7e6a:	fb92 f3f1 	sdiv	r3, r2, r1
   d7e6e:	fb01 2313 	mls	r3, r1, r3, r2
   d7e72:	fab3 f383 	clz	r3, r3
   d7e76:	095b      	lsrs	r3, r3, #5
   d7e78:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d7e7c:	61e3      	str	r3, [r4, #28]
   d7e7e:	e7de      	b.n	d7e3e <localtime_r+0x19e>
   d7e80:	2301      	movs	r3, #1
   d7e82:	e7f9      	b.n	d7e78 <localtime_r+0x1d8>
   d7e84:	000daac8 	.word	0x000daac8
   d7e88:	2003e7dc 	.word	0x2003e7dc

000d7e8c <memcpy>:
   d7e8c:	440a      	add	r2, r1
   d7e8e:	4291      	cmp	r1, r2
   d7e90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7e94:	d100      	bne.n	d7e98 <memcpy+0xc>
   d7e96:	4770      	bx	lr
   d7e98:	b510      	push	{r4, lr}
   d7e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7e9e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7ea2:	4291      	cmp	r1, r2
   d7ea4:	d1f9      	bne.n	d7e9a <memcpy+0xe>
   d7ea6:	bd10      	pop	{r4, pc}

000d7ea8 <memset>:
   d7ea8:	4402      	add	r2, r0
   d7eaa:	4603      	mov	r3, r0
   d7eac:	4293      	cmp	r3, r2
   d7eae:	d100      	bne.n	d7eb2 <memset+0xa>
   d7eb0:	4770      	bx	lr
   d7eb2:	f803 1b01 	strb.w	r1, [r3], #1
   d7eb6:	e7f9      	b.n	d7eac <memset+0x4>

000d7eb8 <srand>:
   d7eb8:	b538      	push	{r3, r4, r5, lr}
   d7eba:	4b0d      	ldr	r3, [pc, #52]	; (d7ef0 <srand+0x38>)
   d7ebc:	681d      	ldr	r5, [r3, #0]
   d7ebe:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7ec0:	4604      	mov	r4, r0
   d7ec2:	b97b      	cbnz	r3, d7ee4 <srand+0x2c>
   d7ec4:	2018      	movs	r0, #24
   d7ec6:	f7fd fe3d 	bl	d5b44 <malloc>
   d7eca:	4a0a      	ldr	r2, [pc, #40]	; (d7ef4 <srand+0x3c>)
   d7ecc:	4b0a      	ldr	r3, [pc, #40]	; (d7ef8 <srand+0x40>)
   d7ece:	63a8      	str	r0, [r5, #56]	; 0x38
   d7ed0:	e9c0 2300 	strd	r2, r3, [r0]
   d7ed4:	4b09      	ldr	r3, [pc, #36]	; (d7efc <srand+0x44>)
   d7ed6:	6083      	str	r3, [r0, #8]
   d7ed8:	230b      	movs	r3, #11
   d7eda:	8183      	strh	r3, [r0, #12]
   d7edc:	2201      	movs	r2, #1
   d7ede:	2300      	movs	r3, #0
   d7ee0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7ee4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7ee6:	2200      	movs	r2, #0
   d7ee8:	611c      	str	r4, [r3, #16]
   d7eea:	615a      	str	r2, [r3, #20]
   d7eec:	bd38      	pop	{r3, r4, r5, pc}
   d7eee:	bf00      	nop
   d7ef0:	2003e1c4 	.word	0x2003e1c4
   d7ef4:	abcd330e 	.word	0xabcd330e
   d7ef8:	e66d1234 	.word	0xe66d1234
   d7efc:	0005deec 	.word	0x0005deec

000d7f00 <strcmp>:
   d7f00:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7f04:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7f08:	2a01      	cmp	r2, #1
   d7f0a:	bf28      	it	cs
   d7f0c:	429a      	cmpcs	r2, r3
   d7f0e:	d0f7      	beq.n	d7f00 <strcmp>
   d7f10:	1ad0      	subs	r0, r2, r3
   d7f12:	4770      	bx	lr

000d7f14 <strcpy>:
   d7f14:	4603      	mov	r3, r0
   d7f16:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7f1a:	f803 2b01 	strb.w	r2, [r3], #1
   d7f1e:	2a00      	cmp	r2, #0
   d7f20:	d1f9      	bne.n	d7f16 <strcpy+0x2>
   d7f22:	4770      	bx	lr

000d7f24 <strdup>:
   d7f24:	4b02      	ldr	r3, [pc, #8]	; (d7f30 <strdup+0xc>)
   d7f26:	4601      	mov	r1, r0
   d7f28:	6818      	ldr	r0, [r3, #0]
   d7f2a:	f000 b803 	b.w	d7f34 <_strdup_r>
   d7f2e:	bf00      	nop
   d7f30:	2003e1c4 	.word	0x2003e1c4

000d7f34 <_strdup_r>:
   d7f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7f36:	4604      	mov	r4, r0
   d7f38:	4608      	mov	r0, r1
   d7f3a:	460d      	mov	r5, r1
   d7f3c:	f000 f80f 	bl	d7f5e <strlen>
   d7f40:	1c42      	adds	r2, r0, #1
   d7f42:	4611      	mov	r1, r2
   d7f44:	4620      	mov	r0, r4
   d7f46:	9201      	str	r2, [sp, #4]
   d7f48:	f7fd fe2c 	bl	d5ba4 <_malloc_r>
   d7f4c:	4604      	mov	r4, r0
   d7f4e:	b118      	cbz	r0, d7f58 <_strdup_r+0x24>
   d7f50:	9a01      	ldr	r2, [sp, #4]
   d7f52:	4629      	mov	r1, r5
   d7f54:	f7ff ff9a 	bl	d7e8c <memcpy>
   d7f58:	4620      	mov	r0, r4
   d7f5a:	b003      	add	sp, #12
   d7f5c:	bd30      	pop	{r4, r5, pc}

000d7f5e <strlen>:
   d7f5e:	4603      	mov	r3, r0
   d7f60:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7f64:	2a00      	cmp	r2, #0
   d7f66:	d1fb      	bne.n	d7f60 <strlen+0x2>
   d7f68:	1a18      	subs	r0, r3, r0
   d7f6a:	3801      	subs	r0, #1
   d7f6c:	4770      	bx	lr

000d7f6e <strncmp>:
   d7f6e:	b510      	push	{r4, lr}
   d7f70:	b16a      	cbz	r2, d7f8e <strncmp+0x20>
   d7f72:	3901      	subs	r1, #1
   d7f74:	1884      	adds	r4, r0, r2
   d7f76:	f810 3b01 	ldrb.w	r3, [r0], #1
   d7f7a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d7f7e:	4293      	cmp	r3, r2
   d7f80:	d103      	bne.n	d7f8a <strncmp+0x1c>
   d7f82:	42a0      	cmp	r0, r4
   d7f84:	d001      	beq.n	d7f8a <strncmp+0x1c>
   d7f86:	2b00      	cmp	r3, #0
   d7f88:	d1f5      	bne.n	d7f76 <strncmp+0x8>
   d7f8a:	1a98      	subs	r0, r3, r2
   d7f8c:	bd10      	pop	{r4, pc}
   d7f8e:	4610      	mov	r0, r2
   d7f90:	e7fc      	b.n	d7f8c <strncmp+0x1e>

000d7f92 <strncpy>:
   d7f92:	b510      	push	{r4, lr}
   d7f94:	3901      	subs	r1, #1
   d7f96:	4603      	mov	r3, r0
   d7f98:	b132      	cbz	r2, d7fa8 <strncpy+0x16>
   d7f9a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d7f9e:	f803 4b01 	strb.w	r4, [r3], #1
   d7fa2:	3a01      	subs	r2, #1
   d7fa4:	2c00      	cmp	r4, #0
   d7fa6:	d1f7      	bne.n	d7f98 <strncpy+0x6>
   d7fa8:	441a      	add	r2, r3
   d7faa:	2100      	movs	r1, #0
   d7fac:	4293      	cmp	r3, r2
   d7fae:	d100      	bne.n	d7fb2 <strncpy+0x20>
   d7fb0:	bd10      	pop	{r4, pc}
   d7fb2:	f803 1b01 	strb.w	r1, [r3], #1
   d7fb6:	e7f9      	b.n	d7fac <strncpy+0x1a>

000d7fb8 <sulp>:
   d7fb8:	b570      	push	{r4, r5, r6, lr}
   d7fba:	4604      	mov	r4, r0
   d7fbc:	460d      	mov	r5, r1
   d7fbe:	ec45 4b10 	vmov	d0, r4, r5
   d7fc2:	4616      	mov	r6, r2
   d7fc4:	f002 f8d0 	bl	da168 <__ulp>
   d7fc8:	ec51 0b10 	vmov	r0, r1, d0
   d7fcc:	b17e      	cbz	r6, d7fee <sulp+0x36>
   d7fce:	f3c5 530a 	ubfx	r3, r5, #20, #11
   d7fd2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d7fd6:	2b00      	cmp	r3, #0
   d7fd8:	dd09      	ble.n	d7fee <sulp+0x36>
   d7fda:	051b      	lsls	r3, r3, #20
   d7fdc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
   d7fe0:	2400      	movs	r4, #0
   d7fe2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
   d7fe6:	4622      	mov	r2, r4
   d7fe8:	462b      	mov	r3, r5
   d7fea:	f7ff f9b7 	bl	d735c <__aeabi_dmul>
   d7fee:	bd70      	pop	{r4, r5, r6, pc}

000d7ff0 <_strtod_l>:
   d7ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7ff4:	b0a3      	sub	sp, #140	; 0x8c
   d7ff6:	461f      	mov	r7, r3
   d7ff8:	2300      	movs	r3, #0
   d7ffa:	931e      	str	r3, [sp, #120]	; 0x78
   d7ffc:	4ba4      	ldr	r3, [pc, #656]	; (d8290 <_strtod_l+0x2a0>)
   d7ffe:	9219      	str	r2, [sp, #100]	; 0x64
   d8000:	681b      	ldr	r3, [r3, #0]
   d8002:	9307      	str	r3, [sp, #28]
   d8004:	4604      	mov	r4, r0
   d8006:	4618      	mov	r0, r3
   d8008:	4688      	mov	r8, r1
   d800a:	f7ff ffa8 	bl	d7f5e <strlen>
   d800e:	f04f 0a00 	mov.w	sl, #0
   d8012:	4605      	mov	r5, r0
   d8014:	f04f 0b00 	mov.w	fp, #0
   d8018:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d801c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d801e:	781a      	ldrb	r2, [r3, #0]
   d8020:	2a2b      	cmp	r2, #43	; 0x2b
   d8022:	d04c      	beq.n	d80be <_strtod_l+0xce>
   d8024:	d839      	bhi.n	d809a <_strtod_l+0xaa>
   d8026:	2a0d      	cmp	r2, #13
   d8028:	d832      	bhi.n	d8090 <_strtod_l+0xa0>
   d802a:	2a08      	cmp	r2, #8
   d802c:	d832      	bhi.n	d8094 <_strtod_l+0xa4>
   d802e:	2a00      	cmp	r2, #0
   d8030:	d03c      	beq.n	d80ac <_strtod_l+0xbc>
   d8032:	2300      	movs	r3, #0
   d8034:	930e      	str	r3, [sp, #56]	; 0x38
   d8036:	9e1d      	ldr	r6, [sp, #116]	; 0x74
   d8038:	7833      	ldrb	r3, [r6, #0]
   d803a:	2b30      	cmp	r3, #48	; 0x30
   d803c:	f040 80b4 	bne.w	d81a8 <_strtod_l+0x1b8>
   d8040:	7873      	ldrb	r3, [r6, #1]
   d8042:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d8046:	2b58      	cmp	r3, #88	; 0x58
   d8048:	d16c      	bne.n	d8124 <_strtod_l+0x134>
   d804a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d804c:	9301      	str	r3, [sp, #4]
   d804e:	ab1e      	add	r3, sp, #120	; 0x78
   d8050:	9702      	str	r7, [sp, #8]
   d8052:	9300      	str	r3, [sp, #0]
   d8054:	4a8f      	ldr	r2, [pc, #572]	; (d8294 <_strtod_l+0x2a4>)
   d8056:	ab1f      	add	r3, sp, #124	; 0x7c
   d8058:	a91d      	add	r1, sp, #116	; 0x74
   d805a:	4620      	mov	r0, r4
   d805c:	f001 f986 	bl	d936c <__gethex>
   d8060:	f010 0707 	ands.w	r7, r0, #7
   d8064:	4605      	mov	r5, r0
   d8066:	d005      	beq.n	d8074 <_strtod_l+0x84>
   d8068:	2f06      	cmp	r7, #6
   d806a:	d12a      	bne.n	d80c2 <_strtod_l+0xd2>
   d806c:	3601      	adds	r6, #1
   d806e:	2300      	movs	r3, #0
   d8070:	961d      	str	r6, [sp, #116]	; 0x74
   d8072:	930e      	str	r3, [sp, #56]	; 0x38
   d8074:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d8076:	2b00      	cmp	r3, #0
   d8078:	f040 8596 	bne.w	d8ba8 <_strtod_l+0xbb8>
   d807c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   d807e:	b1db      	cbz	r3, d80b8 <_strtod_l+0xc8>
   d8080:	4652      	mov	r2, sl
   d8082:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
   d8086:	ec43 2b10 	vmov	d0, r2, r3
   d808a:	b023      	add	sp, #140	; 0x8c
   d808c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8090:	2a20      	cmp	r2, #32
   d8092:	d1ce      	bne.n	d8032 <_strtod_l+0x42>
   d8094:	3301      	adds	r3, #1
   d8096:	931d      	str	r3, [sp, #116]	; 0x74
   d8098:	e7c0      	b.n	d801c <_strtod_l+0x2c>
   d809a:	2a2d      	cmp	r2, #45	; 0x2d
   d809c:	d1c9      	bne.n	d8032 <_strtod_l+0x42>
   d809e:	2201      	movs	r2, #1
   d80a0:	920e      	str	r2, [sp, #56]	; 0x38
   d80a2:	1c5a      	adds	r2, r3, #1
   d80a4:	921d      	str	r2, [sp, #116]	; 0x74
   d80a6:	785b      	ldrb	r3, [r3, #1]
   d80a8:	2b00      	cmp	r3, #0
   d80aa:	d1c4      	bne.n	d8036 <_strtod_l+0x46>
   d80ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
   d80ae:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d80b2:	2b00      	cmp	r3, #0
   d80b4:	f040 8576 	bne.w	d8ba4 <_strtod_l+0xbb4>
   d80b8:	4652      	mov	r2, sl
   d80ba:	465b      	mov	r3, fp
   d80bc:	e7e3      	b.n	d8086 <_strtod_l+0x96>
   d80be:	2200      	movs	r2, #0
   d80c0:	e7ee      	b.n	d80a0 <_strtod_l+0xb0>
   d80c2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d80c4:	b13a      	cbz	r2, d80d6 <_strtod_l+0xe6>
   d80c6:	2135      	movs	r1, #53	; 0x35
   d80c8:	a820      	add	r0, sp, #128	; 0x80
   d80ca:	f002 f94c 	bl	da366 <__copybits>
   d80ce:	991e      	ldr	r1, [sp, #120]	; 0x78
   d80d0:	4620      	mov	r0, r4
   d80d2:	f001 fd81 	bl	d9bd8 <_Bfree>
   d80d6:	3f01      	subs	r7, #1
   d80d8:	2f05      	cmp	r7, #5
   d80da:	d807      	bhi.n	d80ec <_strtod_l+0xfc>
   d80dc:	e8df f007 	tbb	[pc, r7]
   d80e0:	1d180b0e 	.word	0x1d180b0e
   d80e4:	030e      	.short	0x030e
   d80e6:	f04f 0b00 	mov.w	fp, #0
   d80ea:	46da      	mov	sl, fp
   d80ec:	0728      	lsls	r0, r5, #28
   d80ee:	d5c1      	bpl.n	d8074 <_strtod_l+0x84>
   d80f0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
   d80f4:	e7be      	b.n	d8074 <_strtod_l+0x84>
   d80f6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
   d80fa:	e7f7      	b.n	d80ec <_strtod_l+0xfc>
   d80fc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
   d8100:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   d8102:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   d8106:	f202 4233 	addw	r2, r2, #1075	; 0x433
   d810a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
   d810e:	e7ed      	b.n	d80ec <_strtod_l+0xfc>
   d8110:	f8df b184 	ldr.w	fp, [pc, #388]	; d8298 <_strtod_l+0x2a8>
   d8114:	f04f 0a00 	mov.w	sl, #0
   d8118:	e7e8      	b.n	d80ec <_strtod_l+0xfc>
   d811a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
   d811e:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8122:	e7e3      	b.n	d80ec <_strtod_l+0xfc>
   d8124:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8126:	1c5a      	adds	r2, r3, #1
   d8128:	921d      	str	r2, [sp, #116]	; 0x74
   d812a:	785b      	ldrb	r3, [r3, #1]
   d812c:	2b30      	cmp	r3, #48	; 0x30
   d812e:	d0f9      	beq.n	d8124 <_strtod_l+0x134>
   d8130:	2b00      	cmp	r3, #0
   d8132:	d09f      	beq.n	d8074 <_strtod_l+0x84>
   d8134:	2301      	movs	r3, #1
   d8136:	f04f 0900 	mov.w	r9, #0
   d813a:	9304      	str	r3, [sp, #16]
   d813c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d813e:	930a      	str	r3, [sp, #40]	; 0x28
   d8140:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
   d8144:	464f      	mov	r7, r9
   d8146:	220a      	movs	r2, #10
   d8148:	981d      	ldr	r0, [sp, #116]	; 0x74
   d814a:	7806      	ldrb	r6, [r0, #0]
   d814c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   d8150:	b2d9      	uxtb	r1, r3
   d8152:	2909      	cmp	r1, #9
   d8154:	d92a      	bls.n	d81ac <_strtod_l+0x1bc>
   d8156:	9907      	ldr	r1, [sp, #28]
   d8158:	462a      	mov	r2, r5
   d815a:	f7ff ff08 	bl	d7f6e <strncmp>
   d815e:	b398      	cbz	r0, d81c8 <_strtod_l+0x1d8>
   d8160:	2000      	movs	r0, #0
   d8162:	4633      	mov	r3, r6
   d8164:	463d      	mov	r5, r7
   d8166:	9007      	str	r0, [sp, #28]
   d8168:	4602      	mov	r2, r0
   d816a:	2b65      	cmp	r3, #101	; 0x65
   d816c:	d001      	beq.n	d8172 <_strtod_l+0x182>
   d816e:	2b45      	cmp	r3, #69	; 0x45
   d8170:	d118      	bne.n	d81a4 <_strtod_l+0x1b4>
   d8172:	b91d      	cbnz	r5, d817c <_strtod_l+0x18c>
   d8174:	9b04      	ldr	r3, [sp, #16]
   d8176:	4303      	orrs	r3, r0
   d8178:	d098      	beq.n	d80ac <_strtod_l+0xbc>
   d817a:	2500      	movs	r5, #0
   d817c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
   d8180:	f108 0301 	add.w	r3, r8, #1
   d8184:	931d      	str	r3, [sp, #116]	; 0x74
   d8186:	f898 3001 	ldrb.w	r3, [r8, #1]
   d818a:	2b2b      	cmp	r3, #43	; 0x2b
   d818c:	d075      	beq.n	d827a <_strtod_l+0x28a>
   d818e:	2b2d      	cmp	r3, #45	; 0x2d
   d8190:	d07b      	beq.n	d828a <_strtod_l+0x29a>
   d8192:	f04f 0c00 	mov.w	ip, #0
   d8196:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d819a:	2909      	cmp	r1, #9
   d819c:	f240 8082 	bls.w	d82a4 <_strtod_l+0x2b4>
   d81a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
   d81a4:	2600      	movs	r6, #0
   d81a6:	e09d      	b.n	d82e4 <_strtod_l+0x2f4>
   d81a8:	2300      	movs	r3, #0
   d81aa:	e7c4      	b.n	d8136 <_strtod_l+0x146>
   d81ac:	2f08      	cmp	r7, #8
   d81ae:	bfd8      	it	le
   d81b0:	9909      	ldrle	r1, [sp, #36]	; 0x24
   d81b2:	f100 0001 	add.w	r0, r0, #1
   d81b6:	bfda      	itte	le
   d81b8:	fb02 3301 	mlale	r3, r2, r1, r3
   d81bc:	9309      	strle	r3, [sp, #36]	; 0x24
   d81be:	fb02 3909 	mlagt	r9, r2, r9, r3
   d81c2:	3701      	adds	r7, #1
   d81c4:	901d      	str	r0, [sp, #116]	; 0x74
   d81c6:	e7bf      	b.n	d8148 <_strtod_l+0x158>
   d81c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d81ca:	195a      	adds	r2, r3, r5
   d81cc:	921d      	str	r2, [sp, #116]	; 0x74
   d81ce:	5d5b      	ldrb	r3, [r3, r5]
   d81d0:	2f00      	cmp	r7, #0
   d81d2:	d037      	beq.n	d8244 <_strtod_l+0x254>
   d81d4:	9007      	str	r0, [sp, #28]
   d81d6:	463d      	mov	r5, r7
   d81d8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d81dc:	2a09      	cmp	r2, #9
   d81de:	d912      	bls.n	d8206 <_strtod_l+0x216>
   d81e0:	2201      	movs	r2, #1
   d81e2:	e7c2      	b.n	d816a <_strtod_l+0x17a>
   d81e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d81e6:	1c5a      	adds	r2, r3, #1
   d81e8:	921d      	str	r2, [sp, #116]	; 0x74
   d81ea:	785b      	ldrb	r3, [r3, #1]
   d81ec:	3001      	adds	r0, #1
   d81ee:	2b30      	cmp	r3, #48	; 0x30
   d81f0:	d0f8      	beq.n	d81e4 <_strtod_l+0x1f4>
   d81f2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
   d81f6:	2a08      	cmp	r2, #8
   d81f8:	f200 84db 	bhi.w	d8bb2 <_strtod_l+0xbc2>
   d81fc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
   d81fe:	9007      	str	r0, [sp, #28]
   d8200:	2000      	movs	r0, #0
   d8202:	920a      	str	r2, [sp, #40]	; 0x28
   d8204:	4605      	mov	r5, r0
   d8206:	3b30      	subs	r3, #48	; 0x30
   d8208:	f100 0201 	add.w	r2, r0, #1
   d820c:	d014      	beq.n	d8238 <_strtod_l+0x248>
   d820e:	9907      	ldr	r1, [sp, #28]
   d8210:	4411      	add	r1, r2
   d8212:	9107      	str	r1, [sp, #28]
   d8214:	462a      	mov	r2, r5
   d8216:	eb00 0e05 	add.w	lr, r0, r5
   d821a:	210a      	movs	r1, #10
   d821c:	4572      	cmp	r2, lr
   d821e:	d113      	bne.n	d8248 <_strtod_l+0x258>
   d8220:	182a      	adds	r2, r5, r0
   d8222:	2a08      	cmp	r2, #8
   d8224:	f105 0501 	add.w	r5, r5, #1
   d8228:	4405      	add	r5, r0
   d822a:	dc1c      	bgt.n	d8266 <_strtod_l+0x276>
   d822c:	9909      	ldr	r1, [sp, #36]	; 0x24
   d822e:	220a      	movs	r2, #10
   d8230:	fb02 3301 	mla	r3, r2, r1, r3
   d8234:	9309      	str	r3, [sp, #36]	; 0x24
   d8236:	2200      	movs	r2, #0
   d8238:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d823a:	1c59      	adds	r1, r3, #1
   d823c:	911d      	str	r1, [sp, #116]	; 0x74
   d823e:	785b      	ldrb	r3, [r3, #1]
   d8240:	4610      	mov	r0, r2
   d8242:	e7c9      	b.n	d81d8 <_strtod_l+0x1e8>
   d8244:	4638      	mov	r0, r7
   d8246:	e7d2      	b.n	d81ee <_strtod_l+0x1fe>
   d8248:	2a08      	cmp	r2, #8
   d824a:	dc04      	bgt.n	d8256 <_strtod_l+0x266>
   d824c:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d824e:	434e      	muls	r6, r1
   d8250:	9609      	str	r6, [sp, #36]	; 0x24
   d8252:	3201      	adds	r2, #1
   d8254:	e7e2      	b.n	d821c <_strtod_l+0x22c>
   d8256:	f102 0c01 	add.w	ip, r2, #1
   d825a:	f1bc 0f10 	cmp.w	ip, #16
   d825e:	bfd8      	it	le
   d8260:	fb01 f909 	mulle.w	r9, r1, r9
   d8264:	e7f5      	b.n	d8252 <_strtod_l+0x262>
   d8266:	2d10      	cmp	r5, #16
   d8268:	bfdc      	itt	le
   d826a:	220a      	movle	r2, #10
   d826c:	fb02 3909 	mlale	r9, r2, r9, r3
   d8270:	e7e1      	b.n	d8236 <_strtod_l+0x246>
   d8272:	2300      	movs	r3, #0
   d8274:	9307      	str	r3, [sp, #28]
   d8276:	2201      	movs	r2, #1
   d8278:	e77c      	b.n	d8174 <_strtod_l+0x184>
   d827a:	f04f 0c00 	mov.w	ip, #0
   d827e:	f108 0302 	add.w	r3, r8, #2
   d8282:	931d      	str	r3, [sp, #116]	; 0x74
   d8284:	f898 3002 	ldrb.w	r3, [r8, #2]
   d8288:	e785      	b.n	d8196 <_strtod_l+0x1a6>
   d828a:	f04f 0c01 	mov.w	ip, #1
   d828e:	e7f6      	b.n	d827e <_strtod_l+0x28e>
   d8290:	000dacc8 	.word	0x000dacc8
   d8294:	000dab34 	.word	0x000dab34
   d8298:	7ff00000 	.word	0x7ff00000
   d829c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d829e:	1c59      	adds	r1, r3, #1
   d82a0:	911d      	str	r1, [sp, #116]	; 0x74
   d82a2:	785b      	ldrb	r3, [r3, #1]
   d82a4:	2b30      	cmp	r3, #48	; 0x30
   d82a6:	d0f9      	beq.n	d829c <_strtod_l+0x2ac>
   d82a8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
   d82ac:	2908      	cmp	r1, #8
   d82ae:	f63f af79 	bhi.w	d81a4 <_strtod_l+0x1b4>
   d82b2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
   d82b6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d82b8:	9308      	str	r3, [sp, #32]
   d82ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d82bc:	1c59      	adds	r1, r3, #1
   d82be:	911d      	str	r1, [sp, #116]	; 0x74
   d82c0:	785b      	ldrb	r3, [r3, #1]
   d82c2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
   d82c6:	2e09      	cmp	r6, #9
   d82c8:	d937      	bls.n	d833a <_strtod_l+0x34a>
   d82ca:	9e08      	ldr	r6, [sp, #32]
   d82cc:	1b89      	subs	r1, r1, r6
   d82ce:	2908      	cmp	r1, #8
   d82d0:	f644 661f 	movw	r6, #19999	; 0x4e1f
   d82d4:	dc02      	bgt.n	d82dc <_strtod_l+0x2ec>
   d82d6:	4576      	cmp	r6, lr
   d82d8:	bfa8      	it	ge
   d82da:	4676      	movge	r6, lr
   d82dc:	f1bc 0f00 	cmp.w	ip, #0
   d82e0:	d000      	beq.n	d82e4 <_strtod_l+0x2f4>
   d82e2:	4276      	negs	r6, r6
   d82e4:	2d00      	cmp	r5, #0
   d82e6:	d14f      	bne.n	d8388 <_strtod_l+0x398>
   d82e8:	9904      	ldr	r1, [sp, #16]
   d82ea:	4301      	orrs	r1, r0
   d82ec:	f47f aec2 	bne.w	d8074 <_strtod_l+0x84>
   d82f0:	2a00      	cmp	r2, #0
   d82f2:	f47f aedb 	bne.w	d80ac <_strtod_l+0xbc>
   d82f6:	2b69      	cmp	r3, #105	; 0x69
   d82f8:	d027      	beq.n	d834a <_strtod_l+0x35a>
   d82fa:	dc24      	bgt.n	d8346 <_strtod_l+0x356>
   d82fc:	2b49      	cmp	r3, #73	; 0x49
   d82fe:	d024      	beq.n	d834a <_strtod_l+0x35a>
   d8300:	2b4e      	cmp	r3, #78	; 0x4e
   d8302:	f47f aed3 	bne.w	d80ac <_strtod_l+0xbc>
   d8306:	499e      	ldr	r1, [pc, #632]	; (d8580 <_strtod_l+0x590>)
   d8308:	a81d      	add	r0, sp, #116	; 0x74
   d830a:	f001 fa75 	bl	d97f8 <__match>
   d830e:	2800      	cmp	r0, #0
   d8310:	f43f aecc 	beq.w	d80ac <_strtod_l+0xbc>
   d8314:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8316:	781b      	ldrb	r3, [r3, #0]
   d8318:	2b28      	cmp	r3, #40	; 0x28
   d831a:	d12d      	bne.n	d8378 <_strtod_l+0x388>
   d831c:	4999      	ldr	r1, [pc, #612]	; (d8584 <_strtod_l+0x594>)
   d831e:	aa20      	add	r2, sp, #128	; 0x80
   d8320:	a81d      	add	r0, sp, #116	; 0x74
   d8322:	f001 fa7d 	bl	d9820 <__hexnan>
   d8326:	2805      	cmp	r0, #5
   d8328:	d126      	bne.n	d8378 <_strtod_l+0x388>
   d832a:	9b21      	ldr	r3, [sp, #132]	; 0x84
   d832c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
   d8330:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
   d8334:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
   d8338:	e69c      	b.n	d8074 <_strtod_l+0x84>
   d833a:	210a      	movs	r1, #10
   d833c:	fb01 3e0e 	mla	lr, r1, lr, r3
   d8340:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
   d8344:	e7b9      	b.n	d82ba <_strtod_l+0x2ca>
   d8346:	2b6e      	cmp	r3, #110	; 0x6e
   d8348:	e7db      	b.n	d8302 <_strtod_l+0x312>
   d834a:	498f      	ldr	r1, [pc, #572]	; (d8588 <_strtod_l+0x598>)
   d834c:	a81d      	add	r0, sp, #116	; 0x74
   d834e:	f001 fa53 	bl	d97f8 <__match>
   d8352:	2800      	cmp	r0, #0
   d8354:	f43f aeaa 	beq.w	d80ac <_strtod_l+0xbc>
   d8358:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d835a:	498c      	ldr	r1, [pc, #560]	; (d858c <_strtod_l+0x59c>)
   d835c:	3b01      	subs	r3, #1
   d835e:	a81d      	add	r0, sp, #116	; 0x74
   d8360:	931d      	str	r3, [sp, #116]	; 0x74
   d8362:	f001 fa49 	bl	d97f8 <__match>
   d8366:	b910      	cbnz	r0, d836e <_strtod_l+0x37e>
   d8368:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d836a:	3301      	adds	r3, #1
   d836c:	931d      	str	r3, [sp, #116]	; 0x74
   d836e:	f8df b22c 	ldr.w	fp, [pc, #556]	; d859c <_strtod_l+0x5ac>
   d8372:	f04f 0a00 	mov.w	sl, #0
   d8376:	e67d      	b.n	d8074 <_strtod_l+0x84>
   d8378:	4885      	ldr	r0, [pc, #532]	; (d8590 <_strtod_l+0x5a0>)
   d837a:	f002 f849 	bl	da410 <nan>
   d837e:	ed8d 0b04 	vstr	d0, [sp, #16]
   d8382:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d8386:	e675      	b.n	d8074 <_strtod_l+0x84>
   d8388:	9b07      	ldr	r3, [sp, #28]
   d838a:	9809      	ldr	r0, [sp, #36]	; 0x24
   d838c:	1af3      	subs	r3, r6, r3
   d838e:	2f00      	cmp	r7, #0
   d8390:	bf08      	it	eq
   d8392:	462f      	moveq	r7, r5
   d8394:	2d10      	cmp	r5, #16
   d8396:	9308      	str	r3, [sp, #32]
   d8398:	46a8      	mov	r8, r5
   d839a:	bfa8      	it	ge
   d839c:	f04f 0810 	movge.w	r8, #16
   d83a0:	f7fe ff62 	bl	d7268 <__aeabi_ui2d>
   d83a4:	2d09      	cmp	r5, #9
   d83a6:	4682      	mov	sl, r0
   d83a8:	468b      	mov	fp, r1
   d83aa:	dd13      	ble.n	d83d4 <_strtod_l+0x3e4>
   d83ac:	4b79      	ldr	r3, [pc, #484]	; (d8594 <_strtod_l+0x5a4>)
   d83ae:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   d83b2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
   d83b6:	f7fe ffd1 	bl	d735c <__aeabi_dmul>
   d83ba:	4682      	mov	sl, r0
   d83bc:	4648      	mov	r0, r9
   d83be:	468b      	mov	fp, r1
   d83c0:	f7fe ff52 	bl	d7268 <__aeabi_ui2d>
   d83c4:	4602      	mov	r2, r0
   d83c6:	460b      	mov	r3, r1
   d83c8:	4650      	mov	r0, sl
   d83ca:	4659      	mov	r1, fp
   d83cc:	f7fe fe10 	bl	d6ff0 <__adddf3>
   d83d0:	4682      	mov	sl, r0
   d83d2:	468b      	mov	fp, r1
   d83d4:	2d0f      	cmp	r5, #15
   d83d6:	dc38      	bgt.n	d844a <_strtod_l+0x45a>
   d83d8:	9b08      	ldr	r3, [sp, #32]
   d83da:	2b00      	cmp	r3, #0
   d83dc:	f43f ae4a 	beq.w	d8074 <_strtod_l+0x84>
   d83e0:	dd24      	ble.n	d842c <_strtod_l+0x43c>
   d83e2:	2b16      	cmp	r3, #22
   d83e4:	dc0b      	bgt.n	d83fe <_strtod_l+0x40e>
   d83e6:	4d6b      	ldr	r5, [pc, #428]	; (d8594 <_strtod_l+0x5a4>)
   d83e8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   d83ec:	e9d5 0100 	ldrd	r0, r1, [r5]
   d83f0:	4652      	mov	r2, sl
   d83f2:	465b      	mov	r3, fp
   d83f4:	f7fe ffb2 	bl	d735c <__aeabi_dmul>
   d83f8:	4682      	mov	sl, r0
   d83fa:	468b      	mov	fp, r1
   d83fc:	e63a      	b.n	d8074 <_strtod_l+0x84>
   d83fe:	9a08      	ldr	r2, [sp, #32]
   d8400:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
   d8404:	4293      	cmp	r3, r2
   d8406:	db20      	blt.n	d844a <_strtod_l+0x45a>
   d8408:	4c62      	ldr	r4, [pc, #392]	; (d8594 <_strtod_l+0x5a4>)
   d840a:	f1c5 050f 	rsb	r5, r5, #15
   d840e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
   d8412:	4652      	mov	r2, sl
   d8414:	465b      	mov	r3, fp
   d8416:	e9d1 0100 	ldrd	r0, r1, [r1]
   d841a:	f7fe ff9f 	bl	d735c <__aeabi_dmul>
   d841e:	9b08      	ldr	r3, [sp, #32]
   d8420:	1b5d      	subs	r5, r3, r5
   d8422:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
   d8426:	e9d4 2300 	ldrd	r2, r3, [r4]
   d842a:	e7e3      	b.n	d83f4 <_strtod_l+0x404>
   d842c:	9b08      	ldr	r3, [sp, #32]
   d842e:	3316      	adds	r3, #22
   d8430:	db0b      	blt.n	d844a <_strtod_l+0x45a>
   d8432:	9b07      	ldr	r3, [sp, #28]
   d8434:	4a57      	ldr	r2, [pc, #348]	; (d8594 <_strtod_l+0x5a4>)
   d8436:	1b9e      	subs	r6, r3, r6
   d8438:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
   d843c:	e9d6 2300 	ldrd	r2, r3, [r6]
   d8440:	4650      	mov	r0, sl
   d8442:	4659      	mov	r1, fp
   d8444:	f7ff f8b4 	bl	d75b0 <__aeabi_ddiv>
   d8448:	e7d6      	b.n	d83f8 <_strtod_l+0x408>
   d844a:	9b08      	ldr	r3, [sp, #32]
   d844c:	eba5 0808 	sub.w	r8, r5, r8
   d8450:	4498      	add	r8, r3
   d8452:	f1b8 0f00 	cmp.w	r8, #0
   d8456:	dd71      	ble.n	d853c <_strtod_l+0x54c>
   d8458:	f018 030f 	ands.w	r3, r8, #15
   d845c:	d00a      	beq.n	d8474 <_strtod_l+0x484>
   d845e:	494d      	ldr	r1, [pc, #308]	; (d8594 <_strtod_l+0x5a4>)
   d8460:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   d8464:	4652      	mov	r2, sl
   d8466:	465b      	mov	r3, fp
   d8468:	e9d1 0100 	ldrd	r0, r1, [r1]
   d846c:	f7fe ff76 	bl	d735c <__aeabi_dmul>
   d8470:	4682      	mov	sl, r0
   d8472:	468b      	mov	fp, r1
   d8474:	f038 080f 	bics.w	r8, r8, #15
   d8478:	d04d      	beq.n	d8516 <_strtod_l+0x526>
   d847a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
   d847e:	dd22      	ble.n	d84c6 <_strtod_l+0x4d6>
   d8480:	2500      	movs	r5, #0
   d8482:	462e      	mov	r6, r5
   d8484:	9509      	str	r5, [sp, #36]	; 0x24
   d8486:	9507      	str	r5, [sp, #28]
   d8488:	2322      	movs	r3, #34	; 0x22
   d848a:	f8df b110 	ldr.w	fp, [pc, #272]	; d859c <_strtod_l+0x5ac>
   d848e:	6023      	str	r3, [r4, #0]
   d8490:	f04f 0a00 	mov.w	sl, #0
   d8494:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8496:	2b00      	cmp	r3, #0
   d8498:	f43f adec 	beq.w	d8074 <_strtod_l+0x84>
   d849c:	991e      	ldr	r1, [sp, #120]	; 0x78
   d849e:	4620      	mov	r0, r4
   d84a0:	f001 fb9a 	bl	d9bd8 <_Bfree>
   d84a4:	9907      	ldr	r1, [sp, #28]
   d84a6:	4620      	mov	r0, r4
   d84a8:	f001 fb96 	bl	d9bd8 <_Bfree>
   d84ac:	4631      	mov	r1, r6
   d84ae:	4620      	mov	r0, r4
   d84b0:	f001 fb92 	bl	d9bd8 <_Bfree>
   d84b4:	9909      	ldr	r1, [sp, #36]	; 0x24
   d84b6:	4620      	mov	r0, r4
   d84b8:	f001 fb8e 	bl	d9bd8 <_Bfree>
   d84bc:	4629      	mov	r1, r5
   d84be:	4620      	mov	r0, r4
   d84c0:	f001 fb8a 	bl	d9bd8 <_Bfree>
   d84c4:	e5d6      	b.n	d8074 <_strtod_l+0x84>
   d84c6:	2300      	movs	r3, #0
   d84c8:	ea4f 1828 	mov.w	r8, r8, asr #4
   d84cc:	4650      	mov	r0, sl
   d84ce:	4659      	mov	r1, fp
   d84d0:	4699      	mov	r9, r3
   d84d2:	f1b8 0f01 	cmp.w	r8, #1
   d84d6:	dc21      	bgt.n	d851c <_strtod_l+0x52c>
   d84d8:	b10b      	cbz	r3, d84de <_strtod_l+0x4ee>
   d84da:	4682      	mov	sl, r0
   d84dc:	468b      	mov	fp, r1
   d84de:	4b2e      	ldr	r3, [pc, #184]	; (d8598 <_strtod_l+0x5a8>)
   d84e0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
   d84e4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
   d84e8:	4652      	mov	r2, sl
   d84ea:	465b      	mov	r3, fp
   d84ec:	e9d9 0100 	ldrd	r0, r1, [r9]
   d84f0:	f7fe ff34 	bl	d735c <__aeabi_dmul>
   d84f4:	4b29      	ldr	r3, [pc, #164]	; (d859c <_strtod_l+0x5ac>)
   d84f6:	460a      	mov	r2, r1
   d84f8:	400b      	ands	r3, r1
   d84fa:	4929      	ldr	r1, [pc, #164]	; (d85a0 <_strtod_l+0x5b0>)
   d84fc:	428b      	cmp	r3, r1
   d84fe:	4682      	mov	sl, r0
   d8500:	d8be      	bhi.n	d8480 <_strtod_l+0x490>
   d8502:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
   d8506:	428b      	cmp	r3, r1
   d8508:	bf86      	itte	hi
   d850a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; d85a4 <_strtod_l+0x5b4>
   d850e:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
   d8512:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
   d8516:	2300      	movs	r3, #0
   d8518:	9304      	str	r3, [sp, #16]
   d851a:	e081      	b.n	d8620 <_strtod_l+0x630>
   d851c:	f018 0f01 	tst.w	r8, #1
   d8520:	d007      	beq.n	d8532 <_strtod_l+0x542>
   d8522:	4b1d      	ldr	r3, [pc, #116]	; (d8598 <_strtod_l+0x5a8>)
   d8524:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
   d8528:	e9d3 2300 	ldrd	r2, r3, [r3]
   d852c:	f7fe ff16 	bl	d735c <__aeabi_dmul>
   d8530:	2301      	movs	r3, #1
   d8532:	f109 0901 	add.w	r9, r9, #1
   d8536:	ea4f 0868 	mov.w	r8, r8, asr #1
   d853a:	e7ca      	b.n	d84d2 <_strtod_l+0x4e2>
   d853c:	d0eb      	beq.n	d8516 <_strtod_l+0x526>
   d853e:	f1c8 0800 	rsb	r8, r8, #0
   d8542:	f018 020f 	ands.w	r2, r8, #15
   d8546:	d00a      	beq.n	d855e <_strtod_l+0x56e>
   d8548:	4b12      	ldr	r3, [pc, #72]	; (d8594 <_strtod_l+0x5a4>)
   d854a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   d854e:	4650      	mov	r0, sl
   d8550:	4659      	mov	r1, fp
   d8552:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8556:	f7ff f82b 	bl	d75b0 <__aeabi_ddiv>
   d855a:	4682      	mov	sl, r0
   d855c:	468b      	mov	fp, r1
   d855e:	ea5f 1828 	movs.w	r8, r8, asr #4
   d8562:	d0d8      	beq.n	d8516 <_strtod_l+0x526>
   d8564:	f1b8 0f1f 	cmp.w	r8, #31
   d8568:	dd1e      	ble.n	d85a8 <_strtod_l+0x5b8>
   d856a:	2500      	movs	r5, #0
   d856c:	462e      	mov	r6, r5
   d856e:	9509      	str	r5, [sp, #36]	; 0x24
   d8570:	9507      	str	r5, [sp, #28]
   d8572:	2322      	movs	r3, #34	; 0x22
   d8574:	f04f 0a00 	mov.w	sl, #0
   d8578:	f04f 0b00 	mov.w	fp, #0
   d857c:	6023      	str	r3, [r4, #0]
   d857e:	e789      	b.n	d8494 <_strtod_l+0x4a4>
   d8580:	000dab31 	.word	0x000dab31
   d8584:	000dab48 	.word	0x000dab48
   d8588:	000dab28 	.word	0x000dab28
   d858c:	000dab2b 	.word	0x000dab2b
   d8590:	000da67b 	.word	0x000da67b
   d8594:	000dad08 	.word	0x000dad08
   d8598:	000dace0 	.word	0x000dace0
   d859c:	7ff00000 	.word	0x7ff00000
   d85a0:	7ca00000 	.word	0x7ca00000
   d85a4:	7fefffff 	.word	0x7fefffff
   d85a8:	f018 0310 	ands.w	r3, r8, #16
   d85ac:	bf18      	it	ne
   d85ae:	236a      	movne	r3, #106	; 0x6a
   d85b0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; d8968 <_strtod_l+0x978>
   d85b4:	9304      	str	r3, [sp, #16]
   d85b6:	4650      	mov	r0, sl
   d85b8:	4659      	mov	r1, fp
   d85ba:	2300      	movs	r3, #0
   d85bc:	f018 0f01 	tst.w	r8, #1
   d85c0:	d004      	beq.n	d85cc <_strtod_l+0x5dc>
   d85c2:	e9d9 2300 	ldrd	r2, r3, [r9]
   d85c6:	f7fe fec9 	bl	d735c <__aeabi_dmul>
   d85ca:	2301      	movs	r3, #1
   d85cc:	ea5f 0868 	movs.w	r8, r8, asr #1
   d85d0:	f109 0908 	add.w	r9, r9, #8
   d85d4:	d1f2      	bne.n	d85bc <_strtod_l+0x5cc>
   d85d6:	b10b      	cbz	r3, d85dc <_strtod_l+0x5ec>
   d85d8:	4682      	mov	sl, r0
   d85da:	468b      	mov	fp, r1
   d85dc:	9b04      	ldr	r3, [sp, #16]
   d85de:	b1bb      	cbz	r3, d8610 <_strtod_l+0x620>
   d85e0:	f3cb 530a 	ubfx	r3, fp, #20, #11
   d85e4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
   d85e8:	2b00      	cmp	r3, #0
   d85ea:	4659      	mov	r1, fp
   d85ec:	dd10      	ble.n	d8610 <_strtod_l+0x620>
   d85ee:	2b1f      	cmp	r3, #31
   d85f0:	f340 8128 	ble.w	d8844 <_strtod_l+0x854>
   d85f4:	2b34      	cmp	r3, #52	; 0x34
   d85f6:	bfde      	ittt	le
   d85f8:	3b20      	suble	r3, #32
   d85fa:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
   d85fe:	fa02 f303 	lslle.w	r3, r2, r3
   d8602:	f04f 0a00 	mov.w	sl, #0
   d8606:	bfcc      	ite	gt
   d8608:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
   d860c:	ea03 0b01 	andle.w	fp, r3, r1
   d8610:	2200      	movs	r2, #0
   d8612:	2300      	movs	r3, #0
   d8614:	4650      	mov	r0, sl
   d8616:	4659      	mov	r1, fp
   d8618:	f7ff f908 	bl	d782c <__aeabi_dcmpeq>
   d861c:	2800      	cmp	r0, #0
   d861e:	d1a4      	bne.n	d856a <_strtod_l+0x57a>
   d8620:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8622:	9300      	str	r3, [sp, #0]
   d8624:	990a      	ldr	r1, [sp, #40]	; 0x28
   d8626:	462b      	mov	r3, r5
   d8628:	463a      	mov	r2, r7
   d862a:	4620      	mov	r0, r4
   d862c:	f001 fb29 	bl	d9c82 <__s2b>
   d8630:	9009      	str	r0, [sp, #36]	; 0x24
   d8632:	2800      	cmp	r0, #0
   d8634:	f43f af24 	beq.w	d8480 <_strtod_l+0x490>
   d8638:	9b07      	ldr	r3, [sp, #28]
   d863a:	1b9e      	subs	r6, r3, r6
   d863c:	9b08      	ldr	r3, [sp, #32]
   d863e:	2b00      	cmp	r3, #0
   d8640:	bfb4      	ite	lt
   d8642:	4633      	movlt	r3, r6
   d8644:	2300      	movge	r3, #0
   d8646:	9310      	str	r3, [sp, #64]	; 0x40
   d8648:	9b08      	ldr	r3, [sp, #32]
   d864a:	2500      	movs	r5, #0
   d864c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d8650:	9318      	str	r3, [sp, #96]	; 0x60
   d8652:	462e      	mov	r6, r5
   d8654:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8656:	4620      	mov	r0, r4
   d8658:	6859      	ldr	r1, [r3, #4]
   d865a:	f001 fa89 	bl	d9b70 <_Balloc>
   d865e:	9007      	str	r0, [sp, #28]
   d8660:	2800      	cmp	r0, #0
   d8662:	f43f af11 	beq.w	d8488 <_strtod_l+0x498>
   d8666:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d8668:	691a      	ldr	r2, [r3, #16]
   d866a:	3202      	adds	r2, #2
   d866c:	f103 010c 	add.w	r1, r3, #12
   d8670:	0092      	lsls	r2, r2, #2
   d8672:	300c      	adds	r0, #12
   d8674:	f7ff fc0a 	bl	d7e8c <memcpy>
   d8678:	ec4b ab10 	vmov	d0, sl, fp
   d867c:	aa20      	add	r2, sp, #128	; 0x80
   d867e:	a91f      	add	r1, sp, #124	; 0x7c
   d8680:	4620      	mov	r0, r4
   d8682:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
   d8686:	f001 fdeb 	bl	da260 <__d2b>
   d868a:	901e      	str	r0, [sp, #120]	; 0x78
   d868c:	2800      	cmp	r0, #0
   d868e:	f43f aefb 	beq.w	d8488 <_strtod_l+0x498>
   d8692:	2101      	movs	r1, #1
   d8694:	4620      	mov	r0, r4
   d8696:	f001 fb82 	bl	d9d9e <__i2b>
   d869a:	4606      	mov	r6, r0
   d869c:	2800      	cmp	r0, #0
   d869e:	f43f aef3 	beq.w	d8488 <_strtod_l+0x498>
   d86a2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   d86a4:	9904      	ldr	r1, [sp, #16]
   d86a6:	2b00      	cmp	r3, #0
   d86a8:	bfab      	itete	ge
   d86aa:	9a10      	ldrge	r2, [sp, #64]	; 0x40
   d86ac:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
   d86ae:	9f18      	ldrge	r7, [sp, #96]	; 0x60
   d86b0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
   d86b4:	bfac      	ite	ge
   d86b6:	eb03 0902 	addge.w	r9, r3, r2
   d86ba:	1ad7      	sublt	r7, r2, r3
   d86bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
   d86be:	eba3 0801 	sub.w	r8, r3, r1
   d86c2:	4490      	add	r8, r2
   d86c4:	4ba3      	ldr	r3, [pc, #652]	; (d8954 <_strtod_l+0x964>)
   d86c6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d86ca:	4598      	cmp	r8, r3
   d86cc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
   d86d0:	f280 80cc 	bge.w	d886c <_strtod_l+0x87c>
   d86d4:	eba3 0308 	sub.w	r3, r3, r8
   d86d8:	2b1f      	cmp	r3, #31
   d86da:	eba2 0203 	sub.w	r2, r2, r3
   d86de:	f04f 0101 	mov.w	r1, #1
   d86e2:	f300 80b6 	bgt.w	d8852 <_strtod_l+0x862>
   d86e6:	fa01 f303 	lsl.w	r3, r1, r3
   d86ea:	9311      	str	r3, [sp, #68]	; 0x44
   d86ec:	2300      	movs	r3, #0
   d86ee:	930c      	str	r3, [sp, #48]	; 0x30
   d86f0:	eb09 0802 	add.w	r8, r9, r2
   d86f4:	9b04      	ldr	r3, [sp, #16]
   d86f6:	45c1      	cmp	r9, r8
   d86f8:	4417      	add	r7, r2
   d86fa:	441f      	add	r7, r3
   d86fc:	464b      	mov	r3, r9
   d86fe:	bfa8      	it	ge
   d8700:	4643      	movge	r3, r8
   d8702:	42bb      	cmp	r3, r7
   d8704:	bfa8      	it	ge
   d8706:	463b      	movge	r3, r7
   d8708:	2b00      	cmp	r3, #0
   d870a:	bfc2      	ittt	gt
   d870c:	eba8 0803 	subgt.w	r8, r8, r3
   d8710:	1aff      	subgt	r7, r7, r3
   d8712:	eba9 0903 	subgt.w	r9, r9, r3
   d8716:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d8718:	2b00      	cmp	r3, #0
   d871a:	dd17      	ble.n	d874c <_strtod_l+0x75c>
   d871c:	4631      	mov	r1, r6
   d871e:	461a      	mov	r2, r3
   d8720:	4620      	mov	r0, r4
   d8722:	f001 fbe1 	bl	d9ee8 <__pow5mult>
   d8726:	4606      	mov	r6, r0
   d8728:	2800      	cmp	r0, #0
   d872a:	f43f aead 	beq.w	d8488 <_strtod_l+0x498>
   d872e:	4601      	mov	r1, r0
   d8730:	9a1e      	ldr	r2, [sp, #120]	; 0x78
   d8732:	4620      	mov	r0, r4
   d8734:	f001 fb3c 	bl	d9db0 <__multiply>
   d8738:	900f      	str	r0, [sp, #60]	; 0x3c
   d873a:	2800      	cmp	r0, #0
   d873c:	f43f aea4 	beq.w	d8488 <_strtod_l+0x498>
   d8740:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8742:	4620      	mov	r0, r4
   d8744:	f001 fa48 	bl	d9bd8 <_Bfree>
   d8748:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d874a:	931e      	str	r3, [sp, #120]	; 0x78
   d874c:	f1b8 0f00 	cmp.w	r8, #0
   d8750:	f300 8091 	bgt.w	d8876 <_strtod_l+0x886>
   d8754:	9b08      	ldr	r3, [sp, #32]
   d8756:	2b00      	cmp	r3, #0
   d8758:	dd08      	ble.n	d876c <_strtod_l+0x77c>
   d875a:	9a18      	ldr	r2, [sp, #96]	; 0x60
   d875c:	9907      	ldr	r1, [sp, #28]
   d875e:	4620      	mov	r0, r4
   d8760:	f001 fbc2 	bl	d9ee8 <__pow5mult>
   d8764:	9007      	str	r0, [sp, #28]
   d8766:	2800      	cmp	r0, #0
   d8768:	f43f ae8e 	beq.w	d8488 <_strtod_l+0x498>
   d876c:	2f00      	cmp	r7, #0
   d876e:	dd08      	ble.n	d8782 <_strtod_l+0x792>
   d8770:	9907      	ldr	r1, [sp, #28]
   d8772:	463a      	mov	r2, r7
   d8774:	4620      	mov	r0, r4
   d8776:	f001 fc05 	bl	d9f84 <__lshift>
   d877a:	9007      	str	r0, [sp, #28]
   d877c:	2800      	cmp	r0, #0
   d877e:	f43f ae83 	beq.w	d8488 <_strtod_l+0x498>
   d8782:	f1b9 0f00 	cmp.w	r9, #0
   d8786:	dd08      	ble.n	d879a <_strtod_l+0x7aa>
   d8788:	4631      	mov	r1, r6
   d878a:	464a      	mov	r2, r9
   d878c:	4620      	mov	r0, r4
   d878e:	f001 fbf9 	bl	d9f84 <__lshift>
   d8792:	4606      	mov	r6, r0
   d8794:	2800      	cmp	r0, #0
   d8796:	f43f ae77 	beq.w	d8488 <_strtod_l+0x498>
   d879a:	9a07      	ldr	r2, [sp, #28]
   d879c:	991e      	ldr	r1, [sp, #120]	; 0x78
   d879e:	4620      	mov	r0, r4
   d87a0:	f001 fc6b 	bl	da07a <__mdiff>
   d87a4:	4605      	mov	r5, r0
   d87a6:	2800      	cmp	r0, #0
   d87a8:	f43f ae6e 	beq.w	d8488 <_strtod_l+0x498>
   d87ac:	68c3      	ldr	r3, [r0, #12]
   d87ae:	930f      	str	r3, [sp, #60]	; 0x3c
   d87b0:	2300      	movs	r3, #0
   d87b2:	60c3      	str	r3, [r0, #12]
   d87b4:	4631      	mov	r1, r6
   d87b6:	f001 fc44 	bl	da042 <__mcmp>
   d87ba:	2800      	cmp	r0, #0
   d87bc:	da65      	bge.n	d888a <_strtod_l+0x89a>
   d87be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d87c0:	ea53 030a 	orrs.w	r3, r3, sl
   d87c4:	f040 8087 	bne.w	d88d6 <_strtod_l+0x8e6>
   d87c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d87cc:	2b00      	cmp	r3, #0
   d87ce:	f040 8082 	bne.w	d88d6 <_strtod_l+0x8e6>
   d87d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d87d6:	0d1b      	lsrs	r3, r3, #20
   d87d8:	051b      	lsls	r3, r3, #20
   d87da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
   d87de:	d97a      	bls.n	d88d6 <_strtod_l+0x8e6>
   d87e0:	696b      	ldr	r3, [r5, #20]
   d87e2:	b913      	cbnz	r3, d87ea <_strtod_l+0x7fa>
   d87e4:	692b      	ldr	r3, [r5, #16]
   d87e6:	2b01      	cmp	r3, #1
   d87e8:	dd75      	ble.n	d88d6 <_strtod_l+0x8e6>
   d87ea:	4629      	mov	r1, r5
   d87ec:	2201      	movs	r2, #1
   d87ee:	4620      	mov	r0, r4
   d87f0:	f001 fbc8 	bl	d9f84 <__lshift>
   d87f4:	4631      	mov	r1, r6
   d87f6:	4605      	mov	r5, r0
   d87f8:	f001 fc23 	bl	da042 <__mcmp>
   d87fc:	2800      	cmp	r0, #0
   d87fe:	dd6a      	ble.n	d88d6 <_strtod_l+0x8e6>
   d8800:	9904      	ldr	r1, [sp, #16]
   d8802:	4a55      	ldr	r2, [pc, #340]	; (d8958 <_strtod_l+0x968>)
   d8804:	465b      	mov	r3, fp
   d8806:	2900      	cmp	r1, #0
   d8808:	f000 8085 	beq.w	d8916 <_strtod_l+0x926>
   d880c:	ea02 010b 	and.w	r1, r2, fp
   d8810:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
   d8814:	dc7f      	bgt.n	d8916 <_strtod_l+0x926>
   d8816:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
   d881a:	f77f aeaa 	ble.w	d8572 <_strtod_l+0x582>
   d881e:	4a4f      	ldr	r2, [pc, #316]	; (d895c <_strtod_l+0x96c>)
   d8820:	2300      	movs	r3, #0
   d8822:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
   d8826:	4650      	mov	r0, sl
   d8828:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   d882c:	4659      	mov	r1, fp
   d882e:	f7fe fd95 	bl	d735c <__aeabi_dmul>
   d8832:	460b      	mov	r3, r1
   d8834:	4303      	orrs	r3, r0
   d8836:	bf08      	it	eq
   d8838:	2322      	moveq	r3, #34	; 0x22
   d883a:	4682      	mov	sl, r0
   d883c:	468b      	mov	fp, r1
   d883e:	bf08      	it	eq
   d8840:	6023      	streq	r3, [r4, #0]
   d8842:	e62b      	b.n	d849c <_strtod_l+0x4ac>
   d8844:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d8848:	fa02 f303 	lsl.w	r3, r2, r3
   d884c:	ea03 0a0a 	and.w	sl, r3, sl
   d8850:	e6de      	b.n	d8610 <_strtod_l+0x620>
   d8852:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
   d8856:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
   d885a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
   d885e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
   d8862:	fa01 f308 	lsl.w	r3, r1, r8
   d8866:	930c      	str	r3, [sp, #48]	; 0x30
   d8868:	9111      	str	r1, [sp, #68]	; 0x44
   d886a:	e741      	b.n	d86f0 <_strtod_l+0x700>
   d886c:	2300      	movs	r3, #0
   d886e:	930c      	str	r3, [sp, #48]	; 0x30
   d8870:	2301      	movs	r3, #1
   d8872:	9311      	str	r3, [sp, #68]	; 0x44
   d8874:	e73c      	b.n	d86f0 <_strtod_l+0x700>
   d8876:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8878:	4642      	mov	r2, r8
   d887a:	4620      	mov	r0, r4
   d887c:	f001 fb82 	bl	d9f84 <__lshift>
   d8880:	901e      	str	r0, [sp, #120]	; 0x78
   d8882:	2800      	cmp	r0, #0
   d8884:	f47f af66 	bne.w	d8754 <_strtod_l+0x764>
   d8888:	e5fe      	b.n	d8488 <_strtod_l+0x498>
   d888a:	465f      	mov	r7, fp
   d888c:	d16e      	bne.n	d896c <_strtod_l+0x97c>
   d888e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d8890:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8894:	b342      	cbz	r2, d88e8 <_strtod_l+0x8f8>
   d8896:	4a32      	ldr	r2, [pc, #200]	; (d8960 <_strtod_l+0x970>)
   d8898:	4293      	cmp	r3, r2
   d889a:	d128      	bne.n	d88ee <_strtod_l+0x8fe>
   d889c:	9b04      	ldr	r3, [sp, #16]
   d889e:	4650      	mov	r0, sl
   d88a0:	b1eb      	cbz	r3, d88de <_strtod_l+0x8ee>
   d88a2:	4a2d      	ldr	r2, [pc, #180]	; (d8958 <_strtod_l+0x968>)
   d88a4:	403a      	ands	r2, r7
   d88a6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
   d88aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   d88ae:	d819      	bhi.n	d88e4 <_strtod_l+0x8f4>
   d88b0:	0d12      	lsrs	r2, r2, #20
   d88b2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
   d88b6:	fa01 f303 	lsl.w	r3, r1, r3
   d88ba:	4298      	cmp	r0, r3
   d88bc:	d117      	bne.n	d88ee <_strtod_l+0x8fe>
   d88be:	4b29      	ldr	r3, [pc, #164]	; (d8964 <_strtod_l+0x974>)
   d88c0:	429f      	cmp	r7, r3
   d88c2:	d102      	bne.n	d88ca <_strtod_l+0x8da>
   d88c4:	3001      	adds	r0, #1
   d88c6:	f43f addf 	beq.w	d8488 <_strtod_l+0x498>
   d88ca:	4b23      	ldr	r3, [pc, #140]	; (d8958 <_strtod_l+0x968>)
   d88cc:	403b      	ands	r3, r7
   d88ce:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
   d88d2:	f04f 0a00 	mov.w	sl, #0
   d88d6:	9b04      	ldr	r3, [sp, #16]
   d88d8:	2b00      	cmp	r3, #0
   d88da:	d1a0      	bne.n	d881e <_strtod_l+0x82e>
   d88dc:	e5de      	b.n	d849c <_strtod_l+0x4ac>
   d88de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d88e2:	e7ea      	b.n	d88ba <_strtod_l+0x8ca>
   d88e4:	460b      	mov	r3, r1
   d88e6:	e7e8      	b.n	d88ba <_strtod_l+0x8ca>
   d88e8:	ea53 030a 	orrs.w	r3, r3, sl
   d88ec:	d088      	beq.n	d8800 <_strtod_l+0x810>
   d88ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d88f0:	b1db      	cbz	r3, d892a <_strtod_l+0x93a>
   d88f2:	423b      	tst	r3, r7
   d88f4:	d0ef      	beq.n	d88d6 <_strtod_l+0x8e6>
   d88f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d88f8:	9a04      	ldr	r2, [sp, #16]
   d88fa:	4650      	mov	r0, sl
   d88fc:	4659      	mov	r1, fp
   d88fe:	b1c3      	cbz	r3, d8932 <_strtod_l+0x942>
   d8900:	f7ff fb5a 	bl	d7fb8 <sulp>
   d8904:	4602      	mov	r2, r0
   d8906:	460b      	mov	r3, r1
   d8908:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d890c:	f7fe fb70 	bl	d6ff0 <__adddf3>
   d8910:	4682      	mov	sl, r0
   d8912:	468b      	mov	fp, r1
   d8914:	e7df      	b.n	d88d6 <_strtod_l+0x8e6>
   d8916:	4013      	ands	r3, r2
   d8918:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
   d891c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
   d8920:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
   d8924:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8928:	e7d5      	b.n	d88d6 <_strtod_l+0x8e6>
   d892a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d892c:	ea13 0f0a 	tst.w	r3, sl
   d8930:	e7e0      	b.n	d88f4 <_strtod_l+0x904>
   d8932:	f7ff fb41 	bl	d7fb8 <sulp>
   d8936:	4602      	mov	r2, r0
   d8938:	460b      	mov	r3, r1
   d893a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   d893e:	f7fe fb55 	bl	d6fec <__aeabi_dsub>
   d8942:	2200      	movs	r2, #0
   d8944:	2300      	movs	r3, #0
   d8946:	4682      	mov	sl, r0
   d8948:	468b      	mov	fp, r1
   d894a:	f7fe ff6f 	bl	d782c <__aeabi_dcmpeq>
   d894e:	2800      	cmp	r0, #0
   d8950:	d0c1      	beq.n	d88d6 <_strtod_l+0x8e6>
   d8952:	e60e      	b.n	d8572 <_strtod_l+0x582>
   d8954:	fffffc02 	.word	0xfffffc02
   d8958:	7ff00000 	.word	0x7ff00000
   d895c:	39500000 	.word	0x39500000
   d8960:	000fffff 	.word	0x000fffff
   d8964:	7fefffff 	.word	0x7fefffff
   d8968:	000dab60 	.word	0x000dab60
   d896c:	4631      	mov	r1, r6
   d896e:	4628      	mov	r0, r5
   d8970:	f001 fcc6 	bl	da300 <__ratio>
   d8974:	ec59 8b10 	vmov	r8, r9, d0
   d8978:	ee10 0a10 	vmov	r0, s0
   d897c:	2200      	movs	r2, #0
   d897e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d8982:	4649      	mov	r1, r9
   d8984:	f7fe ff66 	bl	d7854 <__aeabi_dcmple>
   d8988:	2800      	cmp	r0, #0
   d898a:	d07c      	beq.n	d8a86 <_strtod_l+0xa96>
   d898c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d898e:	2b00      	cmp	r3, #0
   d8990:	d04c      	beq.n	d8a2c <_strtod_l+0xa3c>
   d8992:	4b95      	ldr	r3, [pc, #596]	; (d8be8 <_strtod_l+0xbf8>)
   d8994:	2200      	movs	r2, #0
   d8996:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d899a:	f8df 924c 	ldr.w	r9, [pc, #588]	; d8be8 <_strtod_l+0xbf8>
   d899e:	f04f 0800 	mov.w	r8, #0
   d89a2:	4b92      	ldr	r3, [pc, #584]	; (d8bec <_strtod_l+0xbfc>)
   d89a4:	403b      	ands	r3, r7
   d89a6:	9311      	str	r3, [sp, #68]	; 0x44
   d89a8:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d89aa:	4b91      	ldr	r3, [pc, #580]	; (d8bf0 <_strtod_l+0xc00>)
   d89ac:	429a      	cmp	r2, r3
   d89ae:	f040 80b2 	bne.w	d8b16 <_strtod_l+0xb26>
   d89b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d89b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d89ba:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
   d89be:	ec4b ab10 	vmov	d0, sl, fp
   d89c2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
   d89c6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d89ca:	f001 fbcd 	bl	da168 <__ulp>
   d89ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d89d2:	ec53 2b10 	vmov	r2, r3, d0
   d89d6:	f7fe fcc1 	bl	d735c <__aeabi_dmul>
   d89da:	4652      	mov	r2, sl
   d89dc:	465b      	mov	r3, fp
   d89de:	f7fe fb07 	bl	d6ff0 <__adddf3>
   d89e2:	460b      	mov	r3, r1
   d89e4:	4981      	ldr	r1, [pc, #516]	; (d8bec <_strtod_l+0xbfc>)
   d89e6:	4a83      	ldr	r2, [pc, #524]	; (d8bf4 <_strtod_l+0xc04>)
   d89e8:	4019      	ands	r1, r3
   d89ea:	4291      	cmp	r1, r2
   d89ec:	4682      	mov	sl, r0
   d89ee:	d95e      	bls.n	d8aae <_strtod_l+0xabe>
   d89f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d89f2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
   d89f6:	4293      	cmp	r3, r2
   d89f8:	d103      	bne.n	d8a02 <_strtod_l+0xa12>
   d89fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d89fc:	3301      	adds	r3, #1
   d89fe:	f43f ad43 	beq.w	d8488 <_strtod_l+0x498>
   d8a02:	f8df b1fc 	ldr.w	fp, [pc, #508]	; d8c00 <_strtod_l+0xc10>
   d8a06:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
   d8a0a:	991e      	ldr	r1, [sp, #120]	; 0x78
   d8a0c:	4620      	mov	r0, r4
   d8a0e:	f001 f8e3 	bl	d9bd8 <_Bfree>
   d8a12:	9907      	ldr	r1, [sp, #28]
   d8a14:	4620      	mov	r0, r4
   d8a16:	f001 f8df 	bl	d9bd8 <_Bfree>
   d8a1a:	4631      	mov	r1, r6
   d8a1c:	4620      	mov	r0, r4
   d8a1e:	f001 f8db 	bl	d9bd8 <_Bfree>
   d8a22:	4629      	mov	r1, r5
   d8a24:	4620      	mov	r0, r4
   d8a26:	f001 f8d7 	bl	d9bd8 <_Bfree>
   d8a2a:	e613      	b.n	d8654 <_strtod_l+0x664>
   d8a2c:	f1ba 0f00 	cmp.w	sl, #0
   d8a30:	d11b      	bne.n	d8a6a <_strtod_l+0xa7a>
   d8a32:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8a36:	b9f3      	cbnz	r3, d8a76 <_strtod_l+0xa86>
   d8a38:	4b6b      	ldr	r3, [pc, #428]	; (d8be8 <_strtod_l+0xbf8>)
   d8a3a:	2200      	movs	r2, #0
   d8a3c:	4640      	mov	r0, r8
   d8a3e:	4649      	mov	r1, r9
   d8a40:	f7fe fefe 	bl	d7840 <__aeabi_dcmplt>
   d8a44:	b9d0      	cbnz	r0, d8a7c <_strtod_l+0xa8c>
   d8a46:	4640      	mov	r0, r8
   d8a48:	4649      	mov	r1, r9
   d8a4a:	4b6b      	ldr	r3, [pc, #428]	; (d8bf8 <_strtod_l+0xc08>)
   d8a4c:	2200      	movs	r2, #0
   d8a4e:	f7fe fc85 	bl	d735c <__aeabi_dmul>
   d8a52:	4680      	mov	r8, r0
   d8a54:	4689      	mov	r9, r1
   d8a56:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d8a5a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
   d8a5e:	931b      	str	r3, [sp, #108]	; 0x6c
   d8a60:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
   d8a64:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d8a68:	e79b      	b.n	d89a2 <_strtod_l+0x9b2>
   d8a6a:	f1ba 0f01 	cmp.w	sl, #1
   d8a6e:	d102      	bne.n	d8a76 <_strtod_l+0xa86>
   d8a70:	2f00      	cmp	r7, #0
   d8a72:	f43f ad7e 	beq.w	d8572 <_strtod_l+0x582>
   d8a76:	4b61      	ldr	r3, [pc, #388]	; (d8bfc <_strtod_l+0xc0c>)
   d8a78:	2200      	movs	r2, #0
   d8a7a:	e78c      	b.n	d8996 <_strtod_l+0x9a6>
   d8a7c:	f8df 9178 	ldr.w	r9, [pc, #376]	; d8bf8 <_strtod_l+0xc08>
   d8a80:	f04f 0800 	mov.w	r8, #0
   d8a84:	e7e7      	b.n	d8a56 <_strtod_l+0xa66>
   d8a86:	4b5c      	ldr	r3, [pc, #368]	; (d8bf8 <_strtod_l+0xc08>)
   d8a88:	4640      	mov	r0, r8
   d8a8a:	4649      	mov	r1, r9
   d8a8c:	2200      	movs	r2, #0
   d8a8e:	f7fe fc65 	bl	d735c <__aeabi_dmul>
   d8a92:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8a94:	4680      	mov	r8, r0
   d8a96:	4689      	mov	r9, r1
   d8a98:	b933      	cbnz	r3, d8aa8 <_strtod_l+0xab8>
   d8a9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8a9e:	9012      	str	r0, [sp, #72]	; 0x48
   d8aa0:	9313      	str	r3, [sp, #76]	; 0x4c
   d8aa2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
   d8aa6:	e7dd      	b.n	d8a64 <_strtod_l+0xa74>
   d8aa8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
   d8aac:	e7f9      	b.n	d8aa2 <_strtod_l+0xab2>
   d8aae:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
   d8ab2:	9b04      	ldr	r3, [sp, #16]
   d8ab4:	2b00      	cmp	r3, #0
   d8ab6:	d1a8      	bne.n	d8a0a <_strtod_l+0xa1a>
   d8ab8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
   d8abc:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d8abe:	0d1b      	lsrs	r3, r3, #20
   d8ac0:	051b      	lsls	r3, r3, #20
   d8ac2:	429a      	cmp	r2, r3
   d8ac4:	d1a1      	bne.n	d8a0a <_strtod_l+0xa1a>
   d8ac6:	4640      	mov	r0, r8
   d8ac8:	4649      	mov	r1, r9
   d8aca:	f001 fd13 	bl	da4f4 <__aeabi_d2lz>
   d8ace:	f7fe fc17 	bl	d7300 <__aeabi_l2d>
   d8ad2:	4602      	mov	r2, r0
   d8ad4:	460b      	mov	r3, r1
   d8ad6:	4640      	mov	r0, r8
   d8ad8:	4649      	mov	r1, r9
   d8ada:	f7fe fa87 	bl	d6fec <__aeabi_dsub>
   d8ade:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d8ae0:	f3cb 0313 	ubfx	r3, fp, #0, #20
   d8ae4:	ea43 030a 	orr.w	r3, r3, sl
   d8ae8:	4313      	orrs	r3, r2
   d8aea:	4680      	mov	r8, r0
   d8aec:	4689      	mov	r9, r1
   d8aee:	d053      	beq.n	d8b98 <_strtod_l+0xba8>
   d8af0:	a335      	add	r3, pc, #212	; (adr r3, d8bc8 <_strtod_l+0xbd8>)
   d8af2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8af6:	f7fe fea3 	bl	d7840 <__aeabi_dcmplt>
   d8afa:	2800      	cmp	r0, #0
   d8afc:	f47f acce 	bne.w	d849c <_strtod_l+0x4ac>
   d8b00:	a333      	add	r3, pc, #204	; (adr r3, d8bd0 <_strtod_l+0xbe0>)
   d8b02:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b06:	4640      	mov	r0, r8
   d8b08:	4649      	mov	r1, r9
   d8b0a:	f7fe feb7 	bl	d787c <__aeabi_dcmpgt>
   d8b0e:	2800      	cmp	r0, #0
   d8b10:	f43f af7b 	beq.w	d8a0a <_strtod_l+0xa1a>
   d8b14:	e4c2      	b.n	d849c <_strtod_l+0x4ac>
   d8b16:	9b04      	ldr	r3, [sp, #16]
   d8b18:	b333      	cbz	r3, d8b68 <_strtod_l+0xb78>
   d8b1a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   d8b1c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
   d8b20:	d822      	bhi.n	d8b68 <_strtod_l+0xb78>
   d8b22:	a32d      	add	r3, pc, #180	; (adr r3, d8bd8 <_strtod_l+0xbe8>)
   d8b24:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b28:	4640      	mov	r0, r8
   d8b2a:	4649      	mov	r1, r9
   d8b2c:	f7fe fe92 	bl	d7854 <__aeabi_dcmple>
   d8b30:	b1a0      	cbz	r0, d8b5c <_strtod_l+0xb6c>
   d8b32:	4649      	mov	r1, r9
   d8b34:	4640      	mov	r0, r8
   d8b36:	f7fe feab 	bl	d7890 <__aeabi_d2uiz>
   d8b3a:	2801      	cmp	r0, #1
   d8b3c:	bf38      	it	cc
   d8b3e:	2001      	movcc	r0, #1
   d8b40:	f7fe fb92 	bl	d7268 <__aeabi_ui2d>
   d8b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d8b46:	4680      	mov	r8, r0
   d8b48:	4689      	mov	r9, r1
   d8b4a:	bb13      	cbnz	r3, d8b92 <_strtod_l+0xba2>
   d8b4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8b50:	9014      	str	r0, [sp, #80]	; 0x50
   d8b52:	9315      	str	r3, [sp, #84]	; 0x54
   d8b54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   d8b58:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   d8b5c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d8b5e:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d8b60:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
   d8b64:	1a9b      	subs	r3, r3, r2
   d8b66:	930d      	str	r3, [sp, #52]	; 0x34
   d8b68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d8b6c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
   d8b70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   d8b74:	f001 faf8 	bl	da168 <__ulp>
   d8b78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   d8b7c:	ec53 2b10 	vmov	r2, r3, d0
   d8b80:	f7fe fbec 	bl	d735c <__aeabi_dmul>
   d8b84:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d8b88:	f7fe fa32 	bl	d6ff0 <__adddf3>
   d8b8c:	4682      	mov	sl, r0
   d8b8e:	468b      	mov	fp, r1
   d8b90:	e78f      	b.n	d8ab2 <_strtod_l+0xac2>
   d8b92:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
   d8b96:	e7dd      	b.n	d8b54 <_strtod_l+0xb64>
   d8b98:	a311      	add	r3, pc, #68	; (adr r3, d8be0 <_strtod_l+0xbf0>)
   d8b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b9e:	f7fe fe4f 	bl	d7840 <__aeabi_dcmplt>
   d8ba2:	e7b4      	b.n	d8b0e <_strtod_l+0xb1e>
   d8ba4:	2300      	movs	r3, #0
   d8ba6:	930e      	str	r3, [sp, #56]	; 0x38
   d8ba8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   d8baa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   d8bac:	6013      	str	r3, [r2, #0]
   d8bae:	f7ff ba65 	b.w	d807c <_strtod_l+0x8c>
   d8bb2:	2b65      	cmp	r3, #101	; 0x65
   d8bb4:	f43f ab5d 	beq.w	d8272 <_strtod_l+0x282>
   d8bb8:	2b45      	cmp	r3, #69	; 0x45
   d8bba:	f43f ab5a 	beq.w	d8272 <_strtod_l+0x282>
   d8bbe:	2201      	movs	r2, #1
   d8bc0:	f7ff bb92 	b.w	d82e8 <_strtod_l+0x2f8>
   d8bc4:	f3af 8000 	nop.w
   d8bc8:	94a03595 	.word	0x94a03595
   d8bcc:	3fdfffff 	.word	0x3fdfffff
   d8bd0:	35afe535 	.word	0x35afe535
   d8bd4:	3fe00000 	.word	0x3fe00000
   d8bd8:	ffc00000 	.word	0xffc00000
   d8bdc:	41dfffff 	.word	0x41dfffff
   d8be0:	94a03595 	.word	0x94a03595
   d8be4:	3fcfffff 	.word	0x3fcfffff
   d8be8:	3ff00000 	.word	0x3ff00000
   d8bec:	7ff00000 	.word	0x7ff00000
   d8bf0:	7fe00000 	.word	0x7fe00000
   d8bf4:	7c9fffff 	.word	0x7c9fffff
   d8bf8:	3fe00000 	.word	0x3fe00000
   d8bfc:	bff00000 	.word	0xbff00000
   d8c00:	7fefffff 	.word	0x7fefffff

000d8c04 <strtod>:
   d8c04:	460a      	mov	r2, r1
   d8c06:	4601      	mov	r1, r0
   d8c08:	4802      	ldr	r0, [pc, #8]	; (d8c14 <strtod+0x10>)
   d8c0a:	4b03      	ldr	r3, [pc, #12]	; (d8c18 <strtod+0x14>)
   d8c0c:	6800      	ldr	r0, [r0, #0]
   d8c0e:	f7ff b9ef 	b.w	d7ff0 <_strtod_l>
   d8c12:	bf00      	nop
   d8c14:	2003e1c4 	.word	0x2003e1c4
   d8c18:	2003e28c 	.word	0x2003e28c

000d8c1c <_strtol_l.isra.0>:
   d8c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d8c20:	4e3a      	ldr	r6, [pc, #232]	; (d8d0c <_strtol_l.isra.0+0xf0>)
   d8c22:	4686      	mov	lr, r0
   d8c24:	468c      	mov	ip, r1
   d8c26:	4660      	mov	r0, ip
   d8c28:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8c2c:	5da5      	ldrb	r5, [r4, r6]
   d8c2e:	f015 0508 	ands.w	r5, r5, #8
   d8c32:	d1f8      	bne.n	d8c26 <_strtol_l.isra.0+0xa>
   d8c34:	2c2d      	cmp	r4, #45	; 0x2d
   d8c36:	d133      	bne.n	d8ca0 <_strtol_l.isra.0+0x84>
   d8c38:	f89c 4000 	ldrb.w	r4, [ip]
   d8c3c:	f04f 0801 	mov.w	r8, #1
   d8c40:	f100 0c02 	add.w	ip, r0, #2
   d8c44:	2b00      	cmp	r3, #0
   d8c46:	d05c      	beq.n	d8d02 <_strtol_l.isra.0+0xe6>
   d8c48:	2b10      	cmp	r3, #16
   d8c4a:	d10c      	bne.n	d8c66 <_strtol_l.isra.0+0x4a>
   d8c4c:	2c30      	cmp	r4, #48	; 0x30
   d8c4e:	d10a      	bne.n	d8c66 <_strtol_l.isra.0+0x4a>
   d8c50:	f89c 0000 	ldrb.w	r0, [ip]
   d8c54:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8c58:	2858      	cmp	r0, #88	; 0x58
   d8c5a:	d14d      	bne.n	d8cf8 <_strtol_l.isra.0+0xdc>
   d8c5c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8c60:	2310      	movs	r3, #16
   d8c62:	f10c 0c02 	add.w	ip, ip, #2
   d8c66:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d8c6a:	3f01      	subs	r7, #1
   d8c6c:	2600      	movs	r6, #0
   d8c6e:	fbb7 f9f3 	udiv	r9, r7, r3
   d8c72:	4630      	mov	r0, r6
   d8c74:	fb03 7a19 	mls	sl, r3, r9, r7
   d8c78:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d8c7c:	2d09      	cmp	r5, #9
   d8c7e:	d818      	bhi.n	d8cb2 <_strtol_l.isra.0+0x96>
   d8c80:	462c      	mov	r4, r5
   d8c82:	42a3      	cmp	r3, r4
   d8c84:	dd24      	ble.n	d8cd0 <_strtol_l.isra.0+0xb4>
   d8c86:	1c75      	adds	r5, r6, #1
   d8c88:	d007      	beq.n	d8c9a <_strtol_l.isra.0+0x7e>
   d8c8a:	4581      	cmp	r9, r0
   d8c8c:	d31d      	bcc.n	d8cca <_strtol_l.isra.0+0xae>
   d8c8e:	d101      	bne.n	d8c94 <_strtol_l.isra.0+0x78>
   d8c90:	45a2      	cmp	sl, r4
   d8c92:	db1a      	blt.n	d8cca <_strtol_l.isra.0+0xae>
   d8c94:	fb00 4003 	mla	r0, r0, r3, r4
   d8c98:	2601      	movs	r6, #1
   d8c9a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8c9e:	e7eb      	b.n	d8c78 <_strtol_l.isra.0+0x5c>
   d8ca0:	2c2b      	cmp	r4, #43	; 0x2b
   d8ca2:	bf08      	it	eq
   d8ca4:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8ca8:	46a8      	mov	r8, r5
   d8caa:	bf08      	it	eq
   d8cac:	f100 0c02 	addeq.w	ip, r0, #2
   d8cb0:	e7c8      	b.n	d8c44 <_strtol_l.isra.0+0x28>
   d8cb2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d8cb6:	2d19      	cmp	r5, #25
   d8cb8:	d801      	bhi.n	d8cbe <_strtol_l.isra.0+0xa2>
   d8cba:	3c37      	subs	r4, #55	; 0x37
   d8cbc:	e7e1      	b.n	d8c82 <_strtol_l.isra.0+0x66>
   d8cbe:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d8cc2:	2d19      	cmp	r5, #25
   d8cc4:	d804      	bhi.n	d8cd0 <_strtol_l.isra.0+0xb4>
   d8cc6:	3c57      	subs	r4, #87	; 0x57
   d8cc8:	e7db      	b.n	d8c82 <_strtol_l.isra.0+0x66>
   d8cca:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d8cce:	e7e4      	b.n	d8c9a <_strtol_l.isra.0+0x7e>
   d8cd0:	1c73      	adds	r3, r6, #1
   d8cd2:	d106      	bne.n	d8ce2 <_strtol_l.isra.0+0xc6>
   d8cd4:	2322      	movs	r3, #34	; 0x22
   d8cd6:	f8ce 3000 	str.w	r3, [lr]
   d8cda:	4638      	mov	r0, r7
   d8cdc:	b942      	cbnz	r2, d8cf0 <_strtol_l.isra.0+0xd4>
   d8cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8ce2:	f1b8 0f00 	cmp.w	r8, #0
   d8ce6:	d000      	beq.n	d8cea <_strtol_l.isra.0+0xce>
   d8ce8:	4240      	negs	r0, r0
   d8cea:	2a00      	cmp	r2, #0
   d8cec:	d0f7      	beq.n	d8cde <_strtol_l.isra.0+0xc2>
   d8cee:	b10e      	cbz	r6, d8cf4 <_strtol_l.isra.0+0xd8>
   d8cf0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d8cf4:	6011      	str	r1, [r2, #0]
   d8cf6:	e7f2      	b.n	d8cde <_strtol_l.isra.0+0xc2>
   d8cf8:	2430      	movs	r4, #48	; 0x30
   d8cfa:	2b00      	cmp	r3, #0
   d8cfc:	d1b3      	bne.n	d8c66 <_strtol_l.isra.0+0x4a>
   d8cfe:	2308      	movs	r3, #8
   d8d00:	e7b1      	b.n	d8c66 <_strtol_l.isra.0+0x4a>
   d8d02:	2c30      	cmp	r4, #48	; 0x30
   d8d04:	d0a4      	beq.n	d8c50 <_strtol_l.isra.0+0x34>
   d8d06:	230a      	movs	r3, #10
   d8d08:	e7ad      	b.n	d8c66 <_strtol_l.isra.0+0x4a>
   d8d0a:	bf00      	nop
   d8d0c:	000dabc5 	.word	0x000dabc5

000d8d10 <strtol>:
   d8d10:	4613      	mov	r3, r2
   d8d12:	460a      	mov	r2, r1
   d8d14:	4601      	mov	r1, r0
   d8d16:	4802      	ldr	r0, [pc, #8]	; (d8d20 <strtol+0x10>)
   d8d18:	6800      	ldr	r0, [r0, #0]
   d8d1a:	f7ff bf7f 	b.w	d8c1c <_strtol_l.isra.0>
   d8d1e:	bf00      	nop
   d8d20:	2003e1c4 	.word	0x2003e1c4

000d8d24 <_strtoul_l.isra.0>:
   d8d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8d28:	4e3b      	ldr	r6, [pc, #236]	; (d8e18 <_strtoul_l.isra.0+0xf4>)
   d8d2a:	4686      	mov	lr, r0
   d8d2c:	468c      	mov	ip, r1
   d8d2e:	4660      	mov	r0, ip
   d8d30:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8d34:	5da5      	ldrb	r5, [r4, r6]
   d8d36:	f015 0508 	ands.w	r5, r5, #8
   d8d3a:	d1f8      	bne.n	d8d2e <_strtoul_l.isra.0+0xa>
   d8d3c:	2c2d      	cmp	r4, #45	; 0x2d
   d8d3e:	d134      	bne.n	d8daa <_strtoul_l.isra.0+0x86>
   d8d40:	f89c 4000 	ldrb.w	r4, [ip]
   d8d44:	f04f 0801 	mov.w	r8, #1
   d8d48:	f100 0c02 	add.w	ip, r0, #2
   d8d4c:	2b00      	cmp	r3, #0
   d8d4e:	d05e      	beq.n	d8e0e <_strtoul_l.isra.0+0xea>
   d8d50:	2b10      	cmp	r3, #16
   d8d52:	d10c      	bne.n	d8d6e <_strtoul_l.isra.0+0x4a>
   d8d54:	2c30      	cmp	r4, #48	; 0x30
   d8d56:	d10a      	bne.n	d8d6e <_strtoul_l.isra.0+0x4a>
   d8d58:	f89c 0000 	ldrb.w	r0, [ip]
   d8d5c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8d60:	2858      	cmp	r0, #88	; 0x58
   d8d62:	d14f      	bne.n	d8e04 <_strtoul_l.isra.0+0xe0>
   d8d64:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8d68:	2310      	movs	r3, #16
   d8d6a:	f10c 0c02 	add.w	ip, ip, #2
   d8d6e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d8d72:	2500      	movs	r5, #0
   d8d74:	fbb7 f7f3 	udiv	r7, r7, r3
   d8d78:	fb03 f907 	mul.w	r9, r3, r7
   d8d7c:	ea6f 0909 	mvn.w	r9, r9
   d8d80:	4628      	mov	r0, r5
   d8d82:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   d8d86:	2e09      	cmp	r6, #9
   d8d88:	d818      	bhi.n	d8dbc <_strtoul_l.isra.0+0x98>
   d8d8a:	4634      	mov	r4, r6
   d8d8c:	42a3      	cmp	r3, r4
   d8d8e:	dd24      	ble.n	d8dda <_strtoul_l.isra.0+0xb6>
   d8d90:	2d00      	cmp	r5, #0
   d8d92:	db1f      	blt.n	d8dd4 <_strtoul_l.isra.0+0xb0>
   d8d94:	4287      	cmp	r7, r0
   d8d96:	d31d      	bcc.n	d8dd4 <_strtoul_l.isra.0+0xb0>
   d8d98:	d101      	bne.n	d8d9e <_strtoul_l.isra.0+0x7a>
   d8d9a:	45a1      	cmp	r9, r4
   d8d9c:	db1a      	blt.n	d8dd4 <_strtoul_l.isra.0+0xb0>
   d8d9e:	fb00 4003 	mla	r0, r0, r3, r4
   d8da2:	2501      	movs	r5, #1
   d8da4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d8da8:	e7eb      	b.n	d8d82 <_strtoul_l.isra.0+0x5e>
   d8daa:	2c2b      	cmp	r4, #43	; 0x2b
   d8dac:	bf08      	it	eq
   d8dae:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8db2:	46a8      	mov	r8, r5
   d8db4:	bf08      	it	eq
   d8db6:	f100 0c02 	addeq.w	ip, r0, #2
   d8dba:	e7c7      	b.n	d8d4c <_strtoul_l.isra.0+0x28>
   d8dbc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   d8dc0:	2e19      	cmp	r6, #25
   d8dc2:	d801      	bhi.n	d8dc8 <_strtoul_l.isra.0+0xa4>
   d8dc4:	3c37      	subs	r4, #55	; 0x37
   d8dc6:	e7e1      	b.n	d8d8c <_strtoul_l.isra.0+0x68>
   d8dc8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   d8dcc:	2e19      	cmp	r6, #25
   d8dce:	d804      	bhi.n	d8dda <_strtoul_l.isra.0+0xb6>
   d8dd0:	3c57      	subs	r4, #87	; 0x57
   d8dd2:	e7db      	b.n	d8d8c <_strtoul_l.isra.0+0x68>
   d8dd4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d8dd8:	e7e4      	b.n	d8da4 <_strtoul_l.isra.0+0x80>
   d8dda:	2d00      	cmp	r5, #0
   d8ddc:	da07      	bge.n	d8dee <_strtoul_l.isra.0+0xca>
   d8dde:	2322      	movs	r3, #34	; 0x22
   d8de0:	f8ce 3000 	str.w	r3, [lr]
   d8de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8de8:	b942      	cbnz	r2, d8dfc <_strtoul_l.isra.0+0xd8>
   d8dea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8dee:	f1b8 0f00 	cmp.w	r8, #0
   d8df2:	d000      	beq.n	d8df6 <_strtoul_l.isra.0+0xd2>
   d8df4:	4240      	negs	r0, r0
   d8df6:	2a00      	cmp	r2, #0
   d8df8:	d0f7      	beq.n	d8dea <_strtoul_l.isra.0+0xc6>
   d8dfa:	b10d      	cbz	r5, d8e00 <_strtoul_l.isra.0+0xdc>
   d8dfc:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d8e00:	6011      	str	r1, [r2, #0]
   d8e02:	e7f2      	b.n	d8dea <_strtoul_l.isra.0+0xc6>
   d8e04:	2430      	movs	r4, #48	; 0x30
   d8e06:	2b00      	cmp	r3, #0
   d8e08:	d1b1      	bne.n	d8d6e <_strtoul_l.isra.0+0x4a>
   d8e0a:	2308      	movs	r3, #8
   d8e0c:	e7af      	b.n	d8d6e <_strtoul_l.isra.0+0x4a>
   d8e0e:	2c30      	cmp	r4, #48	; 0x30
   d8e10:	d0a2      	beq.n	d8d58 <_strtoul_l.isra.0+0x34>
   d8e12:	230a      	movs	r3, #10
   d8e14:	e7ab      	b.n	d8d6e <_strtoul_l.isra.0+0x4a>
   d8e16:	bf00      	nop
   d8e18:	000dabc5 	.word	0x000dabc5

000d8e1c <strtoul>:
   d8e1c:	4613      	mov	r3, r2
   d8e1e:	460a      	mov	r2, r1
   d8e20:	4601      	mov	r1, r0
   d8e22:	4802      	ldr	r0, [pc, #8]	; (d8e2c <strtoul+0x10>)
   d8e24:	6800      	ldr	r0, [r0, #0]
   d8e26:	f7ff bf7d 	b.w	d8d24 <_strtoul_l.isra.0>
   d8e2a:	bf00      	nop
   d8e2c:	2003e1c4 	.word	0x2003e1c4

000d8e30 <__tzcalc_limits>:
   d8e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8e34:	4680      	mov	r8, r0
   d8e36:	f000 fdd1 	bl	d99dc <__gettzinfo>
   d8e3a:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d8e3e:	4598      	cmp	r8, r3
   d8e40:	f340 8098 	ble.w	d8f74 <__tzcalc_limits+0x144>
   d8e44:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d8e48:	4443      	add	r3, r8
   d8e4a:	109b      	asrs	r3, r3, #2
   d8e4c:	f240 126d 	movw	r2, #365	; 0x16d
   d8e50:	f2a8 75b2 	subw	r5, r8, #1970	; 0x7b2
   d8e54:	fb02 3505 	mla	r5, r2, r5, r3
   d8e58:	f06f 0263 	mvn.w	r2, #99	; 0x63
   d8e5c:	f2a8 736d 	subw	r3, r8, #1901	; 0x76d
   d8e60:	fb93 f3f2 	sdiv	r3, r3, r2
   d8e64:	441d      	add	r5, r3
   d8e66:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d8e6a:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d8e6e:	fb98 f7f3 	sdiv	r7, r8, r3
   d8e72:	fb03 8717 	mls	r7, r3, r7, r8
   d8e76:	4442      	add	r2, r8
   d8e78:	fab7 fc87 	clz	ip, r7
   d8e7c:	fbb2 f2f3 	udiv	r2, r2, r3
   d8e80:	f008 0303 	and.w	r3, r8, #3
   d8e84:	4415      	add	r5, r2
   d8e86:	2264      	movs	r2, #100	; 0x64
   d8e88:	f8c0 8004 	str.w	r8, [r0, #4]
   d8e8c:	fb98 f6f2 	sdiv	r6, r8, r2
   d8e90:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
   d8e94:	fb02 8616 	mls	r6, r2, r6, r8
   d8e98:	4604      	mov	r4, r0
   d8e9a:	f100 0b50 	add.w	fp, r0, #80	; 0x50
   d8e9e:	9300      	str	r3, [sp, #0]
   d8ea0:	f04f 0e07 	mov.w	lr, #7
   d8ea4:	7a22      	ldrb	r2, [r4, #8]
   d8ea6:	6963      	ldr	r3, [r4, #20]
   d8ea8:	2a4a      	cmp	r2, #74	; 0x4a
   d8eaa:	d128      	bne.n	d8efe <__tzcalc_limits+0xce>
   d8eac:	9900      	ldr	r1, [sp, #0]
   d8eae:	18ea      	adds	r2, r5, r3
   d8eb0:	b901      	cbnz	r1, d8eb4 <__tzcalc_limits+0x84>
   d8eb2:	b906      	cbnz	r6, d8eb6 <__tzcalc_limits+0x86>
   d8eb4:	bb0f      	cbnz	r7, d8efa <__tzcalc_limits+0xca>
   d8eb6:	2b3b      	cmp	r3, #59	; 0x3b
   d8eb8:	bfd4      	ite	le
   d8eba:	2300      	movle	r3, #0
   d8ebc:	2301      	movgt	r3, #1
   d8ebe:	4413      	add	r3, r2
   d8ec0:	1e5a      	subs	r2, r3, #1
   d8ec2:	69a3      	ldr	r3, [r4, #24]
   d8ec4:	492c      	ldr	r1, [pc, #176]	; (d8f78 <__tzcalc_limits+0x148>)
   d8ec6:	fb01 3202 	mla	r2, r1, r2, r3
   d8eca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d8ecc:	4413      	add	r3, r2
   d8ece:	461a      	mov	r2, r3
   d8ed0:	17db      	asrs	r3, r3, #31
   d8ed2:	e9c4 2308 	strd	r2, r3, [r4, #32]
   d8ed6:	3428      	adds	r4, #40	; 0x28
   d8ed8:	45a3      	cmp	fp, r4
   d8eda:	d1e3      	bne.n	d8ea4 <__tzcalc_limits+0x74>
   d8edc:	e9d0 4508 	ldrd	r4, r5, [r0, #32]
   d8ee0:	e9d0 2312 	ldrd	r2, r3, [r0, #72]	; 0x48
   d8ee4:	4294      	cmp	r4, r2
   d8ee6:	eb75 0303 	sbcs.w	r3, r5, r3
   d8eea:	bfb4      	ite	lt
   d8eec:	2301      	movlt	r3, #1
   d8eee:	2300      	movge	r3, #0
   d8ef0:	6003      	str	r3, [r0, #0]
   d8ef2:	2001      	movs	r0, #1
   d8ef4:	b003      	add	sp, #12
   d8ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8efa:	2300      	movs	r3, #0
   d8efc:	e7df      	b.n	d8ebe <__tzcalc_limits+0x8e>
   d8efe:	2a44      	cmp	r2, #68	; 0x44
   d8f00:	d101      	bne.n	d8f06 <__tzcalc_limits+0xd6>
   d8f02:	18ea      	adds	r2, r5, r3
   d8f04:	e7dd      	b.n	d8ec2 <__tzcalc_limits+0x92>
   d8f06:	9a00      	ldr	r2, [sp, #0]
   d8f08:	bb72      	cbnz	r2, d8f68 <__tzcalc_limits+0x138>
   d8f0a:	2e00      	cmp	r6, #0
   d8f0c:	bf0c      	ite	eq
   d8f0e:	46e0      	moveq	r8, ip
   d8f10:	f04f 0801 	movne.w	r8, #1
   d8f14:	4919      	ldr	r1, [pc, #100]	; (d8f7c <__tzcalc_limits+0x14c>)
   d8f16:	68e2      	ldr	r2, [r4, #12]
   d8f18:	9201      	str	r2, [sp, #4]
   d8f1a:	f04f 0a30 	mov.w	sl, #48	; 0x30
   d8f1e:	fb0a 1808 	mla	r8, sl, r8, r1
   d8f22:	462a      	mov	r2, r5
   d8f24:	f04f 0900 	mov.w	r9, #0
   d8f28:	f1a8 0804 	sub.w	r8, r8, #4
   d8f2c:	9901      	ldr	r1, [sp, #4]
   d8f2e:	f109 0901 	add.w	r9, r9, #1
   d8f32:	4549      	cmp	r1, r9
   d8f34:	f858 a029 	ldr.w	sl, [r8, r9, lsl #2]
   d8f38:	dc18      	bgt.n	d8f6c <__tzcalc_limits+0x13c>
   d8f3a:	f102 0804 	add.w	r8, r2, #4
   d8f3e:	fb98 f9fe 	sdiv	r9, r8, lr
   d8f42:	ebc9 09c9 	rsb	r9, r9, r9, lsl #3
   d8f46:	eba8 0909 	sub.w	r9, r8, r9
   d8f4a:	ebb3 0909 	subs.w	r9, r3, r9
   d8f4e:	6923      	ldr	r3, [r4, #16]
   d8f50:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d8f54:	bf48      	it	mi
   d8f56:	f109 0907 	addmi.w	r9, r9, #7
   d8f5a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8f5e:	444b      	add	r3, r9
   d8f60:	4553      	cmp	r3, sl
   d8f62:	da05      	bge.n	d8f70 <__tzcalc_limits+0x140>
   d8f64:	441a      	add	r2, r3
   d8f66:	e7ac      	b.n	d8ec2 <__tzcalc_limits+0x92>
   d8f68:	46e0      	mov	r8, ip
   d8f6a:	e7d3      	b.n	d8f14 <__tzcalc_limits+0xe4>
   d8f6c:	4452      	add	r2, sl
   d8f6e:	e7dd      	b.n	d8f2c <__tzcalc_limits+0xfc>
   d8f70:	3b07      	subs	r3, #7
   d8f72:	e7f5      	b.n	d8f60 <__tzcalc_limits+0x130>
   d8f74:	2000      	movs	r0, #0
   d8f76:	e7bd      	b.n	d8ef4 <__tzcalc_limits+0xc4>
   d8f78:	00015180 	.word	0x00015180
   d8f7c:	000daac8 	.word	0x000daac8

000d8f80 <__tz_lock>:
   d8f80:	4801      	ldr	r0, [pc, #4]	; (d8f88 <__tz_lock+0x8>)
   d8f82:	f000 bddf 	b.w	d9b44 <__retarget_lock_acquire>
   d8f86:	bf00      	nop
   d8f88:	2003e7ef 	.word	0x2003e7ef

000d8f8c <__tz_unlock>:
   d8f8c:	4801      	ldr	r0, [pc, #4]	; (d8f94 <__tz_unlock+0x8>)
   d8f8e:	f000 bddb 	b.w	d9b48 <__retarget_lock_release>
   d8f92:	bf00      	nop
   d8f94:	2003e7ef 	.word	0x2003e7ef

000d8f98 <_tzset_unlocked>:
   d8f98:	4b01      	ldr	r3, [pc, #4]	; (d8fa0 <_tzset_unlocked+0x8>)
   d8f9a:	6818      	ldr	r0, [r3, #0]
   d8f9c:	f000 b802 	b.w	d8fa4 <_tzset_unlocked_r>
   d8fa0:	2003e1c4 	.word	0x2003e1c4

000d8fa4 <_tzset_unlocked_r>:
   d8fa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8fa8:	b08d      	sub	sp, #52	; 0x34
   d8faa:	4607      	mov	r7, r0
   d8fac:	f000 fd16 	bl	d99dc <__gettzinfo>
   d8fb0:	49ae      	ldr	r1, [pc, #696]	; (d926c <_tzset_unlocked_r+0x2c8>)
   d8fb2:	4eaf      	ldr	r6, [pc, #700]	; (d9270 <_tzset_unlocked_r+0x2cc>)
   d8fb4:	4605      	mov	r5, r0
   d8fb6:	4638      	mov	r0, r7
   d8fb8:	f000 fd08 	bl	d99cc <_getenv_r>
   d8fbc:	4604      	mov	r4, r0
   d8fbe:	b970      	cbnz	r0, d8fde <_tzset_unlocked_r+0x3a>
   d8fc0:	4bac      	ldr	r3, [pc, #688]	; (d9274 <_tzset_unlocked_r+0x2d0>)
   d8fc2:	4aad      	ldr	r2, [pc, #692]	; (d9278 <_tzset_unlocked_r+0x2d4>)
   d8fc4:	6018      	str	r0, [r3, #0]
   d8fc6:	4bad      	ldr	r3, [pc, #692]	; (d927c <_tzset_unlocked_r+0x2d8>)
   d8fc8:	6018      	str	r0, [r3, #0]
   d8fca:	4bad      	ldr	r3, [pc, #692]	; (d9280 <_tzset_unlocked_r+0x2dc>)
   d8fcc:	6830      	ldr	r0, [r6, #0]
   d8fce:	e9c3 2200 	strd	r2, r2, [r3]
   d8fd2:	f7fc fdbf 	bl	d5b54 <free>
   d8fd6:	6034      	str	r4, [r6, #0]
   d8fd8:	b00d      	add	sp, #52	; 0x34
   d8fda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8fde:	6831      	ldr	r1, [r6, #0]
   d8fe0:	2900      	cmp	r1, #0
   d8fe2:	d15f      	bne.n	d90a4 <_tzset_unlocked_r+0x100>
   d8fe4:	6830      	ldr	r0, [r6, #0]
   d8fe6:	f7fc fdb5 	bl	d5b54 <free>
   d8fea:	4620      	mov	r0, r4
   d8fec:	f7fe ffb7 	bl	d7f5e <strlen>
   d8ff0:	1c41      	adds	r1, r0, #1
   d8ff2:	4638      	mov	r0, r7
   d8ff4:	f7fc fdd6 	bl	d5ba4 <_malloc_r>
   d8ff8:	6030      	str	r0, [r6, #0]
   d8ffa:	2800      	cmp	r0, #0
   d8ffc:	d157      	bne.n	d90ae <_tzset_unlocked_r+0x10a>
   d8ffe:	7823      	ldrb	r3, [r4, #0]
   d9000:	4aa0      	ldr	r2, [pc, #640]	; (d9284 <_tzset_unlocked_r+0x2e0>)
   d9002:	49a1      	ldr	r1, [pc, #644]	; (d9288 <_tzset_unlocked_r+0x2e4>)
   d9004:	2b3a      	cmp	r3, #58	; 0x3a
   d9006:	bf08      	it	eq
   d9008:	3401      	addeq	r4, #1
   d900a:	ae0a      	add	r6, sp, #40	; 0x28
   d900c:	4633      	mov	r3, r6
   d900e:	4620      	mov	r0, r4
   d9010:	f7fc fdb0 	bl	d5b74 <siscanf>
   d9014:	2800      	cmp	r0, #0
   d9016:	dddf      	ble.n	d8fd8 <_tzset_unlocked_r+0x34>
   d9018:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d901a:	18e7      	adds	r7, r4, r3
   d901c:	5ce3      	ldrb	r3, [r4, r3]
   d901e:	2b2d      	cmp	r3, #45	; 0x2d
   d9020:	d149      	bne.n	d90b6 <_tzset_unlocked_r+0x112>
   d9022:	3701      	adds	r7, #1
   d9024:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d9028:	f10d 0a20 	add.w	sl, sp, #32
   d902c:	f10d 0b1e 	add.w	fp, sp, #30
   d9030:	f04f 0800 	mov.w	r8, #0
   d9034:	e9cd 6a01 	strd	r6, sl, [sp, #4]
   d9038:	4994      	ldr	r1, [pc, #592]	; (d928c <_tzset_unlocked_r+0x2e8>)
   d903a:	9603      	str	r6, [sp, #12]
   d903c:	f8cd b000 	str.w	fp, [sp]
   d9040:	4633      	mov	r3, r6
   d9042:	aa07      	add	r2, sp, #28
   d9044:	4638      	mov	r0, r7
   d9046:	f8ad 801e 	strh.w	r8, [sp, #30]
   d904a:	f8ad 8020 	strh.w	r8, [sp, #32]
   d904e:	f7fc fd91 	bl	d5b74 <siscanf>
   d9052:	4540      	cmp	r0, r8
   d9054:	ddc0      	ble.n	d8fd8 <_tzset_unlocked_r+0x34>
   d9056:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d905a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d905e:	f8df 9238 	ldr.w	r9, [pc, #568]	; d9298 <_tzset_unlocked_r+0x2f4>
   d9062:	213c      	movs	r1, #60	; 0x3c
   d9064:	fb01 2203 	mla	r2, r1, r3, r2
   d9068:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d906c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9070:	fb01 2303 	mla	r3, r1, r3, r2
   d9074:	435c      	muls	r4, r3
   d9076:	62ac      	str	r4, [r5, #40]	; 0x28
   d9078:	4c81      	ldr	r4, [pc, #516]	; (d9280 <_tzset_unlocked_r+0x2dc>)
   d907a:	4b82      	ldr	r3, [pc, #520]	; (d9284 <_tzset_unlocked_r+0x2e0>)
   d907c:	6023      	str	r3, [r4, #0]
   d907e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9080:	4981      	ldr	r1, [pc, #516]	; (d9288 <_tzset_unlocked_r+0x2e4>)
   d9082:	441f      	add	r7, r3
   d9084:	464a      	mov	r2, r9
   d9086:	4633      	mov	r3, r6
   d9088:	4638      	mov	r0, r7
   d908a:	f7fc fd73 	bl	d5b74 <siscanf>
   d908e:	4540      	cmp	r0, r8
   d9090:	dc16      	bgt.n	d90c0 <_tzset_unlocked_r+0x11c>
   d9092:	6823      	ldr	r3, [r4, #0]
   d9094:	6063      	str	r3, [r4, #4]
   d9096:	4b77      	ldr	r3, [pc, #476]	; (d9274 <_tzset_unlocked_r+0x2d0>)
   d9098:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   d909a:	601a      	str	r2, [r3, #0]
   d909c:	4b77      	ldr	r3, [pc, #476]	; (d927c <_tzset_unlocked_r+0x2d8>)
   d909e:	f8c3 8000 	str.w	r8, [r3]
   d90a2:	e799      	b.n	d8fd8 <_tzset_unlocked_r+0x34>
   d90a4:	f7fe ff2c 	bl	d7f00 <strcmp>
   d90a8:	2800      	cmp	r0, #0
   d90aa:	d19b      	bne.n	d8fe4 <_tzset_unlocked_r+0x40>
   d90ac:	e794      	b.n	d8fd8 <_tzset_unlocked_r+0x34>
   d90ae:	4621      	mov	r1, r4
   d90b0:	f7fe ff30 	bl	d7f14 <strcpy>
   d90b4:	e7a3      	b.n	d8ffe <_tzset_unlocked_r+0x5a>
   d90b6:	2b2b      	cmp	r3, #43	; 0x2b
   d90b8:	bf08      	it	eq
   d90ba:	3701      	addeq	r7, #1
   d90bc:	2401      	movs	r4, #1
   d90be:	e7b3      	b.n	d9028 <_tzset_unlocked_r+0x84>
   d90c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d90c2:	f8c4 9004 	str.w	r9, [r4, #4]
   d90c6:	18fc      	adds	r4, r7, r3
   d90c8:	5cfb      	ldrb	r3, [r7, r3]
   d90ca:	2b2d      	cmp	r3, #45	; 0x2d
   d90cc:	f040 808b 	bne.w	d91e6 <_tzset_unlocked_r+0x242>
   d90d0:	3401      	adds	r4, #1
   d90d2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d90d6:	2300      	movs	r3, #0
   d90d8:	f8ad 301c 	strh.w	r3, [sp, #28]
   d90dc:	f8ad 301e 	strh.w	r3, [sp, #30]
   d90e0:	f8ad 3020 	strh.w	r3, [sp, #32]
   d90e4:	930a      	str	r3, [sp, #40]	; 0x28
   d90e6:	e9cd a602 	strd	sl, r6, [sp, #8]
   d90ea:	e9cd b600 	strd	fp, r6, [sp]
   d90ee:	4967      	ldr	r1, [pc, #412]	; (d928c <_tzset_unlocked_r+0x2e8>)
   d90f0:	4633      	mov	r3, r6
   d90f2:	aa07      	add	r2, sp, #28
   d90f4:	4620      	mov	r0, r4
   d90f6:	f7fc fd3d 	bl	d5b74 <siscanf>
   d90fa:	2800      	cmp	r0, #0
   d90fc:	dc78      	bgt.n	d91f0 <_tzset_unlocked_r+0x24c>
   d90fe:	6aaf      	ldr	r7, [r5, #40]	; 0x28
   d9100:	f5a7 6761 	sub.w	r7, r7, #3600	; 0xe10
   d9104:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9106:	652f      	str	r7, [r5, #80]	; 0x50
   d9108:	441c      	add	r4, r3
   d910a:	462f      	mov	r7, r5
   d910c:	f04f 0900 	mov.w	r9, #0
   d9110:	7823      	ldrb	r3, [r4, #0]
   d9112:	2b2c      	cmp	r3, #44	; 0x2c
   d9114:	bf08      	it	eq
   d9116:	3401      	addeq	r4, #1
   d9118:	f894 8000 	ldrb.w	r8, [r4]
   d911c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d9120:	d178      	bne.n	d9214 <_tzset_unlocked_r+0x270>
   d9122:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d9126:	e9cd 6301 	strd	r6, r3, [sp, #4]
   d912a:	ab09      	add	r3, sp, #36	; 0x24
   d912c:	9300      	str	r3, [sp, #0]
   d912e:	4958      	ldr	r1, [pc, #352]	; (d9290 <_tzset_unlocked_r+0x2ec>)
   d9130:	9603      	str	r6, [sp, #12]
   d9132:	4633      	mov	r3, r6
   d9134:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d9138:	4620      	mov	r0, r4
   d913a:	f7fc fd1b 	bl	d5b74 <siscanf>
   d913e:	2803      	cmp	r0, #3
   d9140:	f47f af4a 	bne.w	d8fd8 <_tzset_unlocked_r+0x34>
   d9144:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d9148:	1e4b      	subs	r3, r1, #1
   d914a:	2b0b      	cmp	r3, #11
   d914c:	f63f af44 	bhi.w	d8fd8 <_tzset_unlocked_r+0x34>
   d9150:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d9154:	1e53      	subs	r3, r2, #1
   d9156:	2b04      	cmp	r3, #4
   d9158:	f63f af3e 	bhi.w	d8fd8 <_tzset_unlocked_r+0x34>
   d915c:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d9160:	2b06      	cmp	r3, #6
   d9162:	f63f af39 	bhi.w	d8fd8 <_tzset_unlocked_r+0x34>
   d9166:	e9c7 1203 	strd	r1, r2, [r7, #12]
   d916a:	f887 8008 	strb.w	r8, [r7, #8]
   d916e:	617b      	str	r3, [r7, #20]
   d9170:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9172:	eb04 0803 	add.w	r8, r4, r3
   d9176:	2302      	movs	r3, #2
   d9178:	f8ad 301c 	strh.w	r3, [sp, #28]
   d917c:	2300      	movs	r3, #0
   d917e:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9182:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9186:	930a      	str	r3, [sp, #40]	; 0x28
   d9188:	f898 3000 	ldrb.w	r3, [r8]
   d918c:	2b2f      	cmp	r3, #47	; 0x2f
   d918e:	d109      	bne.n	d91a4 <_tzset_unlocked_r+0x200>
   d9190:	e9cd a602 	strd	sl, r6, [sp, #8]
   d9194:	e9cd b600 	strd	fp, r6, [sp]
   d9198:	493e      	ldr	r1, [pc, #248]	; (d9294 <_tzset_unlocked_r+0x2f0>)
   d919a:	4633      	mov	r3, r6
   d919c:	aa07      	add	r2, sp, #28
   d919e:	4640      	mov	r0, r8
   d91a0:	f7fc fce8 	bl	d5b74 <siscanf>
   d91a4:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d91a8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d91ac:	213c      	movs	r1, #60	; 0x3c
   d91ae:	fb01 2203 	mla	r2, r1, r3, r2
   d91b2:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d91b6:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d91ba:	fb01 2303 	mla	r3, r1, r3, r2
   d91be:	61bb      	str	r3, [r7, #24]
   d91c0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   d91c2:	3728      	adds	r7, #40	; 0x28
   d91c4:	4444      	add	r4, r8
   d91c6:	f1b9 0f00 	cmp.w	r9, #0
   d91ca:	d020      	beq.n	d920e <_tzset_unlocked_r+0x26a>
   d91cc:	6868      	ldr	r0, [r5, #4]
   d91ce:	f7ff fe2f 	bl	d8e30 <__tzcalc_limits>
   d91d2:	4b28      	ldr	r3, [pc, #160]	; (d9274 <_tzset_unlocked_r+0x2d0>)
   d91d4:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   d91d6:	601a      	str	r2, [r3, #0]
   d91d8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   d91da:	1a9b      	subs	r3, r3, r2
   d91dc:	4a27      	ldr	r2, [pc, #156]	; (d927c <_tzset_unlocked_r+0x2d8>)
   d91de:	bf18      	it	ne
   d91e0:	2301      	movne	r3, #1
   d91e2:	6013      	str	r3, [r2, #0]
   d91e4:	e6f8      	b.n	d8fd8 <_tzset_unlocked_r+0x34>
   d91e6:	2b2b      	cmp	r3, #43	; 0x2b
   d91e8:	bf08      	it	eq
   d91ea:	3401      	addeq	r4, #1
   d91ec:	2701      	movs	r7, #1
   d91ee:	e772      	b.n	d90d6 <_tzset_unlocked_r+0x132>
   d91f0:	f8bd 301e 	ldrh.w	r3, [sp, #30]
   d91f4:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d91f8:	213c      	movs	r1, #60	; 0x3c
   d91fa:	fb01 2203 	mla	r2, r1, r3, r2
   d91fe:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d9202:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9206:	fb01 2303 	mla	r3, r1, r3, r2
   d920a:	435f      	muls	r7, r3
   d920c:	e77a      	b.n	d9104 <_tzset_unlocked_r+0x160>
   d920e:	f04f 0901 	mov.w	r9, #1
   d9212:	e77d      	b.n	d9110 <_tzset_unlocked_r+0x16c>
   d9214:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d9218:	bf06      	itte	eq
   d921a:	3401      	addeq	r4, #1
   d921c:	4643      	moveq	r3, r8
   d921e:	2344      	movne	r3, #68	; 0x44
   d9220:	220a      	movs	r2, #10
   d9222:	a90b      	add	r1, sp, #44	; 0x2c
   d9224:	4620      	mov	r0, r4
   d9226:	9305      	str	r3, [sp, #20]
   d9228:	f7ff fdf8 	bl	d8e1c <strtoul>
   d922c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d9230:	9b05      	ldr	r3, [sp, #20]
   d9232:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d9236:	45a0      	cmp	r8, r4
   d9238:	d114      	bne.n	d9264 <_tzset_unlocked_r+0x2c0>
   d923a:	234d      	movs	r3, #77	; 0x4d
   d923c:	f1b9 0f00 	cmp.w	r9, #0
   d9240:	d107      	bne.n	d9252 <_tzset_unlocked_r+0x2ae>
   d9242:	722b      	strb	r3, [r5, #8]
   d9244:	2103      	movs	r1, #3
   d9246:	2302      	movs	r3, #2
   d9248:	e9c5 1303 	strd	r1, r3, [r5, #12]
   d924c:	f8c5 9014 	str.w	r9, [r5, #20]
   d9250:	e791      	b.n	d9176 <_tzset_unlocked_r+0x1d2>
   d9252:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
   d9256:	220b      	movs	r2, #11
   d9258:	2301      	movs	r3, #1
   d925a:	e9c5 230d 	strd	r2, r3, [r5, #52]	; 0x34
   d925e:	2300      	movs	r3, #0
   d9260:	63eb      	str	r3, [r5, #60]	; 0x3c
   d9262:	e788      	b.n	d9176 <_tzset_unlocked_r+0x1d2>
   d9264:	b280      	uxth	r0, r0
   d9266:	723b      	strb	r3, [r7, #8]
   d9268:	6178      	str	r0, [r7, #20]
   d926a:	e784      	b.n	d9176 <_tzset_unlocked_r+0x1d2>
   d926c:	000dab88 	.word	0x000dab88
   d9270:	2003e7d8 	.word	0x2003e7d8
   d9274:	2003e7e0 	.word	0x2003e7e0
   d9278:	000dab8b 	.word	0x000dab8b
   d927c:	2003e7dc 	.word	0x2003e7dc
   d9280:	2003e228 	.word	0x2003e228
   d9284:	2003e7cb 	.word	0x2003e7cb
   d9288:	000dab8f 	.word	0x000dab8f
   d928c:	000dabb2 	.word	0x000dabb2
   d9290:	000dab9e 	.word	0x000dab9e
   d9294:	000dabb1 	.word	0x000dabb1
   d9298:	2003e7c0 	.word	0x2003e7c0

000d929c <rshift>:
   d929c:	6903      	ldr	r3, [r0, #16]
   d929e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
   d92a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d92a6:	ea4f 1261 	mov.w	r2, r1, asr #5
   d92aa:	f100 0414 	add.w	r4, r0, #20
   d92ae:	dd45      	ble.n	d933c <rshift+0xa0>
   d92b0:	f011 011f 	ands.w	r1, r1, #31
   d92b4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
   d92b8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
   d92bc:	d10c      	bne.n	d92d8 <rshift+0x3c>
   d92be:	f100 0710 	add.w	r7, r0, #16
   d92c2:	4629      	mov	r1, r5
   d92c4:	42b1      	cmp	r1, r6
   d92c6:	d334      	bcc.n	d9332 <rshift+0x96>
   d92c8:	1a9b      	subs	r3, r3, r2
   d92ca:	009b      	lsls	r3, r3, #2
   d92cc:	1eea      	subs	r2, r5, #3
   d92ce:	4296      	cmp	r6, r2
   d92d0:	bf38      	it	cc
   d92d2:	2300      	movcc	r3, #0
   d92d4:	4423      	add	r3, r4
   d92d6:	e015      	b.n	d9304 <rshift+0x68>
   d92d8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
   d92dc:	f1c1 0820 	rsb	r8, r1, #32
   d92e0:	40cf      	lsrs	r7, r1
   d92e2:	f105 0e04 	add.w	lr, r5, #4
   d92e6:	46a1      	mov	r9, r4
   d92e8:	4576      	cmp	r6, lr
   d92ea:	46f4      	mov	ip, lr
   d92ec:	d815      	bhi.n	d931a <rshift+0x7e>
   d92ee:	1a9b      	subs	r3, r3, r2
   d92f0:	009a      	lsls	r2, r3, #2
   d92f2:	3a04      	subs	r2, #4
   d92f4:	3501      	adds	r5, #1
   d92f6:	42ae      	cmp	r6, r5
   d92f8:	bf38      	it	cc
   d92fa:	2200      	movcc	r2, #0
   d92fc:	18a3      	adds	r3, r4, r2
   d92fe:	50a7      	str	r7, [r4, r2]
   d9300:	b107      	cbz	r7, d9304 <rshift+0x68>
   d9302:	3304      	adds	r3, #4
   d9304:	1b1a      	subs	r2, r3, r4
   d9306:	42a3      	cmp	r3, r4
   d9308:	ea4f 02a2 	mov.w	r2, r2, asr #2
   d930c:	bf08      	it	eq
   d930e:	2300      	moveq	r3, #0
   d9310:	6102      	str	r2, [r0, #16]
   d9312:	bf08      	it	eq
   d9314:	6143      	streq	r3, [r0, #20]
   d9316:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d931a:	f8dc c000 	ldr.w	ip, [ip]
   d931e:	fa0c fc08 	lsl.w	ip, ip, r8
   d9322:	ea4c 0707 	orr.w	r7, ip, r7
   d9326:	f849 7b04 	str.w	r7, [r9], #4
   d932a:	f85e 7b04 	ldr.w	r7, [lr], #4
   d932e:	40cf      	lsrs	r7, r1
   d9330:	e7da      	b.n	d92e8 <rshift+0x4c>
   d9332:	f851 cb04 	ldr.w	ip, [r1], #4
   d9336:	f847 cf04 	str.w	ip, [r7, #4]!
   d933a:	e7c3      	b.n	d92c4 <rshift+0x28>
   d933c:	4623      	mov	r3, r4
   d933e:	e7e1      	b.n	d9304 <rshift+0x68>

000d9340 <__hexdig_fun>:
   d9340:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d9344:	2b09      	cmp	r3, #9
   d9346:	d802      	bhi.n	d934e <__hexdig_fun+0xe>
   d9348:	3820      	subs	r0, #32
   d934a:	b2c0      	uxtb	r0, r0
   d934c:	4770      	bx	lr
   d934e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d9352:	2b05      	cmp	r3, #5
   d9354:	d801      	bhi.n	d935a <__hexdig_fun+0x1a>
   d9356:	3847      	subs	r0, #71	; 0x47
   d9358:	e7f7      	b.n	d934a <__hexdig_fun+0xa>
   d935a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d935e:	2b05      	cmp	r3, #5
   d9360:	d801      	bhi.n	d9366 <__hexdig_fun+0x26>
   d9362:	3827      	subs	r0, #39	; 0x27
   d9364:	e7f1      	b.n	d934a <__hexdig_fun+0xa>
   d9366:	2000      	movs	r0, #0
   d9368:	4770      	bx	lr
	...

000d936c <__gethex>:
   d936c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9370:	ed2d 8b02 	vpush	{d8}
   d9374:	b089      	sub	sp, #36	; 0x24
   d9376:	ee08 0a10 	vmov	s16, r0
   d937a:	9304      	str	r3, [sp, #16]
   d937c:	4bbc      	ldr	r3, [pc, #752]	; (d9670 <__gethex+0x304>)
   d937e:	681b      	ldr	r3, [r3, #0]
   d9380:	9301      	str	r3, [sp, #4]
   d9382:	4618      	mov	r0, r3
   d9384:	468b      	mov	fp, r1
   d9386:	4690      	mov	r8, r2
   d9388:	f7fe fde9 	bl	d7f5e <strlen>
   d938c:	9b01      	ldr	r3, [sp, #4]
   d938e:	f8db 2000 	ldr.w	r2, [fp]
   d9392:	4403      	add	r3, r0
   d9394:	4682      	mov	sl, r0
   d9396:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   d939a:	9305      	str	r3, [sp, #20]
   d939c:	1c93      	adds	r3, r2, #2
   d939e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
   d93a2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
   d93a6:	32fe      	adds	r2, #254	; 0xfe
   d93a8:	18d1      	adds	r1, r2, r3
   d93aa:	461f      	mov	r7, r3
   d93ac:	f813 0b01 	ldrb.w	r0, [r3], #1
   d93b0:	9100      	str	r1, [sp, #0]
   d93b2:	2830      	cmp	r0, #48	; 0x30
   d93b4:	d0f8      	beq.n	d93a8 <__gethex+0x3c>
   d93b6:	f7ff ffc3 	bl	d9340 <__hexdig_fun>
   d93ba:	4604      	mov	r4, r0
   d93bc:	2800      	cmp	r0, #0
   d93be:	d13a      	bne.n	d9436 <__gethex+0xca>
   d93c0:	9901      	ldr	r1, [sp, #4]
   d93c2:	4652      	mov	r2, sl
   d93c4:	4638      	mov	r0, r7
   d93c6:	f7fe fdd2 	bl	d7f6e <strncmp>
   d93ca:	4605      	mov	r5, r0
   d93cc:	2800      	cmp	r0, #0
   d93ce:	d168      	bne.n	d94a2 <__gethex+0x136>
   d93d0:	f817 000a 	ldrb.w	r0, [r7, sl]
   d93d4:	eb07 060a 	add.w	r6, r7, sl
   d93d8:	f7ff ffb2 	bl	d9340 <__hexdig_fun>
   d93dc:	2800      	cmp	r0, #0
   d93de:	d062      	beq.n	d94a6 <__gethex+0x13a>
   d93e0:	4633      	mov	r3, r6
   d93e2:	7818      	ldrb	r0, [r3, #0]
   d93e4:	2830      	cmp	r0, #48	; 0x30
   d93e6:	461f      	mov	r7, r3
   d93e8:	f103 0301 	add.w	r3, r3, #1
   d93ec:	d0f9      	beq.n	d93e2 <__gethex+0x76>
   d93ee:	f7ff ffa7 	bl	d9340 <__hexdig_fun>
   d93f2:	2301      	movs	r3, #1
   d93f4:	fab0 f480 	clz	r4, r0
   d93f8:	0964      	lsrs	r4, r4, #5
   d93fa:	4635      	mov	r5, r6
   d93fc:	9300      	str	r3, [sp, #0]
   d93fe:	463a      	mov	r2, r7
   d9400:	4616      	mov	r6, r2
   d9402:	3201      	adds	r2, #1
   d9404:	7830      	ldrb	r0, [r6, #0]
   d9406:	f7ff ff9b 	bl	d9340 <__hexdig_fun>
   d940a:	2800      	cmp	r0, #0
   d940c:	d1f8      	bne.n	d9400 <__gethex+0x94>
   d940e:	9901      	ldr	r1, [sp, #4]
   d9410:	4652      	mov	r2, sl
   d9412:	4630      	mov	r0, r6
   d9414:	f7fe fdab 	bl	d7f6e <strncmp>
   d9418:	b980      	cbnz	r0, d943c <__gethex+0xd0>
   d941a:	b94d      	cbnz	r5, d9430 <__gethex+0xc4>
   d941c:	eb06 050a 	add.w	r5, r6, sl
   d9420:	462a      	mov	r2, r5
   d9422:	4616      	mov	r6, r2
   d9424:	3201      	adds	r2, #1
   d9426:	7830      	ldrb	r0, [r6, #0]
   d9428:	f7ff ff8a 	bl	d9340 <__hexdig_fun>
   d942c:	2800      	cmp	r0, #0
   d942e:	d1f8      	bne.n	d9422 <__gethex+0xb6>
   d9430:	1bad      	subs	r5, r5, r6
   d9432:	00ad      	lsls	r5, r5, #2
   d9434:	e004      	b.n	d9440 <__gethex+0xd4>
   d9436:	2400      	movs	r4, #0
   d9438:	4625      	mov	r5, r4
   d943a:	e7e0      	b.n	d93fe <__gethex+0x92>
   d943c:	2d00      	cmp	r5, #0
   d943e:	d1f7      	bne.n	d9430 <__gethex+0xc4>
   d9440:	7833      	ldrb	r3, [r6, #0]
   d9442:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d9446:	2b50      	cmp	r3, #80	; 0x50
   d9448:	d13b      	bne.n	d94c2 <__gethex+0x156>
   d944a:	7873      	ldrb	r3, [r6, #1]
   d944c:	2b2b      	cmp	r3, #43	; 0x2b
   d944e:	d02c      	beq.n	d94aa <__gethex+0x13e>
   d9450:	2b2d      	cmp	r3, #45	; 0x2d
   d9452:	d02e      	beq.n	d94b2 <__gethex+0x146>
   d9454:	1c71      	adds	r1, r6, #1
   d9456:	f04f 0900 	mov.w	r9, #0
   d945a:	7808      	ldrb	r0, [r1, #0]
   d945c:	f7ff ff70 	bl	d9340 <__hexdig_fun>
   d9460:	1e43      	subs	r3, r0, #1
   d9462:	b2db      	uxtb	r3, r3
   d9464:	2b18      	cmp	r3, #24
   d9466:	d82c      	bhi.n	d94c2 <__gethex+0x156>
   d9468:	f1a0 0210 	sub.w	r2, r0, #16
   d946c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   d9470:	f7ff ff66 	bl	d9340 <__hexdig_fun>
   d9474:	1e43      	subs	r3, r0, #1
   d9476:	b2db      	uxtb	r3, r3
   d9478:	2b18      	cmp	r3, #24
   d947a:	d91d      	bls.n	d94b8 <__gethex+0x14c>
   d947c:	f1b9 0f00 	cmp.w	r9, #0
   d9480:	d000      	beq.n	d9484 <__gethex+0x118>
   d9482:	4252      	negs	r2, r2
   d9484:	4415      	add	r5, r2
   d9486:	f8cb 1000 	str.w	r1, [fp]
   d948a:	b1e4      	cbz	r4, d94c6 <__gethex+0x15a>
   d948c:	9b00      	ldr	r3, [sp, #0]
   d948e:	2b00      	cmp	r3, #0
   d9490:	bf14      	ite	ne
   d9492:	2700      	movne	r7, #0
   d9494:	2706      	moveq	r7, #6
   d9496:	4638      	mov	r0, r7
   d9498:	b009      	add	sp, #36	; 0x24
   d949a:	ecbd 8b02 	vpop	{d8}
   d949e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d94a2:	463e      	mov	r6, r7
   d94a4:	4625      	mov	r5, r4
   d94a6:	2401      	movs	r4, #1
   d94a8:	e7ca      	b.n	d9440 <__gethex+0xd4>
   d94aa:	f04f 0900 	mov.w	r9, #0
   d94ae:	1cb1      	adds	r1, r6, #2
   d94b0:	e7d3      	b.n	d945a <__gethex+0xee>
   d94b2:	f04f 0901 	mov.w	r9, #1
   d94b6:	e7fa      	b.n	d94ae <__gethex+0x142>
   d94b8:	230a      	movs	r3, #10
   d94ba:	fb03 0202 	mla	r2, r3, r2, r0
   d94be:	3a10      	subs	r2, #16
   d94c0:	e7d4      	b.n	d946c <__gethex+0x100>
   d94c2:	4631      	mov	r1, r6
   d94c4:	e7df      	b.n	d9486 <__gethex+0x11a>
   d94c6:	1bf3      	subs	r3, r6, r7
   d94c8:	3b01      	subs	r3, #1
   d94ca:	4621      	mov	r1, r4
   d94cc:	2b07      	cmp	r3, #7
   d94ce:	dc52      	bgt.n	d9576 <__gethex+0x20a>
   d94d0:	ee18 0a10 	vmov	r0, s16
   d94d4:	f000 fb4c 	bl	d9b70 <_Balloc>
   d94d8:	f04f 0b00 	mov.w	fp, #0
   d94dc:	f100 0914 	add.w	r9, r0, #20
   d94e0:	f1ca 0301 	rsb	r3, sl, #1
   d94e4:	4604      	mov	r4, r0
   d94e6:	f8cd 9008 	str.w	r9, [sp, #8]
   d94ea:	f8cd b000 	str.w	fp, [sp]
   d94ee:	9306      	str	r3, [sp, #24]
   d94f0:	42b7      	cmp	r7, r6
   d94f2:	d343      	bcc.n	d957c <__gethex+0x210>
   d94f4:	9802      	ldr	r0, [sp, #8]
   d94f6:	9b00      	ldr	r3, [sp, #0]
   d94f8:	f840 3b04 	str.w	r3, [r0], #4
   d94fc:	eba0 0009 	sub.w	r0, r0, r9
   d9500:	1080      	asrs	r0, r0, #2
   d9502:	0146      	lsls	r6, r0, #5
   d9504:	6120      	str	r0, [r4, #16]
   d9506:	4618      	mov	r0, r3
   d9508:	f000 fbf9 	bl	d9cfe <__hi0bits>
   d950c:	1a30      	subs	r0, r6, r0
   d950e:	f8d8 6000 	ldr.w	r6, [r8]
   d9512:	42b0      	cmp	r0, r6
   d9514:	dd66      	ble.n	d95e4 <__gethex+0x278>
   d9516:	1b87      	subs	r7, r0, r6
   d9518:	4639      	mov	r1, r7
   d951a:	4620      	mov	r0, r4
   d951c:	f000 ff46 	bl	da3ac <__any_on>
   d9520:	4682      	mov	sl, r0
   d9522:	b1a8      	cbz	r0, d9550 <__gethex+0x1e4>
   d9524:	1e7b      	subs	r3, r7, #1
   d9526:	1159      	asrs	r1, r3, #5
   d9528:	f003 021f 	and.w	r2, r3, #31
   d952c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
   d9530:	f04f 0a01 	mov.w	sl, #1
   d9534:	fa0a f202 	lsl.w	r2, sl, r2
   d9538:	420a      	tst	r2, r1
   d953a:	d009      	beq.n	d9550 <__gethex+0x1e4>
   d953c:	4553      	cmp	r3, sl
   d953e:	dd05      	ble.n	d954c <__gethex+0x1e0>
   d9540:	1eb9      	subs	r1, r7, #2
   d9542:	4620      	mov	r0, r4
   d9544:	f000 ff32 	bl	da3ac <__any_on>
   d9548:	2800      	cmp	r0, #0
   d954a:	d148      	bne.n	d95de <__gethex+0x272>
   d954c:	f04f 0a02 	mov.w	sl, #2
   d9550:	4639      	mov	r1, r7
   d9552:	4620      	mov	r0, r4
   d9554:	f7ff fea2 	bl	d929c <rshift>
   d9558:	443d      	add	r5, r7
   d955a:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d955e:	42ab      	cmp	r3, r5
   d9560:	da4f      	bge.n	d9602 <__gethex+0x296>
   d9562:	ee18 0a10 	vmov	r0, s16
   d9566:	4621      	mov	r1, r4
   d9568:	f000 fb36 	bl	d9bd8 <_Bfree>
   d956c:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d956e:	2300      	movs	r3, #0
   d9570:	6013      	str	r3, [r2, #0]
   d9572:	27a3      	movs	r7, #163	; 0xa3
   d9574:	e78f      	b.n	d9496 <__gethex+0x12a>
   d9576:	3101      	adds	r1, #1
   d9578:	105b      	asrs	r3, r3, #1
   d957a:	e7a7      	b.n	d94cc <__gethex+0x160>
   d957c:	1e73      	subs	r3, r6, #1
   d957e:	9a05      	ldr	r2, [sp, #20]
   d9580:	9303      	str	r3, [sp, #12]
   d9582:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   d9586:	4293      	cmp	r3, r2
   d9588:	d019      	beq.n	d95be <__gethex+0x252>
   d958a:	f1bb 0f20 	cmp.w	fp, #32
   d958e:	d107      	bne.n	d95a0 <__gethex+0x234>
   d9590:	9b02      	ldr	r3, [sp, #8]
   d9592:	9a00      	ldr	r2, [sp, #0]
   d9594:	f843 2b04 	str.w	r2, [r3], #4
   d9598:	9302      	str	r3, [sp, #8]
   d959a:	2300      	movs	r3, #0
   d959c:	9300      	str	r3, [sp, #0]
   d959e:	469b      	mov	fp, r3
   d95a0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
   d95a4:	f7ff fecc 	bl	d9340 <__hexdig_fun>
   d95a8:	9b00      	ldr	r3, [sp, #0]
   d95aa:	f000 000f 	and.w	r0, r0, #15
   d95ae:	fa00 f00b 	lsl.w	r0, r0, fp
   d95b2:	4303      	orrs	r3, r0
   d95b4:	9300      	str	r3, [sp, #0]
   d95b6:	f10b 0b04 	add.w	fp, fp, #4
   d95ba:	9b03      	ldr	r3, [sp, #12]
   d95bc:	e00d      	b.n	d95da <__gethex+0x26e>
   d95be:	9b03      	ldr	r3, [sp, #12]
   d95c0:	9a06      	ldr	r2, [sp, #24]
   d95c2:	4413      	add	r3, r2
   d95c4:	42bb      	cmp	r3, r7
   d95c6:	d3e0      	bcc.n	d958a <__gethex+0x21e>
   d95c8:	4618      	mov	r0, r3
   d95ca:	9901      	ldr	r1, [sp, #4]
   d95cc:	9307      	str	r3, [sp, #28]
   d95ce:	4652      	mov	r2, sl
   d95d0:	f7fe fccd 	bl	d7f6e <strncmp>
   d95d4:	9b07      	ldr	r3, [sp, #28]
   d95d6:	2800      	cmp	r0, #0
   d95d8:	d1d7      	bne.n	d958a <__gethex+0x21e>
   d95da:	461e      	mov	r6, r3
   d95dc:	e788      	b.n	d94f0 <__gethex+0x184>
   d95de:	f04f 0a03 	mov.w	sl, #3
   d95e2:	e7b5      	b.n	d9550 <__gethex+0x1e4>
   d95e4:	da0a      	bge.n	d95fc <__gethex+0x290>
   d95e6:	1a37      	subs	r7, r6, r0
   d95e8:	4621      	mov	r1, r4
   d95ea:	ee18 0a10 	vmov	r0, s16
   d95ee:	463a      	mov	r2, r7
   d95f0:	f000 fcc8 	bl	d9f84 <__lshift>
   d95f4:	1bed      	subs	r5, r5, r7
   d95f6:	4604      	mov	r4, r0
   d95f8:	f100 0914 	add.w	r9, r0, #20
   d95fc:	f04f 0a00 	mov.w	sl, #0
   d9600:	e7ab      	b.n	d955a <__gethex+0x1ee>
   d9602:	f8d8 0004 	ldr.w	r0, [r8, #4]
   d9606:	42a8      	cmp	r0, r5
   d9608:	dd6d      	ble.n	d96e6 <__gethex+0x37a>
   d960a:	1b45      	subs	r5, r0, r5
   d960c:	42ae      	cmp	r6, r5
   d960e:	dc31      	bgt.n	d9674 <__gethex+0x308>
   d9610:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d9614:	2b02      	cmp	r3, #2
   d9616:	d023      	beq.n	d9660 <__gethex+0x2f4>
   d9618:	2b03      	cmp	r3, #3
   d961a:	d025      	beq.n	d9668 <__gethex+0x2fc>
   d961c:	2b01      	cmp	r3, #1
   d961e:	d115      	bne.n	d964c <__gethex+0x2e0>
   d9620:	42ae      	cmp	r6, r5
   d9622:	d113      	bne.n	d964c <__gethex+0x2e0>
   d9624:	2e01      	cmp	r6, #1
   d9626:	d10b      	bne.n	d9640 <__gethex+0x2d4>
   d9628:	9a04      	ldr	r2, [sp, #16]
   d962a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   d962e:	6013      	str	r3, [r2, #0]
   d9630:	2301      	movs	r3, #1
   d9632:	6123      	str	r3, [r4, #16]
   d9634:	f8c9 3000 	str.w	r3, [r9]
   d9638:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d963a:	2762      	movs	r7, #98	; 0x62
   d963c:	601c      	str	r4, [r3, #0]
   d963e:	e72a      	b.n	d9496 <__gethex+0x12a>
   d9640:	1e71      	subs	r1, r6, #1
   d9642:	4620      	mov	r0, r4
   d9644:	f000 feb2 	bl	da3ac <__any_on>
   d9648:	2800      	cmp	r0, #0
   d964a:	d1ed      	bne.n	d9628 <__gethex+0x2bc>
   d964c:	ee18 0a10 	vmov	r0, s16
   d9650:	4621      	mov	r1, r4
   d9652:	f000 fac1 	bl	d9bd8 <_Bfree>
   d9656:	9a14      	ldr	r2, [sp, #80]	; 0x50
   d9658:	2300      	movs	r3, #0
   d965a:	6013      	str	r3, [r2, #0]
   d965c:	2750      	movs	r7, #80	; 0x50
   d965e:	e71a      	b.n	d9496 <__gethex+0x12a>
   d9660:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d9662:	2b00      	cmp	r3, #0
   d9664:	d1f2      	bne.n	d964c <__gethex+0x2e0>
   d9666:	e7df      	b.n	d9628 <__gethex+0x2bc>
   d9668:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d966a:	2b00      	cmp	r3, #0
   d966c:	d1dc      	bne.n	d9628 <__gethex+0x2bc>
   d966e:	e7ed      	b.n	d964c <__gethex+0x2e0>
   d9670:	000dacc8 	.word	0x000dacc8
   d9674:	1e6f      	subs	r7, r5, #1
   d9676:	f1ba 0f00 	cmp.w	sl, #0
   d967a:	d131      	bne.n	d96e0 <__gethex+0x374>
   d967c:	b127      	cbz	r7, d9688 <__gethex+0x31c>
   d967e:	4639      	mov	r1, r7
   d9680:	4620      	mov	r0, r4
   d9682:	f000 fe93 	bl	da3ac <__any_on>
   d9686:	4682      	mov	sl, r0
   d9688:	117b      	asrs	r3, r7, #5
   d968a:	2101      	movs	r1, #1
   d968c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
   d9690:	f007 071f 	and.w	r7, r7, #31
   d9694:	fa01 f707 	lsl.w	r7, r1, r7
   d9698:	421f      	tst	r7, r3
   d969a:	4629      	mov	r1, r5
   d969c:	4620      	mov	r0, r4
   d969e:	bf18      	it	ne
   d96a0:	f04a 0a02 	orrne.w	sl, sl, #2
   d96a4:	1b76      	subs	r6, r6, r5
   d96a6:	f7ff fdf9 	bl	d929c <rshift>
   d96aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
   d96ae:	2702      	movs	r7, #2
   d96b0:	f1ba 0f00 	cmp.w	sl, #0
   d96b4:	d048      	beq.n	d9748 <__gethex+0x3dc>
   d96b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
   d96ba:	2b02      	cmp	r3, #2
   d96bc:	d015      	beq.n	d96ea <__gethex+0x37e>
   d96be:	2b03      	cmp	r3, #3
   d96c0:	d017      	beq.n	d96f2 <__gethex+0x386>
   d96c2:	2b01      	cmp	r3, #1
   d96c4:	d109      	bne.n	d96da <__gethex+0x36e>
   d96c6:	f01a 0f02 	tst.w	sl, #2
   d96ca:	d006      	beq.n	d96da <__gethex+0x36e>
   d96cc:	f8d9 0000 	ldr.w	r0, [r9]
   d96d0:	ea4a 0a00 	orr.w	sl, sl, r0
   d96d4:	f01a 0f01 	tst.w	sl, #1
   d96d8:	d10e      	bne.n	d96f8 <__gethex+0x38c>
   d96da:	f047 0710 	orr.w	r7, r7, #16
   d96de:	e033      	b.n	d9748 <__gethex+0x3dc>
   d96e0:	f04f 0a01 	mov.w	sl, #1
   d96e4:	e7d0      	b.n	d9688 <__gethex+0x31c>
   d96e6:	2701      	movs	r7, #1
   d96e8:	e7e2      	b.n	d96b0 <__gethex+0x344>
   d96ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d96ec:	f1c3 0301 	rsb	r3, r3, #1
   d96f0:	9315      	str	r3, [sp, #84]	; 0x54
   d96f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
   d96f4:	2b00      	cmp	r3, #0
   d96f6:	d0f0      	beq.n	d96da <__gethex+0x36e>
   d96f8:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d96fc:	f104 0314 	add.w	r3, r4, #20
   d9700:	ea4f 0b89 	mov.w	fp, r9, lsl #2
   d9704:	eb03 0189 	add.w	r1, r3, r9, lsl #2
   d9708:	f04f 0c00 	mov.w	ip, #0
   d970c:	4618      	mov	r0, r3
   d970e:	f853 2b04 	ldr.w	r2, [r3], #4
   d9712:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   d9716:	d01c      	beq.n	d9752 <__gethex+0x3e6>
   d9718:	3201      	adds	r2, #1
   d971a:	6002      	str	r2, [r0, #0]
   d971c:	2f02      	cmp	r7, #2
   d971e:	f104 0314 	add.w	r3, r4, #20
   d9722:	d13a      	bne.n	d979a <__gethex+0x42e>
   d9724:	f8d8 2000 	ldr.w	r2, [r8]
   d9728:	3a01      	subs	r2, #1
   d972a:	42b2      	cmp	r2, r6
   d972c:	d10a      	bne.n	d9744 <__gethex+0x3d8>
   d972e:	1171      	asrs	r1, r6, #5
   d9730:	2201      	movs	r2, #1
   d9732:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
   d9736:	f006 061f 	and.w	r6, r6, #31
   d973a:	fa02 f606 	lsl.w	r6, r2, r6
   d973e:	421e      	tst	r6, r3
   d9740:	bf18      	it	ne
   d9742:	4617      	movne	r7, r2
   d9744:	f047 0720 	orr.w	r7, r7, #32
   d9748:	9b14      	ldr	r3, [sp, #80]	; 0x50
   d974a:	601c      	str	r4, [r3, #0]
   d974c:	9b04      	ldr	r3, [sp, #16]
   d974e:	601d      	str	r5, [r3, #0]
   d9750:	e6a1      	b.n	d9496 <__gethex+0x12a>
   d9752:	4299      	cmp	r1, r3
   d9754:	f843 cc04 	str.w	ip, [r3, #-4]
   d9758:	d8d8      	bhi.n	d970c <__gethex+0x3a0>
   d975a:	68a3      	ldr	r3, [r4, #8]
   d975c:	4599      	cmp	r9, r3
   d975e:	db14      	blt.n	d978a <__gethex+0x41e>
   d9760:	6861      	ldr	r1, [r4, #4]
   d9762:	ee18 0a10 	vmov	r0, s16
   d9766:	3101      	adds	r1, #1
   d9768:	f000 fa02 	bl	d9b70 <_Balloc>
   d976c:	6922      	ldr	r2, [r4, #16]
   d976e:	3202      	adds	r2, #2
   d9770:	f104 010c 	add.w	r1, r4, #12
   d9774:	4682      	mov	sl, r0
   d9776:	0092      	lsls	r2, r2, #2
   d9778:	300c      	adds	r0, #12
   d977a:	f7fe fb87 	bl	d7e8c <memcpy>
   d977e:	4621      	mov	r1, r4
   d9780:	ee18 0a10 	vmov	r0, s16
   d9784:	f000 fa28 	bl	d9bd8 <_Bfree>
   d9788:	4654      	mov	r4, sl
   d978a:	6923      	ldr	r3, [r4, #16]
   d978c:	1c5a      	adds	r2, r3, #1
   d978e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   d9792:	6122      	str	r2, [r4, #16]
   d9794:	2201      	movs	r2, #1
   d9796:	615a      	str	r2, [r3, #20]
   d9798:	e7c0      	b.n	d971c <__gethex+0x3b0>
   d979a:	6922      	ldr	r2, [r4, #16]
   d979c:	454a      	cmp	r2, r9
   d979e:	dd0b      	ble.n	d97b8 <__gethex+0x44c>
   d97a0:	2101      	movs	r1, #1
   d97a2:	4620      	mov	r0, r4
   d97a4:	f7ff fd7a 	bl	d929c <rshift>
   d97a8:	f8d8 3008 	ldr.w	r3, [r8, #8]
   d97ac:	3501      	adds	r5, #1
   d97ae:	42ab      	cmp	r3, r5
   d97b0:	f6ff aed7 	blt.w	d9562 <__gethex+0x1f6>
   d97b4:	2701      	movs	r7, #1
   d97b6:	e7c5      	b.n	d9744 <__gethex+0x3d8>
   d97b8:	f016 061f 	ands.w	r6, r6, #31
   d97bc:	d0fa      	beq.n	d97b4 <__gethex+0x448>
   d97be:	449b      	add	fp, r3
   d97c0:	f1c6 0620 	rsb	r6, r6, #32
   d97c4:	f85b 0c04 	ldr.w	r0, [fp, #-4]
   d97c8:	f000 fa99 	bl	d9cfe <__hi0bits>
   d97cc:	42b0      	cmp	r0, r6
   d97ce:	dbe7      	blt.n	d97a0 <__gethex+0x434>
   d97d0:	e7f0      	b.n	d97b4 <__gethex+0x448>
   d97d2:	bf00      	nop

000d97d4 <L_shift>:
   d97d4:	f1c2 0208 	rsb	r2, r2, #8
   d97d8:	0092      	lsls	r2, r2, #2
   d97da:	b570      	push	{r4, r5, r6, lr}
   d97dc:	f1c2 0620 	rsb	r6, r2, #32
   d97e0:	6843      	ldr	r3, [r0, #4]
   d97e2:	6804      	ldr	r4, [r0, #0]
   d97e4:	fa03 f506 	lsl.w	r5, r3, r6
   d97e8:	432c      	orrs	r4, r5
   d97ea:	40d3      	lsrs	r3, r2
   d97ec:	6004      	str	r4, [r0, #0]
   d97ee:	f840 3f04 	str.w	r3, [r0, #4]!
   d97f2:	4288      	cmp	r0, r1
   d97f4:	d3f4      	bcc.n	d97e0 <L_shift+0xc>
   d97f6:	bd70      	pop	{r4, r5, r6, pc}

000d97f8 <__match>:
   d97f8:	b530      	push	{r4, r5, lr}
   d97fa:	6803      	ldr	r3, [r0, #0]
   d97fc:	3301      	adds	r3, #1
   d97fe:	f811 4b01 	ldrb.w	r4, [r1], #1
   d9802:	b914      	cbnz	r4, d980a <__match+0x12>
   d9804:	6003      	str	r3, [r0, #0]
   d9806:	2001      	movs	r0, #1
   d9808:	bd30      	pop	{r4, r5, pc}
   d980a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d980e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
   d9812:	2d19      	cmp	r5, #25
   d9814:	bf98      	it	ls
   d9816:	3220      	addls	r2, #32
   d9818:	42a2      	cmp	r2, r4
   d981a:	d0f0      	beq.n	d97fe <__match+0x6>
   d981c:	2000      	movs	r0, #0
   d981e:	e7f3      	b.n	d9808 <__match+0x10>

000d9820 <__hexnan>:
   d9820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9824:	680b      	ldr	r3, [r1, #0]
   d9826:	6801      	ldr	r1, [r0, #0]
   d9828:	115e      	asrs	r6, r3, #5
   d982a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
   d982e:	f013 031f 	ands.w	r3, r3, #31
   d9832:	b087      	sub	sp, #28
   d9834:	bf18      	it	ne
   d9836:	3604      	addne	r6, #4
   d9838:	2500      	movs	r5, #0
   d983a:	1f37      	subs	r7, r6, #4
   d983c:	4682      	mov	sl, r0
   d983e:	4690      	mov	r8, r2
   d9840:	9301      	str	r3, [sp, #4]
   d9842:	f846 5c04 	str.w	r5, [r6, #-4]
   d9846:	46b9      	mov	r9, r7
   d9848:	463c      	mov	r4, r7
   d984a:	9502      	str	r5, [sp, #8]
   d984c:	46ab      	mov	fp, r5
   d984e:	784a      	ldrb	r2, [r1, #1]
   d9850:	1c4b      	adds	r3, r1, #1
   d9852:	9303      	str	r3, [sp, #12]
   d9854:	b342      	cbz	r2, d98a8 <__hexnan+0x88>
   d9856:	4610      	mov	r0, r2
   d9858:	9105      	str	r1, [sp, #20]
   d985a:	9204      	str	r2, [sp, #16]
   d985c:	f7ff fd70 	bl	d9340 <__hexdig_fun>
   d9860:	2800      	cmp	r0, #0
   d9862:	d14f      	bne.n	d9904 <__hexnan+0xe4>
   d9864:	9a04      	ldr	r2, [sp, #16]
   d9866:	9905      	ldr	r1, [sp, #20]
   d9868:	2a20      	cmp	r2, #32
   d986a:	d818      	bhi.n	d989e <__hexnan+0x7e>
   d986c:	9b02      	ldr	r3, [sp, #8]
   d986e:	459b      	cmp	fp, r3
   d9870:	dd13      	ble.n	d989a <__hexnan+0x7a>
   d9872:	454c      	cmp	r4, r9
   d9874:	d206      	bcs.n	d9884 <__hexnan+0x64>
   d9876:	2d07      	cmp	r5, #7
   d9878:	dc04      	bgt.n	d9884 <__hexnan+0x64>
   d987a:	462a      	mov	r2, r5
   d987c:	4649      	mov	r1, r9
   d987e:	4620      	mov	r0, r4
   d9880:	f7ff ffa8 	bl	d97d4 <L_shift>
   d9884:	4544      	cmp	r4, r8
   d9886:	d950      	bls.n	d992a <__hexnan+0x10a>
   d9888:	2300      	movs	r3, #0
   d988a:	f1a4 0904 	sub.w	r9, r4, #4
   d988e:	f844 3c04 	str.w	r3, [r4, #-4]
   d9892:	f8cd b008 	str.w	fp, [sp, #8]
   d9896:	464c      	mov	r4, r9
   d9898:	461d      	mov	r5, r3
   d989a:	9903      	ldr	r1, [sp, #12]
   d989c:	e7d7      	b.n	d984e <__hexnan+0x2e>
   d989e:	2a29      	cmp	r2, #41	; 0x29
   d98a0:	d156      	bne.n	d9950 <__hexnan+0x130>
   d98a2:	3102      	adds	r1, #2
   d98a4:	f8ca 1000 	str.w	r1, [sl]
   d98a8:	f1bb 0f00 	cmp.w	fp, #0
   d98ac:	d050      	beq.n	d9950 <__hexnan+0x130>
   d98ae:	454c      	cmp	r4, r9
   d98b0:	d206      	bcs.n	d98c0 <__hexnan+0xa0>
   d98b2:	2d07      	cmp	r5, #7
   d98b4:	dc04      	bgt.n	d98c0 <__hexnan+0xa0>
   d98b6:	462a      	mov	r2, r5
   d98b8:	4649      	mov	r1, r9
   d98ba:	4620      	mov	r0, r4
   d98bc:	f7ff ff8a 	bl	d97d4 <L_shift>
   d98c0:	4544      	cmp	r4, r8
   d98c2:	d934      	bls.n	d992e <__hexnan+0x10e>
   d98c4:	f1a8 0204 	sub.w	r2, r8, #4
   d98c8:	4623      	mov	r3, r4
   d98ca:	f853 1b04 	ldr.w	r1, [r3], #4
   d98ce:	f842 1f04 	str.w	r1, [r2, #4]!
   d98d2:	429f      	cmp	r7, r3
   d98d4:	d2f9      	bcs.n	d98ca <__hexnan+0xaa>
   d98d6:	1b3b      	subs	r3, r7, r4
   d98d8:	f023 0303 	bic.w	r3, r3, #3
   d98dc:	3304      	adds	r3, #4
   d98de:	3401      	adds	r4, #1
   d98e0:	3e03      	subs	r6, #3
   d98e2:	42b4      	cmp	r4, r6
   d98e4:	bf88      	it	hi
   d98e6:	2304      	movhi	r3, #4
   d98e8:	4443      	add	r3, r8
   d98ea:	2200      	movs	r2, #0
   d98ec:	f843 2b04 	str.w	r2, [r3], #4
   d98f0:	429f      	cmp	r7, r3
   d98f2:	d2fb      	bcs.n	d98ec <__hexnan+0xcc>
   d98f4:	683b      	ldr	r3, [r7, #0]
   d98f6:	b91b      	cbnz	r3, d9900 <__hexnan+0xe0>
   d98f8:	4547      	cmp	r7, r8
   d98fa:	d127      	bne.n	d994c <__hexnan+0x12c>
   d98fc:	2301      	movs	r3, #1
   d98fe:	603b      	str	r3, [r7, #0]
   d9900:	2005      	movs	r0, #5
   d9902:	e026      	b.n	d9952 <__hexnan+0x132>
   d9904:	3501      	adds	r5, #1
   d9906:	2d08      	cmp	r5, #8
   d9908:	f10b 0b01 	add.w	fp, fp, #1
   d990c:	dd06      	ble.n	d991c <__hexnan+0xfc>
   d990e:	4544      	cmp	r4, r8
   d9910:	d9c3      	bls.n	d989a <__hexnan+0x7a>
   d9912:	2300      	movs	r3, #0
   d9914:	f844 3c04 	str.w	r3, [r4, #-4]
   d9918:	2501      	movs	r5, #1
   d991a:	3c04      	subs	r4, #4
   d991c:	6822      	ldr	r2, [r4, #0]
   d991e:	f000 000f 	and.w	r0, r0, #15
   d9922:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
   d9926:	6022      	str	r2, [r4, #0]
   d9928:	e7b7      	b.n	d989a <__hexnan+0x7a>
   d992a:	2508      	movs	r5, #8
   d992c:	e7b5      	b.n	d989a <__hexnan+0x7a>
   d992e:	9b01      	ldr	r3, [sp, #4]
   d9930:	2b00      	cmp	r3, #0
   d9932:	d0df      	beq.n	d98f4 <__hexnan+0xd4>
   d9934:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d9938:	f1c3 0320 	rsb	r3, r3, #32
   d993c:	fa22 f303 	lsr.w	r3, r2, r3
   d9940:	f856 2c04 	ldr.w	r2, [r6, #-4]
   d9944:	401a      	ands	r2, r3
   d9946:	f846 2c04 	str.w	r2, [r6, #-4]
   d994a:	e7d3      	b.n	d98f4 <__hexnan+0xd4>
   d994c:	3f04      	subs	r7, #4
   d994e:	e7d1      	b.n	d98f4 <__hexnan+0xd4>
   d9950:	2004      	movs	r0, #4
   d9952:	b007      	add	sp, #28
   d9954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d9958 <_findenv_r>:
   d9958:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d995c:	4607      	mov	r7, r0
   d995e:	4689      	mov	r9, r1
   d9960:	4616      	mov	r6, r2
   d9962:	f000 fd6b 	bl	da43c <__env_lock>
   d9966:	4b18      	ldr	r3, [pc, #96]	; (d99c8 <_findenv_r+0x70>)
   d9968:	681c      	ldr	r4, [r3, #0]
   d996a:	469a      	mov	sl, r3
   d996c:	b134      	cbz	r4, d997c <_findenv_r+0x24>
   d996e:	464b      	mov	r3, r9
   d9970:	4698      	mov	r8, r3
   d9972:	f813 1b01 	ldrb.w	r1, [r3], #1
   d9976:	b139      	cbz	r1, d9988 <_findenv_r+0x30>
   d9978:	293d      	cmp	r1, #61	; 0x3d
   d997a:	d1f9      	bne.n	d9970 <_findenv_r+0x18>
   d997c:	4638      	mov	r0, r7
   d997e:	f000 fd63 	bl	da448 <__env_unlock>
   d9982:	2000      	movs	r0, #0
   d9984:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9988:	eba8 0809 	sub.w	r8, r8, r9
   d998c:	46a3      	mov	fp, r4
   d998e:	f854 0b04 	ldr.w	r0, [r4], #4
   d9992:	2800      	cmp	r0, #0
   d9994:	d0f2      	beq.n	d997c <_findenv_r+0x24>
   d9996:	4642      	mov	r2, r8
   d9998:	4649      	mov	r1, r9
   d999a:	f7fe fae8 	bl	d7f6e <strncmp>
   d999e:	2800      	cmp	r0, #0
   d99a0:	d1f4      	bne.n	d998c <_findenv_r+0x34>
   d99a2:	f854 3c04 	ldr.w	r3, [r4, #-4]
   d99a6:	eb03 0508 	add.w	r5, r3, r8
   d99aa:	f813 3008 	ldrb.w	r3, [r3, r8]
   d99ae:	2b3d      	cmp	r3, #61	; 0x3d
   d99b0:	d1ec      	bne.n	d998c <_findenv_r+0x34>
   d99b2:	f8da 3000 	ldr.w	r3, [sl]
   d99b6:	ebab 0303 	sub.w	r3, fp, r3
   d99ba:	109b      	asrs	r3, r3, #2
   d99bc:	4638      	mov	r0, r7
   d99be:	6033      	str	r3, [r6, #0]
   d99c0:	f000 fd42 	bl	da448 <__env_unlock>
   d99c4:	1c68      	adds	r0, r5, #1
   d99c6:	e7dd      	b.n	d9984 <_findenv_r+0x2c>
   d99c8:	2003e3f8 	.word	0x2003e3f8

000d99cc <_getenv_r>:
   d99cc:	b507      	push	{r0, r1, r2, lr}
   d99ce:	aa01      	add	r2, sp, #4
   d99d0:	f7ff ffc2 	bl	d9958 <_findenv_r>
   d99d4:	b003      	add	sp, #12
   d99d6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d99dc <__gettzinfo>:
   d99dc:	4800      	ldr	r0, [pc, #0]	; (d99e0 <__gettzinfo+0x4>)
   d99de:	4770      	bx	lr
   d99e0:	2003e230 	.word	0x2003e230

000d99e4 <gmtime_r>:
   d99e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d99e8:	e9d0 6700 	ldrd	r6, r7, [r0]
   d99ec:	460c      	mov	r4, r1
   d99ee:	4a51      	ldr	r2, [pc, #324]	; (d9b34 <gmtime_r+0x150>)
   d99f0:	2300      	movs	r3, #0
   d99f2:	4630      	mov	r0, r6
   d99f4:	4639      	mov	r1, r7
   d99f6:	f000 fd2d 	bl	da454 <__aeabi_ldivmod>
   d99fa:	4639      	mov	r1, r7
   d99fc:	4605      	mov	r5, r0
   d99fe:	4a4d      	ldr	r2, [pc, #308]	; (d9b34 <gmtime_r+0x150>)
   d9a00:	4630      	mov	r0, r6
   d9a02:	2300      	movs	r3, #0
   d9a04:	f000 fd26 	bl	da454 <__aeabi_ldivmod>
   d9a08:	2a00      	cmp	r2, #0
   d9a0a:	bfbc      	itt	lt
   d9a0c:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d9a10:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d9a14:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9a18:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   d9a1c:	fbb2 f3f1 	udiv	r3, r2, r1
   d9a20:	fb01 2213 	mls	r2, r1, r3, r2
   d9a24:	f04f 013c 	mov.w	r1, #60	; 0x3c
   d9a28:	bfac      	ite	ge
   d9a2a:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
   d9a2e:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
   d9a32:	60a3      	str	r3, [r4, #8]
   d9a34:	fbb2 f3f1 	udiv	r3, r2, r1
   d9a38:	fb01 2213 	mls	r2, r1, r3, r2
   d9a3c:	6063      	str	r3, [r4, #4]
   d9a3e:	6022      	str	r2, [r4, #0]
   d9a40:	1cc3      	adds	r3, r0, #3
   d9a42:	2207      	movs	r2, #7
   d9a44:	fb93 f2f2 	sdiv	r2, r3, r2
   d9a48:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   d9a4c:	1a9b      	subs	r3, r3, r2
   d9a4e:	bf48      	it	mi
   d9a50:	3307      	addmi	r3, #7
   d9a52:	2800      	cmp	r0, #0
   d9a54:	61a3      	str	r3, [r4, #24]
   d9a56:	bfb8      	it	lt
   d9a58:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
   d9a5c:	4936      	ldr	r1, [pc, #216]	; (d9b38 <gmtime_r+0x154>)
   d9a5e:	bfae      	itee	ge
   d9a60:	fb90 f1f1 	sdivge	r1, r0, r1
   d9a64:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
   d9a68:	fb93 f1f1 	sdivlt	r1, r3, r1
   d9a6c:	4b33      	ldr	r3, [pc, #204]	; (d9b3c <gmtime_r+0x158>)
   d9a6e:	fb03 0001 	mla	r0, r3, r1, r0
   d9a72:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d9a76:	fbb0 f2f2 	udiv	r2, r0, r2
   d9a7a:	4402      	add	r2, r0
   d9a7c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
   d9a80:	fbb0 f3fc 	udiv	r3, r0, ip
   d9a84:	1ad2      	subs	r2, r2, r3
   d9a86:	f240 176d 	movw	r7, #365	; 0x16d
   d9a8a:	4b2d      	ldr	r3, [pc, #180]	; (d9b40 <gmtime_r+0x15c>)
   d9a8c:	fbb0 f3f3 	udiv	r3, r0, r3
   d9a90:	2664      	movs	r6, #100	; 0x64
   d9a92:	1ad3      	subs	r3, r2, r3
   d9a94:	fbb3 f5f7 	udiv	r5, r3, r7
   d9a98:	fbb3 f3fc 	udiv	r3, r3, ip
   d9a9c:	fbb5 f2f6 	udiv	r2, r5, r6
   d9aa0:	1ad3      	subs	r3, r2, r3
   d9aa2:	4403      	add	r3, r0
   d9aa4:	fb07 3315 	mls	r3, r7, r5, r3
   d9aa8:	2099      	movs	r0, #153	; 0x99
   d9aaa:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   d9aae:	f10c 0c02 	add.w	ip, ip, #2
   d9ab2:	f103 0e01 	add.w	lr, r3, #1
   d9ab6:	fbbc f7f0 	udiv	r7, ip, r0
   d9aba:	4378      	muls	r0, r7
   d9abc:	3002      	adds	r0, #2
   d9abe:	f04f 0805 	mov.w	r8, #5
   d9ac2:	fbb0 f0f8 	udiv	r0, r0, r8
   d9ac6:	ebae 0000 	sub.w	r0, lr, r0
   d9aca:	f240 5ef9 	movw	lr, #1529	; 0x5f9
   d9ace:	45f4      	cmp	ip, lr
   d9ad0:	bf94      	ite	ls
   d9ad2:	f04f 0c02 	movls.w	ip, #2
   d9ad6:	f06f 0c09 	mvnhi.w	ip, #9
   d9ada:	4467      	add	r7, ip
   d9adc:	f44f 7cc8 	mov.w	ip, #400	; 0x190
   d9ae0:	fb0c 5101 	mla	r1, ip, r1, r5
   d9ae4:	2f01      	cmp	r7, #1
   d9ae6:	bf98      	it	ls
   d9ae8:	3101      	addls	r1, #1
   d9aea:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d9aee:	d30c      	bcc.n	d9b0a <gmtime_r+0x126>
   d9af0:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   d9af4:	61e3      	str	r3, [r4, #28]
   d9af6:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
   d9afa:	2300      	movs	r3, #0
   d9afc:	60e0      	str	r0, [r4, #12]
   d9afe:	e9c4 7104 	strd	r7, r1, [r4, #16]
   d9b02:	6223      	str	r3, [r4, #32]
   d9b04:	4620      	mov	r0, r4
   d9b06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d9b0a:	f015 0f03 	tst.w	r5, #3
   d9b0e:	d102      	bne.n	d9b16 <gmtime_r+0x132>
   d9b10:	fb06 5212 	mls	r2, r6, r2, r5
   d9b14:	b95a      	cbnz	r2, d9b2e <gmtime_r+0x14a>
   d9b16:	f44f 76c8 	mov.w	r6, #400	; 0x190
   d9b1a:	fbb5 f2f6 	udiv	r2, r5, r6
   d9b1e:	fb06 5212 	mls	r2, r6, r2, r5
   d9b22:	fab2 f282 	clz	r2, r2
   d9b26:	0952      	lsrs	r2, r2, #5
   d9b28:	333b      	adds	r3, #59	; 0x3b
   d9b2a:	4413      	add	r3, r2
   d9b2c:	e7e2      	b.n	d9af4 <gmtime_r+0x110>
   d9b2e:	2201      	movs	r2, #1
   d9b30:	e7fa      	b.n	d9b28 <gmtime_r+0x144>
   d9b32:	bf00      	nop
   d9b34:	00015180 	.word	0x00015180
   d9b38:	00023ab1 	.word	0x00023ab1
   d9b3c:	fffdc54f 	.word	0xfffdc54f
   d9b40:	00023ab0 	.word	0x00023ab0

000d9b44 <__retarget_lock_acquire>:
   d9b44:	4770      	bx	lr

000d9b46 <__retarget_lock_acquire_recursive>:
   d9b46:	4770      	bx	lr

000d9b48 <__retarget_lock_release>:
   d9b48:	4770      	bx	lr

000d9b4a <__retarget_lock_release_recursive>:
   d9b4a:	4770      	bx	lr

000d9b4c <__ascii_mbtowc>:
   d9b4c:	b082      	sub	sp, #8
   d9b4e:	b901      	cbnz	r1, d9b52 <__ascii_mbtowc+0x6>
   d9b50:	a901      	add	r1, sp, #4
   d9b52:	b142      	cbz	r2, d9b66 <__ascii_mbtowc+0x1a>
   d9b54:	b14b      	cbz	r3, d9b6a <__ascii_mbtowc+0x1e>
   d9b56:	7813      	ldrb	r3, [r2, #0]
   d9b58:	600b      	str	r3, [r1, #0]
   d9b5a:	7812      	ldrb	r2, [r2, #0]
   d9b5c:	1e10      	subs	r0, r2, #0
   d9b5e:	bf18      	it	ne
   d9b60:	2001      	movne	r0, #1
   d9b62:	b002      	add	sp, #8
   d9b64:	4770      	bx	lr
   d9b66:	4610      	mov	r0, r2
   d9b68:	e7fb      	b.n	d9b62 <__ascii_mbtowc+0x16>
   d9b6a:	f06f 0001 	mvn.w	r0, #1
   d9b6e:	e7f8      	b.n	d9b62 <__ascii_mbtowc+0x16>

000d9b70 <_Balloc>:
   d9b70:	b570      	push	{r4, r5, r6, lr}
   d9b72:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d9b74:	4604      	mov	r4, r0
   d9b76:	460d      	mov	r5, r1
   d9b78:	b93e      	cbnz	r6, d9b8a <_Balloc+0x1a>
   d9b7a:	2010      	movs	r0, #16
   d9b7c:	f7fb ffe2 	bl	d5b44 <malloc>
   d9b80:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d9b84:	6260      	str	r0, [r4, #36]	; 0x24
   d9b86:	6006      	str	r6, [r0, #0]
   d9b88:	60c6      	str	r6, [r0, #12]
   d9b8a:	6a66      	ldr	r6, [r4, #36]	; 0x24
   d9b8c:	68f3      	ldr	r3, [r6, #12]
   d9b8e:	b183      	cbz	r3, d9bb2 <_Balloc+0x42>
   d9b90:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9b92:	68db      	ldr	r3, [r3, #12]
   d9b94:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
   d9b98:	b9b8      	cbnz	r0, d9bca <_Balloc+0x5a>
   d9b9a:	2101      	movs	r1, #1
   d9b9c:	fa01 f605 	lsl.w	r6, r1, r5
   d9ba0:	1d72      	adds	r2, r6, #5
   d9ba2:	0092      	lsls	r2, r2, #2
   d9ba4:	4620      	mov	r0, r4
   d9ba6:	f000 fc22 	bl	da3ee <_calloc_r>
   d9baa:	b160      	cbz	r0, d9bc6 <_Balloc+0x56>
   d9bac:	e9c0 5601 	strd	r5, r6, [r0, #4]
   d9bb0:	e00e      	b.n	d9bd0 <_Balloc+0x60>
   d9bb2:	2221      	movs	r2, #33	; 0x21
   d9bb4:	2104      	movs	r1, #4
   d9bb6:	4620      	mov	r0, r4
   d9bb8:	f000 fc19 	bl	da3ee <_calloc_r>
   d9bbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d9bbe:	60f0      	str	r0, [r6, #12]
   d9bc0:	68db      	ldr	r3, [r3, #12]
   d9bc2:	2b00      	cmp	r3, #0
   d9bc4:	d1e4      	bne.n	d9b90 <_Balloc+0x20>
   d9bc6:	2000      	movs	r0, #0
   d9bc8:	bd70      	pop	{r4, r5, r6, pc}
   d9bca:	6802      	ldr	r2, [r0, #0]
   d9bcc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
   d9bd0:	2300      	movs	r3, #0
   d9bd2:	e9c0 3303 	strd	r3, r3, [r0, #12]
   d9bd6:	e7f7      	b.n	d9bc8 <_Balloc+0x58>

000d9bd8 <_Bfree>:
   d9bd8:	b570      	push	{r4, r5, r6, lr}
   d9bda:	6a46      	ldr	r6, [r0, #36]	; 0x24
   d9bdc:	4605      	mov	r5, r0
   d9bde:	460c      	mov	r4, r1
   d9be0:	b93e      	cbnz	r6, d9bf2 <_Bfree+0x1a>
   d9be2:	2010      	movs	r0, #16
   d9be4:	f7fb ffae 	bl	d5b44 <malloc>
   d9be8:	e9c0 6601 	strd	r6, r6, [r0, #4]
   d9bec:	6268      	str	r0, [r5, #36]	; 0x24
   d9bee:	6006      	str	r6, [r0, #0]
   d9bf0:	60c6      	str	r6, [r0, #12]
   d9bf2:	b13c      	cbz	r4, d9c04 <_Bfree+0x2c>
   d9bf4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   d9bf6:	6862      	ldr	r2, [r4, #4]
   d9bf8:	68db      	ldr	r3, [r3, #12]
   d9bfa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   d9bfe:	6021      	str	r1, [r4, #0]
   d9c00:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   d9c04:	bd70      	pop	{r4, r5, r6, pc}

000d9c06 <__multadd>:
   d9c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d9c0a:	690e      	ldr	r6, [r1, #16]
   d9c0c:	4607      	mov	r7, r0
   d9c0e:	4698      	mov	r8, r3
   d9c10:	460c      	mov	r4, r1
   d9c12:	f101 0014 	add.w	r0, r1, #20
   d9c16:	2300      	movs	r3, #0
   d9c18:	6805      	ldr	r5, [r0, #0]
   d9c1a:	b2a9      	uxth	r1, r5
   d9c1c:	fb02 8101 	mla	r1, r2, r1, r8
   d9c20:	ea4f 4c11 	mov.w	ip, r1, lsr #16
   d9c24:	0c2d      	lsrs	r5, r5, #16
   d9c26:	fb02 c505 	mla	r5, r2, r5, ip
   d9c2a:	b289      	uxth	r1, r1
   d9c2c:	3301      	adds	r3, #1
   d9c2e:	eb01 4105 	add.w	r1, r1, r5, lsl #16
   d9c32:	429e      	cmp	r6, r3
   d9c34:	f840 1b04 	str.w	r1, [r0], #4
   d9c38:	ea4f 4815 	mov.w	r8, r5, lsr #16
   d9c3c:	dcec      	bgt.n	d9c18 <__multadd+0x12>
   d9c3e:	f1b8 0f00 	cmp.w	r8, #0
   d9c42:	d01b      	beq.n	d9c7c <__multadd+0x76>
   d9c44:	68a3      	ldr	r3, [r4, #8]
   d9c46:	42b3      	cmp	r3, r6
   d9c48:	dc12      	bgt.n	d9c70 <__multadd+0x6a>
   d9c4a:	6861      	ldr	r1, [r4, #4]
   d9c4c:	4638      	mov	r0, r7
   d9c4e:	3101      	adds	r1, #1
   d9c50:	f7ff ff8e 	bl	d9b70 <_Balloc>
   d9c54:	6922      	ldr	r2, [r4, #16]
   d9c56:	3202      	adds	r2, #2
   d9c58:	f104 010c 	add.w	r1, r4, #12
   d9c5c:	4605      	mov	r5, r0
   d9c5e:	0092      	lsls	r2, r2, #2
   d9c60:	300c      	adds	r0, #12
   d9c62:	f7fe f913 	bl	d7e8c <memcpy>
   d9c66:	4621      	mov	r1, r4
   d9c68:	4638      	mov	r0, r7
   d9c6a:	f7ff ffb5 	bl	d9bd8 <_Bfree>
   d9c6e:	462c      	mov	r4, r5
   d9c70:	eb04 0386 	add.w	r3, r4, r6, lsl #2
   d9c74:	3601      	adds	r6, #1
   d9c76:	f8c3 8014 	str.w	r8, [r3, #20]
   d9c7a:	6126      	str	r6, [r4, #16]
   d9c7c:	4620      	mov	r0, r4
   d9c7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d9c82 <__s2b>:
   d9c82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9c86:	460c      	mov	r4, r1
   d9c88:	4615      	mov	r5, r2
   d9c8a:	461f      	mov	r7, r3
   d9c8c:	2209      	movs	r2, #9
   d9c8e:	3308      	adds	r3, #8
   d9c90:	4606      	mov	r6, r0
   d9c92:	fb93 f3f2 	sdiv	r3, r3, r2
   d9c96:	2100      	movs	r1, #0
   d9c98:	2201      	movs	r2, #1
   d9c9a:	429a      	cmp	r2, r3
   d9c9c:	db20      	blt.n	d9ce0 <__s2b+0x5e>
   d9c9e:	4630      	mov	r0, r6
   d9ca0:	f7ff ff66 	bl	d9b70 <_Balloc>
   d9ca4:	9b08      	ldr	r3, [sp, #32]
   d9ca6:	6143      	str	r3, [r0, #20]
   d9ca8:	2d09      	cmp	r5, #9
   d9caa:	f04f 0301 	mov.w	r3, #1
   d9cae:	6103      	str	r3, [r0, #16]
   d9cb0:	dd19      	ble.n	d9ce6 <__s2b+0x64>
   d9cb2:	f104 0909 	add.w	r9, r4, #9
   d9cb6:	46c8      	mov	r8, r9
   d9cb8:	442c      	add	r4, r5
   d9cba:	f818 3b01 	ldrb.w	r3, [r8], #1
   d9cbe:	4601      	mov	r1, r0
   d9cc0:	3b30      	subs	r3, #48	; 0x30
   d9cc2:	220a      	movs	r2, #10
   d9cc4:	4630      	mov	r0, r6
   d9cc6:	f7ff ff9e 	bl	d9c06 <__multadd>
   d9cca:	45a0      	cmp	r8, r4
   d9ccc:	d1f5      	bne.n	d9cba <__s2b+0x38>
   d9cce:	f1a5 0408 	sub.w	r4, r5, #8
   d9cd2:	444c      	add	r4, r9
   d9cd4:	1b2d      	subs	r5, r5, r4
   d9cd6:	1963      	adds	r3, r4, r5
   d9cd8:	42bb      	cmp	r3, r7
   d9cda:	db07      	blt.n	d9cec <__s2b+0x6a>
   d9cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9ce0:	0052      	lsls	r2, r2, #1
   d9ce2:	3101      	adds	r1, #1
   d9ce4:	e7d9      	b.n	d9c9a <__s2b+0x18>
   d9ce6:	340a      	adds	r4, #10
   d9ce8:	2509      	movs	r5, #9
   d9cea:	e7f3      	b.n	d9cd4 <__s2b+0x52>
   d9cec:	f814 3b01 	ldrb.w	r3, [r4], #1
   d9cf0:	4601      	mov	r1, r0
   d9cf2:	3b30      	subs	r3, #48	; 0x30
   d9cf4:	220a      	movs	r2, #10
   d9cf6:	4630      	mov	r0, r6
   d9cf8:	f7ff ff85 	bl	d9c06 <__multadd>
   d9cfc:	e7eb      	b.n	d9cd6 <__s2b+0x54>

000d9cfe <__hi0bits>:
   d9cfe:	0c03      	lsrs	r3, r0, #16
   d9d00:	041b      	lsls	r3, r3, #16
   d9d02:	b9d3      	cbnz	r3, d9d3a <__hi0bits+0x3c>
   d9d04:	0400      	lsls	r0, r0, #16
   d9d06:	2310      	movs	r3, #16
   d9d08:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   d9d0c:	bf04      	itt	eq
   d9d0e:	0200      	lsleq	r0, r0, #8
   d9d10:	3308      	addeq	r3, #8
   d9d12:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   d9d16:	bf04      	itt	eq
   d9d18:	0100      	lsleq	r0, r0, #4
   d9d1a:	3304      	addeq	r3, #4
   d9d1c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   d9d20:	bf04      	itt	eq
   d9d22:	0080      	lsleq	r0, r0, #2
   d9d24:	3302      	addeq	r3, #2
   d9d26:	2800      	cmp	r0, #0
   d9d28:	db05      	blt.n	d9d36 <__hi0bits+0x38>
   d9d2a:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
   d9d2e:	f103 0301 	add.w	r3, r3, #1
   d9d32:	bf08      	it	eq
   d9d34:	2320      	moveq	r3, #32
   d9d36:	4618      	mov	r0, r3
   d9d38:	4770      	bx	lr
   d9d3a:	2300      	movs	r3, #0
   d9d3c:	e7e4      	b.n	d9d08 <__hi0bits+0xa>

000d9d3e <__lo0bits>:
   d9d3e:	6803      	ldr	r3, [r0, #0]
   d9d40:	f013 0207 	ands.w	r2, r3, #7
   d9d44:	4601      	mov	r1, r0
   d9d46:	d00b      	beq.n	d9d60 <__lo0bits+0x22>
   d9d48:	07da      	lsls	r2, r3, #31
   d9d4a:	d424      	bmi.n	d9d96 <__lo0bits+0x58>
   d9d4c:	0798      	lsls	r0, r3, #30
   d9d4e:	bf49      	itett	mi
   d9d50:	085b      	lsrmi	r3, r3, #1
   d9d52:	089b      	lsrpl	r3, r3, #2
   d9d54:	2001      	movmi	r0, #1
   d9d56:	600b      	strmi	r3, [r1, #0]
   d9d58:	bf5c      	itt	pl
   d9d5a:	600b      	strpl	r3, [r1, #0]
   d9d5c:	2002      	movpl	r0, #2
   d9d5e:	4770      	bx	lr
   d9d60:	b298      	uxth	r0, r3
   d9d62:	b9b0      	cbnz	r0, d9d92 <__lo0bits+0x54>
   d9d64:	0c1b      	lsrs	r3, r3, #16
   d9d66:	2010      	movs	r0, #16
   d9d68:	f013 0fff 	tst.w	r3, #255	; 0xff
   d9d6c:	bf04      	itt	eq
   d9d6e:	0a1b      	lsreq	r3, r3, #8
   d9d70:	3008      	addeq	r0, #8
   d9d72:	071a      	lsls	r2, r3, #28
   d9d74:	bf04      	itt	eq
   d9d76:	091b      	lsreq	r3, r3, #4
   d9d78:	3004      	addeq	r0, #4
   d9d7a:	079a      	lsls	r2, r3, #30
   d9d7c:	bf04      	itt	eq
   d9d7e:	089b      	lsreq	r3, r3, #2
   d9d80:	3002      	addeq	r0, #2
   d9d82:	07da      	lsls	r2, r3, #31
   d9d84:	d403      	bmi.n	d9d8e <__lo0bits+0x50>
   d9d86:	085b      	lsrs	r3, r3, #1
   d9d88:	f100 0001 	add.w	r0, r0, #1
   d9d8c:	d005      	beq.n	d9d9a <__lo0bits+0x5c>
   d9d8e:	600b      	str	r3, [r1, #0]
   d9d90:	4770      	bx	lr
   d9d92:	4610      	mov	r0, r2
   d9d94:	e7e8      	b.n	d9d68 <__lo0bits+0x2a>
   d9d96:	2000      	movs	r0, #0
   d9d98:	4770      	bx	lr
   d9d9a:	2020      	movs	r0, #32
   d9d9c:	4770      	bx	lr

000d9d9e <__i2b>:
   d9d9e:	b510      	push	{r4, lr}
   d9da0:	460c      	mov	r4, r1
   d9da2:	2101      	movs	r1, #1
   d9da4:	f7ff fee4 	bl	d9b70 <_Balloc>
   d9da8:	2201      	movs	r2, #1
   d9daa:	6144      	str	r4, [r0, #20]
   d9dac:	6102      	str	r2, [r0, #16]
   d9dae:	bd10      	pop	{r4, pc}

000d9db0 <__multiply>:
   d9db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9db4:	4615      	mov	r5, r2
   d9db6:	690a      	ldr	r2, [r1, #16]
   d9db8:	692b      	ldr	r3, [r5, #16]
   d9dba:	429a      	cmp	r2, r3
   d9dbc:	bfb8      	it	lt
   d9dbe:	460b      	movlt	r3, r1
   d9dc0:	460c      	mov	r4, r1
   d9dc2:	bfbc      	itt	lt
   d9dc4:	462c      	movlt	r4, r5
   d9dc6:	461d      	movlt	r5, r3
   d9dc8:	6927      	ldr	r7, [r4, #16]
   d9dca:	f8d5 9010 	ldr.w	r9, [r5, #16]
   d9dce:	68a3      	ldr	r3, [r4, #8]
   d9dd0:	6861      	ldr	r1, [r4, #4]
   d9dd2:	eb07 0609 	add.w	r6, r7, r9
   d9dd6:	42b3      	cmp	r3, r6
   d9dd8:	bfb8      	it	lt
   d9dda:	3101      	addlt	r1, #1
   d9ddc:	b085      	sub	sp, #20
   d9dde:	f7ff fec7 	bl	d9b70 <_Balloc>
   d9de2:	f100 0114 	add.w	r1, r0, #20
   d9de6:	eb01 0886 	add.w	r8, r1, r6, lsl #2
   d9dea:	460b      	mov	r3, r1
   d9dec:	2200      	movs	r2, #0
   d9dee:	4543      	cmp	r3, r8
   d9df0:	d31d      	bcc.n	d9e2e <__multiply+0x7e>
   d9df2:	f104 0314 	add.w	r3, r4, #20
   d9df6:	f105 0214 	add.w	r2, r5, #20
   d9dfa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   d9dfe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
   d9e02:	9302      	str	r3, [sp, #8]
   d9e04:	1b3b      	subs	r3, r7, r4
   d9e06:	3b15      	subs	r3, #21
   d9e08:	f023 0303 	bic.w	r3, r3, #3
   d9e0c:	3304      	adds	r3, #4
   d9e0e:	f104 0515 	add.w	r5, r4, #21
   d9e12:	42af      	cmp	r7, r5
   d9e14:	bf38      	it	cc
   d9e16:	2304      	movcc	r3, #4
   d9e18:	9301      	str	r3, [sp, #4]
   d9e1a:	9b02      	ldr	r3, [sp, #8]
   d9e1c:	9203      	str	r2, [sp, #12]
   d9e1e:	4293      	cmp	r3, r2
   d9e20:	d808      	bhi.n	d9e34 <__multiply+0x84>
   d9e22:	2e00      	cmp	r6, #0
   d9e24:	dc5a      	bgt.n	d9edc <__multiply+0x12c>
   d9e26:	6106      	str	r6, [r0, #16]
   d9e28:	b005      	add	sp, #20
   d9e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9e2e:	f843 2b04 	str.w	r2, [r3], #4
   d9e32:	e7dc      	b.n	d9dee <__multiply+0x3e>
   d9e34:	f8b2 a000 	ldrh.w	sl, [r2]
   d9e38:	f1ba 0f00 	cmp.w	sl, #0
   d9e3c:	d024      	beq.n	d9e88 <__multiply+0xd8>
   d9e3e:	f104 0e14 	add.w	lr, r4, #20
   d9e42:	4689      	mov	r9, r1
   d9e44:	f04f 0c00 	mov.w	ip, #0
   d9e48:	f85e 5b04 	ldr.w	r5, [lr], #4
   d9e4c:	f8d9 b000 	ldr.w	fp, [r9]
   d9e50:	b2ab      	uxth	r3, r5
   d9e52:	fa1f fb8b 	uxth.w	fp, fp
   d9e56:	fb0a b303 	mla	r3, sl, r3, fp
   d9e5a:	ea4f 4b15 	mov.w	fp, r5, lsr #16
   d9e5e:	f8d9 5000 	ldr.w	r5, [r9]
   d9e62:	4463      	add	r3, ip
   d9e64:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d9e68:	fb0a c50b 	mla	r5, sl, fp, ip
   d9e6c:	eb05 4513 	add.w	r5, r5, r3, lsr #16
   d9e70:	b29b      	uxth	r3, r3
   d9e72:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
   d9e76:	4577      	cmp	r7, lr
   d9e78:	f849 3b04 	str.w	r3, [r9], #4
   d9e7c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   d9e80:	d8e2      	bhi.n	d9e48 <__multiply+0x98>
   d9e82:	9b01      	ldr	r3, [sp, #4]
   d9e84:	f841 c003 	str.w	ip, [r1, r3]
   d9e88:	9b03      	ldr	r3, [sp, #12]
   d9e8a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
   d9e8e:	3204      	adds	r2, #4
   d9e90:	f1b9 0f00 	cmp.w	r9, #0
   d9e94:	d020      	beq.n	d9ed8 <__multiply+0x128>
   d9e96:	680b      	ldr	r3, [r1, #0]
   d9e98:	f104 0c14 	add.w	ip, r4, #20
   d9e9c:	468e      	mov	lr, r1
   d9e9e:	f04f 0a00 	mov.w	sl, #0
   d9ea2:	f8bc 5000 	ldrh.w	r5, [ip]
   d9ea6:	f8be b002 	ldrh.w	fp, [lr, #2]
   d9eaa:	fb09 b505 	mla	r5, r9, r5, fp
   d9eae:	44aa      	add	sl, r5
   d9eb0:	b29b      	uxth	r3, r3
   d9eb2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
   d9eb6:	f84e 3b04 	str.w	r3, [lr], #4
   d9eba:	f85c 3b04 	ldr.w	r3, [ip], #4
   d9ebe:	f8be 5000 	ldrh.w	r5, [lr]
   d9ec2:	0c1b      	lsrs	r3, r3, #16
   d9ec4:	fb09 5303 	mla	r3, r9, r3, r5
   d9ec8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
   d9ecc:	4567      	cmp	r7, ip
   d9ece:	ea4f 4a13 	mov.w	sl, r3, lsr #16
   d9ed2:	d8e6      	bhi.n	d9ea2 <__multiply+0xf2>
   d9ed4:	9d01      	ldr	r5, [sp, #4]
   d9ed6:	514b      	str	r3, [r1, r5]
   d9ed8:	3104      	adds	r1, #4
   d9eda:	e79e      	b.n	d9e1a <__multiply+0x6a>
   d9edc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   d9ee0:	2b00      	cmp	r3, #0
   d9ee2:	d1a0      	bne.n	d9e26 <__multiply+0x76>
   d9ee4:	3e01      	subs	r6, #1
   d9ee6:	e79c      	b.n	d9e22 <__multiply+0x72>

000d9ee8 <__pow5mult>:
   d9ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d9eec:	4615      	mov	r5, r2
   d9eee:	f012 0203 	ands.w	r2, r2, #3
   d9ef2:	4606      	mov	r6, r0
   d9ef4:	460f      	mov	r7, r1
   d9ef6:	d007      	beq.n	d9f08 <__pow5mult+0x20>
   d9ef8:	4c21      	ldr	r4, [pc, #132]	; (d9f80 <__pow5mult+0x98>)
   d9efa:	3a01      	subs	r2, #1
   d9efc:	2300      	movs	r3, #0
   d9efe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
   d9f02:	f7ff fe80 	bl	d9c06 <__multadd>
   d9f06:	4607      	mov	r7, r0
   d9f08:	10ad      	asrs	r5, r5, #2
   d9f0a:	d035      	beq.n	d9f78 <__pow5mult+0x90>
   d9f0c:	6a74      	ldr	r4, [r6, #36]	; 0x24
   d9f0e:	b93c      	cbnz	r4, d9f20 <__pow5mult+0x38>
   d9f10:	2010      	movs	r0, #16
   d9f12:	f7fb fe17 	bl	d5b44 <malloc>
   d9f16:	e9c0 4401 	strd	r4, r4, [r0, #4]
   d9f1a:	6270      	str	r0, [r6, #36]	; 0x24
   d9f1c:	6004      	str	r4, [r0, #0]
   d9f1e:	60c4      	str	r4, [r0, #12]
   d9f20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
   d9f24:	f8d8 4008 	ldr.w	r4, [r8, #8]
   d9f28:	b94c      	cbnz	r4, d9f3e <__pow5mult+0x56>
   d9f2a:	f240 2171 	movw	r1, #625	; 0x271
   d9f2e:	4630      	mov	r0, r6
   d9f30:	f7ff ff35 	bl	d9d9e <__i2b>
   d9f34:	2300      	movs	r3, #0
   d9f36:	f8c8 0008 	str.w	r0, [r8, #8]
   d9f3a:	4604      	mov	r4, r0
   d9f3c:	6003      	str	r3, [r0, #0]
   d9f3e:	f04f 0900 	mov.w	r9, #0
   d9f42:	07eb      	lsls	r3, r5, #31
   d9f44:	d50a      	bpl.n	d9f5c <__pow5mult+0x74>
   d9f46:	4639      	mov	r1, r7
   d9f48:	4622      	mov	r2, r4
   d9f4a:	4630      	mov	r0, r6
   d9f4c:	f7ff ff30 	bl	d9db0 <__multiply>
   d9f50:	4639      	mov	r1, r7
   d9f52:	4680      	mov	r8, r0
   d9f54:	4630      	mov	r0, r6
   d9f56:	f7ff fe3f 	bl	d9bd8 <_Bfree>
   d9f5a:	4647      	mov	r7, r8
   d9f5c:	106d      	asrs	r5, r5, #1
   d9f5e:	d00b      	beq.n	d9f78 <__pow5mult+0x90>
   d9f60:	6820      	ldr	r0, [r4, #0]
   d9f62:	b938      	cbnz	r0, d9f74 <__pow5mult+0x8c>
   d9f64:	4622      	mov	r2, r4
   d9f66:	4621      	mov	r1, r4
   d9f68:	4630      	mov	r0, r6
   d9f6a:	f7ff ff21 	bl	d9db0 <__multiply>
   d9f6e:	6020      	str	r0, [r4, #0]
   d9f70:	f8c0 9000 	str.w	r9, [r0]
   d9f74:	4604      	mov	r4, r0
   d9f76:	e7e4      	b.n	d9f42 <__pow5mult+0x5a>
   d9f78:	4638      	mov	r0, r7
   d9f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d9f7e:	bf00      	nop
   d9f80:	000dadd0 	.word	0x000dadd0

000d9f84 <__lshift>:
   d9f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9f88:	460c      	mov	r4, r1
   d9f8a:	6849      	ldr	r1, [r1, #4]
   d9f8c:	6923      	ldr	r3, [r4, #16]
   d9f8e:	eb03 1862 	add.w	r8, r3, r2, asr #5
   d9f92:	68a3      	ldr	r3, [r4, #8]
   d9f94:	4607      	mov	r7, r0
   d9f96:	4691      	mov	r9, r2
   d9f98:	ea4f 1a62 	mov.w	sl, r2, asr #5
   d9f9c:	f108 0601 	add.w	r6, r8, #1
   d9fa0:	42b3      	cmp	r3, r6
   d9fa2:	db3f      	blt.n	da024 <__lshift+0xa0>
   d9fa4:	4638      	mov	r0, r7
   d9fa6:	f7ff fde3 	bl	d9b70 <_Balloc>
   d9faa:	2300      	movs	r3, #0
   d9fac:	4605      	mov	r5, r0
   d9fae:	f100 0114 	add.w	r1, r0, #20
   d9fb2:	f100 0210 	add.w	r2, r0, #16
   d9fb6:	4618      	mov	r0, r3
   d9fb8:	4553      	cmp	r3, sl
   d9fba:	db36      	blt.n	da02a <__lshift+0xa6>
   d9fbc:	6920      	ldr	r0, [r4, #16]
   d9fbe:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
   d9fc2:	f104 0314 	add.w	r3, r4, #20
   d9fc6:	f019 091f 	ands.w	r9, r9, #31
   d9fca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
   d9fce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   d9fd2:	d02e      	beq.n	da032 <__lshift+0xae>
   d9fd4:	f1c9 0e20 	rsb	lr, r9, #32
   d9fd8:	468a      	mov	sl, r1
   d9fda:	2200      	movs	r2, #0
   d9fdc:	6818      	ldr	r0, [r3, #0]
   d9fde:	fa00 f009 	lsl.w	r0, r0, r9
   d9fe2:	4302      	orrs	r2, r0
   d9fe4:	f84a 2b04 	str.w	r2, [sl], #4
   d9fe8:	f853 2b04 	ldr.w	r2, [r3], #4
   d9fec:	459c      	cmp	ip, r3
   d9fee:	fa22 f20e 	lsr.w	r2, r2, lr
   d9ff2:	d8f3      	bhi.n	d9fdc <__lshift+0x58>
   d9ff4:	ebac 0304 	sub.w	r3, ip, r4
   d9ff8:	3b15      	subs	r3, #21
   d9ffa:	f023 0303 	bic.w	r3, r3, #3
   d9ffe:	3304      	adds	r3, #4
   da000:	f104 0015 	add.w	r0, r4, #21
   da004:	4560      	cmp	r0, ip
   da006:	bf88      	it	hi
   da008:	2304      	movhi	r3, #4
   da00a:	50ca      	str	r2, [r1, r3]
   da00c:	b10a      	cbz	r2, da012 <__lshift+0x8e>
   da00e:	f108 0602 	add.w	r6, r8, #2
   da012:	3e01      	subs	r6, #1
   da014:	4638      	mov	r0, r7
   da016:	612e      	str	r6, [r5, #16]
   da018:	4621      	mov	r1, r4
   da01a:	f7ff fddd 	bl	d9bd8 <_Bfree>
   da01e:	4628      	mov	r0, r5
   da020:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da024:	3101      	adds	r1, #1
   da026:	005b      	lsls	r3, r3, #1
   da028:	e7ba      	b.n	d9fa0 <__lshift+0x1c>
   da02a:	f842 0f04 	str.w	r0, [r2, #4]!
   da02e:	3301      	adds	r3, #1
   da030:	e7c2      	b.n	d9fb8 <__lshift+0x34>
   da032:	3904      	subs	r1, #4
   da034:	f853 2b04 	ldr.w	r2, [r3], #4
   da038:	f841 2f04 	str.w	r2, [r1, #4]!
   da03c:	459c      	cmp	ip, r3
   da03e:	d8f9      	bhi.n	da034 <__lshift+0xb0>
   da040:	e7e7      	b.n	da012 <__lshift+0x8e>

000da042 <__mcmp>:
   da042:	b530      	push	{r4, r5, lr}
   da044:	6902      	ldr	r2, [r0, #16]
   da046:	690c      	ldr	r4, [r1, #16]
   da048:	1b12      	subs	r2, r2, r4
   da04a:	d10e      	bne.n	da06a <__mcmp+0x28>
   da04c:	f100 0314 	add.w	r3, r0, #20
   da050:	3114      	adds	r1, #20
   da052:	eb03 0084 	add.w	r0, r3, r4, lsl #2
   da056:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   da05a:	f850 5d04 	ldr.w	r5, [r0, #-4]!
   da05e:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   da062:	42a5      	cmp	r5, r4
   da064:	d003      	beq.n	da06e <__mcmp+0x2c>
   da066:	d305      	bcc.n	da074 <__mcmp+0x32>
   da068:	2201      	movs	r2, #1
   da06a:	4610      	mov	r0, r2
   da06c:	bd30      	pop	{r4, r5, pc}
   da06e:	4283      	cmp	r3, r0
   da070:	d3f3      	bcc.n	da05a <__mcmp+0x18>
   da072:	e7fa      	b.n	da06a <__mcmp+0x28>
   da074:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   da078:	e7f7      	b.n	da06a <__mcmp+0x28>

000da07a <__mdiff>:
   da07a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da07e:	460c      	mov	r4, r1
   da080:	4606      	mov	r6, r0
   da082:	4611      	mov	r1, r2
   da084:	4620      	mov	r0, r4
   da086:	4617      	mov	r7, r2
   da088:	f7ff ffdb 	bl	da042 <__mcmp>
   da08c:	1e05      	subs	r5, r0, #0
   da08e:	d108      	bne.n	da0a2 <__mdiff+0x28>
   da090:	4629      	mov	r1, r5
   da092:	4630      	mov	r0, r6
   da094:	f7ff fd6c 	bl	d9b70 <_Balloc>
   da098:	2301      	movs	r3, #1
   da09a:	e9c0 3504 	strd	r3, r5, [r0, #16]
   da09e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   da0a2:	bfa4      	itt	ge
   da0a4:	463b      	movge	r3, r7
   da0a6:	4627      	movge	r7, r4
   da0a8:	4630      	mov	r0, r6
   da0aa:	6879      	ldr	r1, [r7, #4]
   da0ac:	bfa6      	itte	ge
   da0ae:	461c      	movge	r4, r3
   da0b0:	2500      	movge	r5, #0
   da0b2:	2501      	movlt	r5, #1
   da0b4:	f7ff fd5c 	bl	d9b70 <_Balloc>
   da0b8:	693e      	ldr	r6, [r7, #16]
   da0ba:	60c5      	str	r5, [r0, #12]
   da0bc:	6925      	ldr	r5, [r4, #16]
   da0be:	f107 0114 	add.w	r1, r7, #20
   da0c2:	f104 0914 	add.w	r9, r4, #20
   da0c6:	f100 0e14 	add.w	lr, r0, #20
   da0ca:	f107 0210 	add.w	r2, r7, #16
   da0ce:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
   da0d2:	eb09 0585 	add.w	r5, r9, r5, lsl #2
   da0d6:	46f2      	mov	sl, lr
   da0d8:	2700      	movs	r7, #0
   da0da:	f859 3b04 	ldr.w	r3, [r9], #4
   da0de:	f852 bf04 	ldr.w	fp, [r2, #4]!
   da0e2:	fa1f f883 	uxth.w	r8, r3
   da0e6:	fa17 f78b 	uxtah	r7, r7, fp
   da0ea:	0c1b      	lsrs	r3, r3, #16
   da0ec:	eba7 0808 	sub.w	r8, r7, r8
   da0f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
   da0f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
   da0f8:	fa1f f888 	uxth.w	r8, r8
   da0fc:	141f      	asrs	r7, r3, #16
   da0fe:	454d      	cmp	r5, r9
   da100:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
   da104:	f84a 3b04 	str.w	r3, [sl], #4
   da108:	d8e7      	bhi.n	da0da <__mdiff+0x60>
   da10a:	1b2b      	subs	r3, r5, r4
   da10c:	3b15      	subs	r3, #21
   da10e:	f023 0303 	bic.w	r3, r3, #3
   da112:	3304      	adds	r3, #4
   da114:	3415      	adds	r4, #21
   da116:	42a5      	cmp	r5, r4
   da118:	bf38      	it	cc
   da11a:	2304      	movcc	r3, #4
   da11c:	4419      	add	r1, r3
   da11e:	4473      	add	r3, lr
   da120:	469e      	mov	lr, r3
   da122:	460d      	mov	r5, r1
   da124:	4565      	cmp	r5, ip
   da126:	d30e      	bcc.n	da146 <__mdiff+0xcc>
   da128:	f10c 0203 	add.w	r2, ip, #3
   da12c:	1a52      	subs	r2, r2, r1
   da12e:	f022 0203 	bic.w	r2, r2, #3
   da132:	3903      	subs	r1, #3
   da134:	458c      	cmp	ip, r1
   da136:	bf38      	it	cc
   da138:	2200      	movcc	r2, #0
   da13a:	441a      	add	r2, r3
   da13c:	f852 3d04 	ldr.w	r3, [r2, #-4]!
   da140:	b17b      	cbz	r3, da162 <__mdiff+0xe8>
   da142:	6106      	str	r6, [r0, #16]
   da144:	e7ab      	b.n	da09e <__mdiff+0x24>
   da146:	f855 8b04 	ldr.w	r8, [r5], #4
   da14a:	fa17 f488 	uxtah	r4, r7, r8
   da14e:	1422      	asrs	r2, r4, #16
   da150:	eb02 4218 	add.w	r2, r2, r8, lsr #16
   da154:	b2a4      	uxth	r4, r4
   da156:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
   da15a:	f84e 4b04 	str.w	r4, [lr], #4
   da15e:	1417      	asrs	r7, r2, #16
   da160:	e7e0      	b.n	da124 <__mdiff+0xaa>
   da162:	3e01      	subs	r6, #1
   da164:	e7ea      	b.n	da13c <__mdiff+0xc2>
	...

000da168 <__ulp>:
   da168:	b082      	sub	sp, #8
   da16a:	ed8d 0b00 	vstr	d0, [sp]
   da16e:	9b01      	ldr	r3, [sp, #4]
   da170:	4912      	ldr	r1, [pc, #72]	; (da1bc <__ulp+0x54>)
   da172:	4019      	ands	r1, r3
   da174:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
   da178:	2900      	cmp	r1, #0
   da17a:	dd05      	ble.n	da188 <__ulp+0x20>
   da17c:	2200      	movs	r2, #0
   da17e:	460b      	mov	r3, r1
   da180:	ec43 2b10 	vmov	d0, r2, r3
   da184:	b002      	add	sp, #8
   da186:	4770      	bx	lr
   da188:	4249      	negs	r1, r1
   da18a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
   da18e:	ea4f 5021 	mov.w	r0, r1, asr #20
   da192:	f04f 0200 	mov.w	r2, #0
   da196:	f04f 0300 	mov.w	r3, #0
   da19a:	da04      	bge.n	da1a6 <__ulp+0x3e>
   da19c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
   da1a0:	fa41 f300 	asr.w	r3, r1, r0
   da1a4:	e7ec      	b.n	da180 <__ulp+0x18>
   da1a6:	f1a0 0114 	sub.w	r1, r0, #20
   da1aa:	291e      	cmp	r1, #30
   da1ac:	bfda      	itte	le
   da1ae:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
   da1b2:	fa20 f101 	lsrle.w	r1, r0, r1
   da1b6:	2101      	movgt	r1, #1
   da1b8:	460a      	mov	r2, r1
   da1ba:	e7e1      	b.n	da180 <__ulp+0x18>
   da1bc:	7ff00000 	.word	0x7ff00000

000da1c0 <__b2d>:
   da1c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   da1c2:	6905      	ldr	r5, [r0, #16]
   da1c4:	f100 0714 	add.w	r7, r0, #20
   da1c8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
   da1cc:	1f2e      	subs	r6, r5, #4
   da1ce:	f855 4c04 	ldr.w	r4, [r5, #-4]
   da1d2:	4620      	mov	r0, r4
   da1d4:	f7ff fd93 	bl	d9cfe <__hi0bits>
   da1d8:	f1c0 0320 	rsb	r3, r0, #32
   da1dc:	280a      	cmp	r0, #10
   da1de:	f8df c07c 	ldr.w	ip, [pc, #124]	; da25c <__b2d+0x9c>
   da1e2:	600b      	str	r3, [r1, #0]
   da1e4:	dc14      	bgt.n	da210 <__b2d+0x50>
   da1e6:	f1c0 0e0b 	rsb	lr, r0, #11
   da1ea:	fa24 f10e 	lsr.w	r1, r4, lr
   da1ee:	42b7      	cmp	r7, r6
   da1f0:	ea41 030c 	orr.w	r3, r1, ip
   da1f4:	bf34      	ite	cc
   da1f6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da1fa:	2100      	movcs	r1, #0
   da1fc:	3015      	adds	r0, #21
   da1fe:	fa04 f000 	lsl.w	r0, r4, r0
   da202:	fa21 f10e 	lsr.w	r1, r1, lr
   da206:	ea40 0201 	orr.w	r2, r0, r1
   da20a:	ec43 2b10 	vmov	d0, r2, r3
   da20e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   da210:	42b7      	cmp	r7, r6
   da212:	bf3a      	itte	cc
   da214:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
   da218:	f1a5 0608 	subcc.w	r6, r5, #8
   da21c:	2100      	movcs	r1, #0
   da21e:	380b      	subs	r0, #11
   da220:	d017      	beq.n	da252 <__b2d+0x92>
   da222:	f1c0 0c20 	rsb	ip, r0, #32
   da226:	fa04 f500 	lsl.w	r5, r4, r0
   da22a:	42be      	cmp	r6, r7
   da22c:	fa21 f40c 	lsr.w	r4, r1, ip
   da230:	ea45 0504 	orr.w	r5, r5, r4
   da234:	bf8c      	ite	hi
   da236:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
   da23a:	2400      	movls	r4, #0
   da23c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
   da240:	fa01 f000 	lsl.w	r0, r1, r0
   da244:	fa24 f40c 	lsr.w	r4, r4, ip
   da248:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
   da24c:	ea40 0204 	orr.w	r2, r0, r4
   da250:	e7db      	b.n	da20a <__b2d+0x4a>
   da252:	ea44 030c 	orr.w	r3, r4, ip
   da256:	460a      	mov	r2, r1
   da258:	e7d7      	b.n	da20a <__b2d+0x4a>
   da25a:	bf00      	nop
   da25c:	3ff00000 	.word	0x3ff00000

000da260 <__d2b>:
   da260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   da264:	4689      	mov	r9, r1
   da266:	2101      	movs	r1, #1
   da268:	ec57 6b10 	vmov	r6, r7, d0
   da26c:	4690      	mov	r8, r2
   da26e:	f7ff fc7f 	bl	d9b70 <_Balloc>
   da272:	f3c7 550a 	ubfx	r5, r7, #20, #11
   da276:	4604      	mov	r4, r0
   da278:	f3c7 0313 	ubfx	r3, r7, #0, #20
   da27c:	bb35      	cbnz	r5, da2cc <__d2b+0x6c>
   da27e:	2e00      	cmp	r6, #0
   da280:	9301      	str	r3, [sp, #4]
   da282:	d028      	beq.n	da2d6 <__d2b+0x76>
   da284:	4668      	mov	r0, sp
   da286:	9600      	str	r6, [sp, #0]
   da288:	f7ff fd59 	bl	d9d3e <__lo0bits>
   da28c:	9900      	ldr	r1, [sp, #0]
   da28e:	b300      	cbz	r0, da2d2 <__d2b+0x72>
   da290:	9a01      	ldr	r2, [sp, #4]
   da292:	f1c0 0320 	rsb	r3, r0, #32
   da296:	fa02 f303 	lsl.w	r3, r2, r3
   da29a:	430b      	orrs	r3, r1
   da29c:	40c2      	lsrs	r2, r0
   da29e:	6163      	str	r3, [r4, #20]
   da2a0:	9201      	str	r2, [sp, #4]
   da2a2:	9b01      	ldr	r3, [sp, #4]
   da2a4:	61a3      	str	r3, [r4, #24]
   da2a6:	2b00      	cmp	r3, #0
   da2a8:	bf14      	ite	ne
   da2aa:	2202      	movne	r2, #2
   da2ac:	2201      	moveq	r2, #1
   da2ae:	6122      	str	r2, [r4, #16]
   da2b0:	b1d5      	cbz	r5, da2e8 <__d2b+0x88>
   da2b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   da2b6:	4405      	add	r5, r0
   da2b8:	f8c9 5000 	str.w	r5, [r9]
   da2bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   da2c0:	f8c8 0000 	str.w	r0, [r8]
   da2c4:	4620      	mov	r0, r4
   da2c6:	b003      	add	sp, #12
   da2c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   da2cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   da2d0:	e7d5      	b.n	da27e <__d2b+0x1e>
   da2d2:	6161      	str	r1, [r4, #20]
   da2d4:	e7e5      	b.n	da2a2 <__d2b+0x42>
   da2d6:	a801      	add	r0, sp, #4
   da2d8:	f7ff fd31 	bl	d9d3e <__lo0bits>
   da2dc:	9b01      	ldr	r3, [sp, #4]
   da2de:	6163      	str	r3, [r4, #20]
   da2e0:	2201      	movs	r2, #1
   da2e2:	6122      	str	r2, [r4, #16]
   da2e4:	3020      	adds	r0, #32
   da2e6:	e7e3      	b.n	da2b0 <__d2b+0x50>
   da2e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
   da2ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   da2f0:	f8c9 0000 	str.w	r0, [r9]
   da2f4:	6918      	ldr	r0, [r3, #16]
   da2f6:	f7ff fd02 	bl	d9cfe <__hi0bits>
   da2fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
   da2fe:	e7df      	b.n	da2c0 <__d2b+0x60>

000da300 <__ratio>:
   da300:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   da304:	4688      	mov	r8, r1
   da306:	4669      	mov	r1, sp
   da308:	4681      	mov	r9, r0
   da30a:	f7ff ff59 	bl	da1c0 <__b2d>
   da30e:	a901      	add	r1, sp, #4
   da310:	4640      	mov	r0, r8
   da312:	ec55 4b10 	vmov	r4, r5, d0
   da316:	f7ff ff53 	bl	da1c0 <__b2d>
   da31a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   da31e:	f8d8 2010 	ldr.w	r2, [r8, #16]
   da322:	eba3 0c02 	sub.w	ip, r3, r2
   da326:	e9dd 3200 	ldrd	r3, r2, [sp]
   da32a:	1a9b      	subs	r3, r3, r2
   da32c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
   da330:	ec51 0b10 	vmov	r0, r1, d0
   da334:	2b00      	cmp	r3, #0
   da336:	bfd6      	itet	le
   da338:	460a      	movle	r2, r1
   da33a:	462a      	movgt	r2, r5
   da33c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
   da340:	468b      	mov	fp, r1
   da342:	462f      	mov	r7, r5
   da344:	bfd4      	ite	le
   da346:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
   da34a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
   da34e:	4620      	mov	r0, r4
   da350:	ee10 2a10 	vmov	r2, s0
   da354:	465b      	mov	r3, fp
   da356:	4639      	mov	r1, r7
   da358:	f7fd f92a 	bl	d75b0 <__aeabi_ddiv>
   da35c:	ec41 0b10 	vmov	d0, r0, r1
   da360:	b003      	add	sp, #12
   da362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000da366 <__copybits>:
   da366:	3901      	subs	r1, #1
   da368:	b570      	push	{r4, r5, r6, lr}
   da36a:	1149      	asrs	r1, r1, #5
   da36c:	6914      	ldr	r4, [r2, #16]
   da36e:	3101      	adds	r1, #1
   da370:	f102 0314 	add.w	r3, r2, #20
   da374:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   da378:	eb03 0484 	add.w	r4, r3, r4, lsl #2
   da37c:	1f05      	subs	r5, r0, #4
   da37e:	42a3      	cmp	r3, r4
   da380:	d30c      	bcc.n	da39c <__copybits+0x36>
   da382:	1aa3      	subs	r3, r4, r2
   da384:	3b11      	subs	r3, #17
   da386:	f023 0303 	bic.w	r3, r3, #3
   da38a:	3211      	adds	r2, #17
   da38c:	42a2      	cmp	r2, r4
   da38e:	bf88      	it	hi
   da390:	2300      	movhi	r3, #0
   da392:	4418      	add	r0, r3
   da394:	2300      	movs	r3, #0
   da396:	4288      	cmp	r0, r1
   da398:	d305      	bcc.n	da3a6 <__copybits+0x40>
   da39a:	bd70      	pop	{r4, r5, r6, pc}
   da39c:	f853 6b04 	ldr.w	r6, [r3], #4
   da3a0:	f845 6f04 	str.w	r6, [r5, #4]!
   da3a4:	e7eb      	b.n	da37e <__copybits+0x18>
   da3a6:	f840 3b04 	str.w	r3, [r0], #4
   da3aa:	e7f4      	b.n	da396 <__copybits+0x30>

000da3ac <__any_on>:
   da3ac:	f100 0214 	add.w	r2, r0, #20
   da3b0:	6900      	ldr	r0, [r0, #16]
   da3b2:	114b      	asrs	r3, r1, #5
   da3b4:	4298      	cmp	r0, r3
   da3b6:	b510      	push	{r4, lr}
   da3b8:	db11      	blt.n	da3de <__any_on+0x32>
   da3ba:	dd0a      	ble.n	da3d2 <__any_on+0x26>
   da3bc:	f011 011f 	ands.w	r1, r1, #31
   da3c0:	d007      	beq.n	da3d2 <__any_on+0x26>
   da3c2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
   da3c6:	fa24 f001 	lsr.w	r0, r4, r1
   da3ca:	fa00 f101 	lsl.w	r1, r0, r1
   da3ce:	428c      	cmp	r4, r1
   da3d0:	d10b      	bne.n	da3ea <__any_on+0x3e>
   da3d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   da3d6:	4293      	cmp	r3, r2
   da3d8:	d803      	bhi.n	da3e2 <__any_on+0x36>
   da3da:	2000      	movs	r0, #0
   da3dc:	bd10      	pop	{r4, pc}
   da3de:	4603      	mov	r3, r0
   da3e0:	e7f7      	b.n	da3d2 <__any_on+0x26>
   da3e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   da3e6:	2900      	cmp	r1, #0
   da3e8:	d0f5      	beq.n	da3d6 <__any_on+0x2a>
   da3ea:	2001      	movs	r0, #1
   da3ec:	e7f6      	b.n	da3dc <__any_on+0x30>

000da3ee <_calloc_r>:
   da3ee:	b513      	push	{r0, r1, r4, lr}
   da3f0:	434a      	muls	r2, r1
   da3f2:	4611      	mov	r1, r2
   da3f4:	9201      	str	r2, [sp, #4]
   da3f6:	f7fb fbd5 	bl	d5ba4 <_malloc_r>
   da3fa:	4604      	mov	r4, r0
   da3fc:	b118      	cbz	r0, da406 <_calloc_r+0x18>
   da3fe:	9a01      	ldr	r2, [sp, #4]
   da400:	2100      	movs	r1, #0
   da402:	f7fd fd51 	bl	d7ea8 <memset>
   da406:	4620      	mov	r0, r4
   da408:	b002      	add	sp, #8
   da40a:	bd10      	pop	{r4, pc}
   da40c:	0000      	movs	r0, r0
	...

000da410 <nan>:
   da410:	ed9f 0b01 	vldr	d0, [pc, #4]	; da418 <nan+0x8>
   da414:	4770      	bx	lr
   da416:	bf00      	nop
   da418:	00000000 	.word	0x00000000
   da41c:	7ff80000 	.word	0x7ff80000

000da420 <__ascii_wctomb>:
   da420:	b149      	cbz	r1, da436 <__ascii_wctomb+0x16>
   da422:	2aff      	cmp	r2, #255	; 0xff
   da424:	bf85      	ittet	hi
   da426:	238a      	movhi	r3, #138	; 0x8a
   da428:	6003      	strhi	r3, [r0, #0]
   da42a:	700a      	strbls	r2, [r1, #0]
   da42c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
   da430:	bf98      	it	ls
   da432:	2001      	movls	r0, #1
   da434:	4770      	bx	lr
   da436:	4608      	mov	r0, r1
   da438:	4770      	bx	lr
	...

000da43c <__env_lock>:
   da43c:	4801      	ldr	r0, [pc, #4]	; (da444 <__env_lock+0x8>)
   da43e:	f7ff bb82 	b.w	d9b46 <__retarget_lock_acquire_recursive>
   da442:	bf00      	nop
   da444:	2003e7ee 	.word	0x2003e7ee

000da448 <__env_unlock>:
   da448:	4801      	ldr	r0, [pc, #4]	; (da450 <__env_unlock+0x8>)
   da44a:	f7ff bb7e 	b.w	d9b4a <__retarget_lock_release_recursive>
   da44e:	bf00      	nop
   da450:	2003e7ee 	.word	0x2003e7ee

000da454 <__aeabi_ldivmod>:
   da454:	b97b      	cbnz	r3, da476 <__aeabi_ldivmod+0x22>
   da456:	b972      	cbnz	r2, da476 <__aeabi_ldivmod+0x22>
   da458:	2900      	cmp	r1, #0
   da45a:	bfbe      	ittt	lt
   da45c:	2000      	movlt	r0, #0
   da45e:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   da462:	e006      	blt.n	da472 <__aeabi_ldivmod+0x1e>
   da464:	bf08      	it	eq
   da466:	2800      	cmpeq	r0, #0
   da468:	bf1c      	itt	ne
   da46a:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   da46e:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   da472:	f7fd bbfd 	b.w	d7c70 <__aeabi_idiv0>
   da476:	f1ad 0c08 	sub.w	ip, sp, #8
   da47a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   da47e:	2900      	cmp	r1, #0
   da480:	db09      	blt.n	da496 <__aeabi_ldivmod+0x42>
   da482:	2b00      	cmp	r3, #0
   da484:	db1a      	blt.n	da4bc <__aeabi_ldivmod+0x68>
   da486:	f7fd fa91 	bl	d79ac <__udivmoddi4>
   da48a:	f8dd e004 	ldr.w	lr, [sp, #4]
   da48e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da492:	b004      	add	sp, #16
   da494:	4770      	bx	lr
   da496:	4240      	negs	r0, r0
   da498:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da49c:	2b00      	cmp	r3, #0
   da49e:	db1b      	blt.n	da4d8 <__aeabi_ldivmod+0x84>
   da4a0:	f7fd fa84 	bl	d79ac <__udivmoddi4>
   da4a4:	f8dd e004 	ldr.w	lr, [sp, #4]
   da4a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da4ac:	b004      	add	sp, #16
   da4ae:	4240      	negs	r0, r0
   da4b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da4b4:	4252      	negs	r2, r2
   da4b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da4ba:	4770      	bx	lr
   da4bc:	4252      	negs	r2, r2
   da4be:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da4c2:	f7fd fa73 	bl	d79ac <__udivmoddi4>
   da4c6:	f8dd e004 	ldr.w	lr, [sp, #4]
   da4ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da4ce:	b004      	add	sp, #16
   da4d0:	4240      	negs	r0, r0
   da4d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da4d6:	4770      	bx	lr
   da4d8:	4252      	negs	r2, r2
   da4da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da4de:	f7fd fa65 	bl	d79ac <__udivmoddi4>
   da4e2:	f8dd e004 	ldr.w	lr, [sp, #4]
   da4e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   da4ea:	b004      	add	sp, #16
   da4ec:	4252      	negs	r2, r2
   da4ee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   da4f2:	4770      	bx	lr

000da4f4 <__aeabi_d2lz>:
   da4f4:	b538      	push	{r3, r4, r5, lr}
   da4f6:	2200      	movs	r2, #0
   da4f8:	2300      	movs	r3, #0
   da4fa:	4604      	mov	r4, r0
   da4fc:	460d      	mov	r5, r1
   da4fe:	f7fd f99f 	bl	d7840 <__aeabi_dcmplt>
   da502:	b928      	cbnz	r0, da510 <__aeabi_d2lz+0x1c>
   da504:	4620      	mov	r0, r4
   da506:	4629      	mov	r1, r5
   da508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   da50c:	f7fd ba30 	b.w	d7970 <__aeabi_d2ulz>
   da510:	4620      	mov	r0, r4
   da512:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
   da516:	f7fd fa2b 	bl	d7970 <__aeabi_d2ulz>
   da51a:	4240      	negs	r0, r0
   da51c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   da520:	bd38      	pop	{r3, r4, r5, pc}
   da522:	bf00      	nop

000da524 <dynalib_user>:
   da524:	4021 000d 405d 000d 4085 000d 4089 000d     !@..]@...@...@..
   da534:	0000 0000 6554 706d 4d5f 7861 3a20 2520     ....Temp_Max : %
   da544:	2e33 6631 5400 6d65 5f70 694d 2078 203a     3.1f.Temp_Mix : 
   da554:	3325 312e 0066 7548 696d 6964 7974 4d5f     %3.1f.Humidity_M
   da564:	7861 203a 3325 312e 0066 7548 696d 6964     ax: %3.1f.Humidi
   da574:	7974 4d5f 6e69 3a20 2520 2e33 6631 7b00     ty_Min : %3.1f.{
   da584:	5422 6d65 6570 6172 7574 6572 3a22 3425     "Temperature":%4
   da594:	312e 2c66 2220 7548 696d 6964 7974 3a22     .1f, "Humidity":
   da5a4:	3425 312e 2c66 2020 4c22 7875 3a22 3425     %4.1f,  "Lux":%4
   da5b4:	312e 2c66 2020 5722 6968 6574 3a22 3425     .1f,  "White":%4
   da5c4:	312e 2c66 2020 4122 534c 3a22 3425 312e     .1f,  "ALS":%4.1
   da5d4:	7d66 4700 454c 485f 4f4f 004b 6f4e 4420     f}.GLE_HOOK.No D
   da5e4:	7461 0061 6255 6469 746f 2073 6f48 6b6f     ata.Ubidots Hook
   da5f4:	5200 7365 6f70 736e 2065 6552 6563 7669     .Response Receiv
   da604:	6465 5300 6174 6574 2500 2e34 6631 432a     ed.State.%4.1f*C
   da614:	2500 2e34 6631 2525 4c00 7875 3a20 2520     .%4.1f%%.Lux : %
   da624:	2e34 6631 5700 6968 6574 3a20 2520 2e34     4.1f.White : %4.
   da634:	6631 4100 534c 3a20 2520 2e34 6631 4600     1f.ALS : %4.1f.F
   da644:	6961 656c 2064 6f74 7020 7265 6f66 6d72     ailed to perform
   da654:	7220 6165 6964 676e 3a20 0028 6f4c 0067      reading :(.Log.
   da664:	6146 6c69 6465 7420 206f 6174 656b 7220     Failed to take r
   da674:	6165 6964 676e 0021 4853 3354 2031 6574     eading!.SHT31 te
   da684:	7473 5200 6c65 6165 6573 7400 6d65 6570     st.Release.tempe
   da694:	6172 7574 6572 6800 6d75 6469 7469 0079     rature.humidity.
   da6a4:	754c 0078 6857 7469 0065 6152 2077 4c41     Lux.White.Raw AL
   da6b4:	0053 6574 706d 7265 7461 7275 2d65 7055     S.temperature-Up
   da6c4:	6570 0072 6574 706d 7265 7461 7275 2d65     per.temperature-
   da6d4:	6f6c 6577 0072 7568 696d 6964 7974 752d     lower.humidity-u
   da6e4:	7070 7265 6800 6d75 6469 7469 2d79 6f6c     pper.humidity-lo
   da6f4:	6577 0072 6142 7474 7265 0079 654d 7361     wer.Battery.Meas
   da704:	7275 2d65 6f4e 0077 6556 6272 736f 2d65     ure-Now.Verbose-
   da714:	6f4d 6564 5400 6d65 2d70 7055 6570 2d72     Mode.Temp-Upper-
   da724:	694c 696d 0074 6554 706d 4c2d 776f 7265     Limit.Temp-Lower
   da734:	4c2d 6d69 7469 4800 6d75 6469 7469 2d79     -Limit.Humidity-
   da744:	6f4c 6577 2d72 694c 696d 0074 7548 696d     Lower-Limit.Humi
   da754:	7464 2d79 7075 6570 2d72 694c 696d 0074     dty-upper-Limit.
   da764:	7245 6f72 2072 202d 4853 3354 2031 6e49     Error - SHT31 In
   da774:	7469 6169 696c 617a 6974 6e6f 4300 756f     itialization.Cou
   da784:	646c 276e 2074 6966 646e 5320 5448 3133     ldn't find SHT31
   da794:	4500 7272 726f 2d20 5620 4d45 204c 6e49     .Error - VEML In
   da7a4:	7469 6169 696c 617a 6974 6e6f 4300 756f     itialization.Cou
   da7b4:	646c 276e 2074 6966 646e 5620 4d45 004c     ldn't find VEML.
   da7c4:	4556 4c4d 5320 4355 4543 5353 5546 4c4c     VEML SUCCESSFULL
   da7d4:	5300 6e65 6f73 0072 6147 6e69 4900 746e     .Sensor.Gain.Int
   da7e4:	6765 6172 6974 6e6f 5420 6d69 0065 6146     egration Time.Fa
   da7f4:	6c69 6465 7420 206f 6f63 6e6e 6365 0074     iled to connect.
   da804:	7453 7261 7574 0070 227b 6c61 7265 2d74     Startup.{"alert-
   da814:	6574 706d 7265 7461 7275 2265 253a 2e34     temperature":%4.
   da824:	6631 007d 6363 612d 656c 7472 772d 6265     1f}.cc-alert-web
   da834:	6f68 6b6f 7b00 6122 656c 7472 682d 6d75     hook.{"alert-hum
   da844:	6469 7469 2279 253a 2e34 6631 007d 6553     idity":%4.1f}.Se
   da854:	2074 6556 6272 736f 2065 6f4d 6564 3000     t Verbose Mode.0
   da864:	4300 656c 7261 6465 5620 7265 6f62 6573     .Cleared Verbose
   da874:	4d20 646f 0065 7246 6d6f 2520 2073 6f74      Mode.From %s to
   da884:	2520 0073 7453 7461 2065 7254 6e61 6973      %s.State Transi
   da894:	6974 6e6f 4500 7272 726f 7420 6b61 6e69     tion.Error takin
   da8a4:	2067 654d 7361 7275 6d65 6e65 7374 7300     g Measurements.s
   da8b4:	6170 6b72 642f 7665 6369 2f65 6573 7373     park/device/sess
   da8c4:	6f69 2f6e 6e65 0064 7245 6f72 2072 7453     ion/end.Error St
   da8d4:	7461 2065 202d 6552 6573 0074 7055 6570     ate - Reset.Uppe
   da8e4:	2072 6854 6572 6873 6c6f 2064 6553 0074     r Threshold Set.
   da8f4:	6f4c 6577 2072 6854 6572 6873 6c6f 2064     Lower Threshold 
   da904:	6553 0074 2e31 3130 5300 6174 7472 7075     Set.1.01.Startup
   da914:	5320 6375 6563 7373 7566 006c 0000 0000      Successful.....
	...

000da950 <_ZTVN5spark13CellularClassE>:
	...
   da958:	5c97 000d 5c8d 000d 5c83 000d 5c39 000d     .\...\...\..9\..
   da968:	5c77 000d 5c6b 000d 5c5f 000d 5c57 000d     w\..k\.._\..W\..
   da978:	5c4d 000d 5c43 000d 655d 000d               M\..C\..]e..

000da984 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da98c:	5cd1 000d 5cd7 000d 5d27 000d 5ce5 000d     .\...\..']...\..
   da99c:	5cd3 000d                                   .\..

000da9a0 <_ZTVN5spark13EthernetClassE>:
	...
   da9a8:	62eb 000d 62e1 000d 62d7 000d 62cd 000d     .b...b...b...b..
   da9b8:	62c1 000d 62b5 000d 62a9 000d 62a1 000d     .b...b...b...b..
   da9c8:	6297 000d 628d 000d 655d 000d               .b...b..]e..

000da9d4 <_ZTV7TwoWire>:
	...
   da9dc:	6309 000d 6353 000d 632b 000d 630b 000d     .c..Sc..+c...c..
   da9ec:	6333 000d 633b 000d 6343 000d 634b 000d     3c..;c..Cc..Kc..

000da9fc <_ZTV9IPAddress>:
	...
   daa04:	640f 000d 63ff 000d 6401 000d 7061 0070     .d...c...d..app.

000daa14 <_ZTVN5spark12NetworkClassE>:
	...
   daa1c:	64f5 000d 64ff 000d 6509 000d 6513 000d     .d...d...e...e..
   daa2c:	651d 000d 6529 000d 6535 000d 6541 000d     .e..)e..5e..Ae..
   daa3c:	6549 000d 6553 000d 655d 000d 5925 252d     Ie..Se..]e..%Y-%
   daa4c:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
   daa5c:	7361 7463 6d69 0065                         asctime.

000daa64 <_ZTV11USARTSerial>:
	...
   daa6c:	6a7d 000d 6ae9 000d 6ac1 000d 6645 000d     }j...j...j..Ef..
   daa7c:	6a91 000d 6aad 000d 6a9f 000d 6abb 000d     .j...j...j...j..
   daa8c:	6a7f 000d 6a83 000d                         .j...j..

000daa94 <_ZTV9USBSerial>:
	...
   daa9c:	6b7d 000d 6be5 000d 6bbb 000d 6645 000d     }k...k...k..Ef..
   daaac:	6bad 000d 6b7f 000d 6b8f 000d 6bdf 000d     .k...k...k...k..
   daabc:	6b9f 000d 6b79 000d                         .k..yk..

000daac4 <_ZSt7nothrow>:
   daac4:	0000 0000                                   ....

000daac8 <__month_lengths>:
   daac8:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   daad8:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   daae8:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   daaf8:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   dab08:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   dab18:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   dab28:	666e 6900 696e 7974 6100 006e               nf.inity.an.

000dab34 <fpi.7566>:
   dab34:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
   dab44:	0000 0000                                   ....

000dab48 <fpinan.7602>:
   dab48:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
	...

000dab60 <tinytens>:
   dab60:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
   dab70:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
   dab80:	6f43 64ac 0628 1168 5a54 4700 544d 2500     Co.d(.h.TZ.GMT.%
   dab90:	3031 5e5b 2d30 2c39 2d2b 255d 006e 254d     10[^0-9,+-]%n.M%
   daba0:	7568 6e25 252e 7568 6e25 252e 7568 6e25     hu%n.%hu%n.%hu%n
   dabb0:	2f00 6825 2575 3a6e 6825 2575 3a6e 6825     ./%hu%n:%hu%n:%h
   dabc0:	2575 006e                                   u%n.

000dabc4 <_ctype_>:
   dabc4:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   dabd4:	2020 2020 2020 2020 2020 2020 2020 2020                     
   dabe4:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   dabf4:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   dac04:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   dac14:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   dac24:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   dac34:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   dac44:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...
   dacc4:	2e00 0000                                   ....

000dacc8 <_C_numeric_locale>:
   dacc8:	acc5 000d a67b 000d e288 2003 4f50 4953     ....{...... POSI
   dacd8:	0058 0000 0000 0000                         X.......

000dace0 <__mprec_bigtens>:
   dace0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
   dacf0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
   dad00:	bf3c 7f73 4fdd 7515                         <.s..O.u

000dad08 <__mprec_tens>:
   dad08:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
   dad18:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
   dad28:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
   dad38:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
   dad48:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
   dad58:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
   dad68:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
   dad78:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
   dad88:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
   dad98:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
   dada8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
   dadb8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
   dadc8:	9db4 79d9 7843 44ea                         ...yCx.D

000dadd0 <p05.7490>:
   dadd0:	0005 0000 0019 0000 007d 0000               ........}...

000daddc <link_const_variable_data_end>:
   daddc:	000d4ef9 	.word	0x000d4ef9
   dade0:	000d5c11 	.word	0x000d5c11
   dade4:	000d5ca1 	.word	0x000d5ca1
   dade8:	000d62f5 	.word	0x000d62f5
   dadec:	000d64e5 	.word	0x000d64e5
   dadf0:	000d6631 	.word	0x000d6631
   dadf4:	000d6711 	.word	0x000d6711
   dadf8:	000d691d 	.word	0x000d691d
   dadfc:	000d6a69 	.word	0x000d6a69
