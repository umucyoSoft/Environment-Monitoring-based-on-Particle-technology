
/Users/abdulhannanmustajab/Desktop/IoT/GLE_Chili_Dryer/GLE_Chili/target/2.0.1/boron/GLE_Chili.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005dc0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000804  2003f400  000d9de0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000013c  2003e26c  000da5e4  0001e26c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000448  2003e3a8  2003e3a8  0002e3a8  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000da720  000da720  0002a720  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000da74c  000da74c  0002a74c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001e3d1b  00000000  00000000  0002a750  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001e652  00000000  00000000  0020e46b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00035881  00000000  00000000  0022cabd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003268  00000000  00000000  0026233e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00009040  00000000  00000000  002655a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0004229f  00000000  00000000  0026e5e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0004e6f7  00000000  00000000  002b0885  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00113b4a  00000000  00000000  002fef7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008b80  00000000  00000000  00412ac8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 f8cd 	bl	d91d0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 f8ef 	bl	d9220 <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e26c 	.word	0x2003e26c
   d404c:	000da5e4 	.word	0x000da5e4
   d4050:	2003e3a8 	.word	0x2003e3a8
   d4054:	2003e3a8 	.word	0x2003e3a8
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f004 fb13 	bl	d868c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9dac 	.word	0x000d9dac
   d4080:	000d9dd8 	.word	0x000d9dd8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 be80 	b.w	d4d88 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fd09 	bl	d4aa0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f004 babd 	b.w	d8610 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 bf79 	b.w	d6f8c <malloc>

000d409a <_Znaj>:
   d409a:	f002 bf77 	b.w	d6f8c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 bf7d 	b.w	d6f9c <free>
	...

000d40a4 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a4:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a6:	4a03      	ldr	r2, [pc, #12]	; (d40b4 <__cxa_pure_virtual+0x10>)
   d40a8:	2100      	movs	r1, #0
   d40aa:	200c      	movs	r0, #12
   d40ac:	f002 fe24 	bl	d6cf8 <panic_>
  while (1);
   d40b0:	e7fe      	b.n	d40b0 <__cxa_pure_virtual+0xc>
   d40b2:	bf00      	nop
   d40b4:	000d6a39 	.word	0x000d6a39

000d40b8 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b8:	7800      	ldrb	r0, [r0, #0]
   d40ba:	fab0 f080 	clz	r0, r0
   d40be:	0940      	lsrs	r0, r0, #5
   d40c0:	4770      	bx	lr

000d40c2 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40c2:	2301      	movs	r3, #1
   d40c4:	7003      	strb	r3, [r0, #0]
   d40c6:	4770      	bx	lr

000d40c8 <_Z11watchdogISRv>:
}


void watchdogISR()
{
  watchdogFlag = true;
   d40c8:	4b01      	ldr	r3, [pc, #4]	; (d40d0 <_Z11watchdogISRv+0x8>)
   d40ca:	2201      	movs	r2, #1
   d40cc:	701a      	strb	r2, [r3, #0]
}
   d40ce:	4770      	bx	lr
   d40d0:	2003e5a4 	.word	0x2003e5a4

000d40d4 <nrf_gpio_pin_port_decode>:
 *
 * @return Pointer to port register set.
 *
 */
__STATIC_INLINE NRF_GPIO_Type * nrf_gpio_pin_port_decode(uint32_t * p_pin)
{
   d40d4:	b510      	push	{r4, lr}
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40d6:	6803      	ldr	r3, [r0, #0]
   d40d8:	2b2f      	cmp	r3, #47	; 0x2f
{
   d40da:	4604      	mov	r4, r0
    NRFX_ASSERT(*p_pin < NUMBER_OF_PINS);
   d40dc:	d904      	bls.n	d40e8 <nrf_gpio_pin_port_decode+0x14>
   d40de:	4a07      	ldr	r2, [pc, #28]	; (d40fc <nrf_gpio_pin_port_decode+0x28>)
   d40e0:	2100      	movs	r1, #0
   d40e2:	200a      	movs	r0, #10
   d40e4:	f002 fe08 	bl	d6cf8 <panic_>
#if (GPIO_COUNT == 1)
    return NRF_P0;
#else
    if (*p_pin < P0_PIN_NUM)
   d40e8:	6823      	ldr	r3, [r4, #0]
   d40ea:	2b1f      	cmp	r3, #31
    {
        return NRF_P0;
    }
    else
    {
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40ec:	bf83      	ittte	hi
   d40ee:	f003 031f 	andhi.w	r3, r3, #31
        return NRF_P1;
   d40f2:	4803      	ldrhi	r0, [pc, #12]	; (d4100 <nrf_gpio_pin_port_decode+0x2c>)
        *p_pin = *p_pin & (P0_PIN_NUM - 1);
   d40f4:	6023      	strhi	r3, [r4, #0]
        return NRF_P0;
   d40f6:	f04f 40a0 	movls.w	r0, #1342177280	; 0x50000000
    }
#endif
}
   d40fa:	bd10      	pop	{r4, pc}
   d40fc:	000d6a39 	.word	0x000d6a39
   d4100:	50000300 	.word	0x50000300

000d4104 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d4104:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d4106:	4904      	ldr	r1, [pc, #16]	; (d4118 <_Z10measureNow6String+0x14>)
   d4108:	f003 fedd 	bl	d7ec6 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d410c:	b118      	cbz	r0, d4116 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d410e:	4b03      	ldr	r3, [pc, #12]	; (d411c <_Z10measureNow6String+0x18>)
   d4110:	2203      	movs	r2, #3
   d4112:	701a      	strb	r2, [r3, #0]
    return 1;
   d4114:	2001      	movs	r0, #1
  }
  else return 0;
}
   d4116:	bd08      	pop	{r3, pc}
   d4118:	000d949a 	.word	0x000d949a
   d411c:	2003e524 	.word	0x2003e524

000d4120 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4120:	b538      	push	{r3, r4, r5, lr}
   d4122:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d4124:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d4126:	b128      	cbz	r0, d4134 <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4128:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d412a:	210c      	movs	r1, #12
   d412c:	f004 fbdf 	bl	d88ee <_ZdlPvj>
            wakeupSource = next;
   d4130:	4628      	mov	r0, r5
        while (wakeupSource) {
   d4132:	e7f8      	b.n	d4126 <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d4134:	4620      	mov	r0, r4
   d4136:	bd38      	pop	{r3, r4, r5, pc}

000d4138 <_ZN17PublishQueueAsyncD1Ev>:
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};

	/**
	 * @brief You normally allocate this as a global object and never delete it
	 */
	virtual ~PublishQueueAsync() {};
   d4138:	b510      	push	{r4, lr}
   d413a:	4b03      	ldr	r3, [pc, #12]	; (d4148 <_ZN17PublishQueueAsyncD1Ev+0x10>)
   d413c:	6003      	str	r3, [r0, #0]
   d413e:	4604      	mov	r4, r0
   d4140:	f002 f9dc 	bl	d64fc <_ZN25PublishQueueAsyncRetainedD1Ev>
   d4144:	4620      	mov	r0, r4
   d4146:	bd10      	pop	{r4, pc}
   d4148:	000d9780 	.word	0x000d9780

000d414c <_ZN17PublishQueueAsyncD0Ev>:
   d414c:	b510      	push	{r4, lr}
   d414e:	4604      	mov	r4, r0
   d4150:	f7ff fff2 	bl	d4138 <_ZN17PublishQueueAsyncD1Ev>
   d4154:	4620      	mov	r0, r4
   d4156:	2138      	movs	r1, #56	; 0x38
   d4158:	f004 fbc9 	bl	d88ee <_ZdlPvj>
   d415c:	4620      	mov	r0, r4
   d415e:	bd10      	pop	{r4, pc}

000d4160 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d4160:	b510      	push	{r4, lr}
   d4162:	4b03      	ldr	r3, [pc, #12]	; (d4170 <_ZN8MB85RC64D1Ev+0x10>)
   d4164:	6003      	str	r3, [r0, #0]
   d4166:	4604      	mov	r4, r0
   d4168:	f001 fbd6 	bl	d5918 <_ZN6MB85RCD1Ev>
   d416c:	4620      	mov	r0, r4
   d416e:	bd10      	pop	{r4, pc}
   d4170:	000d97a8 	.word	0x000d97a8

000d4174 <_ZN8MB85RC64D0Ev>:
   d4174:	b510      	push	{r4, lr}
   d4176:	4604      	mov	r4, r0
   d4178:	f7ff fff2 	bl	d4160 <_ZN8MB85RC64D1Ev>
   d417c:	4620      	mov	r0, r4
   d417e:	2110      	movs	r1, #16
   d4180:	f004 fbb5 	bl	d88ee <_ZdlPvj>
   d4184:	4620      	mov	r0, r4
   d4186:	bd10      	pop	{r4, pc}

000d4188 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d4188:	b510      	push	{r4, lr}
   d418a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d418c:	6800      	ldr	r0, [r0, #0]
   d418e:	b118      	cbz	r0, d4198 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d4190:	f002 ff04 	bl	d6f9c <free>
            wakeupSource_ = nullptr;
   d4194:	2300      	movs	r3, #0
   d4196:	6023      	str	r3, [r4, #0]
        }
    }
   d4198:	bd10      	pop	{r4, pc}

000d419a <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d419a:	b510      	push	{r4, lr}
   d419c:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d419e:	f7ff fff3 	bl	d4188 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d41a2:	4620      	mov	r0, r4
   d41a4:	bd10      	pop	{r4, pc}

000d41a6 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d41a6:	2300      	movs	r3, #0
   d41a8:	2204      	movs	r2, #4
   d41aa:	f002 be2f 	b.w	d6e0c <spark_variable>
	...

000d41b0 <_ZN8particle24SystemSleepConfiguration8durationEm>:
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d41b0:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d41b2:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d41b4:	4605      	mov	r5, r0
   d41b6:	460e      	mov	r6, r1
        if (valid_) {
   d41b8:	b1cb      	cbz	r3, d41ee <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d41ba:	6803      	ldr	r3, [r0, #0]
   d41bc:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d41be:	b123      	cbz	r3, d41ca <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d41c0:	889a      	ldrh	r2, [r3, #4]
   d41c2:	2a04      	cmp	r2, #4
   d41c4:	d017      	beq.n	d41f6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d41c6:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d41c8:	e7f9      	b.n	d41be <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d41ca:	490c      	ldr	r1, [pc, #48]	; (d41fc <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d41cc:	2010      	movs	r0, #16
   d41ce:	f004 fb90 	bl	d88f2 <_ZnwjRKSt9nothrow_t>
   d41d2:	4604      	mov	r4, r0
   d41d4:	b168      	cbz	r0, d41f2 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d41d6:	2210      	movs	r2, #16
   d41d8:	2100      	movs	r1, #0
   d41da:	f005 f821 	bl	d9220 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d41de:	4b08      	ldr	r3, [pc, #32]	; (d4200 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d41e0:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d41e2:	2304      	movs	r3, #4
   d41e4:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41e6:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41e8:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d41ea:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d41ee:	4628      	mov	r0, r5
   d41f0:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d41f2:	7528      	strb	r0, [r5, #20]
                return *this;
   d41f4:	e7fb      	b.n	d41ee <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d41f6:	60de      	str	r6, [r3, #12]
                return *this;
   d41f8:	e7f9      	b.n	d41ee <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d41fa:	bf00      	nop
   d41fc:	000d9c50 	.word	0x000d9c50
   d4200:	00030010 	.word	0x00030010

000d4204 <_ZN10CloudClass9keepAliveEj>:
    		spark_process();
    }
    static String deviceID(void) { return SystemClass::deviceID(); }

#if HAL_PLATFORM_CLOUD_UDP
    inline static void keepAlive(unsigned sec)
   d4204:	b507      	push	{r0, r1, r2, lr}
    {
        particle::protocol::connection_properties_t conn_prop = {0};
        conn_prop.size = sizeof(conn_prop);
   d4206:	2208      	movs	r2, #8
        particle::protocol::connection_properties_t conn_prop = {0};
   d4208:	2300      	movs	r3, #0
        conn_prop.size = sizeof(conn_prop);
   d420a:	f8ad 2000 	strh.w	r2, [sp]
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d420e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
        conn_prop.keepalive_source = particle::protocol::KeepAliveSource::USER;
   d4212:	2201      	movs	r2, #1
   d4214:	9201      	str	r2, [sp, #4]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4216:	4341      	muls	r1, r0
   d4218:	466a      	mov	r2, sp
   d421a:	4618      	mov	r0, r3
        particle::protocol::connection_properties_t conn_prop = {0};
   d421c:	f8ad 3002 	strh.w	r3, [sp, #2]
        spark_set_connection_property(SPARK_CLOUD_PING_INTERVAL, sec * 1000, &conn_prop, nullptr);
   d4220:	f002 fe4c 	bl	d6ebc <spark_set_connection_property>
    }
   d4224:	b003      	add	sp, #12
   d4226:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d422c <digitalWriteFast>:
#endif

#endif //USE_BIT_BAND

inline void digitalWriteFast(pin_t pin, uint8_t value)
{
   d422c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d422e:	4d32      	ldr	r5, [pc, #200]	; (d42f8 <digitalWriteFast+0xcc>)
   d4230:	4c32      	ldr	r4, [pc, #200]	; (d42fc <digitalWriteFast+0xd0>)
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d4232:	782b      	ldrb	r3, [r5, #0]
   d4234:	f3bf 8f5b 	dmb	ish
   d4238:	0106      	lsls	r6, r0, #4
    if (value)
   d423a:	b371      	cbz	r1, d429a <digitalWriteFast+0x6e>
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d423c:	07d8      	lsls	r0, r3, #31
   d423e:	d409      	bmi.n	d4254 <digitalWriteFast+0x28>
   d4240:	4628      	mov	r0, r5
   d4242:	f7ff ff39 	bl	d40b8 <__cxa_guard_acquire>
   d4246:	b128      	cbz	r0, d4254 <digitalWriteFast+0x28>
   d4248:	f002 fc26 	bl	d6a98 <HAL_Pin_Map>
   d424c:	6020      	str	r0, [r4, #0]
   d424e:	4628      	mov	r0, r5
   d4250:	f7ff ff37 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4254:	6823      	ldr	r3, [r4, #0]
   d4256:	5d9b      	ldrb	r3, [r3, r6]
   d4258:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d425a:	782b      	ldrb	r3, [r5, #0]
   d425c:	f3bf 8f5b 	dmb	ish
   d4260:	07d9      	lsls	r1, r3, #31
   d4262:	d409      	bmi.n	d4278 <digitalWriteFast+0x4c>
   d4264:	4824      	ldr	r0, [pc, #144]	; (d42f8 <digitalWriteFast+0xcc>)
   d4266:	f7ff ff27 	bl	d40b8 <__cxa_guard_acquire>
   d426a:	b128      	cbz	r0, d4278 <digitalWriteFast+0x4c>
   d426c:	f002 fc14 	bl	d6a98 <HAL_Pin_Map>
   d4270:	6020      	str	r0, [r4, #0]
   d4272:	4821      	ldr	r0, [pc, #132]	; (d42f8 <digitalWriteFast+0xcc>)
   d4274:	f7ff ff25 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d4278:	6820      	ldr	r0, [r4, #0]
   d427a:	4406      	add	r6, r0
}


__STATIC_INLINE void nrf_gpio_pin_set(uint32_t pin_number)
{
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d427c:	a801      	add	r0, sp, #4
   d427e:	7873      	ldrb	r3, [r6, #1]
   d4280:	f003 031f 	and.w	r3, r3, #31
   d4284:	433b      	orrs	r3, r7
   d4286:	9301      	str	r3, [sp, #4]
   d4288:	f7ff ff24 	bl	d40d4 <nrf_gpio_pin_port_decode>

    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   d428c:	9a01      	ldr	r2, [sp, #4]
   d428e:	2301      	movs	r3, #1
   d4290:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   d4292:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
        pinSetFast(pin);
    else
        pinResetFast(pin);
}
   d4296:	b003      	add	sp, #12
   d4298:	bdf0      	pop	{r4, r5, r6, r7, pc}
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d429a:	07da      	lsls	r2, r3, #31
   d429c:	d409      	bmi.n	d42b2 <digitalWriteFast+0x86>
   d429e:	4628      	mov	r0, r5
   d42a0:	f7ff ff0a 	bl	d40b8 <__cxa_guard_acquire>
   d42a4:	b128      	cbz	r0, d42b2 <digitalWriteFast+0x86>
   d42a6:	f002 fbf7 	bl	d6a98 <HAL_Pin_Map>
   d42aa:	6020      	str	r0, [r4, #0]
   d42ac:	4628      	mov	r0, r5
   d42ae:	f7ff ff08 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42b2:	6823      	ldr	r3, [r4, #0]
   d42b4:	5d9b      	ldrb	r3, [r3, r6]
   d42b6:	015f      	lsls	r7, r3, #5
    static const Hal_Pin_Info* pinMap = HAL_Pin_Map();
   d42b8:	782b      	ldrb	r3, [r5, #0]
   d42ba:	f3bf 8f5b 	dmb	ish
   d42be:	07db      	lsls	r3, r3, #31
   d42c0:	d409      	bmi.n	d42d6 <digitalWriteFast+0xaa>
   d42c2:	480d      	ldr	r0, [pc, #52]	; (d42f8 <digitalWriteFast+0xcc>)
   d42c4:	f7ff fef8 	bl	d40b8 <__cxa_guard_acquire>
   d42c8:	b128      	cbz	r0, d42d6 <digitalWriteFast+0xaa>
   d42ca:	f002 fbe5 	bl	d6a98 <HAL_Pin_Map>
   d42ce:	6020      	str	r0, [r4, #0]
   d42d0:	4809      	ldr	r0, [pc, #36]	; (d42f8 <digitalWriteFast+0xcc>)
   d42d2:	f7ff fef6 	bl	d40c2 <__cxa_guard_release>
    uint32_t nrf_pin = NRF_GPIO_PIN_MAP(fastPinGetPinmap()[_pin].gpio_port, fastPinGetPinmap()[_pin].gpio_pin);
   d42d6:	6820      	ldr	r0, [r4, #0]
   d42d8:	4406      	add	r6, r0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   d42da:	a801      	add	r0, sp, #4
   d42dc:	7873      	ldrb	r3, [r6, #1]
   d42de:	f003 031f 	and.w	r3, r3, #31
   d42e2:	433b      	orrs	r3, r7
   d42e4:	9301      	str	r3, [sp, #4]
   d42e6:	f7ff fef5 	bl	d40d4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   d42ea:	9a01      	ldr	r2, [sp, #4]
   d42ec:	2301      	movs	r3, #1
   d42ee:	4093      	lsls	r3, r2
}


__STATIC_INLINE void nrf_gpio_port_out_clear(NRF_GPIO_Type * p_reg, uint32_t clr_mask)
{
    p_reg->OUTCLR = clr_mask;
   d42f0:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   d42f4:	e7cf      	b.n	d4296 <digitalWriteFast+0x6a>
   d42f6:	bf00      	nop
   d42f8:	2003e3ac 	.word	0x2003e3ac
   d42fc:	2003e3b0 	.word	0x2003e3b0

000d4300 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>:
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4300:	b537      	push	{r0, r1, r2, r4, r5, lr}
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4302:	6804      	ldr	r4, [r0, #0]
	inline  bool publish(const char *eventName, const char *data, PublishFlags flags1, PublishFlags flags2 = PublishFlags()) {
   d4304:	f89d 5018 	ldrb.w	r5, [sp, #24]
		return publishCommon(eventName, data, 60, flags1, flags2);
   d4308:	f88d 3000 	strb.w	r3, [sp]
   d430c:	f88d 5004 	strb.w	r5, [sp, #4]
   d4310:	68e4      	ldr	r4, [r4, #12]
   d4312:	233c      	movs	r3, #60	; 0x3c
   d4314:	47a0      	blx	r4
	}
   d4316:	b003      	add	sp, #12
   d4318:	bd30      	pop	{r4, r5, pc}
	...

000d431c <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d431c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d431e:	4d17      	ldr	r5, [pc, #92]	; (d437c <_Z14UbidotsHandlerPKcS0_+0x60>)
  if (!data) {                                                                    // First check to see if there is any data
   d4320:	460c      	mov	r4, r1
   d4322:	b959      	cbnz	r1, d433c <_Z14UbidotsHandlerPKcS0_+0x20>
    if (sysStatus.verboseMode) {
   d4324:	7a6b      	ldrb	r3, [r5, #9]
   d4326:	b1f3      	cbz	r3, d4366 <_Z14UbidotsHandlerPKcS0_+0x4a>
      publishQueue.publish("Ubidots Hook", "No Data", PRIVATE);
   d4328:	4b15      	ldr	r3, [pc, #84]	; (d4380 <_Z14UbidotsHandlerPKcS0_+0x64>)
   d432a:	f88d 1000 	strb.w	r1, [sp]
   d432e:	781b      	ldrb	r3, [r3, #0]
   d4330:	4a14      	ldr	r2, [pc, #80]	; (d4384 <_Z14UbidotsHandlerPKcS0_+0x68>)
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d4332:	4915      	ldr	r1, [pc, #84]	; (d4388 <_Z14UbidotsHandlerPKcS0_+0x6c>)
   d4334:	4815      	ldr	r0, [pc, #84]	; (d438c <_Z14UbidotsHandlerPKcS0_+0x70>)
   d4336:	f7ff ffe3 	bl	d4300 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
   d433a:	e014      	b.n	d4366 <_Z14UbidotsHandlerPKcS0_+0x4a>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d433c:	4608      	mov	r0, r1
   d433e:	f004 ff23 	bl	d9188 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d4342:	38c8      	subs	r0, #200	; 0xc8
   d4344:	2801      	cmp	r0, #1
    if (sysStatus.verboseMode) {
   d4346:	7a6b      	ldrb	r3, [r5, #9]
  if ((responseCode == 200) || (responseCode == 201))
   d4348:	d80f      	bhi.n	d436a <_Z14UbidotsHandlerPKcS0_+0x4e>
    if (sysStatus.verboseMode) {
   d434a:	b14b      	cbz	r3, d4360 <_Z14UbidotsHandlerPKcS0_+0x44>
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
   d434c:	2300      	movs	r3, #0
      publishQueue.publish("State", "Response Received", PRIVATE);
   d434e:	f88d 3000 	strb.w	r3, [sp]
   d4352:	4b0b      	ldr	r3, [pc, #44]	; (d4380 <_Z14UbidotsHandlerPKcS0_+0x64>)
   d4354:	4a0e      	ldr	r2, [pc, #56]	; (d4390 <_Z14UbidotsHandlerPKcS0_+0x74>)
   d4356:	781b      	ldrb	r3, [r3, #0]
   d4358:	490e      	ldr	r1, [pc, #56]	; (d4394 <_Z14UbidotsHandlerPKcS0_+0x78>)
   d435a:	480c      	ldr	r0, [pc, #48]	; (d438c <_Z14UbidotsHandlerPKcS0_+0x70>)
   d435c:	f7ff ffd0 	bl	d4300 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    dataInFlight = false;    
   d4360:	4b0d      	ldr	r3, [pc, #52]	; (d4398 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d4362:	2200      	movs	r2, #0
   d4364:	701a      	strb	r2, [r3, #0]
}
   d4366:	b003      	add	sp, #12
   d4368:	bd30      	pop	{r4, r5, pc}
  else if (sysStatus.verboseMode) {
   d436a:	2b00      	cmp	r3, #0
   d436c:	d0fb      	beq.n	d4366 <_Z14UbidotsHandlerPKcS0_+0x4a>
   d436e:	2300      	movs	r3, #0
    publishQueue.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d4370:	f88d 3000 	strb.w	r3, [sp]
   d4374:	4b02      	ldr	r3, [pc, #8]	; (d4380 <_Z14UbidotsHandlerPKcS0_+0x64>)
   d4376:	4622      	mov	r2, r4
   d4378:	781b      	ldrb	r3, [r3, #0]
   d437a:	e7da      	b.n	d4332 <_Z14UbidotsHandlerPKcS0_+0x16>
   d437c:	2003e528 	.word	0x2003e528
   d4380:	2003e411 	.word	0x2003e411
   d4384:	000d949c 	.word	0x000d949c
   d4388:	000d94a4 	.word	0x000d94a4
   d438c:	2003e494 	.word	0x2003e494
   d4390:	000d94b1 	.word	0x000d94b1
   d4394:	000d94c3 	.word	0x000d94c3
   d4398:	2003e44c 	.word	0x2003e44c

000d439c <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
   d439c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d439e:	4916      	ldr	r1, [pc, #88]	; (d43f8 <_Z14setVerboseMode6String+0x5c>)
   d43a0:	4605      	mov	r5, r0
   d43a2:	f003 fd90 	bl	d7ec6 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d43a6:	4604      	mov	r4, r0
   d43a8:	b188      	cbz	r0, d43ce <_Z14setVerboseMode6String+0x32>
  {
    sysStatus.verboseMode = true;
   d43aa:	4b14      	ldr	r3, [pc, #80]	; (d43fc <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d43ac:	4a14      	ldr	r2, [pc, #80]	; (d4400 <_Z14setVerboseMode6String+0x64>)
   d43ae:	4915      	ldr	r1, [pc, #84]	; (d4404 <_Z14setVerboseMode6String+0x68>)
   d43b0:	4815      	ldr	r0, [pc, #84]	; (d4408 <_Z14setVerboseMode6String+0x6c>)
    sysStatus.verboseMode = true;
   d43b2:	2401      	movs	r4, #1
   d43b4:	725c      	strb	r4, [r3, #9]
   d43b6:	2300      	movs	r3, #0
    publishQueue.publish("Mode","Set Verbose Mode",PRIVATE);
   d43b8:	f88d 3000 	strb.w	r3, [sp]
   d43bc:	4b13      	ldr	r3, [pc, #76]	; (d440c <_Z14setVerboseMode6String+0x70>)
   d43be:	781b      	ldrb	r3, [r3, #0]
   d43c0:	f7ff ff9e 	bl	d4300 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d43c4:	4b12      	ldr	r3, [pc, #72]	; (d4410 <_Z14setVerboseMode6String+0x74>)
    return 1;
   d43c6:	4620      	mov	r0, r4
    sysStatusWriteNeeded = true;
   d43c8:	701c      	strb	r4, [r3, #0]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   d43ca:	b003      	add	sp, #12
   d43cc:	bd30      	pop	{r4, r5, pc}
   d43ce:	4911      	ldr	r1, [pc, #68]	; (d4414 <_Z14setVerboseMode6String+0x78>)
   d43d0:	4628      	mov	r0, r5
   d43d2:	f003 fd78 	bl	d7ec6 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d43d6:	2800      	cmp	r0, #0
   d43d8:	d0f7      	beq.n	d43ca <_Z14setVerboseMode6String+0x2e>
    sysStatus.verboseMode = false;
   d43da:	4b08      	ldr	r3, [pc, #32]	; (d43fc <_Z14setVerboseMode6String+0x60>)
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d43dc:	4a0e      	ldr	r2, [pc, #56]	; (d4418 <_Z14setVerboseMode6String+0x7c>)
    sysStatus.verboseMode = false;
   d43de:	725c      	strb	r4, [r3, #9]
    publishQueue.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d43e0:	4b0a      	ldr	r3, [pc, #40]	; (d440c <_Z14setVerboseMode6String+0x70>)
   d43e2:	f88d 4000 	strb.w	r4, [sp]
   d43e6:	781b      	ldrb	r3, [r3, #0]
   d43e8:	4906      	ldr	r1, [pc, #24]	; (d4404 <_Z14setVerboseMode6String+0x68>)
   d43ea:	4807      	ldr	r0, [pc, #28]	; (d4408 <_Z14setVerboseMode6String+0x6c>)
   d43ec:	f7ff ff88 	bl	d4300 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d43f0:	4b07      	ldr	r3, [pc, #28]	; (d4410 <_Z14setVerboseMode6String+0x74>)
   d43f2:	2001      	movs	r0, #1
   d43f4:	7018      	strb	r0, [r3, #0]
    return 1;
   d43f6:	e7e8      	b.n	d43ca <_Z14setVerboseMode6String+0x2e>
   d43f8:	000d949a 	.word	0x000d949a
   d43fc:	2003e528 	.word	0x2003e528
   d4400:	000d94c9 	.word	0x000d94c9
   d4404:	000d94ea 	.word	0x000d94ea
   d4408:	2003e494 	.word	0x2003e494
   d440c:	2003e411 	.word	0x2003e411
   d4410:	2003e544 	.word	0x2003e544
   d4414:	000d9498 	.word	0x000d9498
   d4418:	000d94da 	.word	0x000d94da

000d441c <_Z16setThirdPartySim6String>:
}



int setThirdPartySim(String command) // Function to force sending data in current hour
{
   d441c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d441e:	4918      	ldr	r1, [pc, #96]	; (d4480 <_Z16setThirdPartySim6String+0x64>)
   d4420:	4605      	mov	r5, r0
   d4422:	f003 fd50 	bl	d7ec6 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d4426:	4604      	mov	r4, r0
   d4428:	b1b8      	cbz	r0, d445a <_Z16setThirdPartySim6String+0x3e>
  {
    sysStatus.thirdPartySim = true;
   d442a:	4b16      	ldr	r3, [pc, #88]	; (d4484 <_Z16setThirdPartySim6String+0x68>)
   d442c:	2201      	movs	r2, #1
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d442e:	6858      	ldr	r0, [r3, #4]
    sysStatus.thirdPartySim = true;
   d4430:	705a      	strb	r2, [r3, #1]
    Particle.keepAlive(sysStatus.keepAlive);                                                // Set the keep alive value
   d4432:	f7ff fee7 	bl	d4204 <_ZN10CloudClass9keepAliveEj>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4436:	f002 fd09 	bl	d6e4c <spark_cloud_flag_connected>
    // keepAliveTimer.changePeriod(sysStatus.keepAlive*1000);                                  // Will start the repeating timer
    if (Particle.connected()) publishQueue.publish("Mode","Set to 3rd Party Sim", PRIVATE);
   d443a:	b148      	cbz	r0, d4450 <_Z16setThirdPartySim6String+0x34>
   d443c:	2300      	movs	r3, #0
   d443e:	f88d 3000 	strb.w	r3, [sp]
   d4442:	4b11      	ldr	r3, [pc, #68]	; (d4488 <_Z16setThirdPartySim6String+0x6c>)
   d4444:	4a11      	ldr	r2, [pc, #68]	; (d448c <_Z16setThirdPartySim6String+0x70>)
   d4446:	781b      	ldrb	r3, [r3, #0]
   d4448:	4911      	ldr	r1, [pc, #68]	; (d4490 <_Z16setThirdPartySim6String+0x74>)
   d444a:	4812      	ldr	r0, [pc, #72]	; (d4494 <_Z16setThirdPartySim6String+0x78>)
   d444c:	f7ff ff58 	bl	d4300 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
    sysStatusWriteNeeded = true;
   d4450:	4b11      	ldr	r3, [pc, #68]	; (d4498 <_Z16setThirdPartySim6String+0x7c>)
   d4452:	2001      	movs	r0, #1
   d4454:	7018      	strb	r0, [r3, #0]
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
    sysStatusWriteNeeded = true;
    return 1;
  }
  else return 0;
}
   d4456:	b003      	add	sp, #12
   d4458:	bd30      	pop	{r4, r5, pc}
   d445a:	4910      	ldr	r1, [pc, #64]	; (d449c <_Z16setThirdPartySim6String+0x80>)
   d445c:	4628      	mov	r0, r5
   d445e:	f003 fd32 	bl	d7ec6 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d4462:	2800      	cmp	r0, #0
   d4464:	d0f7      	beq.n	d4456 <_Z16setThirdPartySim6String+0x3a>
    sysStatus.thirdPartySim = false;
   d4466:	4b07      	ldr	r3, [pc, #28]	; (d4484 <_Z16setThirdPartySim6String+0x68>)
   d4468:	705c      	strb	r4, [r3, #1]
   d446a:	f002 fcef 	bl	d6e4c <spark_cloud_flag_connected>
    if (Particle.connected()) publishQueue.publish("Mode","Set to Particle Sim", PRIVATE);
   d446e:	2800      	cmp	r0, #0
   d4470:	d0ee      	beq.n	d4450 <_Z16setThirdPartySim6String+0x34>
   d4472:	4b05      	ldr	r3, [pc, #20]	; (d4488 <_Z16setThirdPartySim6String+0x6c>)
   d4474:	f88d 4000 	strb.w	r4, [sp]
   d4478:	781b      	ldrb	r3, [r3, #0]
   d447a:	4a09      	ldr	r2, [pc, #36]	; (d44a0 <_Z16setThirdPartySim6String+0x84>)
   d447c:	e7e4      	b.n	d4448 <_Z16setThirdPartySim6String+0x2c>
   d447e:	bf00      	nop
   d4480:	000d949a 	.word	0x000d949a
   d4484:	2003e528 	.word	0x2003e528
   d4488:	2003e411 	.word	0x2003e411
   d448c:	000d94ef 	.word	0x000d94ef
   d4490:	000d94ea 	.word	0x000d94ea
   d4494:	2003e494 	.word	0x2003e494
   d4498:	2003e544 	.word	0x2003e544
   d449c:	000d9498 	.word	0x000d9498
   d44a0:	000d9504 	.word	0x000d9504

000d44a4 <_Z12setKeepAlive6String>:


int setKeepAlive(String command)
{
   d44a4:	b510      	push	{r4, lr}
   d44a6:	b0c4      	sub	sp, #272	; 0x110
  char * pEND;
  char data[256];
  int tempTime = strtol(command,&pEND,10);                                                  // Looks for the first integer and interprets it
   d44a8:	6800      	ldr	r0, [r0, #0]
   d44aa:	220a      	movs	r2, #10
   d44ac:	a903      	add	r1, sp, #12
   d44ae:	f004 ffa7 	bl	d9400 <strtol>
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d44b2:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   d44b6:	d81a      	bhi.n	d44ee <_Z12setKeepAlive6String+0x4a>
  sysStatus.keepAlive = tempTime;
   d44b8:	4c0e      	ldr	r4, [pc, #56]	; (d44f4 <_Z12setKeepAlive6String+0x50>)
   d44ba:	6060      	str	r0, [r4, #4]
   d44bc:	f002 fcc6 	bl	d6e4c <spark_cloud_flag_connected>
  if (Particle.connected()) {
   d44c0:	b180      	cbz	r0, d44e4 <_Z12setKeepAlive6String+0x40>
    snprintf(data, sizeof(data), "Keep Alive set to %i sec",sysStatus.keepAlive);
   d44c2:	6863      	ldr	r3, [r4, #4]
   d44c4:	4a0c      	ldr	r2, [pc, #48]	; (d44f8 <_Z12setKeepAlive6String+0x54>)
   d44c6:	f44f 7180 	mov.w	r1, #256	; 0x100
   d44ca:	a804      	add	r0, sp, #16
   d44cc:	f002 fd7e 	bl	d6fcc <snprintf>
   d44d0:	2300      	movs	r3, #0
    publishQueue.publish("Keep Alive",data, PRIVATE);
   d44d2:	f88d 3000 	strb.w	r3, [sp]
   d44d6:	4b09      	ldr	r3, [pc, #36]	; (d44fc <_Z12setKeepAlive6String+0x58>)
   d44d8:	4909      	ldr	r1, [pc, #36]	; (d4500 <_Z12setKeepAlive6String+0x5c>)
   d44da:	781b      	ldrb	r3, [r3, #0]
   d44dc:	4809      	ldr	r0, [pc, #36]	; (d4504 <_Z12setKeepAlive6String+0x60>)
   d44de:	aa04      	add	r2, sp, #16
   d44e0:	f7ff ff0e 	bl	d4300 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  }
  sysStatusWriteNeeded = true;                                                           // Need to store to FRAM back in the main loop
   d44e4:	4b08      	ldr	r3, [pc, #32]	; (d4508 <_Z12setKeepAlive6String+0x64>)
   d44e6:	2001      	movs	r0, #1
   d44e8:	7018      	strb	r0, [r3, #0]
  return 1;
}
   d44ea:	b044      	add	sp, #272	; 0x110
   d44ec:	bd10      	pop	{r4, pc}
  if ((tempTime < 0) || (tempTime > 1200)) return 0;                                        // Make sure it falls in a valid range or send a "fail" result
   d44ee:	2000      	movs	r0, #0
   d44f0:	e7fb      	b.n	d44ea <_Z12setKeepAlive6String+0x46>
   d44f2:	bf00      	nop
   d44f4:	2003e528 	.word	0x2003e528
   d44f8:	000d9518 	.word	0x000d9518
   d44fc:	2003e411 	.word	0x2003e411
   d4500:	000d9531 	.word	0x000d9531
   d4504:	2003e494 	.word	0x2003e494
   d4508:	2003e544 	.word	0x2003e544

000d450c <_Z18loadSystemDefaultsv>:
void loadSystemDefaults() {                                                                 // Default settings for the device - connected, not-low power and always on
   d450c:	b507      	push	{r0, r1, r2, lr}
   d450e:	f002 fc9d 	bl	d6e4c <spark_cloud_flag_connected>
  if (Particle.connected()) publishQueue.publish("Mode","Loading System Defaults", PRIVATE);
   d4512:	b148      	cbz	r0, d4528 <_Z18loadSystemDefaultsv+0x1c>
   d4514:	2300      	movs	r3, #0
   d4516:	f88d 3000 	strb.w	r3, [sp]
   d451a:	4b0c      	ldr	r3, [pc, #48]	; (d454c <_Z18loadSystemDefaultsv+0x40>)
   d451c:	4a0c      	ldr	r2, [pc, #48]	; (d4550 <_Z18loadSystemDefaultsv+0x44>)
   d451e:	781b      	ldrb	r3, [r3, #0]
   d4520:	490c      	ldr	r1, [pc, #48]	; (d4554 <_Z18loadSystemDefaultsv+0x48>)
   d4522:	480d      	ldr	r0, [pc, #52]	; (d4558 <_Z18loadSystemDefaultsv+0x4c>)
   d4524:	f7ff feec 	bl	d4300 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  sysStatus.keepAlive = 120;
   d4528:	4a0c      	ldr	r2, [pc, #48]	; (d455c <_Z18loadSystemDefaultsv+0x50>)
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d452a:	480d      	ldr	r0, [pc, #52]	; (d4560 <_Z18loadSystemDefaultsv+0x54>)
   d452c:	2378      	movs	r3, #120	; 0x78
   d452e:	6053      	str	r3, [r2, #4]
  sysStatus.structuresVersion = 1;
   d4530:	f240 1301 	movw	r3, #257	; 0x101
   d4534:	8013      	strh	r3, [r2, #0]
  sysStatus.verboseMode = false;
   d4536:	2300      	movs	r3, #0
   d4538:	7253      	strb	r3, [r2, #9]
  sysStatus.lowBatteryMode = false;
   d453a:	7293      	strb	r3, [r2, #10]
   d453c:	2101      	movs	r1, #1
   d453e:	231c      	movs	r3, #28
}
   d4540:	b003      	add	sp, #12
   d4542:	f85d eb04 	ldr.w	lr, [sp], #4
   d4546:	f001 baa2 	b.w	d5a8e <_ZN6MB85RC9writeDataEjPKhj>
   d454a:	bf00      	nop
   d454c:	2003e411 	.word	0x2003e411
   d4550:	000d953c 	.word	0x000d953c
   d4554:	000d94ea 	.word	0x000d94ea
   d4558:	2003e494 	.word	0x2003e494
   d455c:	2003e528 	.word	0x2003e528
   d4560:	2003e450 	.word	0x2003e450

000d4564 <_Z17checkSystemValuesv>:
void checkSystemValues() {                                          // Checks to ensure that all system values are in reasonable range 
   d4564:	b510      	push	{r4, lr}
  if (sysStatus.connectedStatus < 0 || sysStatus.connectedStatus > 1) {
   d4566:	4c12      	ldr	r4, [pc, #72]	; (d45b0 <_Z17checkSystemValuesv+0x4c>)
   d4568:	7a23      	ldrb	r3, [r4, #8]
   d456a:	2b01      	cmp	r3, #1
   d456c:	d904      	bls.n	d4578 <_Z17checkSystemValuesv+0x14>
   d456e:	f002 fc6d 	bl	d6e4c <spark_cloud_flag_connected>
    if (Particle.connected()) sysStatus.connectedStatus = true;
   d4572:	b1d8      	cbz	r0, d45ac <_Z17checkSystemValuesv+0x48>
   d4574:	2301      	movs	r3, #1
   d4576:	7223      	strb	r3, [r4, #8]
  if (sysStatus.keepAlive < 0 || sysStatus.keepAlive > 1200) sysStatus.keepAlive = 600;
   d4578:	6863      	ldr	r3, [r4, #4]
   d457a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   d457e:	bf84      	itt	hi
   d4580:	f44f 7316 	movhi.w	r3, #600	; 0x258
   d4584:	6063      	strhi	r3, [r4, #4]
  if (sysStatus.verboseMode < 0 || sysStatus.verboseMode > 1) sysStatus.verboseMode = false;
   d4586:	7a63      	ldrb	r3, [r4, #9]
   d4588:	2b01      	cmp	r3, #1
   d458a:	bf84      	itt	hi
   d458c:	2300      	movhi	r3, #0
   d458e:	7263      	strbhi	r3, [r4, #9]
  if (sysStatus.lowBatteryMode < 0 || sysStatus.lowBatteryMode > 1) sysStatus.lowBatteryMode = 0;
   d4590:	7aa3      	ldrb	r3, [r4, #10]
   d4592:	2b01      	cmp	r3, #1
   d4594:	bf84      	itt	hi
   d4596:	2300      	movhi	r3, #0
   d4598:	72a3      	strbhi	r3, [r4, #10]
  if (sysStatus.resetCount < 0 || sysStatus.resetCount > 255) sysStatus.resetCount = 0;
   d459a:	6963      	ldr	r3, [r4, #20]
   d459c:	2bff      	cmp	r3, #255	; 0xff
   d459e:	bf84      	itt	hi
   d45a0:	2300      	movhi	r3, #0
   d45a2:	6163      	strhi	r3, [r4, #20]
  sysStatusWriteNeeded = true;
   d45a4:	4b03      	ldr	r3, [pc, #12]	; (d45b4 <_Z17checkSystemValuesv+0x50>)
   d45a6:	2201      	movs	r2, #1
   d45a8:	701a      	strb	r2, [r3, #0]
}
   d45aa:	bd10      	pop	{r4, pc}
    else sysStatus.connectedStatus = false;
   d45ac:	7220      	strb	r0, [r4, #8]
   d45ae:	e7e3      	b.n	d4578 <_Z17checkSystemValuesv+0x14>
   d45b0:	2003e528 	.word	0x2003e528
   d45b4:	2003e544 	.word	0x2003e544

000d45b8 <_Z11petWatchdogv>:
{
   d45b8:	b508      	push	{r3, lr}
  digitalWriteFast(donePin, HIGH);                                        // Pet the watchdog
   d45ba:	2101      	movs	r1, #1
   d45bc:	2005      	movs	r0, #5
   d45be:	f7ff fe35 	bl	d422c <digitalWriteFast>
  digitalWriteFast(donePin, LOW);
   d45c2:	2100      	movs	r1, #0
   d45c4:	2005      	movs	r0, #5
   d45c6:	f7ff fe31 	bl	d422c <digitalWriteFast>
  watchdogFlag = false;
   d45ca:	4b02      	ldr	r3, [pc, #8]	; (d45d4 <_Z11petWatchdogv+0x1c>)
   d45cc:	2200      	movs	r2, #0
   d45ce:	701a      	strb	r2, [r3, #0]
}
   d45d0:	bd08      	pop	{r3, pc}
   d45d2:	bf00      	nop
   d45d4:	2003e5a4 	.word	0x2003e5a4

000d45d8 <_Z9sendEventv>:
{
   d45d8:	b510      	push	{r4, lr}
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,  \"Lux\":%4.1f,  \"White\":%4.1f,  \"ALS\":%4.1f,\"Battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.lux,sensor_data.white,sensor_data.raw_als,sensor_data.stateOfCharge);
   d45da:	4c1a      	ldr	r4, [pc, #104]	; (d4644 <_Z9sendEventv+0x6c>)
{
   d45dc:	b0a6      	sub	sp, #152	; 0x98
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,  \"Lux\":%4.1f,  \"White\":%4.1f,  \"ALS\":%4.1f,\"Battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.lux,sensor_data.white,sensor_data.raw_als,sensor_data.stateOfCharge);
   d45de:	6a23      	ldr	r3, [r4, #32]
   d45e0:	69e0      	ldr	r0, [r4, #28]
   d45e2:	930a      	str	r3, [sp, #40]	; 0x28
   d45e4:	f004 faf0 	bl	d8bc8 <__aeabi_f2d>
   d45e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d45ec:	69a0      	ldr	r0, [r4, #24]
   d45ee:	f004 faeb 	bl	d8bc8 <__aeabi_f2d>
   d45f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d45f6:	6960      	ldr	r0, [r4, #20]
   d45f8:	f004 fae6 	bl	d8bc8 <__aeabi_f2d>
   d45fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4600:	6920      	ldr	r0, [r4, #16]
   d4602:	f004 fae1 	bl	d8bc8 <__aeabi_f2d>
   d4606:	e9cd 0102 	strd	r0, r1, [sp, #8]
   d460a:	68e0      	ldr	r0, [r4, #12]
   d460c:	f004 fadc 	bl	d8bc8 <__aeabi_f2d>
   d4610:	4a0d      	ldr	r2, [pc, #52]	; (d4648 <_Z9sendEventv+0x70>)
   d4612:	e9cd 0100 	strd	r0, r1, [sp]
   d4616:	2164      	movs	r1, #100	; 0x64
   d4618:	a80d      	add	r0, sp, #52	; 0x34
   d461a:	f002 fcd7 	bl	d6fcc <snprintf>
  publishQueue.publish("GLE_HOOK", data, PRIVATE);
   d461e:	2300      	movs	r3, #0
   d4620:	f88d 3000 	strb.w	r3, [sp]
   d4624:	4b09      	ldr	r3, [pc, #36]	; (d464c <_Z9sendEventv+0x74>)
   d4626:	490a      	ldr	r1, [pc, #40]	; (d4650 <_Z9sendEventv+0x78>)
   d4628:	781b      	ldrb	r3, [r3, #0]
   d462a:	480a      	ldr	r0, [pc, #40]	; (d4654 <_Z9sendEventv+0x7c>)
   d462c:	aa0d      	add	r2, sp, #52	; 0x34
   d462e:	f7ff fe67 	bl	d4300 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  dataInFlight = true;                                                                      // set the data inflight flag
   d4632:	4b09      	ldr	r3, [pc, #36]	; (d4658 <_Z9sendEventv+0x80>)
   d4634:	2201      	movs	r2, #1
   d4636:	701a      	strb	r2, [r3, #0]

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4638:	f002 fa06 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d463c:	4b07      	ldr	r3, [pc, #28]	; (d465c <_Z9sendEventv+0x84>)
   d463e:	6018      	str	r0, [r3, #0]
}
   d4640:	b026      	add	sp, #152	; 0x98
   d4642:	bd10      	pop	{r4, pc}
   d4644:	2003e4f0 	.word	0x2003e4f0
   d4648:	000d9554 	.word	0x000d9554
   d464c:	2003e411 	.word	0x2003e411
   d4650:	000d95b5 	.word	0x000d95b5
   d4654:	2003e494 	.word	0x2003e494
   d4658:	2003e44c 	.word	0x2003e44c
   d465c:	2003e5a8 	.word	0x2003e5a8

000d4660 <_Z22publishStateTransitionv>:
{
   d4660:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4662:	4d11      	ldr	r5, [pc, #68]	; (d46a8 <_Z22publishStateTransitionv+0x48>)
   d4664:	4c11      	ldr	r4, [pc, #68]	; (d46ac <_Z22publishStateTransitionv+0x4c>)
   d4666:	4912      	ldr	r1, [pc, #72]	; (d46b0 <_Z22publishStateTransitionv+0x50>)
   d4668:	782a      	ldrb	r2, [r5, #0]
   d466a:	7820      	ldrb	r0, [r4, #0]
{
   d466c:	b08d      	sub	sp, #52	; 0x34
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d466e:	231a      	movs	r3, #26
   d4670:	fb03 1202 	mla	r2, r3, r2, r1
   d4674:	9200      	str	r2, [sp, #0]
   d4676:	fb03 1300 	mla	r3, r3, r0, r1
   d467a:	4a0e      	ldr	r2, [pc, #56]	; (d46b4 <_Z22publishStateTransitionv+0x54>)
   d467c:	2128      	movs	r1, #40	; 0x28
   d467e:	a802      	add	r0, sp, #8
   d4680:	f002 fca4 	bl	d6fcc <snprintf>
  oldState = state;
   d4684:	782b      	ldrb	r3, [r5, #0]
   d4686:	7023      	strb	r3, [r4, #0]
   d4688:	f002 fbe0 	bl	d6e4c <spark_cloud_flag_connected>
  if(Particle.connected()) publishQueue.publish("State Transition",stateTransitionString, PRIVATE);
   d468c:	b148      	cbz	r0, d46a2 <_Z22publishStateTransitionv+0x42>
   d468e:	2300      	movs	r3, #0
   d4690:	f88d 3000 	strb.w	r3, [sp]
   d4694:	4b08      	ldr	r3, [pc, #32]	; (d46b8 <_Z22publishStateTransitionv+0x58>)
   d4696:	4909      	ldr	r1, [pc, #36]	; (d46bc <_Z22publishStateTransitionv+0x5c>)
   d4698:	781b      	ldrb	r3, [r3, #0]
   d469a:	4809      	ldr	r0, [pc, #36]	; (d46c0 <_Z22publishStateTransitionv+0x60>)
   d469c:	aa02      	add	r2, sp, #8
   d469e:	f7ff fe2f 	bl	d4300 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
}
   d46a2:	b00d      	add	sp, #52	; 0x34
   d46a4:	bd30      	pop	{r4, r5, pc}
   d46a6:	bf00      	nop
   d46a8:	2003e524 	.word	0x2003e524
   d46ac:	2003e490 	.word	0x2003e490
   d46b0:	2003e270 	.word	0x2003e270
   d46b4:	000d95be 	.word	0x000d95be
   d46b8:	2003e411 	.word	0x2003e411
   d46bc:	000d95cc 	.word	0x000d95cc
   d46c0:	2003e494 	.word	0x2003e494

000d46c4 <_Z17connectToParticlev>:
void keepAliveMessage() {
  Particle.publish("*", PRIVATE,NO_ACK);
}


bool connectToParticle() {
   d46c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d46c8:	481f      	ldr	r0, [pc, #124]	; (d4748 <_Z17connectToParticlev+0x84>)
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d46ca:	f8df a088 	ldr.w	sl, [pc, #136]	; d4754 <_Z17connectToParticlev+0x90>
   d46ce:	6840      	ldr	r0, [r0, #4]
   d46d0:	2300      	movs	r3, #0
   d46d2:	461a      	mov	r2, r3
   d46d4:	4619      	mov	r1, r3
   d46d6:	f002 fc29 	bl	d6f2c <network_on>
        spark_cloud_flag_connect();
   d46da:	f002 fbaf 	bl	d6e3c <spark_cloud_flag_connect>
   d46de:	f44f 7496 	mov.w	r4, #300	; 0x12c
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d46e2:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
   d46e6:	f240 38e7 	movw	r8, #999	; 0x3e7
   d46ea:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d46ee:	2000      	movs	r0, #0
   d46f0:	f002 f9ba 	bl	d6a68 <hal_timer_millis>
   d46f4:	4605      	mov	r5, r0
   d46f6:	2000      	movs	r0, #0
   d46f8:	f002 f9b6 	bl	d6a68 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d46fc:	1b46      	subs	r6, r0, r5
   d46fe:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d4702:	45b9      	cmp	r9, r7
   d4704:	bf08      	it	eq
   d4706:	45b0      	cmpeq	r8, r6
   d4708:	d305      	bcc.n	d4716 <_Z17connectToParticlev+0x52>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d470a:	f002 fb9f 	bl	d6e4c <spark_cloud_flag_connected>
   d470e:	b910      	cbnz	r0, d4716 <_Z17connectToParticlev+0x52>
            spark_process();
   d4710:	f002 fb8c 	bl	d6e2c <spark_process>
        while (_while() && !_condition()) {
   d4714:	e7ef      	b.n	d46f6 <_Z17connectToParticlev+0x32>
   d4716:	f002 fb99 	bl	d6e4c <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d471a:	b120      	cbz	r0, d4726 <_Z17connectToParticlev+0x62>
   d471c:	f002 fb96 	bl	d6e4c <spark_cloud_flag_connected>
    Particle.process();                                           // Keeps the device responsive as it is not traversing the main loop
    petWatchdog();                                                // Pet the watchdog as we are out of the main loop for a long time.
  }
  if (Particle.connected()) {
   d4720:	b960      	cbnz	r0, d473c <_Z17connectToParticlev+0x78>
    return 1;                                                     // Were able to connect successfully
  }
  else {
    return 0;                                                     // Failed to connect
  }
}
   d4722:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return HAL_Timer_Get_Milli_Seconds();
   d4726:	f002 f98f 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d472a:	f8ca 0000 	str.w	r0, [sl]
    		spark_process();
   d472e:	f002 fb7d 	bl	d6e2c <spark_process>
    petWatchdog();                                                // Pet the watchdog as we are out of the main loop for a long time.
   d4732:	f7ff ff41 	bl	d45b8 <_Z11petWatchdogv>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d4736:	3c01      	subs	r4, #1
   d4738:	d1d9      	bne.n	d46ee <_Z17connectToParticlev+0x2a>
   d473a:	e7ef      	b.n	d471c <_Z17connectToParticlev+0x58>
    sysStatus.connectedStatus = true;
   d473c:	4a03      	ldr	r2, [pc, #12]	; (d474c <_Z17connectToParticlev+0x88>)
   d473e:	2301      	movs	r3, #1
   d4740:	7213      	strb	r3, [r2, #8]
    sysStatusWriteNeeded = true;
   d4742:	4a03      	ldr	r2, [pc, #12]	; (d4750 <_Z17connectToParticlev+0x8c>)
   d4744:	7013      	strb	r3, [r2, #0]
    return 1;                                                     // Were able to connect successfully
   d4746:	e7ec      	b.n	d4722 <_Z17connectToParticlev+0x5e>
   d4748:	2003e5c8 	.word	0x2003e5c8
   d474c:	2003e528 	.word	0x2003e528
   d4750:	2003e544 	.word	0x2003e544
   d4754:	2003e7bc 	.word	0x2003e7bc

000d4758 <_Z12notConnectedv>:
  sysStatusWriteNeeded = true;
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
   d4758:	b508      	push	{r3, lr}
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d475a:	f002 fb77 	bl	d6e4c <spark_cloud_flag_connected>
  return !Particle.connected();
   d475e:	f080 0001 	eor.w	r0, r0, #1
   d4762:	b2c0      	uxtb	r0, r0
   d4764:	bd08      	pop	{r3, pc}
	...

000d4768 <_Z22disconnectFromParticlev>:
{
   d4768:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d476c:	b085      	sub	sp, #20
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d476e:	2400      	movs	r4, #0
  Particle.disconnect();
   d4770:	a801      	add	r0, sp, #4
   d4772:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d4776:	f88d 400c 	strb.w	r4, [sp, #12]
   d477a:	f002 fd75 	bl	d7268 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        return hal_timer_millis(nullptr);
   d477e:	4620      	mov	r0, r4
   d4780:	f002 f972 	bl	d6a68 <hal_timer_millis>
        while (_while() && !_condition()) {
   d4784:	f643 2897 	movw	r8, #14999	; 0x3a97
        return hal_timer_millis(nullptr);
   d4788:	4605      	mov	r5, r0
        while (_while() && !_condition()) {
   d478a:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d478e:	2000      	movs	r0, #0
   d4790:	f002 f96a 	bl	d6a68 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d4794:	1b46      	subs	r6, r0, r5
   d4796:	eb61 0704 	sbc.w	r7, r1, r4
        while (_while() && !_condition()) {
   d479a:	45b9      	cmp	r9, r7
   d479c:	bf08      	it	eq
   d479e:	45b0      	cmpeq	r8, r6
   d47a0:	d305      	bcc.n	d47ae <_Z22disconnectFromParticlev+0x46>
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem
   d47a2:	f7ff ffd9 	bl	d4758 <_Z12notConnectedv>
   d47a6:	b910      	cbnz	r0, d47ae <_Z22disconnectFromParticlev+0x46>
            spark_process();
   d47a8:	f002 fb40 	bl	d6e2c <spark_process>
        while (_while() && !_condition()) {
   d47ac:	e7ef      	b.n	d478e <_Z22disconnectFromParticlev+0x26>
   d47ae:	f7ff ffd3 	bl	d4758 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d47b2:	480a      	ldr	r0, [pc, #40]	; (d47dc <_Z22disconnectFromParticlev+0x74>)
   d47b4:	2300      	movs	r3, #0
   d47b6:	4619      	mov	r1, r3
   d47b8:	461a      	mov	r2, r3
   d47ba:	6840      	ldr	r0, [r0, #4]
   d47bc:	f002 fbbe 	bl	d6f3c <network_off>
  sysStatus.connectedStatus = false;
   d47c0:	4b07      	ldr	r3, [pc, #28]	; (d47e0 <_Z22disconnectFromParticlev+0x78>)
   d47c2:	2200      	movs	r2, #0
   d47c4:	721a      	strb	r2, [r3, #8]
  sysStatusWriteNeeded = true;
   d47c6:	4b07      	ldr	r3, [pc, #28]	; (d47e4 <_Z22disconnectFromParticlev+0x7c>)
   d47c8:	2401      	movs	r4, #1
  delay(2000);                                                    // Bummer but only should happen once an hour
   d47ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
  sysStatusWriteNeeded = true;
   d47ce:	701c      	strb	r4, [r3, #0]
  delay(2000);                                                    // Bummer but only should happen once an hour
   d47d0:	f002 fc3c 	bl	d704c <delay>
}
   d47d4:	4620      	mov	r0, r4
   d47d6:	b005      	add	sp, #20
   d47d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d47dc:	2003e5c8 	.word	0x2003e5c8
   d47e0:	2003e528 	.word	0x2003e528
   d47e4:	2003e544 	.word	0x2003e544

000d47e8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d47e8:	b530      	push	{r4, r5, lr}
   d47ea:	b085      	sub	sp, #20
   d47ec:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d47ee:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d47f0:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d47f2:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d47f4:	f002 fa98 	bl	d6d28 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d47f8:	b9b0      	cbnz	r0, d4828 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d47fa:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d47fc:	b10c      	cbz	r4, d4802 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d47fe:	6923      	ldr	r3, [r4, #16]
   d4800:	b923      	cbnz	r3, d480c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d4802:	4a0a      	ldr	r2, [pc, #40]	; (d482c <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4804:	2100      	movs	r1, #0
   d4806:	200a      	movs	r0, #10
   d4808:	f002 fa76 	bl	d6cf8 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d480c:	2300      	movs	r3, #0
   d480e:	f8ad 3006 	strh.w	r3, [sp, #6]
   d4812:	230c      	movs	r3, #12
   d4814:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4818:	2304      	movs	r3, #4
   d481a:	9303      	str	r3, [sp, #12]
   d481c:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d481e:	6923      	ldr	r3, [r4, #16]
   d4820:	aa01      	add	r2, sp, #4
   d4822:	2101      	movs	r1, #1
   d4824:	4620      	mov	r0, r4
   d4826:	4798      	blx	r3
}
   d4828:	b005      	add	sp, #20
   d482a:	bd30      	pop	{r4, r5, pc}
   d482c:	000d6a39 	.word	0x000d6a39

000d4830 <_Z17getBatteryContextv>:
void getBatteryContext() {
   d4830:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4832:	4d0e      	ldr	r5, [pc, #56]	; (d486c <_Z17getBatteryContextv+0x3c>)
   d4834:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getBatteryContext() {
   d4836:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4838:	ac01      	add	r4, sp, #4
   d483a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d483c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d4840:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4844:	4669      	mov	r1, sp
   d4846:	2007      	movs	r0, #7
   d4848:	f7ff ffce 	bl	d47e8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d484c:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d484e:	bfa8      	it	ge
   d4850:	9800      	ldrge	r0, [sp, #0]
  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d4852:	4a07      	ldr	r2, [pc, #28]	; (d4870 <_Z17getBatteryContextv+0x40>)
   d4854:	ab08      	add	r3, sp, #32
   d4856:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d485a:	2110      	movs	r1, #16
   d485c:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d4860:	4804      	ldr	r0, [pc, #16]	; (d4874 <_Z17getBatteryContextv+0x44>)
   d4862:	f002 fbb3 	bl	d6fcc <snprintf>
}
   d4866:	b009      	add	sp, #36	; 0x24
   d4868:	bd30      	pop	{r4, r5, pc}
   d486a:	bf00      	nop
   d486c:	000d97bc 	.word	0x000d97bc
   d4870:	000d9654 	.word	0x000d9654
   d4874:	2003e412 	.word	0x2003e412

000d4878 <_ZNK11SystemClass13batteryChargeEv.isra.0>:
    }

    float batteryCharge() const {
   d4878:	b507      	push	{r0, r1, r2, lr}
   d487a:	2003      	movs	r0, #3
   d487c:	a901      	add	r1, sp, #4
   d487e:	f7ff ffb3 	bl	d47e8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4882:	b940      	cbnz	r0, d4896 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x1e>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4884:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d4888:	ee00 3a10 	vmov	s0, r3
   d488c:	eebb 0acc 	vcvt.f32.u32	s0, s0, #8

        using SocFixedPointT = particle::FixedPointUQ<8, 8>;

        SocFixedPointT soc(static_cast<typename SocFixedPointT::type>(val));
        return soc.toFloat();
    }
   d4890:	b003      	add	sp, #12
   d4892:	f85d fb04 	ldr.w	pc, [sp], #4
            return -1.0f;
   d4896:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
   d489a:	e7f9      	b.n	d4890 <_ZNK11SystemClass13batteryChargeEv.isra.0+0x18>

000d489c <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d489c:	b570      	push	{r4, r5, r6, lr}
  sensor_data.validData = false;
   d489e:	4c64      	ldr	r4, [pc, #400]	; (d4a30 <_Z16takeMeasurementsv+0x194>)
  if (sht31.readTemperature()){
   d48a0:	4864      	ldr	r0, [pc, #400]	; (d4a34 <_Z16takeMeasurementsv+0x198>)
bool takeMeasurements() {
   d48a2:	b08a      	sub	sp, #40	; 0x28
  sensor_data.validData = false;
   d48a4:	2500      	movs	r5, #0
   d48a6:	7025      	strb	r5, [r4, #0]
  if (sht31.readTemperature()){
   d48a8:	f001 f81a 	bl	d58e0 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d48ac:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d48b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d48b4:	f000 80b9 	beq.w	d4a2a <_Z16takeMeasurementsv+0x18e>
    sensor_data.temperatureInC = sht31.readTemperature();
   d48b8:	485e      	ldr	r0, [pc, #376]	; (d4a34 <_Z16takeMeasurementsv+0x198>)
    constexpr char const* powerSources[] = {
   d48ba:	4e5f      	ldr	r6, [pc, #380]	; (d4a38 <_Z16takeMeasurementsv+0x19c>)
    sensor_data.temperatureInC = sht31.readTemperature();
   d48bc:	f001 f810 	bl	d58e0 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d48c0:	ee10 0a10 	vmov	r0, s0
   d48c4:	ed84 0a03 	vstr	s0, [r4, #12]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d48c8:	f004 f97e 	bl	d8bc8 <__aeabi_f2d>
   d48cc:	4a5b      	ldr	r2, [pc, #364]	; (d4a3c <_Z16takeMeasurementsv+0x1a0>)
   d48ce:	e9cd 0100 	strd	r0, r1, [sp]
   d48d2:	2110      	movs	r1, #16
   d48d4:	485a      	ldr	r0, [pc, #360]	; (d4a40 <_Z16takeMeasurementsv+0x1a4>)
   d48d6:	f002 fb79 	bl	d6fcc <snprintf>
    sensor_data.relativeHumidity = sht31.readHumidity();
   d48da:	4856      	ldr	r0, [pc, #344]	; (d4a34 <_Z16takeMeasurementsv+0x198>)
   d48dc:	f001 f80e 	bl	d58fc <_ZN14Adafruit_SHT3112readHumidityEv>
   d48e0:	ee10 0a10 	vmov	r0, s0
   d48e4:	ed84 0a04 	vstr	s0, [r4, #16]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d48e8:	f004 f96e 	bl	d8bc8 <__aeabi_f2d>
   d48ec:	4a55      	ldr	r2, [pc, #340]	; (d4a44 <_Z16takeMeasurementsv+0x1a8>)
   d48ee:	e9cd 0100 	strd	r0, r1, [sp]
   d48f2:	2110      	movs	r1, #16
   d48f4:	4854      	ldr	r0, [pc, #336]	; (d4a48 <_Z16takeMeasurementsv+0x1ac>)
   d48f6:	f002 fb69 	bl	d6fcc <snprintf>
    sensor_data.lux = veml.readLux();
   d48fa:	4854      	ldr	r0, [pc, #336]	; (d4a4c <_Z16takeMeasurementsv+0x1b0>)
   d48fc:	f000 fe00 	bl	d5500 <_ZN17Adafruit_VEML77007readLuxEv>
    sensor_data.white = veml.readWhite();
   d4900:	4852      	ldr	r0, [pc, #328]	; (d4a4c <_Z16takeMeasurementsv+0x1b0>)
    sensor_data.lux = veml.readLux();
   d4902:	ed84 0a05 	vstr	s0, [r4, #20]
    sensor_data.white = veml.readWhite();
   d4906:	f000 fe1b 	bl	d5540 <_ZN17Adafruit_VEML77009readWhiteEv>
    sensor_data.raw_als = veml.readALS();
   d490a:	4850      	ldr	r0, [pc, #320]	; (d4a4c <_Z16takeMeasurementsv+0x1b0>)
    sensor_data.white = veml.readWhite();
   d490c:	ed84 0a06 	vstr	s0, [r4, #24]
    sensor_data.raw_als = veml.readALS();
   d4910:	f000 fd96 	bl	d5440 <_ZN17Adafruit_VEML77007readALSEv>
   d4914:	ee07 0a90 	vmov	s15, r0
   d4918:	eef8 7a67 	vcvt.f32.u32	s15, s15
    snprintf(luxString,sizeof(luxString),"Lux : %4.1f", sensor_data.lux);
   d491c:	6960      	ldr	r0, [r4, #20]
    sensor_data.raw_als = veml.readALS();
   d491e:	edc4 7a07 	vstr	s15, [r4, #28]
    snprintf(luxString,sizeof(luxString),"Lux : %4.1f", sensor_data.lux);
   d4922:	f004 f951 	bl	d8bc8 <__aeabi_f2d>
   d4926:	4a4a      	ldr	r2, [pc, #296]	; (d4a50 <_Z16takeMeasurementsv+0x1b4>)
   d4928:	e9cd 0100 	strd	r0, r1, [sp]
   d492c:	2110      	movs	r1, #16
   d492e:	4849      	ldr	r0, [pc, #292]	; (d4a54 <_Z16takeMeasurementsv+0x1b8>)
   d4930:	f002 fb4c 	bl	d6fcc <snprintf>
    snprintf(whiteString,sizeof(whiteString),"White : %4.1f", sensor_data.white);
   d4934:	69a0      	ldr	r0, [r4, #24]
   d4936:	f004 f947 	bl	d8bc8 <__aeabi_f2d>
   d493a:	4a47      	ldr	r2, [pc, #284]	; (d4a58 <_Z16takeMeasurementsv+0x1bc>)
   d493c:	e9cd 0100 	strd	r0, r1, [sp]
   d4940:	2110      	movs	r1, #16
   d4942:	4846      	ldr	r0, [pc, #280]	; (d4a5c <_Z16takeMeasurementsv+0x1c0>)
   d4944:	f002 fb42 	bl	d6fcc <snprintf>
    snprintf(ALSString,sizeof(ALSString),"ALS : %4.1f", sensor_data.raw_als);
   d4948:	69e0      	ldr	r0, [r4, #28]
   d494a:	f004 f93d 	bl	d8bc8 <__aeabi_f2d>
   d494e:	4a44      	ldr	r2, [pc, #272]	; (d4a60 <_Z16takeMeasurementsv+0x1c4>)
   d4950:	e9cd 0100 	strd	r0, r1, [sp]
   d4954:	2110      	movs	r1, #16
   d4956:	4843      	ldr	r0, [pc, #268]	; (d4a64 <_Z16takeMeasurementsv+0x1c8>)
   d4958:	f002 fb38 	bl	d6fcc <snprintf>
    sensor_data.stateOfCharge = int(System.batteryCharge());
   d495c:	f7ff ff8c 	bl	d4878 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d4960:	eefd 7ac0 	vcvt.s32.f32	s15, s0
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensor_data.stateOfCharge);
   d4964:	4a40      	ldr	r2, [pc, #256]	; (d4a68 <_Z16takeMeasurementsv+0x1cc>)
   d4966:	4841      	ldr	r0, [pc, #260]	; (d4a6c <_Z16takeMeasurementsv+0x1d0>)
    sensor_data.stateOfCharge = int(System.batteryCharge());
   d4968:	edc4 7a08 	vstr	s15, [r4, #32]
   d496c:	ee17 3a90 	vmov	r3, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensor_data.stateOfCharge);
   d4970:	2110      	movs	r1, #16
   d4972:	f002 fb2b 	bl	d6fcc <snprintf>
    constexpr char const* powerSources[] = {
   d4976:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d4978:	ad04      	add	r5, sp, #16
   d497a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d497c:	e896 0003 	ldmia.w	r6, {r0, r1}
   d4980:	e885 0003 	stmia.w	r5, {r0, r1}
    PMIC power(true);
   d4984:	2101      	movs	r1, #1
   d4986:	a802      	add	r0, sp, #8
   d4988:	f003 f925 	bl	d7bd6 <_ZN4PMICC1Eb>
    snprintf(vminContext,sizeof(vminContext),"VIN Vmin: %u", power.getInputVoltageLimit());
   d498c:	a802      	add	r0, sp, #8
   d498e:	f003 f9a2 	bl	d7cd6 <_ZN4PMIC20getInputVoltageLimitEv>
   d4992:	4a37      	ldr	r2, [pc, #220]	; (d4a70 <_Z16takeMeasurementsv+0x1d4>)
   d4994:	4603      	mov	r3, r0
   d4996:	2110      	movs	r1, #16
   d4998:	4836      	ldr	r0, [pc, #216]	; (d4a74 <_Z16takeMeasurementsv+0x1d8>)
   d499a:	f002 fb17 	bl	d6fcc <snprintf>
    snprintf(imaxContext,sizeof(imaxContext),"VIN Imax: %u", power.getInputCurrentLimit());
   d499e:	a802      	add	r0, sp, #8
   d49a0:	f003 f96c 	bl	d7c7c <_ZN4PMIC20getInputCurrentLimitEv>
   d49a4:	4a34      	ldr	r2, [pc, #208]	; (d4a78 <_Z16takeMeasurementsv+0x1dc>)
   d49a6:	4603      	mov	r3, r0
   d49a8:	2110      	movs	r1, #16
   d49aa:	4834      	ldr	r0, [pc, #208]	; (d4a7c <_Z16takeMeasurementsv+0x1e0>)
   d49ac:	f002 fb0e 	bl	d6fcc <snprintf>
    snprintf(IchgContext,sizeof(IchgContext),"Ichg: %u", power.getChargeCurrentValue());
   d49b0:	a802      	add	r0, sp, #8
   d49b2:	f003 f96f 	bl	d7c94 <_ZN4PMIC21getChargeCurrentValueEv>
   d49b6:	4a32      	ldr	r2, [pc, #200]	; (d4a80 <_Z16takeMeasurementsv+0x1e4>)
   d49b8:	4603      	mov	r3, r0
   d49ba:	2110      	movs	r1, #16
   d49bc:	4831      	ldr	r0, [pc, #196]	; (d4a84 <_Z16takeMeasurementsv+0x1e8>)
   d49be:	f002 fb05 	bl	d6fcc <snprintf>
    snprintf(ItermContext,sizeof(ItermContext),"Iterm: %u", power.getChargeVoltageValue());
   d49c2:	a802      	add	r0, sp, #8
   d49c4:	f003 f973 	bl	d7cae <_ZN4PMIC21getChargeVoltageValueEv>
   d49c8:	4a2f      	ldr	r2, [pc, #188]	; (d4a88 <_Z16takeMeasurementsv+0x1ec>)
   d49ca:	4603      	mov	r3, r0
   d49cc:	2110      	movs	r1, #16
   d49ce:	482f      	ldr	r0, [pc, #188]	; (d4a8c <_Z16takeMeasurementsv+0x1f0>)
   d49d0:	f002 fafc 	bl	d6fcc <snprintf>
   d49d4:	a903      	add	r1, sp, #12
   d49d6:	2018      	movs	r0, #24
   d49d8:	f7ff ff06 	bl	d47e8 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        if (r < 0) {
   d49dc:	2800      	cmp	r0, #0
        return val;
   d49de:	bfa8      	it	ge
   d49e0:	9803      	ldrge	r0, [sp, #12]
    snprintf(PowerSourceContext,sizeof(PowerSourceContext),"Power source: %s",powerSources[System.powerSource()]);
   d49e2:	4a2b      	ldr	r2, [pc, #172]	; (d4a90 <_Z16takeMeasurementsv+0x1f4>)
   d49e4:	ab0a      	add	r3, sp, #40	; 0x28
   d49e6:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d49ea:	2120      	movs	r1, #32
   d49ec:	f850 3c18 	ldr.w	r3, [r0, #-24]
   d49f0:	4828      	ldr	r0, [pc, #160]	; (d4a94 <_Z16takeMeasurementsv+0x1f8>)
   d49f2:	f002 faeb 	bl	d6fcc <snprintf>
    getBatteryContext();                   // Check what the battery is doing.
   d49f6:	f7ff ff1b 	bl	d4830 <_Z17getBatteryContextv>
    sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d49fa:	f7ff ff3d 	bl	d4878 <_ZNK11SystemClass13batteryChargeEv.isra.0>
   d49fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
   d4a02:	4a25      	ldr	r2, [pc, #148]	; (d4a98 <_Z16takeMeasurementsv+0x1fc>)
   d4a04:	ee17 3a90 	vmov	r3, s15
    if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d4a08:	2b1d      	cmp	r3, #29
   d4a0a:	bfcc      	ite	gt
   d4a0c:	2300      	movgt	r3, #0
   d4a0e:	2301      	movle	r3, #1
    sensor_data.validData = true;
   d4a10:	2501      	movs	r5, #1
    if (sysStatus.stateOfCharge < 30) sysStatus.lowBatteryMode = true;  // Check to see if we are in low battery territory
   d4a12:	7293      	strb	r3, [r2, #10]
    sysStatus.stateOfCharge = int(System.batteryCharge());              // Percentage of full charge
   d4a14:	edc2 7a03 	vstr	s15, [r2, #12]
    sensor_data.validData = true;
   d4a18:	7025      	strb	r5, [r4, #0]
    sensor_data.timeStamp = Time.now();
   d4a1a:	f003 fca2 	bl	d8362 <_ZN9TimeClass3nowEv>
    sensorDataWriteNeeded = true;  
   d4a1e:	4b1f      	ldr	r3, [pc, #124]	; (d4a9c <_Z16takeMeasurementsv+0x200>)
    sensor_data.timeStamp = Time.now();
   d4a20:	6060      	str	r0, [r4, #4]
    PMIC power(true);
   d4a22:	a802      	add	r0, sp, #8
    sensorDataWriteNeeded = true;  
   d4a24:	701d      	strb	r5, [r3, #0]
    PMIC power(true);
   d4a26:	f003 f8e5 	bl	d7bf4 <_ZN4PMICD1Ev>
    }else return 0;
   d4a2a:	4628      	mov	r0, r5
  }                                                                       // Take measurement from all the sensors
   d4a2c:	b00a      	add	sp, #40	; 0x28
   d4a2e:	bd70      	pop	{r4, r5, r6, pc}
   d4a30:	2003e4f0 	.word	0x2003e4f0
   d4a34:	2003e518 	.word	0x2003e518
   d4a38:	000d97d8 	.word	0x000d97d8
   d4a3c:	000d95dd 	.word	0x000d95dd
   d4a40:	2003e545 	.word	0x2003e545
   d4a44:	000d95e5 	.word	0x000d95e5
   d4a48:	2003e460 	.word	0x2003e460
   d4a4c:	2003e558 	.word	0x2003e558
   d4a50:	000d95ed 	.word	0x000d95ed
   d4a54:	2003e480 	.word	0x2003e480
   d4a58:	000d95f9 	.word	0x000d95f9
   d4a5c:	2003e5ac 	.word	0x2003e5ac
   d4a60:	000d9607 	.word	0x000d9607
   d4a64:	2003e3b4 	.word	0x2003e3b4
   d4a68:	000d9613 	.word	0x000d9613
   d4a6c:	2003e422 	.word	0x2003e422
   d4a70:	000d9619 	.word	0x000d9619
   d4a74:	2003e594 	.word	0x2003e594
   d4a78:	000d9626 	.word	0x000d9626
   d4a7c:	2003e470 	.word	0x2003e470
   d4a80:	000d9633 	.word	0x000d9633
   d4a84:	2003e3c4 	.word	0x2003e3c4
   d4a88:	000d963c 	.word	0x000d963c
   d4a8c:	2003e3d4 	.word	0x2003e3d4
   d4a90:	000d9646 	.word	0x000d9646
   d4a94:	2003e3e4 	.word	0x2003e3e4
   d4a98:	2003e528 	.word	0x2003e528
   d4a9c:	2003e4ec 	.word	0x2003e4ec

000d4aa0 <loop>:
{
   d4aa0:	b570      	push	{r4, r5, r6, lr}
  switch(state) {
   d4aa2:	4c87      	ldr	r4, [pc, #540]	; (d4cc0 <loop+0x220>)
   d4aa4:	7823      	ldrb	r3, [r4, #0]
   d4aa6:	3b01      	subs	r3, #1
{
   d4aa8:	b086      	sub	sp, #24
   d4aaa:	2b06      	cmp	r3, #6
   d4aac:	d840      	bhi.n	d4b30 <loop+0x90>
   d4aae:	e8df f013 	tbh	[pc, r3, lsl #1]
   d4ab2:	00b1      	.short	0x00b1
   d4ab4:	00200007 	.word	0x00200007
   d4ab8:	00860061 	.word	0x00860061
   d4abc:	012f00d9 	.word	0x012f00d9
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4ac0:	4d80      	ldr	r5, [pc, #512]	; (d4cc4 <loop+0x224>)
   d4ac2:	7a6a      	ldrb	r2, [r5, #9]
   d4ac4:	b12a      	cbz	r2, d4ad2 <loop+0x32>
   d4ac6:	4b80      	ldr	r3, [pc, #512]	; (d4cc8 <loop+0x228>)
   d4ac8:	781b      	ldrb	r3, [r3, #0]
   d4aca:	2b02      	cmp	r3, #2
   d4acc:	d001      	beq.n	d4ad2 <loop+0x32>
   d4ace:	f7ff fdc7 	bl	d4660 <_Z22publishStateTransitionv>
    if (sysStatus.lowBatteryMode) state = SLEEPING_STATE;                                 // If in low power mode, Goto sleep.
   d4ad2:	7aab      	ldrb	r3, [r5, #10]
   d4ad4:	b10b      	cbz	r3, d4ada <loop+0x3a>
   d4ad6:	2307      	movs	r3, #7
   d4ad8:	7023      	strb	r3, [r4, #0]
    if (!(Time.now() % wakeBoundary)) state = MEASURING_STATE;  
   d4ada:	f003 fc42 	bl	d8362 <_ZN9TimeClass3nowEv>
   d4ade:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
   d4ae2:	fb90 f2f3 	sdiv	r2, r0, r3
   d4ae6:	fb02 0313 	mls	r3, r2, r3, r0
   d4aea:	bb0b      	cbnz	r3, d4b30 <loop+0x90>
   d4aec:	2303      	movs	r3, #3
      state = IDLE_STATE;
   d4aee:	7023      	strb	r3, [r4, #0]
    } break; 
   d4af0:	e01e      	b.n	d4b30 <loop+0x90>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4af2:	4e74      	ldr	r6, [pc, #464]	; (d4cc4 <loop+0x224>)
   d4af4:	7a72      	ldrb	r2, [r6, #9]
   d4af6:	b12a      	cbz	r2, d4b04 <loop+0x64>
   d4af8:	4b73      	ldr	r3, [pc, #460]	; (d4cc8 <loop+0x228>)
   d4afa:	781b      	ldrb	r3, [r3, #0]
   d4afc:	2b03      	cmp	r3, #3
   d4afe:	d001      	beq.n	d4b04 <loop+0x64>
   d4b00:	f7ff fdae 	bl	d4660 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4b04:	f7ff feca 	bl	d489c <_Z16takeMeasurementsv>
   d4b08:	4605      	mov	r5, r0
   d4b0a:	2800      	cmp	r0, #0
   d4b0c:	d130      	bne.n	d4b70 <loop+0xd0>
      state = ERROR_STATE;
   d4b0e:	2301      	movs	r3, #1
   d4b10:	7023      	strb	r3, [r4, #0]
   d4b12:	f001 ff99 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4b16:	4b6d      	ldr	r3, [pc, #436]	; (d4ccc <loop+0x22c>)
   d4b18:	6018      	str	r0, [r3, #0]
      if (sysStatus.verboseMode) {
   d4b1a:	7a73      	ldrb	r3, [r6, #9]
   d4b1c:	b143      	cbz	r3, d4b30 <loop+0x90>
        publishQueue.publish("State","Error taking Measurements",PRIVATE);
   d4b1e:	4b6c      	ldr	r3, [pc, #432]	; (d4cd0 <loop+0x230>)
   d4b20:	f88d 5000 	strb.w	r5, [sp]
   d4b24:	781b      	ldrb	r3, [r3, #0]
   d4b26:	4a6b      	ldr	r2, [pc, #428]	; (d4cd4 <loop+0x234>)
   d4b28:	496b      	ldr	r1, [pc, #428]	; (d4cd8 <loop+0x238>)
   d4b2a:	486c      	ldr	r0, [pc, #432]	; (d4cdc <loop+0x23c>)
   d4b2c:	f7ff fbe8 	bl	d4300 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  rtc.loop();                                                                               // keeps the clock up to date
   d4b30:	486b      	ldr	r0, [pc, #428]	; (d4ce0 <loop+0x240>)
   d4b32:	f001 fb89 	bl	d6248 <_ZN8MCP794104loopEv>
  if (watchdogFlag) petWatchdog();                                                          // Watchdog flag is raised - time to pet the watchdog
   d4b36:	4b6b      	ldr	r3, [pc, #428]	; (d4ce4 <loop+0x244>)
   d4b38:	781b      	ldrb	r3, [r3, #0]
   d4b3a:	b10b      	cbz	r3, d4b40 <loop+0xa0>
   d4b3c:	f7ff fd3c 	bl	d45b8 <_Z11petWatchdogv>
  if (sysStatusWriteNeeded) {
   d4b40:	4c69      	ldr	r4, [pc, #420]	; (d4ce8 <loop+0x248>)
   d4b42:	7823      	ldrb	r3, [r4, #0]
   d4b44:	b13b      	cbz	r3, d4b56 <loop+0xb6>
   d4b46:	231c      	movs	r3, #28
   d4b48:	4a5e      	ldr	r2, [pc, #376]	; (d4cc4 <loop+0x224>)
   d4b4a:	4868      	ldr	r0, [pc, #416]	; (d4cec <loop+0x24c>)
   d4b4c:	2101      	movs	r1, #1
   d4b4e:	f000 ff9e 	bl	d5a8e <_ZN6MB85RC9writeDataEjPKhj>
    sysStatusWriteNeeded = false;
   d4b52:	2300      	movs	r3, #0
   d4b54:	7023      	strb	r3, [r4, #0]
  if (sensorDataWriteNeeded) {
   d4b56:	4c66      	ldr	r4, [pc, #408]	; (d4cf0 <loop+0x250>)
   d4b58:	7823      	ldrb	r3, [r4, #0]
   d4b5a:	b13b      	cbz	r3, d4b6c <loop+0xcc>
   d4b5c:	2328      	movs	r3, #40	; 0x28
   d4b5e:	4a65      	ldr	r2, [pc, #404]	; (d4cf4 <loop+0x254>)
   d4b60:	4862      	ldr	r0, [pc, #392]	; (d4cec <loop+0x24c>)
   d4b62:	21a0      	movs	r1, #160	; 0xa0
   d4b64:	f000 ff93 	bl	d5a8e <_ZN6MB85RC9writeDataEjPKhj>
    sensorDataWriteNeeded = false;
   d4b68:	2300      	movs	r3, #0
   d4b6a:	7023      	strb	r3, [r4, #0]
}
   d4b6c:	b006      	add	sp, #24
   d4b6e:	bd70      	pop	{r4, r5, r6, pc}
    else state = REPORTING_STATE;
   d4b70:	2304      	movs	r3, #4
   d4b72:	e7bc      	b.n	d4aee <loop+0x4e>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
   d4b74:	4d53      	ldr	r5, [pc, #332]	; (d4cc4 <loop+0x224>)
   d4b76:	7a6a      	ldrb	r2, [r5, #9]
   d4b78:	b12a      	cbz	r2, d4b86 <loop+0xe6>
   d4b7a:	4b53      	ldr	r3, [pc, #332]	; (d4cc8 <loop+0x228>)
   d4b7c:	781b      	ldrb	r3, [r3, #0]
   d4b7e:	2b04      	cmp	r3, #4
   d4b80:	d001      	beq.n	d4b86 <loop+0xe6>
   d4b82:	f7ff fd6d 	bl	d4660 <_Z22publishStateTransitionv>
    if (!sysStatus.connectedStatus) connectToParticle();                                              // Only attempt to connect if not already New process to get connected
   d4b86:	7a2b      	ldrb	r3, [r5, #8]
   d4b88:	b90b      	cbnz	r3, d4b8e <loop+0xee>
   d4b8a:	f7ff fd9b 	bl	d46c4 <_Z17connectToParticlev>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b8e:	f002 f95d 	bl	d6e4c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4b92:	b168      	cbz	r0, d4bb0 <loop+0x110>
      if (Time.hour() == 12) Particle.syncTime();                                                     // Set the clock each day at noon
   d4b94:	f003 fbf6 	bl	d8384 <_ZN9TimeClass4hourEv>
   d4b98:	280c      	cmp	r0, #12
   d4b9a:	d105      	bne.n	d4ba8 <loop+0x108>
   d4b9c:	f002 f956 	bl	d6e4c <spark_cloud_flag_connected>
        if (!connected()) {
   d4ba0:	b110      	cbz	r0, d4ba8 <loop+0x108>
        return spark_sync_time(NULL);
   d4ba2:	2000      	movs	r0, #0
   d4ba4:	f002 f972 	bl	d6e8c <spark_sync_time>
      sendEvent();                                                                                    // Send data to Ubidots
   d4ba8:	f7ff fd16 	bl	d45d8 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                                        // Wait for Response
   d4bac:	2305      	movs	r3, #5
   d4bae:	e79e      	b.n	d4aee <loop+0x4e>
      state = ERROR_STATE;
   d4bb0:	2301      	movs	r3, #1
   d4bb2:	7023      	strb	r3, [r4, #0]
   d4bb4:	f001 ff48 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4bb8:	4b44      	ldr	r3, [pc, #272]	; (d4ccc <loop+0x22c>)
   d4bba:	6018      	str	r0, [r3, #0]
   d4bbc:	e7b8      	b.n	d4b30 <loop+0x90>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4bbe:	4b41      	ldr	r3, [pc, #260]	; (d4cc4 <loop+0x224>)
   d4bc0:	7a5b      	ldrb	r3, [r3, #9]
   d4bc2:	b12b      	cbz	r3, d4bd0 <loop+0x130>
   d4bc4:	4b40      	ldr	r3, [pc, #256]	; (d4cc8 <loop+0x228>)
   d4bc6:	781b      	ldrb	r3, [r3, #0]
   d4bc8:	2b05      	cmp	r3, #5
   d4bca:	d001      	beq.n	d4bd0 <loop+0x130>
   d4bcc:	f7ff fd48 	bl	d4660 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d4bd0:	4b49      	ldr	r3, [pc, #292]	; (d4cf8 <loop+0x258>)
   d4bd2:	781b      	ldrb	r3, [r3, #0]
   d4bd4:	b90b      	cbnz	r3, d4bda <loop+0x13a>
     state = NAPPING_STATE;
   d4bd6:	2306      	movs	r3, #6
   d4bd8:	e789      	b.n	d4aee <loop+0x4e>
   d4bda:	f001 ff35 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d4bde:	4b47      	ldr	r3, [pc, #284]	; (d4cfc <loop+0x25c>)
   d4be0:	681b      	ldr	r3, [r3, #0]
   d4be2:	1ac0      	subs	r0, r0, r3
   d4be4:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4be8:	4298      	cmp	r0, r3
   d4bea:	d9a1      	bls.n	d4b30 <loop+0x90>
   d4bec:	f001 ff2c 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4bf0:	4d36      	ldr	r5, [pc, #216]	; (d4ccc <loop+0x22c>)
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4bf2:	4a43      	ldr	r2, [pc, #268]	; (d4d00 <loop+0x260>)
      resetTimeStamp = millis();
   d4bf4:	6028      	str	r0, [r5, #0]
   d4bf6:	2300      	movs	r3, #0
      publishQueue.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4bf8:	f88d 3000 	strb.w	r3, [sp]
   d4bfc:	4b34      	ldr	r3, [pc, #208]	; (d4cd0 <loop+0x230>)
   d4bfe:	4941      	ldr	r1, [pc, #260]	; (d4d04 <loop+0x264>)
   d4c00:	781b      	ldrb	r3, [r3, #0]
   d4c02:	4836      	ldr	r0, [pc, #216]	; (d4cdc <loop+0x23c>)
   d4c04:	f7ff fb7c 	bl	d4300 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      state = ERROR_STATE;                                            // Response timed out
   d4c08:	2301      	movs	r3, #1
   d4c0a:	7023      	strb	r3, [r4, #0]
   d4c0c:	f001 ff1c 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4c10:	6028      	str	r0, [r5, #0]
   d4c12:	e78d      	b.n	d4b30 <loop+0x90>
    if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4c14:	4b2b      	ldr	r3, [pc, #172]	; (d4cc4 <loop+0x224>)
   d4c16:	7a5b      	ldrb	r3, [r3, #9]
   d4c18:	b12b      	cbz	r3, d4c26 <loop+0x186>
   d4c1a:	4b2b      	ldr	r3, [pc, #172]	; (d4cc8 <loop+0x228>)
   d4c1c:	781b      	ldrb	r3, [r3, #0]
   d4c1e:	2b01      	cmp	r3, #1
   d4c20:	d001      	beq.n	d4c26 <loop+0x186>
   d4c22:	f7ff fd1d 	bl	d4660 <_Z22publishStateTransitionv>
   d4c26:	f001 ff0f 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4c2a:	4b28      	ldr	r3, [pc, #160]	; (d4ccc <loop+0x22c>)
   d4c2c:	681b      	ldr	r3, [r3, #0]
   d4c2e:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4c32:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d4c36:	4283      	cmp	r3, r0
   d4c38:	f4bf af7a 	bcs.w	d4b30 <loop+0x90>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4c3c:	f002 f906 	bl	d6e4c <spark_cloud_flag_connected>
      if (Particle.connected()) publishQueue.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4c40:	b148      	cbz	r0, d4c56 <loop+0x1b6>
   d4c42:	2300      	movs	r3, #0
   d4c44:	f88d 3000 	strb.w	r3, [sp]
   d4c48:	4b21      	ldr	r3, [pc, #132]	; (d4cd0 <loop+0x230>)
   d4c4a:	4a2f      	ldr	r2, [pc, #188]	; (d4d08 <loop+0x268>)
   d4c4c:	781b      	ldrb	r3, [r3, #0]
   d4c4e:	4922      	ldr	r1, [pc, #136]	; (d4cd8 <loop+0x238>)
   d4c50:	4822      	ldr	r0, [pc, #136]	; (d4cdc <loop+0x23c>)
   d4c52:	f7ff fb55 	bl	d4300 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
      delay(2000);
   d4c56:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4c5a:	f002 f9f7 	bl	d704c <delay>
      System.reset();
   d4c5e:	f003 f9a1 	bl	d7fa4 <_ZN11SystemClass5resetEv>
   d4c62:	e765      	b.n	d4b30 <loop+0x90>
      if (sysStatus.verboseMode && oldState != state) publishStateTransition();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d4c64:	4d17      	ldr	r5, [pc, #92]	; (d4cc4 <loop+0x224>)
   d4c66:	7a6a      	ldrb	r2, [r5, #9]
   d4c68:	b12a      	cbz	r2, d4c76 <loop+0x1d6>
   d4c6a:	4b17      	ldr	r3, [pc, #92]	; (d4cc8 <loop+0x228>)
   d4c6c:	781b      	ldrb	r3, [r3, #0]
   d4c6e:	2b06      	cmp	r3, #6
   d4c70:	d001      	beq.n	d4c76 <loop+0x1d6>
   d4c72:	f7ff fcf5 	bl	d4660 <_Z22publishStateTransitionv>
      if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d4c76:	7a2b      	ldrb	r3, [r5, #8]
   d4c78:	b10b      	cbz	r3, d4c7e <loop+0x1de>
   d4c7a:	f7ff fd75 	bl	d4768 <_Z22disconnectFromParticlev>
      int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d4c7e:	f003 fb70 	bl	d8362 <_ZN9TimeClass3nowEv>
   d4c82:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
   d4c86:	fb90 f3f1 	sdiv	r3, r0, r1
   d4c8a:	fb03 0011 	mls	r0, r3, r1, r0
        if (valid_) {
   d4c8e:	4b1f      	ldr	r3, [pc, #124]	; (d4d0c <loop+0x26c>)
   d4c90:	1a08      	subs	r0, r1, r0
   d4c92:	7d1a      	ldrb	r2, [r3, #20]
   d4c94:	4288      	cmp	r0, r1
   d4c96:	bfa8      	it	ge
   d4c98:	4608      	movge	r0, r1
   d4c9a:	b10a      	cbz	r2, d4ca0 <loop+0x200>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4c9c:	2202      	movs	r2, #2
   d4c9e:	721a      	strb	r2, [r3, #8]
      .duration(wakeInSeconds*1000);
   d4ca0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4ca4:	4341      	muls	r1, r0
   d4ca6:	4819      	ldr	r0, [pc, #100]	; (d4d0c <loop+0x26c>)
   d4ca8:	f7ff fa82 	bl	d41b0 <_ZN8particle24SystemSleepConfiguration8durationEm>
      System.sleep(config);
   d4cac:	4917      	ldr	r1, [pc, #92]	; (d4d0c <loop+0x26c>)
   d4cae:	a803      	add	r0, sp, #12
   d4cb0:	f003 f97c 	bl	d7fac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        freeWakeupSourceMemory();
   d4cb4:	a803      	add	r0, sp, #12
   d4cb6:	f7ff fa67 	bl	d4188 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
      state = IDLE_STATE;
   d4cba:	2302      	movs	r3, #2
   d4cbc:	e717      	b.n	d4aee <loop+0x4e>
   d4cbe:	bf00      	nop
   d4cc0:	2003e524 	.word	0x2003e524
   d4cc4:	2003e528 	.word	0x2003e528
   d4cc8:	2003e490 	.word	0x2003e490
   d4ccc:	2003e4cc 	.word	0x2003e4cc
   d4cd0:	2003e411 	.word	0x2003e411
   d4cd4:	000d9657 	.word	0x000d9657
   d4cd8:	000d94c3 	.word	0x000d94c3
   d4cdc:	2003e494 	.word	0x2003e494
   d4ce0:	2003e4d0 	.word	0x2003e4d0
   d4ce4:	2003e5a4 	.word	0x2003e5a4
   d4ce8:	2003e544 	.word	0x2003e544
   d4cec:	2003e450 	.word	0x2003e450
   d4cf0:	2003e4ec 	.word	0x2003e4ec
   d4cf4:	2003e4f0 	.word	0x2003e4f0
   d4cf8:	2003e44c 	.word	0x2003e44c
   d4cfc:	2003e5a8 	.word	0x2003e5a8
   d4d00:	000d9c70 	.word	0x000d9c70
   d4d04:	000d9671 	.word	0x000d9671
   d4d08:	000d968a 	.word	0x000d968a
   d4d0c:	2003e434 	.word	0x2003e434
      if (sysStatus.verboseMode && state != oldState) publishStateTransition();
   d4d10:	4d1a      	ldr	r5, [pc, #104]	; (d4d7c <loop+0x2dc>)
   d4d12:	7a6a      	ldrb	r2, [r5, #9]
   d4d14:	b12a      	cbz	r2, d4d22 <loop+0x282>
   d4d16:	4b1a      	ldr	r3, [pc, #104]	; (d4d80 <loop+0x2e0>)
   d4d18:	781b      	ldrb	r3, [r3, #0]
   d4d1a:	2b07      	cmp	r3, #7
   d4d1c:	d001      	beq.n	d4d22 <loop+0x282>
   d4d1e:	f7ff fc9f 	bl	d4660 <_Z22publishStateTransitionv>
      if (sysStatus.connectedStatus) disconnectFromParticle();          // Disconnect cleanly from Particle
   d4d22:	7a2b      	ldrb	r3, [r5, #8]
   d4d24:	b10b      	cbz	r3, d4d2a <loop+0x28a>
   d4d26:	f7ff fd1f 	bl	d4768 <_Z22disconnectFromParticlev>
      int wakeInSeconds = constrain(wakeBoundary - Time.now() % wakeBoundary, 1, wakeBoundary);
   d4d2a:	f003 fb1a 	bl	d8362 <_ZN9TimeClass3nowEv>
   d4d2e:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
   d4d32:	fb90 f3f1 	sdiv	r3, r0, r1
   d4d36:	fb03 0011 	mls	r0, r3, r1, r0
        if (valid_) {
   d4d3a:	4b12      	ldr	r3, [pc, #72]	; (d4d84 <loop+0x2e4>)
   d4d3c:	1a08      	subs	r0, r1, r0
   d4d3e:	7d1a      	ldrb	r2, [r3, #20]
   d4d40:	4288      	cmp	r0, r1
   d4d42:	bfa8      	it	ge
   d4d44:	4608      	movge	r0, r1
   d4d46:	b10a      	cbz	r2, d4d4c <loop+0x2ac>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4d48:	2202      	movs	r2, #2
   d4d4a:	721a      	strb	r2, [r3, #8]
        .duration(wakeInSeconds*1000);
   d4d4c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d4d50:	4341      	muls	r1, r0
   d4d52:	480c      	ldr	r0, [pc, #48]	; (d4d84 <loop+0x2e4>)
   d4d54:	f7ff fa2c 	bl	d41b0 <_ZN8particle24SystemSleepConfiguration8durationEm>
        System.sleep(config);
   d4d58:	490a      	ldr	r1, [pc, #40]	; (d4d84 <loop+0x2e4>)
   d4d5a:	a803      	add	r0, sp, #12
   d4d5c:	f003 f926 	bl	d7fac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
   d4d60:	a803      	add	r0, sp, #12
   d4d62:	f7ff fa11 	bl	d4188 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
      SystemSleepResult result = System.sleep(config);                   // Put the device to sleep device reboots from here   
   d4d66:	a803      	add	r0, sp, #12
   d4d68:	4906      	ldr	r1, [pc, #24]	; (d4d84 <loop+0x2e4>)
   d4d6a:	f003 f91f 	bl	d7fac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
      state = IDLE_STATE;                                               //  Head back to the idle state to see what to do next
   d4d6e:	2302      	movs	r3, #2
   d4d70:	a803      	add	r0, sp, #12
   d4d72:	7023      	strb	r3, [r4, #0]
   d4d74:	f7ff fa08 	bl	d4188 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
    } break;
   d4d78:	e6da      	b.n	d4b30 <loop+0x90>
   d4d7a:	bf00      	nop
   d4d7c:	2003e528 	.word	0x2003e528
   d4d80:	2003e490 	.word	0x2003e490
   d4d84:	2003e434 	.word	0x2003e434

000d4d88 <setup>:
{
   d4d88:	b5f0      	push	{r4, r5, r6, r7, lr}
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4d8a:	2100      	movs	r1, #0
{
   d4d8c:	b0b9      	sub	sp, #228	; 0xe4
  pinMode(wakeUpPin,INPUT);                                                                 // This pin is active HIGH, 
   d4d8e:	2008      	movs	r0, #8
   d4d90:	f003 fd04 	bl	d879c <pinMode>
  pinMode(donePin,OUTPUT);                                                                  // Allows us to pet the watchdog
   d4d94:	2101      	movs	r1, #1
   d4d96:	2005      	movs	r0, #5
   d4d98:	f003 fd00 	bl	d879c <pinMode>
  pinMode(userSwitch,INPUT);                                                                // Momentary contact button on board for direct user input
   d4d9c:	2100      	movs	r1, #0
   d4d9e:	2004      	movs	r0, #4
   d4da0:	f003 fcfc 	bl	d879c <pinMode>
  petWatchdog();                                                                           // Pet the watchdog - This will reset the watchdog time period AND 
   d4da4:	f7ff fc08 	bl	d45b8 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin, watchdogISR, RISING);                                         // The watchdog timer will signal us and we have to respond
   d4da8:	2300      	movs	r3, #0
   d4daa:	9300      	str	r3, [sp, #0]
   d4dac:	2201      	movs	r2, #1
   d4dae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d4db2:	4994      	ldr	r1, [pc, #592]	; (d5004 <setup+0x27c>)
   d4db4:	2008      	movs	r0, #8
   d4db6:	f002 fdbb 	bl	d7930 <_Z15attachInterrupttPFvvE13InterruptModeah>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4dba:	4b93      	ldr	r3, [pc, #588]	; (d5008 <setup+0x280>)
   d4dbc:	aa08      	add	r2, sp, #32
   d4dbe:	f103 0510 	add.w	r5, r3, #16
   d4dc2:	4616      	mov	r6, r2
   d4dc4:	6818      	ldr	r0, [r3, #0]
   d4dc6:	6859      	ldr	r1, [r3, #4]
   d4dc8:	4614      	mov	r4, r2
   d4dca:	c403      	stmia	r4!, {r0, r1}
   d4dcc:	3308      	adds	r3, #8
   d4dce:	42ab      	cmp	r3, r5
   d4dd0:	4622      	mov	r2, r4
   d4dd2:	d1f7      	bne.n	d4dc4 <setup+0x3c>
   d4dd4:	8819      	ldrh	r1, [r3, #0]
   d4dd6:	789b      	ldrb	r3, [r3, #2]
   d4dd8:	70a3      	strb	r3, [r4, #2]
   d4dda:	8021      	strh	r1, [r4, #0]
   d4ddc:	222d      	movs	r2, #45	; 0x2d
   d4dde:	2100      	movs	r1, #0
  state = IDLE_STATE;
   d4de0:	4c8a      	ldr	r4, [pc, #552]	; (d500c <setup+0x284>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4de2:	f10d 0033 	add.w	r0, sp, #51	; 0x33
   d4de6:	f004 fa1b 	bl	d9220 <memset>
  state = IDLE_STATE;
   d4dea:	2702      	movs	r7, #2
    static String deviceID(void) { return spark_deviceID(); }
   d4dec:	a804      	add	r0, sp, #16
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4dee:	2500      	movs	r5, #0
   d4df0:	7027      	strb	r7, [r4, #0]
   d4df2:	f002 f833 	bl	d6e5c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4df6:	2300      	movs	r3, #0
   d4df8:	227d      	movs	r2, #125	; 0x7d
   d4dfa:	a918      	add	r1, sp, #96	; 0x60
   d4dfc:	a804      	add	r0, sp, #16
   d4dfe:	f003 f874 	bl	d7eea <_ZNK6String8getBytesEPhjj>
   d4e02:	462a      	mov	r2, r5
   d4e04:	4982      	ldr	r1, [pc, #520]	; (d5010 <setup+0x288>)
   d4e06:	462b      	mov	r3, r5
   d4e08:	e9cd 5500 	strd	r5, r5, [sp]
   d4e0c:	a818      	add	r0, sp, #96	; 0x60
   d4e0e:	f002 f835 	bl	d6e7c <spark_subscribe>
  Particle.variable("Release",releaseNumber);
   d4e12:	4b80      	ldr	r3, [pc, #512]	; (d5014 <setup+0x28c>)
        return _variable(varKey, var, STRING);
   d4e14:	4880      	ldr	r0, [pc, #512]	; (d5018 <setup+0x290>)
   d4e16:	6819      	ldr	r1, [r3, #0]
   d4e18:	f7ff f9c5 	bl	d41a6 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e1c:	497f      	ldr	r1, [pc, #508]	; (d501c <setup+0x294>)
   d4e1e:	4880      	ldr	r0, [pc, #512]	; (d5020 <setup+0x298>)
   d4e20:	f7ff f9c1 	bl	d41a6 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e24:	497f      	ldr	r1, [pc, #508]	; (d5024 <setup+0x29c>)
   d4e26:	4880      	ldr	r0, [pc, #512]	; (d5028 <setup+0x2a0>)
   d4e28:	f7ff f9bd 	bl	d41a6 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e2c:	497f      	ldr	r1, [pc, #508]	; (d502c <setup+0x2a4>)
   d4e2e:	4880      	ldr	r0, [pc, #512]	; (d5030 <setup+0x2a8>)
   d4e30:	f7ff f9b9 	bl	d41a6 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e34:	497f      	ldr	r1, [pc, #508]	; (d5034 <setup+0x2ac>)
   d4e36:	4880      	ldr	r0, [pc, #512]	; (d5038 <setup+0x2b0>)
   d4e38:	f7ff f9b5 	bl	d41a6 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e3c:	497f      	ldr	r1, [pc, #508]	; (d503c <setup+0x2b4>)
   d4e3e:	4880      	ldr	r0, [pc, #512]	; (d5040 <setup+0x2b8>)
   d4e40:	f7ff f9b1 	bl	d41a6 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e44:	497f      	ldr	r1, [pc, #508]	; (d5044 <setup+0x2bc>)
   d4e46:	4880      	ldr	r0, [pc, #512]	; (d5048 <setup+0x2c0>)
   d4e48:	f7ff f9ad 	bl	d41a6 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e4c:	497f      	ldr	r1, [pc, #508]	; (d504c <setup+0x2c4>)
   d4e4e:	4880      	ldr	r0, [pc, #512]	; (d5050 <setup+0x2c8>)
   d4e50:	f7ff f9a9 	bl	d41a6 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e54:	497f      	ldr	r1, [pc, #508]	; (d5054 <setup+0x2cc>)
   d4e56:	4880      	ldr	r0, [pc, #512]	; (d5058 <setup+0x2d0>)
   d4e58:	f7ff f9a5 	bl	d41a6 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e5c:	497f      	ldr	r1, [pc, #508]	; (d505c <setup+0x2d4>)
   d4e5e:	4880      	ldr	r0, [pc, #512]	; (d5060 <setup+0x2d8>)
   d4e60:	f7ff f9a1 	bl	d41a6 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e64:	497f      	ldr	r1, [pc, #508]	; (d5064 <setup+0x2dc>)
   d4e66:	4880      	ldr	r0, [pc, #512]	; (d5068 <setup+0x2e0>)
   d4e68:	f7ff f99d 	bl	d41a6 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e6c:	497f      	ldr	r1, [pc, #508]	; (d506c <setup+0x2e4>)
   d4e6e:	4880      	ldr	r0, [pc, #512]	; (d5070 <setup+0x2e8>)
   d4e70:	f7ff f999 	bl	d41a6 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4e74:	497f      	ldr	r1, [pc, #508]	; (d5074 <setup+0x2ec>)
   d4e76:	4880      	ldr	r0, [pc, #512]	; (d5078 <setup+0x2f0>)
   d4e78:	f7ff f995 	bl	d41a6 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d4e7c:	497f      	ldr	r1, [pc, #508]	; (d507c <setup+0x2f4>)
   d4e7e:	4880      	ldr	r0, [pc, #512]	; (d5080 <setup+0x2f8>)
   d4e80:	462b      	mov	r3, r5
   d4e82:	463a      	mov	r2, r7
   d4e84:	f001 ffc2 	bl	d6e0c <spark_variable>
   d4e88:	462b      	mov	r3, r5
   d4e8a:	497e      	ldr	r1, [pc, #504]	; (d5084 <setup+0x2fc>)
   d4e8c:	487e      	ldr	r0, [pc, #504]	; (d5088 <setup+0x300>)
   d4e8e:	2201      	movs	r2, #1
   d4e90:	f001 ffbc 	bl	d6e0c <spark_variable>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d4e94:	4a7d      	ldr	r2, [pc, #500]	; (d508c <setup+0x304>)
   d4e96:	497e      	ldr	r1, [pc, #504]	; (d5090 <setup+0x308>)
   d4e98:	487e      	ldr	r0, [pc, #504]	; (d5094 <setup+0x30c>)
   d4e9a:	f002 f9d4 	bl	d7246 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4e9e:	4a7e      	ldr	r2, [pc, #504]	; (d5098 <setup+0x310>)
   d4ea0:	497e      	ldr	r1, [pc, #504]	; (d509c <setup+0x314>)
   d4ea2:	487c      	ldr	r0, [pc, #496]	; (d5094 <setup+0x30c>)
   d4ea4:	f002 f9cf 	bl	d7246 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4ea8:	4a7d      	ldr	r2, [pc, #500]	; (d50a0 <setup+0x318>)
   d4eaa:	497e      	ldr	r1, [pc, #504]	; (d50a4 <setup+0x31c>)
   d4eac:	4879      	ldr	r0, [pc, #484]	; (d5094 <setup+0x30c>)
   d4eae:	f002 f9ca 	bl	d7246 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d4eb2:	4a75      	ldr	r2, [pc, #468]	; (d5088 <setup+0x300>)
   d4eb4:	497c      	ldr	r1, [pc, #496]	; (d50a8 <setup+0x320>)
   d4eb6:	4877      	ldr	r0, [pc, #476]	; (d5094 <setup+0x30c>)
   d4eb8:	f002 f9c5 	bl	d7246 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  rtc.setup();                                                                            // Start the real time clock
   d4ebc:	487b      	ldr	r0, [pc, #492]	; (d50ac <setup+0x324>)
   d4ebe:	f001 f8bd 	bl	d603c <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                                       // Ensures alarm is still not set from last cycle
   d4ec2:	4629      	mov	r1, r5
   d4ec4:	4879      	ldr	r0, [pc, #484]	; (d50ac <setup+0x324>)
   d4ec6:	f001 f9f6 	bl	d62b6 <_ZN8MCP7941010clearAlarmEi>
  if (! sht31.begin(0x44)) {                                                                      // Start the BME680 Sensor
   d4eca:	4879      	ldr	r0, [pc, #484]	; (d50b0 <setup+0x328>)
   d4ecc:	2144      	movs	r1, #68	; 0x44
   d4ece:	f000 fc72 	bl	d57b6 <_ZN14Adafruit_SHT315beginEh>
   d4ed2:	b948      	cbnz	r0, d4ee8 <setup+0x160>
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d4ed4:	4977      	ldr	r1, [pc, #476]	; (d50b4 <setup+0x32c>)
   d4ed6:	4630      	mov	r0, r6
   d4ed8:	f004 f9d8 	bl	d928c <strcpy>
    state = ERROR_STATE;
   d4edc:	2301      	movs	r3, #1
   d4ede:	7023      	strb	r3, [r4, #0]
   d4ee0:	f001 fdb2 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4ee4:	4b74      	ldr	r3, [pc, #464]	; (d50b8 <setup+0x330>)
   d4ee6:	6018      	str	r0, [r3, #0]
  if (!veml.begin()) {                                                                      // Start the BME680 Sensor
   d4ee8:	f003 fcac 	bl	d8844 <_Z19__fetch_global_Wirev>
   d4eec:	4601      	mov	r1, r0
   d4eee:	4873      	ldr	r0, [pc, #460]	; (d50bc <setup+0x334>)
   d4ef0:	f000 fb49 	bl	d5586 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
   d4ef4:	b960      	cbnz	r0, d4f10 <setup+0x188>
   d4ef6:	f001 fda7 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4efa:	4d6f      	ldr	r5, [pc, #444]	; (d50b8 <setup+0x330>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - VEML Initialization");
   d4efc:	4970      	ldr	r1, [pc, #448]	; (d50c0 <setup+0x338>)
    resetTimeStamp = millis();
   d4efe:	6028      	str	r0, [r5, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - VEML Initialization");
   d4f00:	4630      	mov	r0, r6
   d4f02:	f004 f9c3 	bl	d928c <strcpy>
    state = ERROR_STATE;
   d4f06:	2301      	movs	r3, #1
   d4f08:	7023      	strb	r3, [r4, #0]
   d4f0a:	f001 fd9d 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d4f0e:	6028      	str	r0, [r5, #0]
  veml.setGain(VEML7700_GAIN_1/8); 
   d4f10:	486a      	ldr	r0, [pc, #424]	; (d50bc <setup+0x334>)
   d4f12:	2100      	movs	r1, #0
   d4f14:	f000 faae 	bl	d5474 <_ZN17Adafruit_VEML77007setGainEh>
  veml.setIntegrationTime(VEML7700_IT_25MS);
   d4f18:	210c      	movs	r1, #12
   d4f1a:	4868      	ldr	r0, [pc, #416]	; (d50bc <setup+0x334>)
   d4f1c:	f000 faa1 	bl	d5462 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  veml.getGain();
   d4f20:	4866      	ldr	r0, [pc, #408]	; (d50bc <setup+0x334>)
   d4f22:	f000 faaa 	bl	d547a <_ZN17Adafruit_VEML77007getGainEv>
  veml.getIntegrationTime();
   d4f26:	4865      	ldr	r0, [pc, #404]	; (d50bc <setup+0x334>)
   d4f28:	f000 fa9e 	bl	d5468 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
  veml.setLowThreshold(10000);
   d4f2c:	4863      	ldr	r0, [pc, #396]	; (d50bc <setup+0x334>)
   d4f2e:	f242 7110 	movw	r1, #10000	; 0x2710
   d4f32:	f000 fc11 	bl	d5758 <_ZN17Adafruit_VEML770015setLowThresholdEt>
  veml.setHighThreshold(20000);
   d4f36:	4861      	ldr	r0, [pc, #388]	; (d50bc <setup+0x334>)
   d4f38:	f644 6120 	movw	r1, #20000	; 0x4e20
   d4f3c:	f000 fc10 	bl	d5760 <_ZN17Adafruit_VEML770016setHighThresholdEt>
  veml.interruptEnable(true);
   d4f40:	2101      	movs	r1, #1
   d4f42:	485e      	ldr	r0, [pc, #376]	; (d50bc <setup+0x334>)
   d4f44:	f000 fa87 	bl	d5456 <_ZN17Adafruit_VEML770015interruptEnableEb>
  fram.begin();                                                                             // Initialize the FRAM module
   d4f48:	485e      	ldr	r0, [pc, #376]	; (d50c4 <setup+0x33c>)
   d4f4a:	f000 fd13 	bl	d5974 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4f4e:	2301      	movs	r3, #1
   d4f50:	485c      	ldr	r0, [pc, #368]	; (d50c4 <setup+0x33c>)
   d4f52:	f10d 020f 	add.w	r2, sp, #15
   d4f56:	2100      	movs	r1, #0
   d4f58:	f000 fd4e 	bl	d59f8 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                                                   // Check to see if the memory map in the sketch matches the data on the chip
   d4f5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d4f60:	2b04      	cmp	r3, #4
   d4f62:	d025      	beq.n	d4fb0 <setup+0x228>
    fram.erase();                                                                           // Reset the FRAM to correct the issue
   d4f64:	4857      	ldr	r0, [pc, #348]	; (d50c4 <setup+0x33c>)
   d4f66:	f000 fd0f 	bl	d5988 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d4f6a:	4a57      	ldr	r2, [pc, #348]	; (d50c8 <setup+0x340>)
   d4f6c:	4855      	ldr	r0, [pc, #340]	; (d50c4 <setup+0x33c>)
   d4f6e:	2304      	movs	r3, #4
   d4f70:	2100      	movs	r1, #0
   d4f72:	f000 fd8c 	bl	d5a8e <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4f76:	2301      	movs	r3, #1
   d4f78:	4852      	ldr	r0, [pc, #328]	; (d50c4 <setup+0x33c>)
   d4f7a:	f10d 020f 	add.w	r2, sp, #15
   d4f7e:	2100      	movs	r1, #0
   d4f80:	f000 fd3a 	bl	d59f8 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) state = ERROR_STATE;                              // Device will not work without FRAM
   d4f84:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d4f88:	2b04      	cmp	r3, #4
   d4f8a:	d00e      	beq.n	d4faa <setup+0x222>
   d4f8c:	2301      	movs	r3, #1
   d4f8e:	7023      	strb	r3, [r4, #0]
  if (sysStatus.thirdPartySim) {
   d4f90:	4d4e      	ldr	r5, [pc, #312]	; (d50cc <setup+0x344>)
  checkSystemValues();                                                                      // Make sure System values are all in valid range
   d4f92:	f7ff fae7 	bl	d4564 <_Z17checkSystemValuesv>
  connectToParticle();
   d4f96:	f7ff fb95 	bl	d46c4 <_Z17connectToParticlev>
  if (sysStatus.thirdPartySim) {
   d4f9a:	786b      	ldrb	r3, [r5, #1]
   d4f9c:	b1a3      	cbz	r3, d4fc8 <setup+0x240>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4f9e:	f001 ff55 	bl	d6e4c <spark_cloud_flag_connected>
        while (_while() && !_condition()) {
   d4fa2:	b960      	cbnz	r0, d4fbe <setup+0x236>
            spark_process();
   d4fa4:	f001 ff42 	bl	d6e2c <spark_process>
        while (_while() && !_condition()) {
   d4fa8:	e7f9      	b.n	d4f9e <setup+0x216>
      loadSystemDefaults();                                                                 // Out of the box, we need the device to be awake and connected
   d4faa:	f7ff faaf 	bl	d450c <_Z18loadSystemDefaultsv>
   d4fae:	e7ef      	b.n	d4f90 <setup+0x208>
   d4fb0:	4a46      	ldr	r2, [pc, #280]	; (d50cc <setup+0x344>)
   d4fb2:	4844      	ldr	r0, [pc, #272]	; (d50c4 <setup+0x33c>)
   d4fb4:	231c      	movs	r3, #28
   d4fb6:	2101      	movs	r1, #1
   d4fb8:	f000 fd1e 	bl	d59f8 <_ZN6MB85RC8readDataEjPhj>
        return t;
   d4fbc:	e7e8      	b.n	d4f90 <setup+0x208>
   d4fbe:	f001 ff45 	bl	d6e4c <spark_cloud_flag_connected>
    Particle.keepAlive(sysStatus.keepAlive);                                                    // Set the keep alive value
   d4fc2:	6868      	ldr	r0, [r5, #4]
   d4fc4:	f7ff f91e 	bl	d4204 <_ZN10CloudClass9keepAliveEj>
  if (!digitalRead(userSwitch)) loadSystemDefaults();                                       // Make sure the device wakes up and connects
   d4fc8:	2004      	movs	r0, #4
   d4fca:	f003 fbf8 	bl	d87be <digitalRead>
   d4fce:	b908      	cbnz	r0, d4fd4 <setup+0x24c>
   d4fd0:	f7ff fa9c 	bl	d450c <_Z18loadSystemDefaultsv>
  takeMeasurements();                                                                       // For the benefit of monitoring the device
   d4fd4:	f7ff fc62 	bl	d489c <_Z16takeMeasurementsv>
  if(sysStatus.verboseMode) publishQueue.publish("Startup",StartupMessage,PRIVATE);                       // Let Particle know how the startup process went
   d4fd8:	7a6b      	ldrb	r3, [r5, #9]
   d4fda:	b14b      	cbz	r3, d4ff0 <setup+0x268>
   d4fdc:	2300      	movs	r3, #0
   d4fde:	f88d 3000 	strb.w	r3, [sp]
   d4fe2:	4b3b      	ldr	r3, [pc, #236]	; (d50d0 <setup+0x348>)
   d4fe4:	493b      	ldr	r1, [pc, #236]	; (d50d4 <setup+0x34c>)
   d4fe6:	781b      	ldrb	r3, [r3, #0]
   d4fe8:	483b      	ldr	r0, [pc, #236]	; (d50d8 <setup+0x350>)
   d4fea:	4632      	mov	r2, r6
   d4fec:	f7ff f988 	bl	d4300 <_ZN21PublishQueueAsyncBase7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_>
  if (state == INITIALIZATION_STATE) state = IDLE_STATE;                                    // We made it throughgo let's go to idle
   d4ff0:	7823      	ldrb	r3, [r4, #0]
   d4ff2:	b90b      	cbnz	r3, d4ff8 <setup+0x270>
   d4ff4:	2302      	movs	r3, #2
   d4ff6:	7023      	strb	r3, [r4, #0]
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d4ff8:	a804      	add	r0, sp, #16
   d4ffa:	f002 feeb 	bl	d7dd4 <_ZN6StringD1Ev>
}
   d4ffe:	b039      	add	sp, #228	; 0xe4
   d5000:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d5002:	bf00      	nop
   d5004:	000d40c9 	.word	0x000d40c9
   d5008:	000d97f0 	.word	0x000d97f0
   d500c:	2003e524 	.word	0x2003e524
   d5010:	000d431d 	.word	0x000d431d
   d5014:	2003e26c 	.word	0x2003e26c
   d5018:	000d969e 	.word	0x000d969e
   d501c:	2003e545 	.word	0x2003e545
   d5020:	000d96a6 	.word	0x000d96a6
   d5024:	2003e460 	.word	0x2003e460
   d5028:	000d96b2 	.word	0x000d96b2
   d502c:	2003e480 	.word	0x2003e480
   d5030:	000d96bb 	.word	0x000d96bb
   d5034:	2003e5ac 	.word	0x2003e5ac
   d5038:	000d96bf 	.word	0x000d96bf
   d503c:	2003e3b4 	.word	0x2003e3b4
   d5040:	000d96c5 	.word	0x000d96c5
   d5044:	2003e594 	.word	0x2003e594
   d5048:	000d96cd 	.word	0x000d96cd
   d504c:	2003e470 	.word	0x2003e470
   d5050:	000d96d6 	.word	0x000d96d6
   d5054:	2003e3c4 	.word	0x2003e3c4
   d5058:	000d96df 	.word	0x000d96df
   d505c:	2003e3d4 	.word	0x2003e3d4
   d5060:	000d96e5 	.word	0x000d96e5
   d5064:	2003e3e4 	.word	0x2003e3e4
   d5068:	000d96ec 	.word	0x000d96ec
   d506c:	2003e422 	.word	0x2003e422
   d5070:	000d96f8 	.word	0x000d96f8
   d5074:	2003e412 	.word	0x2003e412
   d5078:	000d9700 	.word	0x000d9700
   d507c:	2003e52c 	.word	0x2003e52c
   d5080:	000d970f 	.word	0x000d970f
   d5084:	2003e529 	.word	0x2003e529
   d5088:	000d94f6 	.word	0x000d94f6
   d508c:	000d971e 	.word	0x000d971e
   d5090:	000d4105 	.word	0x000d4105
   d5094:	000d721b 	.word	0x000d721b
   d5098:	000d972a 	.word	0x000d972a
   d509c:	000d439d 	.word	0x000d439d
   d50a0:	000d9531 	.word	0x000d9531
   d50a4:	000d44a5 	.word	0x000d44a5
   d50a8:	000d441d 	.word	0x000d441d
   d50ac:	2003e4d0 	.word	0x2003e4d0
   d50b0:	2003e518 	.word	0x2003e518
   d50b4:	000d9737 	.word	0x000d9737
   d50b8:	2003e4cc 	.word	0x2003e4cc
   d50bc:	2003e558 	.word	0x2003e558
   d50c0:	000d9754 	.word	0x000d9754
   d50c4:	2003e450 	.word	0x2003e450
   d50c8:	000d9830 	.word	0x000d9830
   d50cc:	2003e528 	.word	0x2003e528
   d50d0:	2003e411 	.word	0x2003e411
   d50d4:	000d9770 	.word	0x000d9770
   d50d8:	2003e494 	.word	0x2003e494

000d50dc <_GLOBAL__sub_I___appProductID>:
   d50dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        val_(val) {
   d50de:	4b39      	ldr	r3, [pc, #228]	; (d51c4 <_GLOBAL__sub_I___appProductID+0xe8>)
              error_(SYSTEM_ERROR_NONE) {
   d50e0:	4e39      	ldr	r6, [pc, #228]	; (d51c8 <_GLOBAL__sub_I___appProductID+0xec>)
   d50e2:	2701      	movs	r7, #1
   d50e4:	701f      	strb	r7, [r3, #0]
   d50e6:	4b39      	ldr	r3, [pc, #228]	; (d51cc <_GLOBAL__sub_I___appProductID+0xf0>)
   d50e8:	2502      	movs	r5, #2
   d50ea:	701d      	strb	r5, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d50ec:	f003 fb00 	bl	d86f0 <spark_protocol_instance>
   d50f0:	2300      	movs	r3, #0
   d50f2:	461a      	mov	r2, r3
   d50f4:	f642 7198 	movw	r1, #12184	; 0x2f98
   d50f8:	f003 fb02 	bl	d8700 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d50fc:	f003 faf8 	bl	d86f0 <spark_protocol_instance>
   d5100:	2300      	movs	r3, #0
   d5102:	461a      	mov	r2, r3
   d5104:	210e      	movs	r1, #14
   d5106:	f003 fb03 	bl	d8710 <spark_protocol_set_product_firmware_version>
   d510a:	2400      	movs	r4, #0
    SleepResult() {}
   d510c:	4b30      	ldr	r3, [pc, #192]	; (d51d0 <_GLOBAL__sub_I___appProductID+0xf4>)
   d510e:	60b3      	str	r3, [r6, #8]
        set_system_mode(mode);
   d5110:	4628      	mov	r0, r5
SYSTEM_MODE(SEMI_AUTOMATIC);                                                                     // This will enable user code to start executing automatically.
   d5112:	4d30      	ldr	r5, [pc, #192]	; (d51d4 <_GLOBAL__sub_I___appProductID+0xf8>)
              error_(SYSTEM_ERROR_NONE) {
   d5114:	6034      	str	r4, [r6, #0]
   d5116:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
   d5118:	71b4      	strb	r4, [r6, #6]
        set_system_mode(mode);
   d511a:	f001 fe17 	bl	d6d4c <set_system_mode>
   d511e:	462a      	mov	r2, r5
   d5120:	492d      	ldr	r1, [pc, #180]	; (d51d8 <_GLOBAL__sub_I___appProductID+0xfc>)
   d5122:	4630      	mov	r0, r6
   d5124:	f003 fbde 	bl	d88e4 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                     // Means my code will not be held up by Particle processes.
   d5128:	4621      	mov	r1, r4
   d512a:	4638      	mov	r0, r7
   d512c:	f001 fe1e 	bl	d6d6c <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d5130:	4639      	mov	r1, r7
   d5132:	2004      	movs	r0, #4
   d5134:	f001 fc68 	bl	d6a08 <HAL_Feature_Set>
        : config_(config) {
   d5138:	4828      	ldr	r0, [pc, #160]	; (d51dc <_GLOBAL__sub_I___appProductID+0x100>)
SystemSleepConfiguration config;                                                            // Initialize new Sleep 2.0 Api
   d513a:	4929      	ldr	r1, [pc, #164]	; (d51e0 <_GLOBAL__sub_I___appProductID+0x104>)
              valid_(true) {
   d513c:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d5140:	4603      	mov	r3, r0
   d5142:	1d02      	adds	r2, r0, #4
   d5144:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d5148:	709c      	strb	r4, [r3, #2]
        config_.size = sizeof(hal_sleep_config_t);
   d514a:	4b26      	ldr	r3, [pc, #152]	; (d51e4 <_GLOBAL__sub_I___appProductID+0x108>)
   d514c:	6043      	str	r3, [r0, #4]
   d514e:	462a      	mov	r2, r5
        config_.wakeup_sources = nullptr;
   d5150:	e9c0 4403 	strd	r4, r4, [r0, #12]
              valid_(true) {
   d5154:	7507      	strb	r7, [r0, #20]
        config_.mode = HAL_SLEEP_MODE_NONE;
   d5156:	7204      	strb	r4, [r0, #8]
   d5158:	f003 fbc4 	bl	d88e4 <__aeabi_atexit>
Adafruit_VEML7700 veml;
   d515c:	4822      	ldr	r0, [pc, #136]	; (d51e8 <_GLOBAL__sub_I___appProductID+0x10c>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d515e:	4e23      	ldr	r6, [pc, #140]	; (d51ec <_GLOBAL__sub_I___appProductID+0x110>)
   d5160:	f000 f96d 	bl	d543e <_ZN17Adafruit_VEML7700C1Ev>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d5164:	4822      	ldr	r0, [pc, #136]	; (d51f0 <_GLOBAL__sub_I___appProductID+0x114>)
   d5166:	f000 fb03 	bl	d5770 <_ZN14Adafruit_SHT31C1Ev>
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d516a:	f003 fb6b 	bl	d8844 <_Z19__fetch_global_Wirev>
   d516e:	4623      	mov	r3, r4
   d5170:	4601      	mov	r1, r0
   d5172:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d5176:	4630      	mov	r0, r6
   d5178:	f000 fbf2 	bl	d5960 <_ZN6MB85RCC1ER7TwoWireji>
   d517c:	4b1d      	ldr	r3, [pc, #116]	; (d51f4 <_GLOBAL__sub_I___appProductID+0x118>)
   d517e:	6033      	str	r3, [r6, #0]
   d5180:	462a      	mov	r2, r5
   d5182:	491d      	ldr	r1, [pc, #116]	; (d51f8 <_GLOBAL__sub_I___appProductID+0x11c>)
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d5184:	4c1d      	ldr	r4, [pc, #116]	; (d51fc <_GLOBAL__sub_I___appProductID+0x120>)
MB85RC64 fram(Wire, 0);                                                                     // Rickkas' FRAM library
   d5186:	4630      	mov	r0, r6
   d5188:	f003 fbac 	bl	d88e4 <__aeabi_atexit>
MCP79410 rtc;                                                                               // Rickkas MCP79410 libarary
   d518c:	f003 fb5a 	bl	d8844 <_Z19__fetch_global_Wirev>
   d5190:	4601      	mov	r1, r0
   d5192:	4620      	mov	r0, r4
   d5194:	f000 fe5a 	bl	d5e4c <_ZN8MCP79410C1ER7TwoWire>
   d5198:	4620      	mov	r0, r4
	PublishQueueAsync(uint8_t *retainedBuffer, uint16_t retainedBufferSize) : PublishQueueAsyncRetained(retainedBuffer, retainedBufferSize) {};
   d519a:	4c19      	ldr	r4, [pc, #100]	; (d5200 <_GLOBAL__sub_I___appProductID+0x124>)
   d519c:	4919      	ldr	r1, [pc, #100]	; (d5204 <_GLOBAL__sub_I___appProductID+0x128>)
   d519e:	462a      	mov	r2, r5
   d51a0:	f003 fba0 	bl	d88e4 <__aeabi_atexit>
   d51a4:	4918      	ldr	r1, [pc, #96]	; (d5208 <_GLOBAL__sub_I___appProductID+0x12c>)
   d51a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   d51aa:	4620      	mov	r0, r4
   d51ac:	f001 face 	bl	d674c <_ZN25PublishQueueAsyncRetainedC1EPht>
   d51b0:	4b16      	ldr	r3, [pc, #88]	; (d520c <_GLOBAL__sub_I___appProductID+0x130>)
   d51b2:	6023      	str	r3, [r4, #0]
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d51b4:	462a      	mov	r2, r5
   d51b6:	4620      	mov	r0, r4
   d51b8:	4915      	ldr	r1, [pc, #84]	; (d5210 <_GLOBAL__sub_I___appProductID+0x134>)
   d51ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
PublishQueueAsync publishQueue(publishQueueRetainedBuffer, sizeof(publishQueueRetainedBuffer));
   d51be:	f003 bb91 	b.w	d88e4 <__aeabi_atexit>
   d51c2:	bf00      	nop
   d51c4:	2003e411 	.word	0x2003e411
   d51c8:	2003e404 	.word	0x2003e404
   d51cc:	2003e410 	.word	0x2003e410
   d51d0:	ffff0000 	.word	0xffff0000
   d51d4:	2003e3a8 	.word	0x2003e3a8
   d51d8:	000d419b 	.word	0x000d419b
   d51dc:	2003e434 	.word	0x2003e434
   d51e0:	000d4121 	.word	0x000d4121
   d51e4:	00030010 	.word	0x00030010
   d51e8:	2003e558 	.word	0x2003e558
   d51ec:	2003e450 	.word	0x2003e450
   d51f0:	2003e518 	.word	0x2003e518
   d51f4:	000d97a8 	.word	0x000d97a8
   d51f8:	000d4161 	.word	0x000d4161
   d51fc:	2003e4d0 	.word	0x2003e4d0
   d5200:	2003e494 	.word	0x2003e494
   d5204:	000d5bd7 	.word	0x000d5bd7
   d5208:	2003f400 	.word	0x2003f400
   d520c:	000d9780 	.word	0x000d9780
   d5210:	000d4139 	.word	0x000d4139

000d5214 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:

//#define DEBUG_SERIAL Serial

Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d5214:	6042      	str	r2, [r0, #4]
  _begun = false;
   d5216:	2200      	movs	r2, #0
  _addr = addr;
   d5218:	7001      	strb	r1, [r0, #0]
  _begun = false;
   d521a:	7202      	strb	r2, [r0, #8]
}
   d521c:	4770      	bx	lr

000d521e <_ZN18Adafruit_I2CDevice8detectedEv>:
  _begun = true;

  return detected();
}

bool Adafruit_I2CDevice::detected(void) {
   d521e:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d5220:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d5222:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d5224:	b153      	cbz	r3, d523c <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d5226:	7821      	ldrb	r1, [r4, #0]
   d5228:	6860      	ldr	r0, [r4, #4]
   d522a:	f002 fb47 	bl	d78bc <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission () == 0) {
   d522e:	6860      	ldr	r0, [r4, #4]
   d5230:	f002 fb67 	bl	d7902 <_ZN7TwoWire15endTransmissionEv>
   d5234:	fab0 f080 	clz	r0, r0
   d5238:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   d523a:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d523c:	f000 f803 	bl	d5246 <_ZN18Adafruit_I2CDevice5beginEv>
   d5240:	2800      	cmp	r0, #0
   d5242:	d1f0      	bne.n	d5226 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d5244:	e7f9      	b.n	d523a <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d5246 <_ZN18Adafruit_I2CDevice5beginEv>:
bool Adafruit_I2CDevice::begin(void) {
   d5246:	b510      	push	{r4, lr}
   d5248:	4604      	mov	r4, r0
  _wire->begin();
   d524a:	6840      	ldr	r0, [r0, #4]
   d524c:	f002 fb04 	bl	d7858 <_ZN7TwoWire5beginEv>
  _begun = true;
   d5250:	2301      	movs	r3, #1
   d5252:	7223      	strb	r3, [r4, #8]
  return detected();
   d5254:	4620      	mov	r0, r4
}
   d5256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return detected();
   d525a:	f7ff bfe0 	b.w	d521e <_ZN18Adafruit_I2CDevice8detectedEv>

000d525e <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>:

bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   d525e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d5262:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d5266:	461f      	mov	r7, r3
  if ((len+prefix_len) > 32) {
   d5268:	1993      	adds	r3, r2, r6
   d526a:	2b20      	cmp	r3, #32
bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   d526c:	4604      	mov	r4, r0
   d526e:	4688      	mov	r8, r1
   d5270:	4615      	mov	r5, r2
  if ((len+prefix_len) > 32) {
   d5272:	d902      	bls.n	d527a <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x1c>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d5274:	2000      	movs	r0, #0
  DEBUG_SERIAL.println();
#endif


  return (_wire -> endTransmission(stop) == 0);
}
   d5276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d527a:	7801      	ldrb	r1, [r0, #0]
   d527c:	6840      	ldr	r0, [r0, #4]
   d527e:	f002 fb1d 	bl	d78bc <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d5282:	b97e      	cbnz	r6, d52a4 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x46>
  if (_wire->write(buffer, len) != len) {
   d5284:	6860      	ldr	r0, [r4, #4]
   d5286:	6803      	ldr	r3, [r0, #0]
   d5288:	462a      	mov	r2, r5
   d528a:	68db      	ldr	r3, [r3, #12]
   d528c:	4641      	mov	r1, r8
   d528e:	4798      	blx	r3
   d5290:	4285      	cmp	r5, r0
   d5292:	d1ef      	bne.n	d5274 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
  return (_wire -> endTransmission(stop) == 0);
   d5294:	6860      	ldr	r0, [r4, #4]
   d5296:	4639      	mov	r1, r7
   d5298:	f002 fb2f 	bl	d78fa <_ZN7TwoWire15endTransmissionEh>
   d529c:	fab0 f080 	clz	r0, r0
   d52a0:	0940      	lsrs	r0, r0, #5
   d52a2:	e7e8      	b.n	d5276 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x18>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d52a4:	f1b9 0f00 	cmp.w	r9, #0
   d52a8:	d0ec      	beq.n	d5284 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>
   d52aa:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d52ac:	6803      	ldr	r3, [r0, #0]
   d52ae:	4632      	mov	r2, r6
   d52b0:	68db      	ldr	r3, [r3, #12]
   d52b2:	4649      	mov	r1, r9
   d52b4:	4798      	blx	r3
   d52b6:	42b0      	cmp	r0, r6
   d52b8:	d1dc      	bne.n	d5274 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
   d52ba:	e7e3      	b.n	d5284 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>

000d52bc <_ZN18Adafruit_I2CDevice4readEPhjb>:

bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  if (len > 32) {
   d52bc:	2a20      	cmp	r2, #32
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d52be:	b570      	push	{r4, r5, r6, lr}
   d52c0:	4606      	mov	r6, r0
   d52c2:	460c      	mov	r4, r1
   d52c4:	4615      	mov	r5, r2
  if (len > 32) {
   d52c6:	d80f      	bhi.n	d52e8 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
    DEBUG_SERIAL.println(F("\tI2CDevice could not read such a large buffer"));
#endif
    return false;
  }

  if (_wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop) != len) {
   d52c8:	7801      	ldrb	r1, [r0, #0]
   d52ca:	6840      	ldr	r0, [r0, #4]
   d52cc:	f002 fae1 	bl	d7892 <_ZN7TwoWire11requestFromEhjh>
   d52d0:	42a8      	cmp	r0, r5
   d52d2:	d109      	bne.n	d52e8 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
   d52d4:	1825      	adds	r5, r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice did not receive enough data"));
#endif
    return false;
  }

  for (uint16_t i=0; i<len; i++) {
   d52d6:	42a5      	cmp	r5, r4
   d52d8:	d008      	beq.n	d52ec <_ZN18Adafruit_I2CDevice4readEPhjb+0x30>
    buffer[i] = _wire->read();
   d52da:	6870      	ldr	r0, [r6, #4]
   d52dc:	6803      	ldr	r3, [r0, #0]
   d52de:	695b      	ldr	r3, [r3, #20]
   d52e0:	4798      	blx	r3
   d52e2:	f804 0b01 	strb.w	r0, [r4], #1
  for (uint16_t i=0; i<len; i++) {
   d52e6:	e7f6      	b.n	d52d6 <_ZN18Adafruit_I2CDevice4readEPhjb+0x1a>
    return false;
   d52e8:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d52ea:	bd70      	pop	{r4, r5, r6, pc}
   d52ec:	2001      	movs	r0, #1
   d52ee:	e7fc      	b.n	d52ea <_ZN18Adafruit_I2CDevice4readEPhjb+0x2e>

000d52f0 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>:


bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   d52f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d52f2:	461d      	mov	r5, r3
  if (! write(write_buffer, write_len, stop)) {
   d52f4:	2300      	movs	r3, #0
   d52f6:	e9cd 3300 	strd	r3, r3, [sp]
   d52fa:	f89d 301c 	ldrb.w	r3, [sp, #28]
bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   d52fe:	9e06      	ldr	r6, [sp, #24]
   d5300:	4604      	mov	r4, r0
  if (! write(write_buffer, write_len, stop)) {
   d5302:	f7ff ffac 	bl	d525e <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
   d5306:	b140      	cbz	r0, d531a <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb+0x2a>
    return false;
  }
  
  return read(read_buffer, read_len);
   d5308:	2301      	movs	r3, #1
   d530a:	4632      	mov	r2, r6
   d530c:	4629      	mov	r1, r5
   d530e:	4620      	mov	r0, r4
}
   d5310:	b002      	add	sp, #8
   d5312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d5316:	f7ff bfd1 	b.w	d52bc <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d531a:	b002      	add	sp, #8
   d531c:	bd70      	pop	{r4, r5, r6, pc}

000d531e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>:
#include "Adafruit_I2CRegister.h"

Adafruit_I2CRegister::Adafruit_I2CRegister(Adafruit_I2CDevice *device, uint16_t reg_addr, uint8_t width, uint8_t bitorder, uint8_t address_width) {
   d531e:	b510      	push	{r4, lr}
  _device = device;
   d5320:	6001      	str	r1, [r0, #0]
  _addrwidth = address_width;
  _address = reg_addr;
   d5322:	8082      	strh	r2, [r0, #4]
  _addrwidth = address_width;
   d5324:	f89d 100c 	ldrb.w	r1, [sp, #12]
  _bitorder = bitorder;
   d5328:	f89d 2008 	ldrb.w	r2, [sp, #8]
  _addrwidth = address_width;
   d532c:	71c1      	strb	r1, [r0, #7]
  _bitorder = bitorder;
   d532e:	7202      	strb	r2, [r0, #8]
  _width = width;
   d5330:	7183      	strb	r3, [r0, #6]
}
   d5332:	bd10      	pop	{r4, pc}

000d5334 <_ZN20Adafruit_I2CRegister5writeEPhh>:


bool Adafruit_I2CRegister::write(uint8_t *buffer, uint8_t len) {
   d5334:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF), (uint8_t)(_address>>8)};
   d5336:	8883      	ldrh	r3, [r0, #4]
   d5338:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (! _device->write(buffer, len, true, addrbuffer, _addrwidth)) {
   d533c:	79c3      	ldrb	r3, [r0, #7]
   d533e:	9301      	str	r3, [sp, #4]
   d5340:	ab03      	add	r3, sp, #12
   d5342:	9300      	str	r3, [sp, #0]
   d5344:	6800      	ldr	r0, [r0, #0]
   d5346:	2301      	movs	r3, #1
   d5348:	f7ff ff89 	bl	d525e <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
    return false;
  }
  return true;
}
   d534c:	b005      	add	sp, #20
   d534e:	f85d fb04 	ldr.w	pc, [sp], #4

000d5352 <_ZN20Adafruit_I2CRegister5writeEmh>:

bool Adafruit_I2CRegister::write(uint32_t value, uint8_t numbytes) {
   d5352:	b4f0      	push	{r4, r5, r6, r7}
   d5354:	460c      	mov	r4, r1
  if (numbytes == 0) {
   d5356:	b902      	cbnz	r2, d535a <_ZN20Adafruit_I2CRegister5writeEmh+0x8>
    numbytes = _width;
   d5358:	7982      	ldrb	r2, [r0, #6]
  }
  if (numbytes > 4) {
   d535a:	2a04      	cmp	r2, #4
   d535c:	d813      	bhi.n	d5386 <_ZN20Adafruit_I2CRegister5writeEmh+0x34>
   d535e:	f100 0509 	add.w	r5, r0, #9
   d5362:	1883      	adds	r3, r0, r2
   d5364:	4629      	mov	r1, r5
    return false;
  }

  for (int i=0; i<numbytes; i++) {
   d5366:	4283      	cmp	r3, r0
   d5368:	d009      	beq.n	d537e <_ZN20Adafruit_I2CRegister5writeEmh+0x2c>
    if (_bitorder == LSBFIRST) {
   d536a:	7a07      	ldrb	r7, [r0, #8]
   d536c:	b2e6      	uxtb	r6, r4
   d536e:	b927      	cbnz	r7, d537a <_ZN20Adafruit_I2CRegister5writeEmh+0x28>
      _buffer[i] = value & 0xFF;
   d5370:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes-i-1] = value & 0xFF;
    }
    value >>= 8;
   d5372:	0a24      	lsrs	r4, r4, #8
  for (int i=0; i<numbytes; i++) {
   d5374:	3501      	adds	r5, #1
   d5376:	3b01      	subs	r3, #1
   d5378:	e7f5      	b.n	d5366 <_ZN20Adafruit_I2CRegister5writeEmh+0x14>
      _buffer[numbytes-i-1] = value & 0xFF;
   d537a:	721e      	strb	r6, [r3, #8]
   d537c:	e7f9      	b.n	d5372 <_ZN20Adafruit_I2CRegister5writeEmh+0x20>
  }
  return write(_buffer, numbytes);
}
   d537e:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   d5380:	4618      	mov	r0, r3
   d5382:	f7ff bfd7 	b.w	d5334 <_ZN20Adafruit_I2CRegister5writeEPhh>
}
   d5386:	2000      	movs	r0, #0
   d5388:	bcf0      	pop	{r4, r5, r6, r7}
   d538a:	4770      	bx	lr

000d538c <_ZN20Adafruit_I2CRegister4readEPhh>:

   return value;
}


bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   d538c:	b513      	push	{r0, r1, r4, lr}
  _buffer[0] = _address;
   d538e:	4604      	mov	r4, r0
bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   d5390:	460b      	mov	r3, r1
  _buffer[0] = _address;
   d5392:	8881      	ldrh	r1, [r0, #4]
   d5394:	f804 1f09 	strb.w	r1, [r4, #9]!
  if (! _device->write_then_read(_buffer, 1, buffer, len)) {
   d5398:	2100      	movs	r1, #0
   d539a:	e9cd 2100 	strd	r2, r1, [sp]
   d539e:	2201      	movs	r2, #1
   d53a0:	4621      	mov	r1, r4
   d53a2:	6800      	ldr	r0, [r0, #0]
   d53a4:	f7ff ffa4 	bl	d52f0 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>
    return false;
  }
  return true;
}
   d53a8:	b002      	add	sp, #8
   d53aa:	bd10      	pop	{r4, pc}

000d53ac <_ZN20Adafruit_I2CRegister4readEv>:
uint32_t Adafruit_I2CRegister::read(void) {
   d53ac:	b538      	push	{r3, r4, r5, lr}
  if (! read(_buffer, _width)) {
   d53ae:	f100 0509 	add.w	r5, r0, #9
   d53b2:	7982      	ldrb	r2, [r0, #6]
   d53b4:	4629      	mov	r1, r5
uint32_t Adafruit_I2CRegister::read(void) {
   d53b6:	4604      	mov	r4, r0
  if (! read(_buffer, _width)) {
   d53b8:	f7ff ffe8 	bl	d538c <_ZN20Adafruit_I2CRegister4readEPhh>
   d53bc:	b178      	cbz	r0, d53de <_ZN20Adafruit_I2CRegister4readEv+0x32>
   d53be:	79a2      	ldrb	r2, [r4, #6]
   d53c0:	4629      	mov	r1, r5
   d53c2:	4422      	add	r2, r4
  uint32_t value = 0;
   d53c4:	2000      	movs	r0, #0
   for (int i=0; i < _width; i++) {
   d53c6:	42a2      	cmp	r2, r4
   d53c8:	d00b      	beq.n	d53e2 <_ZN20Adafruit_I2CRegister4readEv+0x36>
     value <<= 8;
   d53ca:	0203      	lsls	r3, r0, #8
     if (_bitorder == LSBFIRST) {
   d53cc:	7a20      	ldrb	r0, [r4, #8]
   d53ce:	b920      	cbnz	r0, d53da <_ZN20Adafruit_I2CRegister4readEv+0x2e>
       value |= _buffer[_width-i-1];
   d53d0:	7a10      	ldrb	r0, [r2, #8]
       value |= _buffer[i];
   d53d2:	4318      	orrs	r0, r3
   for (int i=0; i < _width; i++) {
   d53d4:	3a01      	subs	r2, #1
   d53d6:	3101      	adds	r1, #1
   d53d8:	e7f5      	b.n	d53c6 <_ZN20Adafruit_I2CRegister4readEv+0x1a>
       value |= _buffer[i];
   d53da:	7808      	ldrb	r0, [r1, #0]
   d53dc:	e7f9      	b.n	d53d2 <_ZN20Adafruit_I2CRegister4readEv+0x26>
    return -1;
   d53de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d53e2:	bd38      	pop	{r3, r4, r5, pc}

000d53e4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>:
  print(s);
  s->println();
}


Adafruit_I2CRegisterBits::Adafruit_I2CRegisterBits(Adafruit_I2CRegister *reg, uint8_t bits, uint8_t shift) {
   d53e4:	b510      	push	{r4, lr}
  _register = reg;
   d53e6:	6001      	str	r1, [r0, #0]
  _bits = bits;
   d53e8:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   d53ea:	7143      	strb	r3, [r0, #5]
}
   d53ec:	bd10      	pop	{r4, pc}

000d53ee <_ZN24Adafruit_I2CRegisterBits4readEv>:

uint32_t Adafruit_I2CRegisterBits::read(void) {
   d53ee:	b510      	push	{r4, lr}
   d53f0:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d53f2:	6800      	ldr	r0, [r0, #0]
   d53f4:	f7ff ffda 	bl	d53ac <_ZN20Adafruit_I2CRegister4readEv>
  val >>= _shift;
  return val & ((1 << (_bits+1)) - 1);
   d53f8:	7923      	ldrb	r3, [r4, #4]
   d53fa:	1c5a      	adds	r2, r3, #1
   d53fc:	2301      	movs	r3, #1
   d53fe:	4093      	lsls	r3, r2
  val >>= _shift;
   d5400:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits+1)) - 1);
   d5402:	3b01      	subs	r3, #1
  val >>= _shift;
   d5404:	40d0      	lsrs	r0, r2
}
   d5406:	4018      	ands	r0, r3
   d5408:	bd10      	pop	{r4, pc}

000d540a <_ZN24Adafruit_I2CRegisterBits5writeEm>:

void Adafruit_I2CRegisterBits::write(uint32_t data) {
   d540a:	b570      	push	{r4, r5, r6, lr}
   d540c:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d540e:	6800      	ldr	r0, [r0, #0]
void Adafruit_I2CRegisterBits::write(uint32_t data) {
   d5410:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   d5412:	f7ff ffcb 	bl	d53ac <_ZN20Adafruit_I2CRegister4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits+1)) - 1;
   d5416:	7923      	ldrb	r3, [r4, #4]
   d5418:	2201      	movs	r2, #1
   d541a:	3301      	adds	r3, #1
   d541c:	409a      	lsls	r2, r3
   d541e:	1e53      	subs	r3, r2, #1
  data &= mask;

  mask <<= _shift;
   d5420:	7962      	ldrb	r2, [r4, #5]
   d5422:	fa03 f502 	lsl.w	r5, r3, r2
  val &= ~mask;      // remove the current data at that spot
   d5426:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   d542a:	ea03 0106 	and.w	r1, r3, r6
  val |= data << _shift; // and add in the new data
  
  _register->write(val, _register->width());
   d542e:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   d5430:	4091      	lsls	r1, r2
  _register->write(val, _register->width());
   d5432:	4329      	orrs	r1, r5
   d5434:	7982      	ldrb	r2, [r0, #6]
   d5436:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _register->write(val, _register->width());
   d543a:	f7ff bf8a 	b.w	d5352 <_ZN20Adafruit_I2CRegister5writeEmh>

000d543e <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
   d543e:	4770      	bx	lr

000d5440 <_ZN17Adafruit_VEML77007readALSEv>:
/*!
 *    @brief Read the raw ALS data
 *    @returns 16-bit data value from the ALS register
 */
uint16_t Adafruit_VEML7700::readALS()
{
   d5440:	b508      	push	{r3, lr}
  return ALS_Data->read();
   d5442:	6840      	ldr	r0, [r0, #4]
   d5444:	f7ff ffb2 	bl	d53ac <_ZN20Adafruit_I2CRegister4readEv>
}
   d5448:	b280      	uxth	r0, r0
   d544a:	bd08      	pop	{r3, pc}

000d544c <_ZN17Adafruit_VEML77006enableEb>:
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable)
{
  ALS_Shutdown->write(!enable);
   d544c:	69c0      	ldr	r0, [r0, #28]
   d544e:	f081 0101 	eor.w	r1, r1, #1
   d5452:	f7ff bfda 	b.w	d540a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d5456 <_ZN17Adafruit_VEML770015interruptEnableEb>:
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable)
{
  ALS_Interrupt_Enable->write(enable);
   d5456:	6a00      	ldr	r0, [r0, #32]
   d5458:	f7ff bfd7 	b.w	d540a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d545c <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @param pers Persistance constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8   
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers)
{
  ALS_Persistence->write(pers);
   d545c:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d545e:	f7ff bfd4 	b.w	d540a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d5462 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>:
 *    @param it Can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
void Adafruit_VEML7700::setIntegrationTime(uint8_t it)
{
  ALS_Integration_Time->write(it);
   d5462:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d5464:	f7ff bfd1 	b.w	d540a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d5468 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
 *    @brief Get ALS integration time
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void)
{
   d5468:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
   d546a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d546c:	f7ff ffbf 	bl	d53ee <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   d5470:	b2c0      	uxtb	r0, r0
   d5472:	bd08      	pop	{r3, pc}

000d5474 <_ZN17Adafruit_VEML77007setGainEh>:
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain)
{
  ALS_Gain->write(gain);
   d5474:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d5476:	f7ff bfc8 	b.w	d540a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d547a <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void)
{
   d547a:	b508      	push	{r3, lr}
  return ALS_Gain->read();
   d547c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d547e:	f7ff ffb6 	bl	d53ee <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   d5482:	b2c0      	uxtb	r0, r0
   d5484:	bd08      	pop	{r3, pc}

000d5486 <_ZN17Adafruit_VEML77009normalizeEf>:
{
   d5486:	b510      	push	{r4, lr}
   d5488:	ed2d 8b02 	vpush	{d8}
   d548c:	4604      	mov	r4, r0
   d548e:	eeb0 8a40 	vmov.f32	s16, s0
  switch (getGain())
   d5492:	f7ff fff2 	bl	d547a <_ZN17Adafruit_VEML77007getGainEv>
   d5496:	2802      	cmp	r0, #2
   d5498:	d018      	beq.n	d54cc <_ZN17Adafruit_VEML77009normalizeEf+0x46>
   d549a:	2803      	cmp	r0, #3
   d549c:	d013      	beq.n	d54c6 <_ZN17Adafruit_VEML77009normalizeEf+0x40>
   d549e:	2801      	cmp	r0, #1
   d54a0:	d103      	bne.n	d54aa <_ZN17Adafruit_VEML77009normalizeEf+0x24>
    value /= 2.0;
   d54a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    value *= 8;
   d54a6:	ee28 8a27 	vmul.f32	s16, s16, s15
  switch (getIntegrationTime())
   d54aa:	4620      	mov	r0, r4
   d54ac:	f7ff ffdc 	bl	d5468 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
   d54b0:	3801      	subs	r0, #1
   d54b2:	280b      	cmp	r0, #11
   d54b4:	d814      	bhi.n	d54e0 <_ZN17Adafruit_VEML77009normalizeEf+0x5a>
   d54b6:	e8df f000 	tbb	[pc, r0]
   d54ba:	1b18      	.short	0x1b18
   d54bc:	1313131e 	.word	0x1313131e
   d54c0:	13131113 	.word	0x13131113
   d54c4:	0c13      	.short	0x0c13
    value *= 4;
   d54c6:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
   d54ca:	e7ec      	b.n	d54a6 <_ZN17Adafruit_VEML77009normalizeEf+0x20>
    value *= 8;
   d54cc:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   d54d0:	e7e9      	b.n	d54a6 <_ZN17Adafruit_VEML77009normalizeEf+0x20>
    value *= 4;
   d54d2:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
    value /= 8.0;
   d54d6:	ee28 8a27 	vmul.f32	s16, s16, s15
    break;
   d54da:	e001      	b.n	d54e0 <_ZN17Adafruit_VEML77009normalizeEf+0x5a>
    value *= 2;
   d54dc:	ee38 8a08 	vadd.f32	s16, s16, s16
}
   d54e0:	eeb0 0a48 	vmov.f32	s0, s16
   d54e4:	ecbd 8b02 	vpop	{d8}
   d54e8:	bd10      	pop	{r4, pc}
    value /= 2.0;
   d54ea:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d54ee:	e7f2      	b.n	d54d6 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
    value /= 4.0;
   d54f0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   d54f4:	e7ef      	b.n	d54d6 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
    value /= 8.0;
   d54f6:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
   d54fa:	e7ec      	b.n	d54d6 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
   d54fc:	0000      	movs	r0, r0
	...

000d5500 <_ZN17Adafruit_VEML77007readLuxEv>:
{
   d5500:	b510      	push	{r4, lr}
   d5502:	4604      	mov	r4, r0
  return normalize(ALS_Data->read()) * 0.0576; // see app note lux table on page 5
   d5504:	6840      	ldr	r0, [r0, #4]
   d5506:	f7ff ff51 	bl	d53ac <_ZN20Adafruit_I2CRegister4readEv>
   d550a:	ee07 0a90 	vmov	s15, r0
   d550e:	4620      	mov	r0, r4
   d5510:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d5514:	f7ff ffb7 	bl	d5486 <_ZN17Adafruit_VEML77009normalizeEf>
   d5518:	ee10 0a10 	vmov	r0, s0
   d551c:	f003 fb54 	bl	d8bc8 <__aeabi_f2d>
   d5520:	a305      	add	r3, pc, #20	; (adr r3, d5538 <_ZN17Adafruit_VEML77007readLuxEv+0x38>)
   d5522:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5526:	f003 fba7 	bl	d8c78 <__aeabi_dmul>
   d552a:	f003 fdb7 	bl	d909c <__aeabi_d2f>
}
   d552e:	ee00 0a10 	vmov	s0, r0
   d5532:	bd10      	pop	{r4, pc}
   d5534:	f3af 8000 	nop.w
   d5538:	487fcb92 	.word	0x487fcb92
   d553c:	3fad7dbf 	.word	0x3fad7dbf

000d5540 <_ZN17Adafruit_VEML77009readWhiteEv>:
{
   d5540:	b510      	push	{r4, lr}
   d5542:	4604      	mov	r4, r0
  return normalize(White_Data->read()) * 0.0576; // Unclear if this is the right multiplier
   d5544:	6880      	ldr	r0, [r0, #8]
   d5546:	f7ff ff31 	bl	d53ac <_ZN20Adafruit_I2CRegister4readEv>
   d554a:	ee07 0a90 	vmov	s15, r0
   d554e:	4620      	mov	r0, r4
   d5550:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d5554:	f7ff ff97 	bl	d5486 <_ZN17Adafruit_VEML77009normalizeEf>
   d5558:	ee10 0a10 	vmov	r0, s0
   d555c:	f003 fb34 	bl	d8bc8 <__aeabi_f2d>
   d5560:	a305      	add	r3, pc, #20	; (adr r3, d5578 <_ZN17Adafruit_VEML77009readWhiteEv+0x38>)
   d5562:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5566:	f003 fb87 	bl	d8c78 <__aeabi_dmul>
   d556a:	f003 fd97 	bl	d909c <__aeabi_d2f>
}
   d556e:	ee00 0a10 	vmov	s0, r0
   d5572:	bd10      	pop	{r4, pc}
   d5574:	f3af 8000 	nop.w
   d5578:	487fcb92 	.word	0x487fcb92
   d557c:	3fad7dbf 	.word	0x3fad7dbf

000d5580 <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable)
{
  PowerSave_Enable->write(enable);
   d5580:	6b00      	ldr	r0, [r0, #48]	; 0x30
   d5582:	f7ff bf42 	b.w	d540a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d5586 <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
{
   d5586:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5588:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   d558a:	200c      	movs	r0, #12
{
   d558c:	9103      	str	r1, [sp, #12]
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   d558e:	f7fe fd82 	bl	d4096 <_Znwj>
   d5592:	4605      	mov	r5, r0
   d5594:	b118      	cbz	r0, d559e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
   d5596:	9a03      	ldr	r2, [sp, #12]
   d5598:	2110      	movs	r1, #16
   d559a:	f7ff fe3b 	bl	d5214 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d559e:	63a5      	str	r5, [r4, #56]	; 0x38
  if (!i2c_dev->begin())
   d55a0:	4628      	mov	r0, r5
   d55a2:	f7ff fe50 	bl	d5246 <_ZN18Adafruit_I2CDevice5beginEv>
   d55a6:	4605      	mov	r5, r0
   d55a8:	2800      	cmp	r0, #0
   d55aa:	f000 80d2 	beq.w	d5752 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1cc>
  ALS_Config = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
   d55ae:	2010      	movs	r0, #16
   d55b0:	f7fe fd71 	bl	d4096 <_Znwj>
   d55b4:	4606      	mov	r6, r0
   d55b6:	b138      	cbz	r0, d55c8 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x42>
   d55b8:	2301      	movs	r3, #1
   d55ba:	2200      	movs	r2, #0
   d55bc:	e9cd 2300 	strd	r2, r3, [sp]
   d55c0:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d55c2:	2302      	movs	r3, #2
   d55c4:	f7ff feab 	bl	d531e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d55c8:	6026      	str	r6, [r4, #0]
  ALS_HighThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
   d55ca:	2010      	movs	r0, #16
   d55cc:	f7fe fd63 	bl	d4096 <_Znwj>
   d55d0:	4606      	mov	r6, r0
   d55d2:	b138      	cbz	r0, d55e4 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x5e>
   d55d4:	2300      	movs	r3, #0
   d55d6:	2201      	movs	r2, #1
   d55d8:	e9cd 3200 	strd	r3, r2, [sp]
   d55dc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d55de:	2302      	movs	r3, #2
   d55e0:	f7ff fe9d 	bl	d531e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d55e4:	60e6      	str	r6, [r4, #12]
  ALS_LowThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
   d55e6:	2010      	movs	r0, #16
   d55e8:	f7fe fd55 	bl	d4096 <_Znwj>
   d55ec:	4606      	mov	r6, r0
   d55ee:	b140      	cbz	r0, d5602 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7c>
   d55f0:	2300      	movs	r3, #0
   d55f2:	2201      	movs	r2, #1
   d55f4:	e9cd 3200 	strd	r3, r2, [sp]
   d55f8:	2302      	movs	r3, #2
   d55fa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d55fc:	461a      	mov	r2, r3
   d55fe:	f7ff fe8e 	bl	d531e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5602:	6126      	str	r6, [r4, #16]
  Power_Saving = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
   d5604:	2010      	movs	r0, #16
   d5606:	f7fe fd46 	bl	d4096 <_Znwj>
   d560a:	4606      	mov	r6, r0
   d560c:	b148      	cbz	r0, d5622 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9c>
   d560e:	2300      	movs	r3, #0
   d5610:	f04f 0e01 	mov.w	lr, #1
   d5614:	e9cd 3e00 	strd	r3, lr, [sp]
   d5618:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d561a:	2302      	movs	r3, #2
   d561c:	2203      	movs	r2, #3
   d561e:	f7ff fe7e 	bl	d531e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5622:	6166      	str	r6, [r4, #20]
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
   d5624:	2010      	movs	r0, #16
   d5626:	f7fe fd36 	bl	d4096 <_Znwj>
   d562a:	4606      	mov	r6, r0
   d562c:	b148      	cbz	r0, d5642 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbc>
   d562e:	2300      	movs	r3, #0
   d5630:	f04f 0c01 	mov.w	ip, #1
   d5634:	e9cd 3c00 	strd	r3, ip, [sp]
   d5638:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d563a:	2302      	movs	r3, #2
   d563c:	2204      	movs	r2, #4
   d563e:	f7ff fe6e 	bl	d531e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5642:	6066      	str	r6, [r4, #4]
  White_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
   d5644:	2010      	movs	r0, #16
   d5646:	f7fe fd26 	bl	d4096 <_Znwj>
   d564a:	4606      	mov	r6, r0
   d564c:	b140      	cbz	r0, d5660 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xda>
   d564e:	2300      	movs	r3, #0
   d5650:	2101      	movs	r1, #1
   d5652:	e9cd 3100 	strd	r3, r1, [sp]
   d5656:	2205      	movs	r2, #5
   d5658:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d565a:	2302      	movs	r3, #2
   d565c:	f7ff fe5f 	bl	d531e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5660:	60a6      	str	r6, [r4, #8]
  Interrupt_Status = new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
   d5662:	2010      	movs	r0, #16
   d5664:	f7fe fd17 	bl	d4096 <_Znwj>
   d5668:	4606      	mov	r6, r0
   d566a:	b140      	cbz	r0, d567e <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xf8>
   d566c:	2300      	movs	r3, #0
   d566e:	2201      	movs	r2, #1
   d5670:	e9cd 3200 	strd	r3, r2, [sp]
   d5674:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5676:	2302      	movs	r3, #2
   d5678:	2206      	movs	r2, #6
   d567a:	f7ff fe50 	bl	d531e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d567e:	61a6      	str	r6, [r4, #24]
  ALS_Shutdown = new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
   d5680:	2008      	movs	r0, #8
   d5682:	f7fe fd08 	bl	d4096 <_Znwj>
   d5686:	4606      	mov	r6, r0
   d5688:	b120      	cbz	r0, d5694 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x10e>
   d568a:	6821      	ldr	r1, [r4, #0]
   d568c:	2300      	movs	r3, #0
   d568e:	2201      	movs	r2, #1
   d5690:	f7ff fea8 	bl	d53e4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d5694:	61e6      	str	r6, [r4, #28]
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
   d5696:	2008      	movs	r0, #8
   d5698:	f7fe fcfd 	bl	d4096 <_Znwj>
   d569c:	4606      	mov	r6, r0
   d569e:	b120      	cbz	r0, d56aa <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x124>
   d56a0:	2301      	movs	r3, #1
   d56a2:	6821      	ldr	r1, [r4, #0]
   d56a4:	461a      	mov	r2, r3
   d56a6:	f7ff fe9d 	bl	d53e4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d56aa:	6226      	str	r6, [r4, #32]
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
   d56ac:	2008      	movs	r0, #8
   d56ae:	f7fe fcf2 	bl	d4096 <_Znwj>
   d56b2:	4606      	mov	r6, r0
   d56b4:	b120      	cbz	r0, d56c0 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13a>
   d56b6:	6821      	ldr	r1, [r4, #0]
   d56b8:	2304      	movs	r3, #4
   d56ba:	2202      	movs	r2, #2
   d56bc:	f7ff fe92 	bl	d53e4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d56c0:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
   d56c2:	2008      	movs	r0, #8
   d56c4:	f7fe fce7 	bl	d4096 <_Znwj>
   d56c8:	4606      	mov	r6, r0
   d56ca:	b120      	cbz	r0, d56d6 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x150>
   d56cc:	6821      	ldr	r1, [r4, #0]
   d56ce:	2306      	movs	r3, #6
   d56d0:	2204      	movs	r2, #4
   d56d2:	f7ff fe87 	bl	d53e4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d56d6:	62a6      	str	r6, [r4, #40]	; 0x28
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
   d56d8:	2008      	movs	r0, #8
   d56da:	f7fe fcdc 	bl	d4096 <_Znwj>
   d56de:	4606      	mov	r6, r0
   d56e0:	b120      	cbz	r0, d56ec <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x166>
   d56e2:	6821      	ldr	r1, [r4, #0]
   d56e4:	230b      	movs	r3, #11
   d56e6:	2202      	movs	r2, #2
   d56e8:	f7ff fe7c 	bl	d53e4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d56ec:	62e6      	str	r6, [r4, #44]	; 0x2c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
   d56ee:	2008      	movs	r0, #8
   d56f0:	f7fe fcd1 	bl	d4096 <_Znwj>
   d56f4:	4606      	mov	r6, r0
   d56f6:	b120      	cbz	r0, d5702 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17c>
   d56f8:	6961      	ldr	r1, [r4, #20]
   d56fa:	2300      	movs	r3, #0
   d56fc:	2201      	movs	r2, #1
   d56fe:	f7ff fe71 	bl	d53e4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d5702:	6326      	str	r6, [r4, #48]	; 0x30
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   d5704:	2008      	movs	r0, #8
   d5706:	f7fe fcc6 	bl	d4096 <_Znwj>
   d570a:	4606      	mov	r6, r0
   d570c:	b120      	cbz	r0, d5718 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x192>
   d570e:	6961      	ldr	r1, [r4, #20]
   d5710:	2301      	movs	r3, #1
   d5712:	2202      	movs	r2, #2
   d5714:	f7ff fe66 	bl	d53e4 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
  enable(false);
   d5718:	2100      	movs	r1, #0
   d571a:	4620      	mov	r0, r4
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   d571c:	6366      	str	r6, [r4, #52]	; 0x34
  enable(false);
   d571e:	f7ff fe95 	bl	d544c <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
   d5722:	2100      	movs	r1, #0
   d5724:	4620      	mov	r0, r4
   d5726:	f7ff fe96 	bl	d5456 <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
   d572a:	2100      	movs	r1, #0
   d572c:	4620      	mov	r0, r4
   d572e:	f7ff fe95 	bl	d545c <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1);
   d5732:	2100      	movs	r1, #0
   d5734:	4620      	mov	r0, r4
   d5736:	f7ff fe9d 	bl	d5474 <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
   d573a:	2100      	movs	r1, #0
   d573c:	4620      	mov	r0, r4
   d573e:	f7ff fe90 	bl	d5462 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  powerSaveEnable(false);
   d5742:	2100      	movs	r1, #0
   d5744:	4620      	mov	r0, r4
   d5746:	f7ff ff1b 	bl	d5580 <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
   d574a:	2101      	movs	r1, #1
   d574c:	4620      	mov	r0, r4
   d574e:	f7ff fe7d 	bl	d544c <_ZN17Adafruit_VEML77006enableEb>
}
   d5752:	4628      	mov	r0, r5
   d5754:	b004      	add	sp, #16
   d5756:	bd70      	pop	{r4, r5, r6, pc}

000d5758 <_ZN17Adafruit_VEML770015setLowThresholdEt>:
 *    @brief Assign the low threshold register data
 *    @param value The 16-bit data to write to VEML7700_ALS_THREHOLD_LOW
 */
void Adafruit_VEML7700::setLowThreshold(uint16_t value)
{
  ALS_LowThreshold->write(value);
   d5758:	6900      	ldr	r0, [r0, #16]
   d575a:	2200      	movs	r2, #0
   d575c:	f7ff bdf9 	b.w	d5352 <_ZN20Adafruit_I2CRegister5writeEmh>

000d5760 <_ZN17Adafruit_VEML770016setHighThresholdEt>:
 *    @brief Assign the high threshold register data
 *    @param value The 16-bit data to write to VEML7700_ALS_THREHOLD_HIGH
 */
void Adafruit_VEML7700::setHighThreshold(uint16_t value)
{
  ALS_HighThreshold->write(value);
   d5760:	68c0      	ldr	r0, [r0, #12]
   d5762:	2200      	movs	r2, #0
   d5764:	f7ff bdf5 	b.w	d5352 <_ZN20Adafruit_I2CRegister5writeEmh>

000d5768 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d5768:	6803      	ldr	r3, [r0, #0]
   d576a:	b2c9      	uxtb	r1, r1
   d576c:	689b      	ldr	r3, [r3, #8]
   d576e:	4718      	bx	r3

000d5770 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d5770:	4770      	bx	lr

000d5772 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d5772:	b538      	push	{r3, r4, r5, lr}
   d5774:	4605      	mov	r5, r0
   d5776:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d5778:	f003 f864 	bl	d8844 <_Z19__fetch_global_Wirev>
   d577c:	7829      	ldrb	r1, [r5, #0]
   d577e:	f002 f89d 	bl	d78bc <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d5782:	f003 f85f 	bl	d8844 <_Z19__fetch_global_Wirev>
   d5786:	0a21      	lsrs	r1, r4, #8
   d5788:	f7ff ffee 	bl	d5768 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d578c:	f003 f85a 	bl	d8844 <_Z19__fetch_global_Wirev>
   d5790:	b2e1      	uxtb	r1, r4
   d5792:	f7ff ffe9 	bl	d5768 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d5796:	f003 f855 	bl	d8844 <_Z19__fetch_global_Wirev>
}
   d579a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d579e:	f002 b8b0 	b.w	d7902 <_ZN7TwoWire15endTransmissionEv>

000d57a2 <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d57a2:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d57a4:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d57a8:	f7ff ffe3 	bl	d5772 <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d57ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d57b0:	200a      	movs	r0, #10
   d57b2:	f001 bc4b 	b.w	d704c <delay>

000d57b6 <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d57b6:	b538      	push	{r3, r4, r5, lr}
   d57b8:	4604      	mov	r4, r0
   d57ba:	460d      	mov	r5, r1
  Wire.begin();
   d57bc:	f003 f842 	bl	d8844 <_Z19__fetch_global_Wirev>
   d57c0:	f002 f84a 	bl	d7858 <_ZN7TwoWire5beginEv>
  reset();
   d57c4:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d57c6:	7025      	strb	r5, [r4, #0]
  reset();
   d57c8:	f7ff ffeb 	bl	d57a2 <_ZN14Adafruit_SHT315resetEv>
}
   d57cc:	2001      	movs	r0, #1
   d57ce:	bd38      	pop	{r3, r4, r5, pc}

000d57d0 <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   d57d0:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   d57d2:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   d57d4:	4291      	cmp	r1, r2
   d57d6:	d00e      	beq.n	d57f6 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d57d8:	f811 3b01 	ldrb.w	r3, [r1], #1
   d57dc:	4058      	eors	r0, r3
   d57de:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   d57e0:	f010 0f80 	tst.w	r0, #128	; 0x80
   d57e4:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   d57e8:	bf18      	it	ne
   d57ea:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   d57ee:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   d57f0:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   d57f2:	d1f5      	bne.n	d57e0 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d57f4:	e7ee      	b.n	d57d4 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   d57f6:	4770      	bx	lr

000d57f8 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   d57f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   d57fa:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   d57fe:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   d5800:	f7ff ffb7 	bl	d5772 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   d5804:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5808:	f001 fc20 	bl	d704c <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d580c:	f003 f81a 	bl	d8844 <_Z19__fetch_global_Wirev>
   d5810:	7829      	ldrb	r1, [r5, #0]
   d5812:	2206      	movs	r2, #6
   d5814:	f002 f84f 	bl	d78b6 <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d5818:	f003 f814 	bl	d8844 <_Z19__fetch_global_Wirev>
   d581c:	6803      	ldr	r3, [r0, #0]
   d581e:	691b      	ldr	r3, [r3, #16]
   d5820:	4798      	blx	r3
   d5822:	2806      	cmp	r0, #6
   d5824:	d14b      	bne.n	d58be <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
   d5826:	466e      	mov	r6, sp
   d5828:	4604      	mov	r4, r0
    readbuffer[i] = Wire.read();
   d582a:	f003 f80b 	bl	d8844 <_Z19__fetch_global_Wirev>
   d582e:	6803      	ldr	r3, [r0, #0]
   d5830:	695b      	ldr	r3, [r3, #20]
   d5832:	4798      	blx	r3
   d5834:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<6; i++) {
   d5836:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   d583a:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   d583e:	4669      	mov	r1, sp
   d5840:	d1f3      	bne.n	d582a <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d5842:	2202      	movs	r2, #2
   d5844:	4628      	mov	r0, r5
   d5846:	f7ff ffc3 	bl	d57d0 <_ZN14Adafruit_SHT314crc8EPKhi>
   d584a:	f89d 6002 	ldrb.w	r6, [sp, #2]
   d584e:	4286      	cmp	r6, r0
   d5850:	d135      	bne.n	d58be <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d5852:	2202      	movs	r2, #2
   d5854:	f10d 0103 	add.w	r1, sp, #3
   d5858:	4628      	mov	r0, r5
   d585a:	f7ff ffb9 	bl	d57d0 <_ZN14Adafruit_SHT314crc8EPKhi>
   d585e:	f89d 6005 	ldrb.w	r6, [sp, #5]
   d5862:	4286      	cmp	r6, r0
   d5864:	d12b      	bne.n	d58be <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  double stemp = ST;
   d5866:	f8bd 0000 	ldrh.w	r0, [sp]
   d586a:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   d586e:	ba40      	rev16	r0, r0
   d5870:	b280      	uxth	r0, r0
   d5872:	f003 f987 	bl	d8b84 <__aeabi_ui2d>
  stemp *= 175;
   d5876:	a318      	add	r3, pc, #96	; (adr r3, d58d8 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d5878:	e9d3 2300 	ldrd	r2, r3, [r3]
   d587c:	f003 f9fc 	bl	d8c78 <__aeabi_dmul>
  stemp /= 0xffff;
   d5880:	a311      	add	r3, pc, #68	; (adr r3, d58c8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d5882:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5886:	f003 fb21 	bl	d8ecc <__aeabi_ddiv>
  stemp = -45 + stemp;
   d588a:	4b11      	ldr	r3, [pc, #68]	; (d58d0 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d588c:	2200      	movs	r2, #0
   d588e:	f003 f83b 	bl	d8908 <__aeabi_dsub>
  temp = stemp;
   d5892:	f003 fc03 	bl	d909c <__aeabi_d2f>
   d5896:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   d5898:	ba60      	rev16	r0, r4
   d589a:	b280      	uxth	r0, r0
   d589c:	f003 f972 	bl	d8b84 <__aeabi_ui2d>
  shum *= 100;
   d58a0:	4b0c      	ldr	r3, [pc, #48]	; (d58d4 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d58a2:	2200      	movs	r2, #0
   d58a4:	f003 f9e8 	bl	d8c78 <__aeabi_dmul>
  shum /= 0xFFFF;
   d58a8:	a307      	add	r3, pc, #28	; (adr r3, d58c8 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d58aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d58ae:	f003 fb0d 	bl	d8ecc <__aeabi_ddiv>
  humidity = shum;
   d58b2:	f003 fbf3 	bl	d909c <__aeabi_d2f>
   d58b6:	6068      	str	r0, [r5, #4]
  return true;
   d58b8:	2001      	movs	r0, #1
}
   d58ba:	b002      	add	sp, #8
   d58bc:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d58be:	2000      	movs	r0, #0
   d58c0:	e7fb      	b.n	d58ba <_ZN14Adafruit_SHT3111readTempHumEv+0xc2>
   d58c2:	bf00      	nop
   d58c4:	f3af 8000 	nop.w
   d58c8:	00000000 	.word	0x00000000
   d58cc:	40efffe0 	.word	0x40efffe0
   d58d0:	40468000 	.word	0x40468000
   d58d4:	40590000 	.word	0x40590000
   d58d8:	00000000 	.word	0x00000000
   d58dc:	4065e000 	.word	0x4065e000

000d58e0 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   d58e0:	b510      	push	{r4, lr}
   d58e2:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d58e4:	f7ff ff88 	bl	d57f8 <_ZN14Adafruit_SHT3111readTempHumEv>
   d58e8:	b110      	cbz	r0, d58f0 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   d58ea:	ed94 0a02 	vldr	s0, [r4, #8]
}
   d58ee:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d58f0:	ed9f 0a01 	vldr	s0, [pc, #4]	; d58f8 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   d58f4:	e7fb      	b.n	d58ee <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   d58f6:	bf00      	nop
   d58f8:	7fc00000 	.word	0x7fc00000

000d58fc <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   d58fc:	b510      	push	{r4, lr}
   d58fe:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5900:	f7ff ff7a 	bl	d57f8 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5904:	b110      	cbz	r0, d590c <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   d5906:	ed94 0a01 	vldr	s0, [r4, #4]
}
   d590a:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d590c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5914 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   d5910:	e7fb      	b.n	d590a <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   d5912:	bf00      	nop
   d5914:	7fc00000 	.word	0x7fc00000

000d5918 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d5918:	4770      	bx	lr

000d591a <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d591a:	b510      	push	{r4, lr}
}
   d591c:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d591e:	4604      	mov	r4, r0
}
   d5920:	f002 ffe5 	bl	d88ee <_ZdlPvj>
   d5924:	4620      	mov	r0, r4
   d5926:	bd10      	pop	{r4, pc}

000d5928 <_ZN7TwoWire5writeEj>:
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d5928:	6803      	ldr	r3, [r0, #0]
   d592a:	b2c9      	uxtb	r1, r1
   d592c:	689b      	ldr	r3, [r3, #8]
   d592e:	4718      	bx	r3

000d5930 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d5930:	b40e      	push	{r1, r2, r3}
   d5932:	b510      	push	{r4, lr}
   d5934:	b08d      	sub	sp, #52	; 0x34
   d5936:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d5938:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d593a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d593e:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d5940:	2300      	movs	r3, #0
   d5942:	2020      	movs	r0, #32
   d5944:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d5948:	e9cd 4200 	strd	r4, r2, [sp]
   d594c:	201e      	movs	r0, #30
   d594e:	aa04      	add	r2, sp, #16
   d5950:	f001 f9e2 	bl	d6d18 <log_message_v>
}
   d5954:	b00d      	add	sp, #52	; 0x34
   d5956:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d595a:	b003      	add	sp, #12
   d595c:	4770      	bx	lr
	...

000d5960 <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d5960:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d5962:	4d03      	ldr	r5, [pc, #12]	; (d5970 <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d5964:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d5968:	e9c0 5100 	strd	r5, r1, [r0]
}
   d596c:	bd30      	pop	{r4, r5, pc}
   d596e:	bf00      	nop
   d5970:	000d9868 	.word	0x000d9868

000d5974 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d5974:	6840      	ldr	r0, [r0, #4]
   d5976:	f001 bf6f 	b.w	d7858 <_ZN7TwoWire5beginEv>

000d597a <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d597a:	b510      	push	{r4, lr}
   d597c:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d597e:	6800      	ldr	r0, [r0, #0]
   d5980:	f001 ffcb 	bl	d791a <_ZN7TwoWire6unlockEv>
   d5984:	4620      	mov	r0, r4
   d5986:	bd10      	pop	{r4, pc}

000d5988 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d5988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d598c:	b08a      	sub	sp, #40	; 0x28
   d598e:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d5990:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5992:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5994:	f001 ffb8 	bl	d7908 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5998:	221e      	movs	r2, #30
   d599a:	2100      	movs	r1, #0
   d599c:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d599e:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d59a0:	f003 fc3e 	bl	d9220 <memset>
		size_t framAddr = 0;
   d59a4:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d59a6:	b1ef      	cbz	r7, d59e4 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d59a8:	6823      	ldr	r3, [r4, #0]
   d59aa:	2f1e      	cmp	r7, #30
   d59ac:	46b8      	mov	r8, r7
   d59ae:	bf28      	it	cs
   d59b0:	f04f 081e 	movcs.w	r8, #30
   d59b4:	68dd      	ldr	r5, [r3, #12]
   d59b6:	aa02      	add	r2, sp, #8
   d59b8:	4643      	mov	r3, r8
   d59ba:	4631      	mov	r1, r6
   d59bc:	4620      	mov	r0, r4
   d59be:	47a8      	blx	r5
			if (!result) {
   d59c0:	4605      	mov	r5, r0
   d59c2:	b958      	cbnz	r0, d59dc <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d59c4:	480a      	ldr	r0, [pc, #40]	; (d59f0 <_ZN6MB85RC5eraseEv+0x68>)
   d59c6:	490b      	ldr	r1, [pc, #44]	; (d59f4 <_ZN6MB85RC5eraseEv+0x6c>)
   d59c8:	4632      	mov	r2, r6
   d59ca:	f7ff ffb1 	bl	d5930 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d59ce:	a801      	add	r0, sp, #4
   d59d0:	f7ff ffd3 	bl	d597a <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d59d4:	4628      	mov	r0, r5
   d59d6:	b00a      	add	sp, #40	; 0x28
   d59d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d59dc:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d59e0:	4446      	add	r6, r8
		while(totalLen > 0) {
   d59e2:	e7e0      	b.n	d59a6 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d59e4:	a801      	add	r0, sp, #4
   d59e6:	f7ff ffc8 	bl	d597a <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d59ea:	2501      	movs	r5, #1
   d59ec:	e7f2      	b.n	d59d4 <_ZN6MB85RC5eraseEv+0x4c>
   d59ee:	bf00      	nop
   d59f0:	2003e600 	.word	0x2003e600
   d59f4:	000d9834 	.word	0x000d9834

000d59f8 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d59f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d59fc:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d59fe:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5a00:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5a02:	460d      	mov	r5, r1
   d5a04:	4616      	mov	r6, r2
   d5a06:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5a08:	f001 ff7e 	bl	d7908 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5a0c:	b1a7      	cbz	r7, d5a38 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5a0e:	68e1      	ldr	r1, [r4, #12]
   d5a10:	6860      	ldr	r0, [r4, #4]
   d5a12:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5a16:	f001 ff55 	bl	d78c4 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5a1a:	0a29      	lsrs	r1, r5, #8
   d5a1c:	6860      	ldr	r0, [r4, #4]
   d5a1e:	f7ff ff83 	bl	d5928 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5a22:	4629      	mov	r1, r5
   d5a24:	6860      	ldr	r0, [r4, #4]
   d5a26:	f7ff ff7f 	bl	d5928 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5a2a:	6860      	ldr	r0, [r4, #4]
   d5a2c:	2100      	movs	r1, #0
   d5a2e:	f001 ff64 	bl	d78fa <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5a32:	b148      	cbz	r0, d5a48 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d5a34:	2400      	movs	r4, #0
   d5a36:	e000      	b.n	d5a3a <_ZN6MB85RC8readDataEjPhj+0x42>
   d5a38:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5a3a:	a801      	add	r0, sp, #4
   d5a3c:	f7ff ff9d 	bl	d597a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d5a40:	4620      	mov	r0, r4
   d5a42:	b003      	add	sp, #12
   d5a44:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d5a48:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d5a4a:	7b21      	ldrb	r1, [r4, #12]
   d5a4c:	6860      	ldr	r0, [r4, #4]
   d5a4e:	46b8      	mov	r8, r7
   d5a50:	bf28      	it	cs
   d5a52:	f04f 0820 	movcs.w	r8, #32
   d5a56:	2301      	movs	r3, #1
   d5a58:	4642      	mov	r2, r8
   d5a5a:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5a5e:	f001 ff18 	bl	d7892 <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d5a62:	f002 feef 	bl	d8844 <_Z19__fetch_global_Wirev>
   d5a66:	6803      	ldr	r3, [r0, #0]
   d5a68:	691b      	ldr	r3, [r3, #16]
   d5a6a:	4798      	blx	r3
   d5a6c:	4540      	cmp	r0, r8
   d5a6e:	dbe1      	blt.n	d5a34 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d5a70:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d5a74:	f002 fee6 	bl	d8844 <_Z19__fetch_global_Wirev>
   d5a78:	6803      	ldr	r3, [r0, #0]
   d5a7a:	695b      	ldr	r3, [r3, #20]
   d5a7c:	4798      	blx	r3
   d5a7e:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d5a82:	454e      	cmp	r6, r9
   d5a84:	d1f6      	bne.n	d5a74 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d5a86:	4445      	add	r5, r8
   d5a88:	eba7 0708 	sub.w	r7, r7, r8
   d5a8c:	e7be      	b.n	d5a0c <_ZN6MB85RC8readDataEjPhj+0x14>

000d5a8e <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5a8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5a92:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5a94:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5a96:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5a98:	460e      	mov	r6, r1
   d5a9a:	4690      	mov	r8, r2
   d5a9c:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d5a9e:	f001 ff33 	bl	d7908 <_ZN7TwoWire4lockEv>
   d5aa2:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d5aa6:	f1b9 0f00 	cmp.w	r9, #0
   d5aaa:	d02a      	beq.n	d5b02 <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d5aac:	b34d      	cbz	r5, d5b02 <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d5aae:	68e1      	ldr	r1, [r4, #12]
   d5ab0:	6860      	ldr	r0, [r4, #4]
   d5ab2:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5ab6:	f001 ff05 	bl	d78c4 <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5aba:	0a31      	lsrs	r1, r6, #8
   d5abc:	6860      	ldr	r0, [r4, #4]
   d5abe:	f7ff ff33 	bl	d5928 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d5ac2:	6860      	ldr	r0, [r4, #4]
   d5ac4:	4631      	mov	r1, r6
   d5ac6:	f7ff ff2f 	bl	d5928 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5aca:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d5ace:	4647      	mov	r7, r8
   d5ad0:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d5ad4:	6860      	ldr	r0, [r4, #4]
   d5ad6:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5ada:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d5adc:	3d01      	subs	r5, #1
				wire.write(*data);
   d5ade:	689b      	ldr	r3, [r3, #8]
   d5ae0:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5ae2:	4555      	cmp	r5, sl
   d5ae4:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d5ae8:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5aea:	d001      	beq.n	d5af0 <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d5aec:	2d00      	cmp	r5, #0
   d5aee:	d1f1      	bne.n	d5ad4 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d5af0:	6860      	ldr	r0, [r4, #4]
   d5af2:	2101      	movs	r1, #1
   d5af4:	f001 ff01 	bl	d78fa <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5af8:	2800      	cmp	r0, #0
   d5afa:	d0d7      	beq.n	d5aac <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d5afc:	f04f 0900 	mov.w	r9, #0
   d5b00:	e7d1      	b.n	d5aa6 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d5b02:	a801      	add	r0, sp, #4
   d5b04:	f7ff ff39 	bl	d597a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5b08:	4648      	mov	r0, r9
   d5b0a:	b003      	add	sp, #12
   d5b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5b10 <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5b10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5b14:	b08b      	sub	sp, #44	; 0x2c
   d5b16:	460e      	mov	r6, r1
   d5b18:	4615      	mov	r5, r2
   d5b1a:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5b1c:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5b1e:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5b20:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d5b22:	f001 fef1 	bl	d7908 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d5b26:	42ae      	cmp	r6, r5
   d5b28:	d229      	bcs.n	d5b7e <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5b2a:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5b2c:	4425      	add	r5, r4
			while(numBytes > 0) {
   d5b2e:	b18c      	cbz	r4, d5b54 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d5b30:	2c1e      	cmp	r4, #30
   d5b32:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d5b34:	f8d8 3000 	ldr.w	r3, [r8]
   d5b38:	bf28      	it	cs
   d5b3a:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d5b3c:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d5b3e:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5b42:	aa02      	add	r2, sp, #8
   d5b44:	463b      	mov	r3, r7
   d5b46:	4631      	mov	r1, r6
   d5b48:	4640      	mov	r0, r8
				framAddrTo -= count;
   d5b4a:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d5b4c:	47c8      	blx	r9
				if (!result) {
   d5b4e:	b948      	cbnz	r0, d5b64 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d5b50:	2400      	movs	r4, #0
   d5b52:	e000      	b.n	d5b56 <_ZN6MB85RC8moveDataEjjj+0x46>
   d5b54:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d5b56:	a801      	add	r0, sp, #4
   d5b58:	f7ff ff0f 	bl	d597a <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d5b5c:	4620      	mov	r0, r4
   d5b5e:	b00b      	add	sp, #44	; 0x2c
   d5b60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d5b64:	f8d8 3000 	ldr.w	r3, [r8]
   d5b68:	aa02      	add	r2, sp, #8
   d5b6a:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5b6e:	4629      	mov	r1, r5
   d5b70:	463b      	mov	r3, r7
   d5b72:	4640      	mov	r0, r8
   d5b74:	47c8      	blx	r9
				if (!result) {
   d5b76:	2800      	cmp	r0, #0
   d5b78:	d0ea      	beq.n	d5b50 <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d5b7a:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5b7c:	e7d7      	b.n	d5b2e <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d5b7e:	d9e9      	bls.n	d5b54 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d5b80:	2c00      	cmp	r4, #0
   d5b82:	d0e7      	beq.n	d5b54 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d5b84:	f8d8 3000 	ldr.w	r3, [r8]
   d5b88:	2c1e      	cmp	r4, #30
   d5b8a:	4627      	mov	r7, r4
   d5b8c:	bf28      	it	cs
   d5b8e:	271e      	movcs	r7, #30
   d5b90:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5b94:	aa02      	add	r2, sp, #8
   d5b96:	463b      	mov	r3, r7
   d5b98:	4631      	mov	r1, r6
   d5b9a:	4640      	mov	r0, r8
   d5b9c:	47c8      	blx	r9
				if (!result) {
   d5b9e:	2800      	cmp	r0, #0
   d5ba0:	d0d6      	beq.n	d5b50 <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d5ba2:	f8d8 3000 	ldr.w	r3, [r8]
   d5ba6:	aa02      	add	r2, sp, #8
   d5ba8:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5bac:	4629      	mov	r1, r5
   d5bae:	463b      	mov	r3, r7
   d5bb0:	4640      	mov	r0, r8
   d5bb2:	47c8      	blx	r9
				if (!result) {
   d5bb4:	2800      	cmp	r0, #0
   d5bb6:	d0cb      	beq.n	d5b50 <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d5bb8:	443e      	add	r6, r7
				framAddrTo += count;
   d5bba:	443d      	add	r5, r7
				numBytes -= count;
   d5bbc:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d5bbe:	e7df      	b.n	d5b80 <_ZN6MB85RC8moveDataEjjj+0x70>

000d5bc0 <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d5bc0:	2040      	movs	r0, #64	; 0x40
   d5bc2:	4770      	bx	lr

000d5bc4 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d5bc4:	2000      	movs	r0, #0
   d5bc6:	4770      	bx	lr

000d5bc8 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d5bc8:	2080      	movs	r0, #128	; 0x80
   d5bca:	4770      	bx	lr

000d5bcc <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d5bcc:	20ff      	movs	r0, #255	; 0xff
   d5bce:	4770      	bx	lr

000d5bd0 <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d5bd0:	4770      	bx	lr

000d5bd2 <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d5bd2:	4770      	bx	lr

000d5bd4 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d5bd4:	4770      	bx	lr

000d5bd6 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d5bd6:	4770      	bx	lr

000d5bd8 <_ZN12MCP79410TimeD0Ev>:
MCP79410Time::~MCP79410Time() {
   d5bd8:	b510      	push	{r4, lr}
}
   d5bda:	2114      	movs	r1, #20
MCP79410Time::~MCP79410Time() {
   d5bdc:	4604      	mov	r4, r0
}
   d5bde:	f002 fe86 	bl	d88ee <_ZdlPvj>
   d5be2:	4620      	mov	r0, r4
   d5be4:	bd10      	pop	{r4, pc}

000d5be6 <_ZN12MCP79410SRAMD0Ev>:
MCP79410SRAM::~MCP79410SRAM() {
   d5be6:	b510      	push	{r4, lr}
}
   d5be8:	2108      	movs	r1, #8
MCP79410SRAM::~MCP79410SRAM() {
   d5bea:	4604      	mov	r4, r0
}
   d5bec:	f002 fe7f 	bl	d88ee <_ZdlPvj>
   d5bf0:	4620      	mov	r0, r4
   d5bf2:	bd10      	pop	{r4, pc}

000d5bf4 <_ZN14MCP79410EEPROMD0Ev>:
MCP79410EEPROM::~MCP79410EEPROM() {
   d5bf4:	b510      	push	{r4, lr}
}
   d5bf6:	2108      	movs	r1, #8
MCP79410EEPROM::~MCP79410EEPROM() {
   d5bf8:	4604      	mov	r4, r0
}
   d5bfa:	f002 fe78 	bl	d88ee <_ZdlPvj>
   d5bfe:	4620      	mov	r0, r4
   d5c00:	bd10      	pop	{r4, pc}

000d5c02 <_ZN8MCP79410D0Ev>:
MCP79410::~MCP79410() {
   d5c02:	b510      	push	{r4, lr}
}
   d5c04:	211c      	movs	r1, #28
MCP79410::~MCP79410() {
   d5c06:	4604      	mov	r4, r0
}
   d5c08:	f002 fe71 	bl	d88ee <_ZdlPvj>
   d5c0c:	4620      	mov	r0, r4
   d5c0e:	bd10      	pop	{r4, pc}

000d5c10 <_ZN18MCP79410MemoryBase5eraseEv>:
bool MCP79410MemoryBase::erase() {
   d5c10:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	memset(buf, eraseValue(), sizeof(buf));
   d5c14:	6803      	ldr	r3, [r0, #0]
   d5c16:	68db      	ldr	r3, [r3, #12]
bool MCP79410MemoryBase::erase() {
   d5c18:	4604      	mov	r4, r0
	memset(buf, eraseValue(), sizeof(buf));
   d5c1a:	4798      	blx	r3
   d5c1c:	2210      	movs	r2, #16
   d5c1e:	4601      	mov	r1, r0
   d5c20:	4668      	mov	r0, sp
   d5c22:	f003 fafd 	bl	d9220 <memset>
	size_t len = length();
   d5c26:	6823      	ldr	r3, [r4, #0]
   d5c28:	4620      	mov	r0, r4
   d5c2a:	689b      	ldr	r3, [r3, #8]
   d5c2c:	4798      	blx	r3
	size_t offset = 0;
   d5c2e:	2500      	movs	r5, #0
	size_t len = length();
   d5c30:	4607      	mov	r7, r0
	bool bResult = false;
   d5c32:	4628      	mov	r0, r5
	while(offset < len) {
   d5c34:	42bd      	cmp	r5, r7
   d5c36:	d20e      	bcs.n	d5c56 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		if (count > (len - offset)) {
   d5c38:	1b7e      	subs	r6, r7, r5
		bResult = writeData(offset, buf, count);
   d5c3a:	6823      	ldr	r3, [r4, #0]
		size_t count = sizeof(buf);
   d5c3c:	2e10      	cmp	r6, #16
   d5c3e:	bf28      	it	cs
   d5c40:	2610      	movcs	r6, #16
		bResult = writeData(offset, buf, count);
   d5c42:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d5c46:	466a      	mov	r2, sp
   d5c48:	4633      	mov	r3, r6
   d5c4a:	4629      	mov	r1, r5
   d5c4c:	4620      	mov	r0, r4
   d5c4e:	47c0      	blx	r8
		if (!bResult) {
   d5c50:	b108      	cbz	r0, d5c56 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		offset += count;
   d5c52:	4435      	add	r5, r6
	while(offset < len) {
   d5c54:	e7ee      	b.n	d5c34 <_ZN18MCP79410MemoryBase5eraseEv+0x24>
}
   d5c56:	b004      	add	sp, #16
   d5c58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5c5c <_ZN12MCP79410Time5clearEv>:
	rawYear = 0;
   d5c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
   d5c60:	8143      	strh	r3, [r0, #10]
	rawDayOfMonth = 1;
   d5c62:	f240 1301 	movw	r3, #257	; 0x101
   d5c66:	60c3      	str	r3, [r0, #12]
	rawSecond = 0;
   d5c68:	2300      	movs	r3, #0
   d5c6a:	8203      	strh	r3, [r0, #16]
}
   d5c6c:	4770      	bx	lr
	...

000d5c70 <_ZN12MCP79410TimeC1Ev>:
MCP79410Time::MCP79410Time() {
   d5c70:	b508      	push	{r3, lr}
   d5c72:	4b06      	ldr	r3, [pc, #24]	; (d5c8c <_ZN12MCP79410TimeC1Ev+0x1c>)
   d5c74:	6003      	str	r3, [r0, #0]
   d5c76:	4b06      	ldr	r3, [pc, #24]	; (d5c90 <_ZN12MCP79410TimeC1Ev+0x20>)
   d5c78:	6043      	str	r3, [r0, #4]
   d5c7a:	f240 7304 	movw	r3, #1796	; 0x704
   d5c7e:	8103      	strh	r3, [r0, #8]
   d5c80:	2300      	movs	r3, #0
   d5c82:	7443      	strb	r3, [r0, #17]
	clear();
   d5c84:	f7ff ffea 	bl	d5c5c <_ZN12MCP79410Time5clearEv>
}
   d5c88:	bd08      	pop	{r3, pc}
   d5c8a:	bf00      	nop
   d5c8c:	000d9948 	.word	0x000d9948
   d5c90:	03020100 	.word	0x03020100

000d5c94 <_ZN12MCP79410Time8bcdToIntEh>:
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5c94:	0903      	lsrs	r3, r0, #4
}
   d5c96:	220a      	movs	r2, #10
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d5c98:	f000 000f 	and.w	r0, r0, #15
}
   d5c9c:	fb02 0003 	mla	r0, r2, r3, r0
   d5ca0:	4770      	bx	lr

000d5ca2 <_ZNK12MCP79410Time7getYearEv>:
int MCP79410Time::getYear() const {
   d5ca2:	b508      	push	{r3, lr}
	return bcdToInt(rawYear) + 2000;
   d5ca4:	7a80      	ldrb	r0, [r0, #10]
   d5ca6:	f7ff fff5 	bl	d5c94 <_ZN12MCP79410Time8bcdToIntEh>
}
   d5caa:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d5cae:	bd08      	pop	{r3, pc}

000d5cb0 <_ZNK12MCP79410Time8getMonthEv>:
	return bcdToInt(rawMonth & 0x1f);
   d5cb0:	7ac0      	ldrb	r0, [r0, #11]
   d5cb2:	f000 001f 	and.w	r0, r0, #31
   d5cb6:	f7ff bfed 	b.w	d5c94 <_ZN12MCP79410Time8bcdToIntEh>

000d5cba <_ZNK12MCP79410Time13getDayOfMonthEv>:
	return bcdToInt(rawDayOfMonth & 0x3f);
   d5cba:	7b00      	ldrb	r0, [r0, #12]
   d5cbc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d5cc0:	f7ff bfe8 	b.w	d5c94 <_ZN12MCP79410Time8bcdToIntEh>

000d5cc4 <_ZNK12MCP79410Time7getHourEv>:
int MCP79410Time::getHour() const {
   d5cc4:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d5cc6:	7b81      	ldrb	r1, [r0, #14]
   d5cc8:	064a      	lsls	r2, r1, #25
   d5cca:	d50d      	bpl.n	d5ce8 <_ZNK12MCP79410Time7getHourEv+0x24>
		int hour12 = bcdToInt(rawHour & 0x1f);
   d5ccc:	f001 001f 	and.w	r0, r1, #31
   d5cd0:	f7ff ffe0 	bl	d5c94 <_ZN12MCP79410Time8bcdToIntEh>
		if (rawHour & 0x20) {
   d5cd4:	068b      	lsls	r3, r1, #26
   d5cd6:	d503      	bpl.n	d5ce0 <_ZNK12MCP79410Time7getHourEv+0x1c>
			if (hour12 == 12) {
   d5cd8:	280c      	cmp	r0, #12
   d5cda:	d000      	beq.n	d5cde <_ZNK12MCP79410Time7getHourEv+0x1a>
				return hour12 + 12;
   d5cdc:	300c      	adds	r0, #12
}
   d5cde:	bd08      	pop	{r3, pc}
				return 0;
   d5ce0:	280c      	cmp	r0, #12
   d5ce2:	bf08      	it	eq
   d5ce4:	2000      	moveq	r0, #0
   d5ce6:	e7fa      	b.n	d5cde <_ZNK12MCP79410Time7getHourEv+0x1a>
}
   d5ce8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		return bcdToInt(rawHour & 0x3f);
   d5cec:	f001 003f 	and.w	r0, r1, #63	; 0x3f
   d5cf0:	f7ff bfd0 	b.w	d5c94 <_ZN12MCP79410Time8bcdToIntEh>

000d5cf4 <_ZNK12MCP79410Time9getMinuteEv>:
	return bcdToInt(rawMinute & 0x7f);
   d5cf4:	7bc0      	ldrb	r0, [r0, #15]
   d5cf6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5cfa:	f7ff bfcb 	b.w	d5c94 <_ZN12MCP79410Time8bcdToIntEh>

000d5cfe <_ZNK12MCP79410Time9getSecondEv>:
	return bcdToInt(rawSecond & 0x7f);
   d5cfe:	7c00      	ldrb	r0, [r0, #16]
   d5d00:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d5d04:	f7ff bfc6 	b.w	d5c94 <_ZN12MCP79410Time8bcdToIntEh>

000d5d08 <_ZNK12MCP79410Time10toUnixTimeEv>:
time_t MCP79410Time::toUnixTime() const {
   d5d08:	b510      	push	{r4, lr}
   d5d0a:	b08a      	sub	sp, #40	; 0x28
	memset(&tm, 0, sizeof(struct tm));
   d5d0c:	2224      	movs	r2, #36	; 0x24
time_t MCP79410Time::toUnixTime() const {
   d5d0e:	4604      	mov	r4, r0
	memset(&tm, 0, sizeof(struct tm));
   d5d10:	2100      	movs	r1, #0
   d5d12:	a801      	add	r0, sp, #4
   d5d14:	f003 fa84 	bl	d9220 <memset>
	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d5d18:	4620      	mov	r0, r4
   d5d1a:	f7ff ffc2 	bl	d5ca2 <_ZNK12MCP79410Time7getYearEv>
   d5d1e:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d5d22:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d5d24:	4620      	mov	r0, r4
   d5d26:	f7ff ffc3 	bl	d5cb0 <_ZNK12MCP79410Time8getMonthEv>
   d5d2a:	3801      	subs	r0, #1
   d5d2c:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d5d2e:	4620      	mov	r0, r4
   d5d30:	f7ff ffc3 	bl	d5cba <_ZNK12MCP79410Time13getDayOfMonthEv>
   d5d34:	9004      	str	r0, [sp, #16]
	tm.tm_hour = getHour();
   d5d36:	4620      	mov	r0, r4
   d5d38:	f7ff ffc4 	bl	d5cc4 <_ZNK12MCP79410Time7getHourEv>
   d5d3c:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d5d3e:	4620      	mov	r0, r4
   d5d40:	f7ff ffd8 	bl	d5cf4 <_ZNK12MCP79410Time9getMinuteEv>
   d5d44:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d5d46:	4620      	mov	r0, r4
   d5d48:	f7ff ffd9 	bl	d5cfe <_ZNK12MCP79410Time9getSecondEv>
   d5d4c:	9001      	str	r0, [sp, #4]
	return mktime(&tm);
   d5d4e:	a801      	add	r0, sp, #4
   d5d50:	f001 f974 	bl	d703c <mktime>
}
   d5d54:	b00a      	add	sp, #40	; 0x28
   d5d56:	bd10      	pop	{r4, pc}

000d5d58 <_ZN12MCP79410Time8intToBcdEi>:
	result = (uint8_t) (((value / 10) % 10) << 4);
   d5d58:	210a      	movs	r1, #10
   d5d5a:	fb90 f2f1 	sdiv	r2, r0, r1
   d5d5e:	fb92 f3f1 	sdiv	r3, r2, r1
   d5d62:	fb01 2313 	mls	r3, r1, r3, r2
   d5d66:	011b      	lsls	r3, r3, #4
   d5d68:	b2db      	uxtb	r3, r3
	result |= (uint8_t) (value % 10);
   d5d6a:	fb01 0012 	mls	r0, r1, r2, r0
   d5d6e:	4318      	orrs	r0, r3
}
   d5d70:	b2c0      	uxtb	r0, r0
   d5d72:	4770      	bx	lr

000d5d74 <_ZN12MCP79410Time7setYearEi>:
	rawYear = intToBcd(value % 100);
   d5d74:	2364      	movs	r3, #100	; 0x64
void MCP79410Time::setYear(int value) {
   d5d76:	b510      	push	{r4, lr}
   d5d78:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d5d7a:	fb91 f0f3 	sdiv	r0, r1, r3
   d5d7e:	fb00 1013 	mls	r0, r0, r3, r1
   d5d82:	f7ff ffe9 	bl	d5d58 <_ZN12MCP79410Time8intToBcdEi>
   d5d86:	72a0      	strb	r0, [r4, #10]
}
   d5d88:	bd10      	pop	{r4, pc}

000d5d8a <_ZN12MCP79410Time8setMonthEi>:
void MCP79410Time::setMonth(int value) {
   d5d8a:	b510      	push	{r4, lr}
   d5d8c:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d5d8e:	4608      	mov	r0, r1
   d5d90:	f7ff ffe2 	bl	d5d58 <_ZN12MCP79410Time8intToBcdEi>
   d5d94:	72e0      	strb	r0, [r4, #11]
}
   d5d96:	bd10      	pop	{r4, pc}

000d5d98 <_ZN12MCP79410Time13setDayOfMonthEi>:
void MCP79410Time::setDayOfMonth(int value) {
   d5d98:	b510      	push	{r4, lr}
   d5d9a:	4604      	mov	r4, r0
	rawDayOfMonth |= intToBcd(value);
   d5d9c:	4608      	mov	r0, r1
   d5d9e:	f7ff ffdb 	bl	d5d58 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfMonth &= ~0x3f;
   d5da2:	7b23      	ldrb	r3, [r4, #12]
   d5da4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
	rawDayOfMonth |= intToBcd(value);
   d5da8:	4318      	orrs	r0, r3
   d5daa:	7320      	strb	r0, [r4, #12]
}
   d5dac:	bd10      	pop	{r4, pc}

000d5dae <_ZN12MCP79410Time12setDayOfWeekEi>:
void MCP79410Time::setDayOfWeek(int value) {
   d5dae:	b510      	push	{r4, lr}
   d5db0:	4604      	mov	r4, r0
	rawDayOfWeek |= intToBcd(value + 1);
   d5db2:	1c48      	adds	r0, r1, #1
   d5db4:	f7ff ffd0 	bl	d5d58 <_ZN12MCP79410Time8intToBcdEi>
	rawDayOfWeek &= ~0x7;
   d5db8:	7b63      	ldrb	r3, [r4, #13]
   d5dba:	f023 0307 	bic.w	r3, r3, #7
	rawDayOfWeek |= intToBcd(value + 1);
   d5dbe:	4318      	orrs	r0, r3
   d5dc0:	7360      	strb	r0, [r4, #13]
}
   d5dc2:	bd10      	pop	{r4, pc}

000d5dc4 <_ZN12MCP79410Time7setHourEi>:
void MCP79410Time::setHour(int value) {
   d5dc4:	b510      	push	{r4, lr}
   d5dc6:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d5dc8:	4608      	mov	r0, r1
   d5dca:	f7ff ffc5 	bl	d5d58 <_ZN12MCP79410Time8intToBcdEi>
   d5dce:	73a0      	strb	r0, [r4, #14]
}
   d5dd0:	bd10      	pop	{r4, pc}

000d5dd2 <_ZN12MCP79410Time9setMinuteEi>:
void MCP79410Time::setMinute(int value) {
   d5dd2:	b510      	push	{r4, lr}
   d5dd4:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d5dd6:	4608      	mov	r0, r1
   d5dd8:	f7ff ffbe 	bl	d5d58 <_ZN12MCP79410Time8intToBcdEi>
   d5ddc:	73e0      	strb	r0, [r4, #15]
}
   d5dde:	bd10      	pop	{r4, pc}

000d5de0 <_ZN12MCP79410Time9setSecondEi>:
void MCP79410Time::setSecond(int value) {
   d5de0:	b510      	push	{r4, lr}
   d5de2:	4604      	mov	r4, r0
	rawSecond |= intToBcd(value);
   d5de4:	4608      	mov	r0, r1
   d5de6:	f7ff ffb7 	bl	d5d58 <_ZN12MCP79410Time8intToBcdEi>
	rawSecond &= ~0x7f;
   d5dea:	7c23      	ldrb	r3, [r4, #16]
   d5dec:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
	rawSecond |= intToBcd(value);
   d5df0:	4318      	orrs	r0, r3
   d5df2:	7420      	strb	r0, [r4, #16]
}
   d5df4:	bd10      	pop	{r4, pc}

000d5df6 <_ZN12MCP79410Time12fromUnixTimeEx>:
void MCP79410Time::fromUnixTime(time_t time) {
   d5df6:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5df8:	4604      	mov	r4, r0
	struct tm *tm = gmtime(&time);
   d5dfa:	4668      	mov	r0, sp
void MCP79410Time::fromUnixTime(time_t time) {
   d5dfc:	e9cd 2300 	strd	r2, r3, [sp]
	struct tm *tm = gmtime(&time);
   d5e00:	f003 f9d4 	bl	d91ac <gmtime>
   d5e04:	4605      	mov	r5, r0
	setYear(tm->tm_year);
   d5e06:	6941      	ldr	r1, [r0, #20]
   d5e08:	4620      	mov	r0, r4
   d5e0a:	f7ff ffb3 	bl	d5d74 <_ZN12MCP79410Time7setYearEi>
	setMonth(tm->tm_mon + 1);
   d5e0e:	6929      	ldr	r1, [r5, #16]
   d5e10:	4620      	mov	r0, r4
   d5e12:	3101      	adds	r1, #1
   d5e14:	f7ff ffb9 	bl	d5d8a <_ZN12MCP79410Time8setMonthEi>
	setDayOfMonth(tm->tm_mday);
   d5e18:	68e9      	ldr	r1, [r5, #12]
   d5e1a:	4620      	mov	r0, r4
   d5e1c:	f7ff ffbc 	bl	d5d98 <_ZN12MCP79410Time13setDayOfMonthEi>
	setDayOfWeek(tm->tm_wday);
   d5e20:	69a9      	ldr	r1, [r5, #24]
   d5e22:	4620      	mov	r0, r4
   d5e24:	f7ff ffc3 	bl	d5dae <_ZN12MCP79410Time12setDayOfWeekEi>
	setHour(tm->tm_hour); // tm_hour is 0-23
   d5e28:	68a9      	ldr	r1, [r5, #8]
   d5e2a:	4620      	mov	r0, r4
   d5e2c:	f7ff ffca 	bl	d5dc4 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d5e30:	6869      	ldr	r1, [r5, #4]
   d5e32:	4620      	mov	r0, r4
   d5e34:	f7ff ffcd 	bl	d5dd2 <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d5e38:	6829      	ldr	r1, [r5, #0]
   d5e3a:	293b      	cmp	r1, #59	; 0x3b
   d5e3c:	bfa8      	it	ge
   d5e3e:	213b      	movge	r1, #59	; 0x3b
   d5e40:	4620      	mov	r0, r4
   d5e42:	f7ff ffcd 	bl	d5de0 <_ZN12MCP79410Time9setSecondEi>
}
   d5e46:	b003      	add	sp, #12
   d5e48:	bd30      	pop	{r4, r5, pc}
	...

000d5e4c <_ZN8MCP79410C1ER7TwoWire>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5e4c:	4a05      	ldr	r2, [pc, #20]	; (d5e64 <_ZN8MCP79410C1ER7TwoWire+0x18>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5e4e:	6100      	str	r0, [r0, #16]
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d5e50:	e9c0 2100 	strd	r2, r1, [r0]
   d5e54:	4a04      	ldr	r2, [pc, #16]	; (d5e68 <_ZN8MCP79410C1ER7TwoWire+0x1c>)
   d5e56:	6082      	str	r2, [r0, #8]
MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5e58:	4a04      	ldr	r2, [pc, #16]	; (d5e6c <_ZN8MCP79410C1ER7TwoWire+0x20>)
   d5e5a:	60c2      	str	r2, [r0, #12]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5e5c:	4a04      	ldr	r2, [pc, #16]	; (d5e70 <_ZN8MCP79410C1ER7TwoWire+0x24>)
MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d5e5e:	6180      	str	r0, [r0, #24]
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d5e60:	6142      	str	r2, [r0, #20]
}
   d5e62:	4770      	bx	lr
   d5e64:	000d997c 	.word	0x000d997c
   d5e68:	03010000 	.word	0x03010000
   d5e6c:	000d9924 	.word	0x000d9924
   d5e70:	000d9958 	.word	0x000d9958

000d5e74 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d5e74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5e78:	4604      	mov	r4, r0
   d5e7a:	460f      	mov	r7, r1
   d5e7c:	4690      	mov	r8, r2
   d5e7e:	4699      	mov	r9, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d5e80:	2600      	movs	r6, #0

	while(offset < bufLen) {
   d5e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d5e84:	429e      	cmp	r6, r3
   d5e86:	d231      	bcs.n	d5eec <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
		wire.beginTransmission(i2cAddr);
   d5e88:	6860      	ldr	r0, [r4, #4]
   d5e8a:	4639      	mov	r1, r7
   d5e8c:	f001 fd16 	bl	d78bc <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d5e90:	eb08 0106 	add.w	r1, r8, r6
   d5e94:	6860      	ldr	r0, [r4, #4]
   d5e96:	f7ff fd47 	bl	d5928 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d5e9a:	6860      	ldr	r0, [r4, #4]
   d5e9c:	2100      	movs	r1, #0
   d5e9e:	f001 fd2c 	bl	d78fa <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d5ea2:	4605      	mov	r5, r0
   d5ea4:	b9d0      	cbnz	r0, d5edc <_ZNK8MCP7941010deviceReadEhhPhj+0x68>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d5ea6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5ea8:	6860      	ldr	r0, [r4, #4]
			size_t count = bufLen - offset;
   d5eaa:	1b9a      	subs	r2, r3, r6
			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d5eac:	2a20      	cmp	r2, #32
   d5eae:	f04f 0301 	mov.w	r3, #1
   d5eb2:	bf28      	it	cs
   d5eb4:	2220      	movcs	r2, #32
   d5eb6:	4639      	mov	r1, r7
   d5eb8:	f001 fceb 	bl	d7892 <_ZN7TwoWire11requestFromEhjh>
   d5ebc:	eb09 0b06 	add.w	fp, r9, r6
   d5ec0:	4605      	mov	r5, r0
			for(size_t ii = 0; ii < count; ii++) {
   d5ec2:	eb0b 0a00 	add.w	sl, fp, r0
   d5ec6:	45da      	cmp	sl, fp
   d5ec8:	d006      	beq.n	d5ed8 <_ZNK8MCP7941010deviceReadEhhPhj+0x64>
				buf[ii + offset] = wire.read();
   d5eca:	6860      	ldr	r0, [r4, #4]
   d5ecc:	6803      	ldr	r3, [r0, #0]
   d5ece:	695b      	ldr	r3, [r3, #20]
   d5ed0:	4798      	blx	r3
   d5ed2:	f80b 0b01 	strb.w	r0, [fp], #1
			for(size_t ii = 0; ii < count; ii++) {
   d5ed6:	e7f6      	b.n	d5ec6 <_ZNK8MCP7941010deviceReadEhhPhj+0x52>
			}
			offset += count;
   d5ed8:	442e      	add	r6, r5
	while(offset < bufLen) {
   d5eda:	e7d2      	b.n	d5e82 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d5edc:	4602      	mov	r2, r0
   d5ede:	4904      	ldr	r1, [pc, #16]	; (d5ef0 <_ZNK8MCP7941010deviceReadEhhPhj+0x7c>)
   d5ee0:	4804      	ldr	r0, [pc, #16]	; (d5ef4 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d5ee2:	f7ff fd25 	bl	d5930 <_ZNK5spark6Logger4infoEPKcz>
			break;
		}
	}
	return stat;
}
   d5ee6:	4628      	mov	r0, r5
   d5ee8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5eec:	2500      	movs	r5, #0
	return stat;
   d5eee:	e7fa      	b.n	d5ee6 <_ZNK8MCP7941010deviceReadEhhPhj+0x72>
   d5ef0:	000d987c 	.word	0x000d987c
   d5ef4:	2003e5bc 	.word	0x2003e5bc

000d5ef8 <_ZN12MCP79410SRAM8readDataEjPhj>:
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5ef8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5efc:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5f00:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5f02:	6803      	ldr	r3, [r0, #0]
   d5f04:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5f06:	4605      	mov	r5, r0
   d5f08:	460c      	mov	r4, r1
   d5f0a:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5f0c:	4798      	blx	r3
   d5f0e:	4580      	cmp	r8, r0
   d5f10:	d80d      	bhi.n	d5f2e <_ZN12MCP79410SRAM8readDataEjPhj+0x36>
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d5f12:	3420      	adds	r4, #32
   d5f14:	6868      	ldr	r0, [r5, #4]
   d5f16:	9600      	str	r6, [sp, #0]
   d5f18:	463b      	mov	r3, r7
   d5f1a:	b2e2      	uxtb	r2, r4
   d5f1c:	216f      	movs	r1, #111	; 0x6f
   d5f1e:	f7ff ffa9 	bl	d5e74 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d5f22:	fab0 f080 	clz	r0, r0
   d5f26:	0940      	lsrs	r0, r0, #5
}
   d5f28:	b002      	add	sp, #8
   d5f2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5f2e:	2000      	movs	r0, #0
   d5f30:	e7fa      	b.n	d5f28 <_ZN12MCP79410SRAM8readDataEjPhj+0x30>

000d5f32 <_ZN14MCP79410EEPROM8readDataEjPhj>:
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5f32:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d5f36:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5f3a:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d5f3c:	6803      	ldr	r3, [r0, #0]
   d5f3e:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d5f40:	4604      	mov	r4, r0
   d5f42:	460d      	mov	r5, r1
   d5f44:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d5f46:	4798      	blx	r3
   d5f48:	4580      	cmp	r8, r0
   d5f4a:	d80c      	bhi.n	d5f66 <_ZN14MCP79410EEPROM8readDataEjPhj+0x34>
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d5f4c:	6860      	ldr	r0, [r4, #4]
   d5f4e:	9600      	str	r6, [sp, #0]
   d5f50:	463b      	mov	r3, r7
   d5f52:	b2ea      	uxtb	r2, r5
   d5f54:	2157      	movs	r1, #87	; 0x57
   d5f56:	f7ff ff8d 	bl	d5e74 <_ZNK8MCP7941010deviceReadEhhPhj>
	return (stat == 0);
   d5f5a:	fab0 f080 	clz	r0, r0
   d5f5e:	0940      	lsrs	r0, r0, #5
}
   d5f60:	b002      	add	sp, #8
   d5f62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d5f66:	2000      	movs	r0, #0
   d5f68:	e7fa      	b.n	d5f60 <_ZN14MCP79410EEPROM8readDataEjPhj+0x2e>

000d5f6a <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>:
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d5f6a:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d5f6c:	1e1e      	subs	r6, r3, #0
   d5f6e:	bf0c      	ite	eq
   d5f70:	2307      	moveq	r3, #7
   d5f72:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d5f74:	9300      	str	r3, [sp, #0]
int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d5f76:	4614      	mov	r4, r2
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d5f78:	ab02      	add	r3, sp, #8
   d5f7a:	460a      	mov	r2, r1
   d5f7c:	216f      	movs	r1, #111	; 0x6f
   d5f7e:	f7ff ff79 	bl	d5e74 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d5f82:	4605      	mov	r5, r0
   d5f84:	b9a8      	cbnz	r0, d5fb2 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>
			time.rawSecond = buf[0];
   d5f86:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d5f8a:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d5f8c:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d5f90:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d5f92:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d5f96:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d5f98:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5f9c:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d5f9e:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d5fa2:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d5fa4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d5fa8:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d5faa:	b92e      	cbnz	r6, d5fb8 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x4e>
				time.rawYear = buf[6];
   d5fac:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d5fb0:	72a3      	strb	r3, [r4, #10]
}
   d5fb2:	4628      	mov	r0, r5
   d5fb4:	b004      	add	sp, #16
   d5fb6:	bd70      	pop	{r4, r5, r6, pc}
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d5fb8:	f002 f9f0 	bl	d839c <_ZN9TimeClass4yearEv>
   d5fbc:	f7ff fecc 	bl	d5d58 <_ZN12MCP79410Time8intToBcdEi>
   d5fc0:	72a0      	strb	r0, [r4, #10]
	return stat;
   d5fc2:	e7f6      	b.n	d5fb2 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0+0x48>

000d5fc4 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d5fc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d5fc6:	2301      	movs	r3, #1
uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d5fc8:	460a      	mov	r2, r1
	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d5fca:	9300      	str	r3, [sp, #0]
   d5fcc:	216f      	movs	r1, #111	; 0x6f
   d5fce:	ab03      	add	r3, sp, #12
   d5fd0:	f7ff ff50 	bl	d5e74 <_ZNK8MCP7941010deviceReadEhhPhj>
   d5fd4:	b920      	cbnz	r0, d5fe0 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1c>
		return buf[0];
   d5fd6:	f89d 000c 	ldrb.w	r0, [sp, #12]
}
   d5fda:	b005      	add	sp, #20
   d5fdc:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d5fe0:	2000      	movs	r0, #0
   d5fe2:	e7fa      	b.n	d5fda <_ZNK8MCP7941022deviceReadRegisterByteEh+0x16>

000d5fe4 <_ZNK8MCP7941020getOscillatorRunningEv>:
bool MCP79410::getOscillatorRunning() const {
   d5fe4:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d5fe6:	2103      	movs	r1, #3
   d5fe8:	f7ff ffec 	bl	d5fc4 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d5fec:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d5ff0:	bd08      	pop	{r3, pc}

000d5ff2 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d5ff2:	b538      	push	{r3, r4, r5, lr}
   d5ff4:	2300      	movs	r3, #0
   d5ff6:	460c      	mov	r4, r1
   d5ff8:	460a      	mov	r2, r1
   d5ffa:	4619      	mov	r1, r3
   d5ffc:	4605      	mov	r5, r0
	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
   d5ffe:	f7ff ffb4 	bl	d5f6a <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.0>
	if (stat == 0) {
   d6002:	b930      	cbnz	r0, d6012 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d6004:	7aa3      	ldrb	r3, [r4, #10]
   d6006:	b123      	cbz	r3, d6012 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
   d6008:	4628      	mov	r0, r5
}
   d600a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d600e:	f7ff bfe9 	b.w	d5fe4 <_ZNK8MCP7941020getOscillatorRunningEv>
}
   d6012:	2000      	movs	r0, #0
   d6014:	bd38      	pop	{r3, r4, r5, pc}

000d6016 <_ZNK8MCP7941010getRTCTimeEv>:
time_t MCP79410::getRTCTime() const {
   d6016:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d6018:	4602      	mov	r2, r0
	MCP79410Time time;
   d601a:	a801      	add	r0, sp, #4
   d601c:	f7ff fe28 	bl	d5c70 <_ZN12MCP79410TimeC1Ev>
	bool bResult = getRTCTime(time);
   d6020:	a901      	add	r1, sp, #4
   d6022:	4610      	mov	r0, r2
   d6024:	f7ff ffe5 	bl	d5ff2 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d6028:	b128      	cbz	r0, d6036 <_ZNK8MCP7941010getRTCTimeEv+0x20>
		return time.toUnixTime();
   d602a:	a801      	add	r0, sp, #4
   d602c:	f7ff fe6c 	bl	d5d08 <_ZNK12MCP79410Time10toUnixTimeEv>
}
   d6030:	b007      	add	sp, #28
   d6032:	f85d fb04 	ldr.w	pc, [sp], #4
		return 0;
   d6036:	2000      	movs	r0, #0
   d6038:	4601      	mov	r1, r0
MCP79410Time::~MCP79410Time() {
   d603a:	e7f9      	b.n	d6030 <_ZNK8MCP7941010getRTCTimeEv+0x1a>

000d603c <_ZN8MCP794105setupEv>:
void MCP79410::setup() {
   d603c:	b5d0      	push	{r4, r6, r7, lr}
   d603e:	4604      	mov	r4, r0
   d6040:	b086      	sub	sp, #24
	wire.begin();
   d6042:	6840      	ldr	r0, [r0, #4]
   d6044:	f001 fc08 	bl	d7858 <_ZN7TwoWire5beginEv>
	if (!Time.isValid()) {
   d6048:	f002 f96e 	bl	d8328 <_ZN9TimeClass7isValidEv>
   d604c:	b9e8      	cbnz	r0, d608a <_ZN8MCP794105setupEv+0x4e>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d604e:	7ae3      	ldrb	r3, [r4, #11]
   d6050:	079b      	lsls	r3, r3, #30
   d6052:	d51a      	bpl.n	d608a <_ZN8MCP794105setupEv+0x4e>
			time_t rtcTime = getRTCTime();
   d6054:	4620      	mov	r0, r4
   d6056:	f7ff ffde 	bl	d6016 <_ZNK8MCP7941010getRTCTimeEv>
   d605a:	4606      	mov	r6, r0
   d605c:	460f      	mov	r7, r1
			if (rtcTime != 0) {
   d605e:	ea56 0307 	orrs.w	r3, r6, r7
   d6062:	d012      	beq.n	d608a <_ZN8MCP794105setupEv+0x4e>
				Time.setTime(rtcTime);
   d6064:	f002 f867 	bl	d8136 <_ZN9TimeClass7setTimeEx>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d6068:	4b0a      	ldr	r3, [pc, #40]	; (d6094 <_ZN8MCP794105setupEv+0x58>)
   d606a:	490b      	ldr	r1, [pc, #44]	; (d6098 <_ZN8MCP794105setupEv+0x5c>)
   d606c:	681b      	ldr	r3, [r3, #0]
   d606e:	9300      	str	r3, [sp, #0]
   d6070:	4632      	mov	r2, r6
   d6072:	463b      	mov	r3, r7
   d6074:	a802      	add	r0, sp, #8
   d6076:	f002 f915 	bl	d82a4 <_ZN9TimeClass6formatExPKc>
   d607a:	4808      	ldr	r0, [pc, #32]	; (d609c <_ZN8MCP794105setupEv+0x60>)
   d607c:	9a02      	ldr	r2, [sp, #8]
   d607e:	4908      	ldr	r1, [pc, #32]	; (d60a0 <_ZN8MCP794105setupEv+0x64>)
   d6080:	f7ff fc56 	bl	d5930 <_ZNK5spark6Logger4infoEPKcz>
   d6084:	a802      	add	r0, sp, #8
   d6086:	f001 fea5 	bl	d7dd4 <_ZN6StringD1Ev>
	setupDone = true;
   d608a:	2301      	movs	r3, #1
   d608c:	7223      	strb	r3, [r4, #8]
}
   d608e:	b006      	add	sp, #24
   d6090:	bdd0      	pop	{r4, r6, r7, pc}
   d6092:	bf00      	nop
   d6094:	2003e340 	.word	0x2003e340
   d6098:	2003e62c 	.word	0x2003e62c
   d609c:	2003e5bc 	.word	0x2003e5bc
   d60a0:	000d9896 	.word	0x000d9896

000d60a4 <_ZN8MCP7941011deviceWriteEhhPKhj>:

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d60a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d60a8:	4606      	mov	r6, r0
   d60aa:	4688      	mov	r8, r1
   d60ac:	4691      	mov	r9, r2
   d60ae:	469a      	mov	sl, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d60b0:	2500      	movs	r5, #0

	while(offset < bufLen) {
   d60b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d60b4:	429d      	cmp	r5, r3
   d60b6:	d229      	bcs.n	d610c <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		wire.beginTransmission(i2cAddr);
   d60b8:	6870      	ldr	r0, [r6, #4]
   d60ba:	4641      	mov	r1, r8
   d60bc:	f001 fbfe 	bl	d78bc <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d60c0:	6870      	ldr	r0, [r6, #4]
   d60c2:	eb09 0105 	add.w	r1, r9, r5
   d60c6:	f7ff fc2f 	bl	d5928 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d60ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d60cc:	1b5f      	subs	r7, r3, r5
		if (count > 31) {
   d60ce:	2f1f      	cmp	r7, #31
   d60d0:	bf28      	it	cs
   d60d2:	271f      	movcs	r7, #31
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d60d4:	eb0a 0405 	add.w	r4, sl, r5
   d60d8:	eb07 0b04 	add.w	fp, r7, r4
			wire.write(buf[ii + offset]);
   d60dc:	6870      	ldr	r0, [r6, #4]
   d60de:	f814 1b01 	ldrb.w	r1, [r4], #1
   d60e2:	6802      	ldr	r2, [r0, #0]
   d60e4:	6892      	ldr	r2, [r2, #8]
   d60e6:	4790      	blx	r2
		for(size_t ii = 0; ii < count; ii++) {
   d60e8:	45a3      	cmp	fp, r4
   d60ea:	d1f7      	bne.n	d60dc <_ZN8MCP7941011deviceWriteEhhPKhj+0x38>
		}

		stat = wire.endTransmission(true);
   d60ec:	6870      	ldr	r0, [r6, #4]
   d60ee:	2101      	movs	r1, #1
   d60f0:	f001 fc03 	bl	d78fa <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d60f4:	4604      	mov	r4, r0
   d60f6:	b138      	cbz	r0, d6108 <_ZN8MCP7941011deviceWriteEhhPKhj+0x64>
			log.info("deviceWrite failed stat=%d", stat);
   d60f8:	4602      	mov	r2, r0
   d60fa:	4905      	ldr	r1, [pc, #20]	; (d6110 <_ZN8MCP7941011deviceWriteEhhPKhj+0x6c>)
   d60fc:	4805      	ldr	r0, [pc, #20]	; (d6114 <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d60fe:	f7ff fc17 	bl	d5930 <_ZNK5spark6Logger4infoEPKcz>

		offset += count;
	}

	return stat;
}
   d6102:	4620      	mov	r0, r4
   d6104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		offset += count;
   d6108:	443d      	add	r5, r7
	while(offset < bufLen) {
   d610a:	e7d2      	b.n	d60b2 <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d610c:	2400      	movs	r4, #0
	return stat;
   d610e:	e7f8      	b.n	d6102 <_ZN8MCP7941011deviceWriteEhhPKhj+0x5e>
   d6110:	000d98ab 	.word	0x000d98ab
   d6114:	2003e5bc 	.word	0x2003e5bc

000d6118 <_ZN12MCP79410SRAM9writeDataEjPKhj>:
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6118:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if ((addr + dataLen) > length()) {
   d611c:	eb01 0803 	add.w	r8, r1, r3
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6120:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d6122:	6803      	ldr	r3, [r0, #0]
   d6124:	689b      	ldr	r3, [r3, #8]
bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6126:	4605      	mov	r5, r0
   d6128:	460c      	mov	r4, r1
   d612a:	4617      	mov	r7, r2
	if ((addr + dataLen) > length()) {
   d612c:	4798      	blx	r3
   d612e:	4580      	cmp	r8, r0
   d6130:	d80d      	bhi.n	d614e <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>
	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d6132:	3420      	adds	r4, #32
   d6134:	6868      	ldr	r0, [r5, #4]
   d6136:	9600      	str	r6, [sp, #0]
   d6138:	463b      	mov	r3, r7
   d613a:	b2e2      	uxtb	r2, r4
   d613c:	216f      	movs	r1, #111	; 0x6f
   d613e:	f7ff ffb1 	bl	d60a4 <_ZN8MCP7941011deviceWriteEhhPKhj>
	return (stat == 0);
   d6142:	fab0 f080 	clz	r0, r0
   d6146:	0940      	lsrs	r0, r0, #5
}
   d6148:	b002      	add	sp, #8
   d614a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   d614e:	2000      	movs	r0, #0
   d6150:	e7fa      	b.n	d6148 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x30>

000d6152 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d6152:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	buf[0] = time.rawSecond;
   d6154:	7c13      	ldrb	r3, [r2, #16]
   d6156:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d615a:	7bd3      	ldrb	r3, [r2, #15]
   d615c:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d6160:	7b93      	ldrb	r3, [r2, #14]
   d6162:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d6166:	7b53      	ldrb	r3, [r2, #13]
   d6168:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d616c:	7b13      	ldrb	r3, [r2, #12]
   d616e:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d6172:	7ad3      	ldrb	r3, [r2, #11]
   d6174:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d6178:	7a93      	ldrb	r3, [r2, #10]
   d617a:	f88d 300e 	strb.w	r3, [sp, #14]
	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d617e:	2307      	movs	r3, #7
   d6180:	9300      	str	r3, [sp, #0]
   d6182:	460a      	mov	r2, r1
   d6184:	ab02      	add	r3, sp, #8
   d6186:	216f      	movs	r1, #111	; 0x6f
   d6188:	f7ff ff8c 	bl	d60a4 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d618c:	b005      	add	sp, #20
   d618e:	f85d fb04 	ldr.w	pc, [sp], #4

000d6192 <_ZN8MCP7941010setRTCTimeEx>:
bool MCP79410::setRTCTime(time_t unixTime) {
   d6192:	b510      	push	{r4, lr}
   d6194:	b088      	sub	sp, #32
   d6196:	4604      	mov	r4, r0
	MCP79410Time time;
   d6198:	a803      	add	r0, sp, #12
bool MCP79410::setRTCTime(time_t unixTime) {
   d619a:	9301      	str	r3, [sp, #4]
	MCP79410Time time;
   d619c:	f7ff fd68 	bl	d5c70 <_ZN12MCP79410TimeC1Ev>
	time.fromUnixTime(unixTime);
   d61a0:	9b01      	ldr	r3, [sp, #4]
   d61a2:	a803      	add	r0, sp, #12
   d61a4:	f7ff fe27 	bl	d5df6 <_ZN12MCP79410Time12fromUnixTimeEx>
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d61a8:	f89d 301c 	ldrb.w	r3, [sp, #28]
	if (batteryEnable) {
   d61ac:	7aa2      	ldrb	r2, [r4, #10]
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d61ae:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d61b2:	f88d 301c 	strb.w	r3, [sp, #28]
	if (batteryEnable) {
   d61b6:	f89d 3019 	ldrb.w	r3, [sp, #25]
   d61ba:	b16a      	cbz	r2, d61d8 <_ZN8MCP7941010setRTCTimeEx+0x46>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d61bc:	f043 0308 	orr.w	r3, r3, #8
	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d61c0:	aa03      	add	r2, sp, #12
   d61c2:	2100      	movs	r1, #0
   d61c4:	4620      	mov	r0, r4
   d61c6:	f88d 3019 	strb.w	r3, [sp, #25]
   d61ca:	f7ff ffc2 	bl	d6152 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d61ce:	fab0 f080 	clz	r0, r0
   d61d2:	0940      	lsrs	r0, r0, #5
   d61d4:	b008      	add	sp, #32
   d61d6:	bd10      	pop	{r4, pc}
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d61d8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   d61dc:	e7f0      	b.n	d61c0 <_ZN8MCP7941010setRTCTimeEx+0x2e>
	...

000d61e0 <_ZN8MCP7941015setRTCFromCloudEv>:
bool MCP79410::setRTCFromCloud() {
   d61e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d61e2:	b087      	sub	sp, #28
   d61e4:	4605      	mov	r5, r0
	if (Time.isValid()) {
   d61e6:	f002 f89f 	bl	d8328 <_ZN9TimeClass7isValidEv>
   d61ea:	4604      	mov	r4, r0
   d61ec:	b1e8      	cbz	r0, d622a <_ZN8MCP7941015setRTCFromCloudEv+0x4a>
		time_t now = Time.now();
   d61ee:	f002 f8b8 	bl	d8362 <_ZN9TimeClass3nowEv>
   d61f2:	17c7      	asrs	r7, r0, #31
		bResult = setRTCTime(now);
   d61f4:	4602      	mov	r2, r0
		time_t now = Time.now();
   d61f6:	4606      	mov	r6, r0
		bResult = setRTCTime(now);
   d61f8:	463b      	mov	r3, r7
   d61fa:	4628      	mov	r0, r5
   d61fc:	f7ff ffc9 	bl	d6192 <_ZN8MCP7941010setRTCTimeEx>
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d6200:	4b0c      	ldr	r3, [pc, #48]	; (d6234 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d6202:	490d      	ldr	r1, [pc, #52]	; (d6238 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d6204:	681b      	ldr	r3, [r3, #0]
   d6206:	9300      	str	r3, [sp, #0]
   d6208:	4632      	mov	r2, r6
   d620a:	463b      	mov	r3, r7
		bResult = setRTCTime(now);
   d620c:	4604      	mov	r4, r0
		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d620e:	a802      	add	r0, sp, #8
   d6210:	f002 f848 	bl	d82a4 <_ZN9TimeClass6formatExPKc>
   d6214:	4809      	ldr	r0, [pc, #36]	; (d623c <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d6216:	9a02      	ldr	r2, [sp, #8]
   d6218:	4909      	ldr	r1, [pc, #36]	; (d6240 <_ZN8MCP7941015setRTCFromCloudEv+0x60>)
   d621a:	f7ff fb89 	bl	d5930 <_ZNK5spark6Logger4infoEPKcz>
   d621e:	a802      	add	r0, sp, #8
   d6220:	f001 fdd8 	bl	d7dd4 <_ZN6StringD1Ev>
}
   d6224:	4620      	mov	r0, r4
   d6226:	b007      	add	sp, #28
   d6228:	bdf0      	pop	{r4, r5, r6, r7, pc}
		log.info("cloud time not valid");
   d622a:	4906      	ldr	r1, [pc, #24]	; (d6244 <_ZN8MCP7941015setRTCFromCloudEv+0x64>)
   d622c:	4803      	ldr	r0, [pc, #12]	; (d623c <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d622e:	f7ff fb7f 	bl	d5930 <_ZNK5spark6Logger4infoEPKcz>
   d6232:	e7f7      	b.n	d6224 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
   d6234:	2003e340 	.word	0x2003e340
   d6238:	2003e62c 	.word	0x2003e62c
   d623c:	2003e5bc 	.word	0x2003e5bc
   d6240:	000d98c6 	.word	0x000d98c6
   d6244:	000d98dc 	.word	0x000d98dc

000d6248 <_ZN8MCP794104loopEv>:
void MCP79410::loop() {
   d6248:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d624a:	7a45      	ldrb	r5, [r0, #9]
void MCP79410::loop() {
   d624c:	4604      	mov	r4, r0
	if (!timeSet) {
   d624e:	b99d      	cbnz	r5, d6278 <_ZN8MCP794104loopEv+0x30>
		if (Time.isValid()) {
   d6250:	f002 f86a 	bl	d8328 <_ZN9TimeClass7isValidEv>
   d6254:	b180      	cbz	r0, d6278 <_ZN8MCP794104loopEv+0x30>
        tm = 0;
   d6256:	2200      	movs	r2, #0
   d6258:	2300      	movs	r3, #0
        return spark_sync_time_last(nullptr, &tm);
   d625a:	4669      	mov	r1, sp
   d625c:	4628      	mov	r0, r5
        tm = 0;
   d625e:	e9cd 2300 	strd	r2, r3, [sp]
        return spark_sync_time_last(nullptr, &tm);
   d6262:	f000 fe23 	bl	d6eac <spark_sync_time_last>
			if (lastSync != 0) {
   d6266:	b138      	cbz	r0, d6278 <_ZN8MCP794104loopEv+0x30>
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d6268:	7ae3      	ldrb	r3, [r4, #11]
   d626a:	07db      	lsls	r3, r3, #31
   d626c:	d502      	bpl.n	d6274 <_ZN8MCP794104loopEv+0x2c>
					setRTCFromCloud();
   d626e:	4620      	mov	r0, r4
   d6270:	f7ff ffb6 	bl	d61e0 <_ZN8MCP7941015setRTCFromCloudEv>
				timeSet = true;
   d6274:	2301      	movs	r3, #1
   d6276:	7263      	strb	r3, [r4, #9]
}
   d6278:	b003      	add	sp, #12
   d627a:	bd30      	pop	{r4, r5, pc}

000d627c <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d627c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d627e:	2301      	movs	r3, #1
	buf[0] = value;
   d6280:	f88d 200c 	strb.w	r2, [sp, #12]
	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d6284:	9300      	str	r3, [sp, #0]
   d6286:	460a      	mov	r2, r1
   d6288:	ab03      	add	r3, sp, #12
   d628a:	216f      	movs	r1, #111	; 0x6f
   d628c:	f7ff ff0a 	bl	d60a4 <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d6290:	b005      	add	sp, #20
   d6292:	f85d fb04 	ldr.w	pc, [sp], #4

000d6296 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d6296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6298:	4604      	mov	r4, r0
   d629a:	460d      	mov	r5, r1
   d629c:	4617      	mov	r7, r2
   d629e:	461e      	mov	r6, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d62a0:	f7ff fe90 	bl	d5fc4 <_ZNK8MCP7941022deviceReadRegisterByteEh>
	value &= andMask;
   d62a4:	ea00 0207 	and.w	r2, r0, r7
	return deviceWriteRegisterByte(addr, value);
   d62a8:	4332      	orrs	r2, r6
   d62aa:	4629      	mov	r1, r5
   d62ac:	4620      	mov	r0, r4
}
   d62ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return deviceWriteRegisterByte(addr, value);
   d62b2:	f7ff bfe3 	b.w	d627c <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d62b6 <_ZN8MCP7941010clearAlarmEi>:
	if (alarmNum < 0 || alarmNum > 1) {
   d62b6:	2901      	cmp	r1, #1
bool MCP79410::clearAlarm(int alarmNum) {
   d62b8:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d62ba:	d80c      	bhi.n	d62d6 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d62bc:	2900      	cmp	r1, #0
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d62be:	f04f 0300 	mov.w	r3, #0
   d62c2:	bf14      	ite	ne
   d62c4:	22df      	movne	r2, #223	; 0xdf
   d62c6:	22ef      	moveq	r2, #239	; 0xef
   d62c8:	2107      	movs	r1, #7
   d62ca:	f7ff ffe4 	bl	d6296 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>
	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d62ce:	fab0 f080 	clz	r0, r0
   d62d2:	0940      	lsrs	r0, r0, #5
}
   d62d4:	bd08      	pop	{r3, pc}
		return false;
   d62d6:	2000      	movs	r0, #0
   d62d8:	e7fc      	b.n	d62d4 <_ZN8MCP7941010clearAlarmEi+0x1e>

000d62da <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d62da:	b538      	push	{r3, r4, r5, lr}
   d62dc:	4604      	mov	r4, r0
   d62de:	2532      	movs	r5, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d62e0:	6860      	ldr	r0, [r4, #4]
   d62e2:	2157      	movs	r1, #87	; 0x57
   d62e4:	f001 faea 	bl	d78bc <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d62e8:	6860      	ldr	r0, [r4, #4]
   d62ea:	2101      	movs	r1, #1
   d62ec:	f001 fb05 	bl	d78fa <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d62f0:	b108      	cbz	r0, d62f6 <_ZN8MCP7941013waitForEEPROMEv+0x1c>
	for(size_t tries = 0; tries < 50; tries++) {
   d62f2:	3d01      	subs	r5, #1
   d62f4:	d1f4      	bne.n	d62e0 <_ZN8MCP7941013waitForEEPROMEv+0x6>
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d62f6:	bd38      	pop	{r3, r4, r5, pc}

000d62f8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d62f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d62fc:	4604      	mov	r4, r0
   d62fe:	460f      	mov	r7, r1
   d6300:	4616      	mov	r6, r2
   d6302:	eb02 0803 	add.w	r8, r2, r3
	while(offset < bufLen) {
   d6306:	45b0      	cmp	r8, r6
   d6308:	d020      	beq.n	d634c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x54>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d630a:	6860      	ldr	r0, [r4, #4]
   d630c:	2157      	movs	r1, #87	; 0x57
   d630e:	f001 fad5 	bl	d78bc <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d6312:	4639      	mov	r1, r7
   d6314:	6860      	ldr	r0, [r4, #4]
   d6316:	f7ff fb07 	bl	d5928 <_ZN7TwoWire5writeEj>
			wire.write(buf[ii + offset]);
   d631a:	6860      	ldr	r0, [r4, #4]
   d631c:	f816 1b01 	ldrb.w	r1, [r6], #1
   d6320:	6803      	ldr	r3, [r0, #0]
   d6322:	689b      	ldr	r3, [r3, #8]
   d6324:	4798      	blx	r3
		stat = wire.endTransmission(true);
   d6326:	6860      	ldr	r0, [r4, #4]
   d6328:	2101      	movs	r1, #1
   d632a:	f001 fae6 	bl	d78fa <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d632e:	3701      	adds	r7, #1
   d6330:	4605      	mov	r5, r0
   d6332:	b138      	cbz	r0, d6344 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x4c>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d6334:	4602      	mov	r2, r0
   d6336:	4906      	ldr	r1, [pc, #24]	; (d6350 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d6338:	4806      	ldr	r0, [pc, #24]	; (d6354 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d633a:	f7ff faf9 	bl	d5930 <_ZNK5spark6Logger4infoEPKcz>
}
   d633e:	4628      	mov	r0, r5
   d6340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		waitForEEPROM();
   d6344:	4620      	mov	r0, r4
   d6346:	f7ff ffc8 	bl	d62da <_ZN8MCP7941013waitForEEPROMEv>
	while(offset < bufLen) {
   d634a:	e7dc      	b.n	d6306 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d634c:	2500      	movs	r5, #0
	return stat;
   d634e:	e7f6      	b.n	d633e <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x46>
   d6350:	000d98f1 	.word	0x000d98f1
   d6354:	2003e5bc 	.word	0x2003e5bc

000d6358 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6358:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if ((addr + dataLen) > length()) {
   d635a:	18cf      	adds	r7, r1, r3
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d635c:	461e      	mov	r6, r3
	if ((addr + dataLen) > length()) {
   d635e:	6803      	ldr	r3, [r0, #0]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6360:	9201      	str	r2, [sp, #4]
	if ((addr + dataLen) > length()) {
   d6362:	689b      	ldr	r3, [r3, #8]
bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d6364:	4604      	mov	r4, r0
   d6366:	460d      	mov	r5, r1
	if ((addr + dataLen) > length()) {
   d6368:	4798      	blx	r3
   d636a:	4287      	cmp	r7, r0
   d636c:	d80a      	bhi.n	d6384 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x2c>
	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d636e:	9a01      	ldr	r2, [sp, #4]
   d6370:	6860      	ldr	r0, [r4, #4]
   d6372:	4633      	mov	r3, r6
   d6374:	b2e9      	uxtb	r1, r5
   d6376:	f7ff ffbf 	bl	d62f8 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>
	return (stat == 0);
   d637a:	fab0 f080 	clz	r0, r0
   d637e:	0940      	lsrs	r0, r0, #5
}
   d6380:	b003      	add	sp, #12
   d6382:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
   d6384:	2000      	movs	r0, #0
   d6386:	e7fb      	b.n	d6380 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x28>

000d6388 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
        name_(name) {
   d6388:	4b01      	ldr	r3, [pc, #4]	; (d6390 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x8>)
   d638a:	4a02      	ldr	r2, [pc, #8]	; (d6394 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0xc>)
   d638c:	601a      	str	r2, [r3, #0]
}
   d638e:	4770      	bx	lr
   d6390:	2003e5bc 	.word	0x2003e5bc
   d6394:	000d9912 	.word	0x000d9912

000d6398 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
   d6398:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   d639a:	4603      	mov	r3, r0
	switch (__op)
   d639c:	d102      	bne.n	d63a4 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xc>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() =
   d639e:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
   d63a0:	2000      	movs	r0, #0
   d63a2:	4770      	bx	lr
	  switch (__op)
   d63a4:	2a02      	cmp	r2, #2
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
   d63a6:	bf04      	itt	eq
   d63a8:	e9d1 0100 	ldrdeq	r0, r1, [r1]
   d63ac:	e9c3 0100 	strdeq	r0, r1, [r3]
	}
   d63b0:	e7f6      	b.n	d63a0 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x8>

000d63b2 <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d63b2:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d63b4:	2301      	movs	r3, #1
   d63b6:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d63b8:	6883      	ldr	r3, [r0, #8]
    static os_thread_return_t run(void* param) {
   d63ba:	4604      	mov	r4, r0
        if (th->func) {
   d63bc:	b143      	cbz	r3, d63d0 <_ZN6Thread3runEPv+0x1e>
            (*(th->func))(th->func_param);
   d63be:	68c0      	ldr	r0, [r0, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d63c0:	4798      	blx	r3
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
   d63c2:	2301      	movs	r3, #1
   d63c4:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d63c6:	2000      	movs	r0, #0
    }
   d63c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        os_thread_exit(nullptr);
   d63cc:	f000 bb14 	b.w	d69f8 <os_thread_exit>
      template<typename _Del>
      __uniq_ptr_impl(pointer __p, _Del&& __d)
	: _M_t(__p, std::forward<_Del>(__d)) { }

      pointer&   _M_ptr() { return std::get<0>(_M_t); }
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d63d0:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d63d2:	2800      	cmp	r0, #0
   d63d4:	d0f5      	beq.n	d63c2 <_ZN6Thread3runEPv+0x10>
      if (_M_empty())
   d63d6:	6883      	ldr	r3, [r0, #8]
   d63d8:	b90b      	cbnz	r3, d63de <_ZN6Thread3runEPv+0x2c>
	__throw_bad_function_call();
   d63da:	f002 fa8e 	bl	d88fa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d63de:	68c3      	ldr	r3, [r0, #12]
   d63e0:	e7ee      	b.n	d63c0 <_ZN6Thread3runEPv+0xe>

000d63e2 <_ZNSt17_Function_handlerIFvR21PublishQueueAsyncBaseEMS0_FvvEE9_M_invokeERKSt9_Any_dataS1_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d63e2:	b410      	push	{r4}

  template<typename _Res, typename _MemFun, typename _Tp, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_memfun_ref, _MemFun&& __f, _Tp&& __t,
		  _Args&&... __args)
    { return (__invfwd<_Tp>(__t).*__f)(std::forward<_Args>(__args)...); }
   d63e4:	6842      	ldr	r2, [r0, #4]
   d63e6:	4603      	mov	r3, r0
   d63e8:	1054      	asrs	r4, r2, #1
   d63ea:	eb01 0062 	add.w	r0, r1, r2, asr #1
   d63ee:	07d2      	lsls	r2, r2, #31
   d63f0:	bf48      	it	mi
   d63f2:	590a      	ldrmi	r2, [r1, r4]
   d63f4:	681b      	ldr	r3, [r3, #0]
      }
   d63f6:	f85d 4b04 	ldr.w	r4, [sp], #4
   d63fa:	bf48      	it	mi
   d63fc:	58d3      	ldrmi	r3, [r2, r3]
   d63fe:	4718      	bx	r3

000d6400 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d6400:	b510      	push	{r4, lr}
      if (_M_manager)
   d6402:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6404:	4604      	mov	r4, r0
      if (_M_manager)
   d6406:	b113      	cbz	r3, d640e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6408:	2203      	movs	r2, #3
   d640a:	4601      	mov	r1, r0
   d640c:	4798      	blx	r3
    }
   d640e:	4620      	mov	r0, r4
   d6410:	bd10      	pop	{r4, pc}
	...

000d6414 <_ZN21PublishQueueAsyncBase5setupEv>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {

}

void PublishQueueAsyncBase::setup() {
	haveSetup = true;
   d6414:	2301      	movs	r3, #1
void PublishQueueAsyncBase::setup() {
   d6416:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	haveSetup = true;
   d6418:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
void PublishQueueAsyncBase::setup() {
   d641c:	4606      	mov	r6, r0

	os_mutex_create(&mutex);
   d641e:	3008      	adds	r0, #8
   d6420:	f000 fac2 	bl	d69a8 <os_mutex_create>

	thread = new Thread("PublishQueueAsync", threadFunctionStatic, this, OS_THREAD_PRIORITY_DEFAULT, 2048);
   d6424:	2004      	movs	r0, #4
   d6426:	f7fd fe36 	bl	d4096 <_Znwj>
   d642a:	4605      	mov	r5, r0
   d642c:	b398      	cbz	r0, d6496 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
        : d_(new(std::nothrow) Data)
   d642e:	491b      	ldr	r1, [pc, #108]	; (d649c <_ZN21PublishQueueAsyncBase5setupEv+0x88>)
   d6430:	2014      	movs	r0, #20
   d6432:	f002 fa5e 	bl	d88f2 <_ZnwjRKSt9nothrow_t>
   d6436:	b130      	cbz	r0, d6446 <_ZN21PublishQueueAsyncBase5setupEv+0x32>

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6438:	2300      	movs	r3, #0
            exited(false) {
   d643a:	e9c0 3300 	strd	r3, r3, [r0]
   d643e:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6442:	7403      	strb	r3, [r0, #16]
   d6444:	7443      	strb	r3, [r0, #17]
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6446:	6028      	str	r0, [r5, #0]
        if (!d_) {
   d6448:	b1a0      	cbz	r0, d6474 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
        d_->func = function;
   d644a:	4b15      	ldr	r3, [pc, #84]	; (d64a0 <_ZN21PublishQueueAsyncBase5setupEv+0x8c>)
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d644c:	4915      	ldr	r1, [pc, #84]	; (d64a4 <_ZN21PublishQueueAsyncBase5setupEv+0x90>)
        d_->func_param = function_param;
   d644e:	e9c0 3602 	strd	r3, r6, [r0, #8]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d6452:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d6456:	e9cd 0300 	strd	r0, r3, [sp]
   d645a:	2202      	movs	r2, #2
   d645c:	4b12      	ldr	r3, [pc, #72]	; (d64a8 <_ZN21PublishQueueAsyncBase5setupEv+0x94>)
   d645e:	3004      	adds	r0, #4
   d6460:	f000 fa92 	bl	d6988 <os_thread_create>
   d6464:	b930      	cbnz	r0, d6474 <_ZN21PublishQueueAsyncBase5setupEv+0x60>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6466:	682b      	ldr	r3, [r5, #0]
        while (!d_->started) {
   d6468:	7c1b      	ldrb	r3, [r3, #16]
   d646a:	b9a3      	cbnz	r3, d6496 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
            HAL_Delay_Milliseconds(1);
   d646c:	2001      	movs	r0, #1
   d646e:	f000 fadb 	bl	d6a28 <HAL_Delay_Milliseconds>
        while (!d_->started) {
   d6472:	e7f8      	b.n	d6466 <_ZN21PublishQueueAsyncBase5setupEv+0x52>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6474:	682c      	ldr	r4, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6476:	2300      	movs	r3, #0
   d6478:	602b      	str	r3, [r5, #0]
      {
	static_assert(__is_invocable<deleter_type&, pointer>::value,
		      "unique_ptr's deleter must be invocable with a pointer");
	using std::swap;
	swap(_M_t._M_ptr(), __p);
	if (__p != pointer())
   d647a:	b164      	cbz	r4, d6496 <_ZN21PublishQueueAsyncBase5setupEv+0x82>
	if (__ptr != nullptr)
   d647c:	6827      	ldr	r7, [r4, #0]
   d647e:	b137      	cbz	r7, d648e <_ZN21PublishQueueAsyncBase5setupEv+0x7a>
    class function<_Res(_ArgTypes...)>
   d6480:	4638      	mov	r0, r7
   d6482:	f7ff ffbd 	bl	d6400 <_ZNSt14_Function_baseD1Ev>
	delete __ptr;
   d6486:	2110      	movs	r1, #16
   d6488:	4638      	mov	r0, r7
   d648a:	f002 fa30 	bl	d88ee <_ZdlPvj>
   d648e:	2114      	movs	r1, #20
   d6490:	4620      	mov	r0, r4
   d6492:	f002 fa2c 	bl	d88ee <_ZdlPvj>
   d6496:	6075      	str	r5, [r6, #4]
}
   d6498:	b003      	add	sp, #12
   d649a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d649c:	000d9c50 	.word	0x000d9c50
   d64a0:	000d66b3 	.word	0x000d66b3
   d64a4:	000d9984 	.word	0x000d9984
   d64a8:	000d63b3 	.word	0x000d63b3

000d64ac <_ZN21PublishQueueAsyncBaseC1Ev>:
PublishQueueAsyncBase::PublishQueueAsyncBase() {
   d64ac:	f247 5130 	movw	r1, #30000	; 0x7530
   d64b0:	4a08      	ldr	r2, [pc, #32]	; (d64d4 <_ZN21PublishQueueAsyncBaseC1Ev+0x28>)
   d64b2:	60c1      	str	r1, [r0, #12]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d64b4:	4908      	ldr	r1, [pc, #32]	; (d64d8 <_ZN21PublishQueueAsyncBaseC1Ev+0x2c>)
   d64b6:	6002      	str	r2, [r0, #0]
   d64b8:	2200      	movs	r2, #0
   d64ba:	e9c0 1204 	strd	r1, r2, [r0, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d64be:	4907      	ldr	r1, [pc, #28]	; (d64dc <_ZN21PublishQueueAsyncBaseC1Ev+0x30>)
   d64c0:	61c1      	str	r1, [r0, #28]
	    _M_manager = &_My_handler::_M_manager;
   d64c2:	4907      	ldr	r1, [pc, #28]	; (d64e0 <_ZN21PublishQueueAsyncBaseC1Ev+0x34>)
   d64c4:	6042      	str	r2, [r0, #4]
   d64c6:	e9c0 2208 	strd	r2, r2, [r0, #32]
   d64ca:	6181      	str	r1, [r0, #24]
   d64cc:	8502      	strh	r2, [r0, #40]	; 0x28
   d64ce:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
}
   d64d2:	4770      	bx	lr
   d64d4:	000d9a48 	.word	0x000d9a48
   d64d8:	000d681d 	.word	0x000d681d
   d64dc:	000d63e3 	.word	0x000d63e3
   d64e0:	000d6399 	.word	0x000d6399

000d64e4 <_ZN21PublishQueueAsyncBaseD1Ev>:
PublishQueueAsyncBase::~PublishQueueAsyncBase() {
   d64e4:	b510      	push	{r4, lr}
   d64e6:	4b04      	ldr	r3, [pc, #16]	; (d64f8 <_ZN21PublishQueueAsyncBaseD1Ev+0x14>)
   d64e8:	4604      	mov	r4, r0
   d64ea:	f840 3b10 	str.w	r3, [r0], #16
    class function<_Res(_ArgTypes...)>
   d64ee:	f7ff ff87 	bl	d6400 <_ZNSt14_Function_baseD1Ev>
}
   d64f2:	4620      	mov	r0, r4
   d64f4:	bd10      	pop	{r4, pc}
   d64f6:	bf00      	nop
   d64f8:	000d9a48 	.word	0x000d9a48

000d64fc <_ZN25PublishQueueAsyncRetainedD1Ev>:
		hdr->numEvents = 0;
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
	}
}

PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d64fc:	b510      	push	{r4, lr}
   d64fe:	4b03      	ldr	r3, [pc, #12]	; (d650c <_ZN25PublishQueueAsyncRetainedD1Ev+0x10>)
   d6500:	6003      	str	r3, [r0, #0]
   d6502:	4604      	mov	r4, r0
   d6504:	f7ff ffee 	bl	d64e4 <_ZN21PublishQueueAsyncBaseD1Ev>

}
   d6508:	4620      	mov	r0, r4
   d650a:	bd10      	pop	{r4, pc}
   d650c:	000d9a70 	.word	0x000d9a70

000d6510 <_ZN25PublishQueueAsyncRetainedD0Ev>:
PublishQueueAsyncRetained::~PublishQueueAsyncRetained() {
   d6510:	b510      	push	{r4, lr}
   d6512:	4604      	mov	r4, r0
}
   d6514:	f7ff fff2 	bl	d64fc <_ZN25PublishQueueAsyncRetainedD1Ev>
   d6518:	4620      	mov	r0, r4
   d651a:	2138      	movs	r1, #56	; 0x38
   d651c:	f002 f9e7 	bl	d88ee <_ZdlPvj>
   d6520:	4620      	mov	r0, r4
   d6522:	bd10      	pop	{r4, pc}

000d6524 <_ZNK21PublishQueueAsyncBase9mutexLockEv>:
	os_mutex_lock(mutex);
   d6524:	6880      	ldr	r0, [r0, #8]
   d6526:	f000 ba47 	b.w	d69b8 <os_mutex_lock>

000d652a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>:
	os_mutex_unlock(mutex);
   d652a:	6880      	ldr	r0, [r0, #8]
   d652c:	f000 ba4c 	b.w	d69c8 <os_mutex_unlock>

000d6530 <_ZN11StMutexLockD1Ev>:
	}

	/**
	 * @brief Unlock the mutex on destructor
	 */
	~StMutexLock() {
   d6530:	b510      	push	{r4, lr}
   d6532:	4604      	mov	r4, r0
		publishQueue->mutexUnlock();
   d6534:	6800      	ldr	r0, [r0, #0]
   d6536:	f7ff fff8 	bl	d652a <_ZNK21PublishQueueAsyncBase11mutexUnlockEv>
	}
   d653a:	4620      	mov	r0, r4
   d653c:	bd10      	pop	{r4, pc}

000d653e <_ZN25PublishQueueAsyncRetained14getOldestEventEv>:
	// Not reached
	return false;
}


PublishQueueEventData *PublishQueueAsyncRetained::getOldestEvent() {
   d653e:	b513      	push	{r0, r1, r4, lr}
   d6540:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6542:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6544:	f7ff ffee 	bl	d6524 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	// This entire function holds a mutex lock that's released when returning
	StMutexLock lock(this);
	PublishQueueEventData *eventData = NULL;

	volatile PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6548:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	if (hdr->numEvents > 0) {
   d654a:	88dc      	ldrh	r4, [r3, #6]
   d654c:	b2a4      	uxth	r4, r4
   d654e:	b10c      	cbz	r4, d6554 <_ZN25PublishQueueAsyncRetained14getOldestEventEv+0x16>
		eventData = reinterpret_cast<PublishQueueEventData *>(&retainedBuffer[sizeof(PublishQueueHeader)]);
   d6550:	f103 0408 	add.w	r4, r3, #8
	StMutexLock lock(this);
   d6554:	a801      	add	r0, sp, #4
   d6556:	f7ff ffeb 	bl	d6530 <_ZN11StMutexLockD1Ev>
	}

	return eventData;
}
   d655a:	4620      	mov	r0, r4
   d655c:	b002      	add	sp, #8
   d655e:	bd10      	pop	{r4, pc}

000d6560 <_ZN25PublishQueueAsyncRetained11clearEventsEv>:

bool PublishQueueAsyncRetained::clearEvents() {
   d6560:	b513      	push	{r0, r1, r4, lr}
   d6562:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d6564:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d6566:	f7ff ffdd 	bl	d6524 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	bool result = false;

	StMutexLock lock(this);

	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
	if (!isSending) {
   d656a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   d656e:	b943      	cbnz	r3, d6582 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x22>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d6570:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		hdr->numEvents = 0;
		result = true;
   d6572:	2401      	movs	r4, #1
		hdr->numEvents = 0;
   d6574:	80d3      	strh	r3, [r2, #6]
	StMutexLock lock(this);
   d6576:	a801      	add	r0, sp, #4
   d6578:	f7ff ffda 	bl	d6530 <_ZN11StMutexLockD1Ev>
	}

	return result;
}
   d657c:	4620      	mov	r0, r4
   d657e:	b002      	add	sp, #8
   d6580:	bd10      	pop	{r4, pc}
	bool result = false;
   d6582:	2400      	movs	r4, #0
   d6584:	e7f7      	b.n	d6576 <_ZN25PublishQueueAsyncRetained11clearEventsEv+0x16>

000d6586 <_ZNK25PublishQueueAsyncRetained12getNumEventsEv>:


	return true;
}

uint16_t PublishQueueAsyncRetained::getNumEvents() const {
   d6586:	b513      	push	{r0, r1, r4, lr}
   d6588:	4604      	mov	r4, r0
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d658a:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d658c:	f7ff ffca 	bl	d6524 <_ZNK21PublishQueueAsyncBase9mutexLockEv>

	{
		StMutexLock lock(this);

		PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
		numEvents = hdr->numEvents;
   d6590:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
		StMutexLock lock(this);
   d6592:	a801      	add	r0, sp, #4
		numEvents = hdr->numEvents;
   d6594:	88dc      	ldrh	r4, [r3, #6]
		StMutexLock lock(this);
   d6596:	f7ff ffcb 	bl	d6530 <_ZN11StMutexLockD1Ev>
	}

	return numEvents;
}
   d659a:	4620      	mov	r0, r4
   d659c:	b002      	add	sp, #8
   d659e:	bd10      	pop	{r4, pc}

000d65a0 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_>:
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d65a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d65a4:	4699      	mov	r9, r3
   d65a6:	b086      	sub	sp, #24
	if (!haveSetup) {
   d65a8:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
   d65ac:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d65b0:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
bool PublishQueueAsyncRetained::publishCommon(const char *eventName, const char *data, int ttl, PublishFlags flags1, PublishFlags flags2) {
   d65b4:	4604      	mov	r4, r0
   d65b6:	460f      	mov	r7, r1
   d65b8:	4616      	mov	r6, r2
	if (!haveSetup) {
   d65ba:	b913      	cbnz	r3, d65c2 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x22>
		setup();
   d65bc:	6803      	ldr	r3, [r0, #0]
   d65be:	689b      	ldr	r3, [r3, #8]
   d65c0:	4798      	blx	r3
		data = "";
   d65c2:	4b31      	ldr	r3, [pc, #196]	; (d6688 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe8>)
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d65c4:	4638      	mov	r0, r7
		data = "";
   d65c6:	2e00      	cmp	r6, #0
   d65c8:	bf08      	it	eq
   d65ca:	461e      	moveq	r6, r3
	size_t size = sizeof(PublishQueueEventData) + strlen(eventName) + strlen(data) + 2;
   d65cc:	f002 fe83 	bl	d92d6 <strlen>
   d65d0:	4605      	mov	r5, r0
   d65d2:	4630      	mov	r0, r6
   d65d4:	f002 fe7f 	bl	d92d6 <strlen>
   d65d8:	4428      	add	r0, r5
   d65da:	f100 050a 	add.w	r5, r0, #10
	if ((size % 4) != 0) {
   d65de:	07ab      	lsls	r3, r5, #30
		size += 4 - (size % 4);
   d65e0:	bf1c      	itt	ne
   d65e2:	f025 0503 	bicne.w	r5, r5, #3
   d65e6:	3504      	addne	r5, #4
	pubqLogger.info("queueing eventName=%s data=%s ttl=%d flags1=%d flags2=%d size=%d", eventName, data, ttl, flags1.value(), flags2.value(), size);
   d65e8:	4633      	mov	r3, r6
   d65ea:	e9cd 8502 	strd	r8, r5, [sp, #8]
   d65ee:	e9cd 9a00 	strd	r9, sl, [sp]
   d65f2:	4926      	ldr	r1, [pc, #152]	; (d668c <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xec>)
   d65f4:	4826      	ldr	r0, [pc, #152]	; (d6690 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xf0>)
   d65f6:	463a      	mov	r2, r7
   d65f8:	f7ff f99a 	bl	d5930 <_ZNK5spark6Logger4infoEPKcz>
	if  (size > (retainedBufferSize - sizeof(PublishQueueHeader))) {
   d65fc:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   d65fe:	3b08      	subs	r3, #8
   d6600:	42ab      	cmp	r3, r5
   d6602:	d212      	bcs.n	d662a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x8a>
		return false;
   d6604:	2400      	movs	r4, #0
}
   d6606:	4620      	mov	r0, r4
   d6608:	b006      	add	sp, #24
   d660a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (hdr->numEvents == 1) {
   d660e:	88cb      	ldrh	r3, [r1, #6]
   d6610:	2b01      	cmp	r3, #1
   d6612:	d036      	beq.n	d6682 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xe2>
			StMutexLock lock(this);
   d6614:	a805      	add	r0, sp, #20
   d6616:	f7ff ff8b 	bl	d6530 <_ZN11StMutexLockD1Ev>
		if (!discardOldEvent(isSending)) {
   d661a:	6823      	ldr	r3, [r4, #0]
   d661c:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
   d6620:	699b      	ldr	r3, [r3, #24]
   d6622:	4620      	mov	r0, r4
   d6624:	4798      	blx	r3
   d6626:	2800      	cmp	r0, #0
   d6628:	d0ec      	beq.n	d6604 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x64>
   d662a:	4620      	mov	r0, r4
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d662c:	9405      	str	r4, [sp, #20]
		publishQueue->mutexLock();
   d662e:	f7ff ff79 	bl	d6524 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6632:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   d6634:	8e22      	ldrh	r2, [r4, #48]	; 0x30
			if ((size_t)(end - nextFree) >= size) {
   d6636:	6b63      	ldr	r3, [r4, #52]	; 0x34
			uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6638:	440a      	add	r2, r1
			if ((size_t)(end - nextFree) >= size) {
   d663a:	1ad2      	subs	r2, r2, r3
   d663c:	42aa      	cmp	r2, r5
   d663e:	d3e6      	bcc.n	d660e <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x6e>
				eventData->flags = flags1.value() | flags2.value();
   d6640:	ea48 080a 	orr.w	r8, r8, sl
   d6644:	f883 8004 	strb.w	r8, [r3, #4]
				eventData->ttl = ttl;
   d6648:	f8c3 9000 	str.w	r9, [r3]
				char *cp = reinterpret_cast<char *>(nextFree);
   d664c:	6b63      	ldr	r3, [r4, #52]	; 0x34
				cp += sizeof(PublishQueueEventData);
   d664e:	f103 0808 	add.w	r8, r3, #8
				strcpy(cp, eventName);
   d6652:	4639      	mov	r1, r7
   d6654:	4640      	mov	r0, r8
   d6656:	f002 fe19 	bl	d928c <strcpy>
				cp += strlen(cp) + 1;
   d665a:	4640      	mov	r0, r8
   d665c:	f002 fe3b 	bl	d92d6 <strlen>
   d6660:	3001      	adds	r0, #1
				strcpy(cp, data);
   d6662:	4631      	mov	r1, r6
   d6664:	4440      	add	r0, r8
   d6666:	f002 fe11 	bl	d928c <strcpy>
				nextFree += size;
   d666a:	6b63      	ldr	r3, [r4, #52]	; 0x34
				PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d666c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
				nextFree += size;
   d666e:	441d      	add	r5, r3
   d6670:	6365      	str	r5, [r4, #52]	; 0x34
				hdr->numEvents++;
   d6672:	88d3      	ldrh	r3, [r2, #6]
   d6674:	3301      	adds	r3, #1
   d6676:	80d3      	strh	r3, [r2, #6]
				return true;
   d6678:	2401      	movs	r4, #1
			StMutexLock lock(this);
   d667a:	a805      	add	r0, sp, #20
   d667c:	f7ff ff58 	bl	d6530 <_ZN11StMutexLockD1Ev>
   d6680:	e7c1      	b.n	d6606 <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0x66>
				return false;
   d6682:	2400      	movs	r4, #0
   d6684:	e7f9      	b.n	d667a <_ZN25PublishQueueAsyncRetained13publishCommonEPKcS1_iN8particle5FlagsI15PublishFlagTypehEES5_+0xda>
   d6686:	bf00      	nop
   d6688:	000d9c70 	.word	0x000d9c70
   d668c:	000d9996 	.word	0x000d9996
   d6690:	2003e5c0 	.word	0x2003e5c0

000d6694 <_ZN21PublishQueueAsyncBase14threadFunctionEv>:
void PublishQueueAsyncBase::threadFunction() {
   d6694:	b508      	push	{r3, lr}
   d6696:	4604      	mov	r4, r0
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6698:	f100 0510 	add.w	r5, r0, #16
      if (_M_empty())
   d669c:	69a3      	ldr	r3, [r4, #24]
   d669e:	b90b      	cbnz	r3, d66a4 <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x10>
	__throw_bad_function_call();
   d66a0:	f002 f92b 	bl	d88fa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d66a4:	69e3      	ldr	r3, [r4, #28]
   d66a6:	4621      	mov	r1, r4
   d66a8:	4628      	mov	r0, r5
   d66aa:	4798      	blx	r3
		os_thread_yield();
   d66ac:	f000 f974 	bl	d6998 <os_thread_yield>
	while(true) {
   d66b0:	e7f4      	b.n	d669c <_ZN21PublishQueueAsyncBase14threadFunctionEv+0x8>

000d66b2 <_ZN21PublishQueueAsyncBase20threadFunctionStaticEPv>:
void PublishQueueAsyncBase::threadFunctionStatic(void *param) {
   d66b2:	b508      	push	{r3, lr}
	static_cast<PublishQueueAsync *>(param)->threadFunction();
   d66b4:	f7ff ffee 	bl	d6694 <_ZN21PublishQueueAsyncBase14threadFunctionEv>

000d66b8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>:
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d66b8:	b568      	push	{r3, r5, r6, lr}
	start += sizeof(PublishQueueEventData);
   d66ba:	f101 0508 	add.w	r5, r1, #8
uint8_t *PublishQueueAsyncRetained::skipEvent(uint8_t *start) {
   d66be:	4606      	mov	r6, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d66c0:	4628      	mov	r0, r5
   d66c2:	f002 fe08 	bl	d92d6 <strlen>
   d66c6:	3001      	adds	r0, #1
   d66c8:	4405      	add	r5, r0
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d66ca:	4628      	mov	r0, r5
   d66cc:	f002 fe03 	bl	d92d6 <strlen>
	size_t offset = start - retainedBuffer;
   d66d0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	start += strlen(reinterpret_cast<char *>(start)) + 1;
   d66d2:	3001      	adds	r0, #1
   d66d4:	4428      	add	r0, r5
	size_t offset = start - retainedBuffer;
   d66d6:	1ac3      	subs	r3, r0, r3
	if ((offset % 4) != 0) {
   d66d8:	f013 0303 	ands.w	r3, r3, #3
		start += 4 - (offset % 4);
   d66dc:	bf1c      	itt	ne
   d66de:	f1c3 0304 	rsbne	r3, r3, #4
   d66e2:	18c0      	addne	r0, r0, r3
}
   d66e4:	bd68      	pop	{r3, r5, r6, pc}

000d66e6 <_ZN25PublishQueueAsyncRetained15discardOldEventEb>:
bool PublishQueueAsyncRetained::discardOldEvent(bool secondEvent) {
   d66e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d66e8:	4604      	mov	r4, r0
   d66ea:	460e      	mov	r6, r1
	StMutexLock(const PublishQueueAsyncBase *publishQueue) : publishQueue(publishQueue) {
   d66ec:	9001      	str	r0, [sp, #4]
		publishQueue->mutexLock();
   d66ee:	f7ff ff19 	bl	d6524 <_ZNK21PublishQueueAsyncBase9mutexLockEv>
	PublishQueueHeader *hdr = reinterpret_cast<PublishQueueHeader *>(retainedBuffer);
   d66f2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
	uint8_t *start = &retainedBuffer[sizeof(PublishQueueHeader)];
   d66f4:	88fb      	ldrh	r3, [r7, #6]
   d66f6:	f107 0508 	add.w	r5, r7, #8
	if (secondEvent) {
   d66fa:	b1e6      	cbz	r6, d6736 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x50>
		if (hdr->numEvents < 2) {
   d66fc:	2b01      	cmp	r3, #1
   d66fe:	d922      	bls.n	d6746 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x60>
		start = skipEvent(start);
   d6700:	4629      	mov	r1, r5
   d6702:	4620      	mov	r0, r4
   d6704:	f7ff ffd8 	bl	d66b8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
   d6708:	4605      	mov	r5, r0
	uint8_t *next = skipEvent(start);
   d670a:	4629      	mov	r1, r5
   d670c:	4620      	mov	r0, r4
   d670e:	f7ff ffd3 	bl	d66b8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
	uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6712:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   d6714:	443a      	add	r2, r7
	if (after > 0) {
   d6716:	1a12      	subs	r2, r2, r0
	uint8_t *next = skipEvent(start);
   d6718:	4601      	mov	r1, r0
	size_t len = next - start;
   d671a:	eba0 0605 	sub.w	r6, r0, r5
	if (after > 0) {
   d671e:	d002      	beq.n	d6726 <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x40>
		memmove(start, next, after);
   d6720:	4628      	mov	r0, r5
   d6722:	f002 fd63 	bl	d91ec <memmove>
	nextFree -= len;
   d6726:	6b63      	ldr	r3, [r4, #52]	; 0x34
   d6728:	1b9b      	subs	r3, r3, r6
   d672a:	6363      	str	r3, [r4, #52]	; 0x34
	hdr->numEvents--;
   d672c:	88fb      	ldrh	r3, [r7, #6]
   d672e:	3b01      	subs	r3, #1
   d6730:	80fb      	strh	r3, [r7, #6]
	return true;
   d6732:	2601      	movs	r6, #1
   d6734:	e001      	b.n	d673a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
		if (hdr->numEvents < 1) {
   d6736:	2b00      	cmp	r3, #0
   d6738:	d1e7      	bne.n	d670a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x24>
	StMutexLock lock(this);
   d673a:	a801      	add	r0, sp, #4
   d673c:	f7ff fef8 	bl	d6530 <_ZN11StMutexLockD1Ev>
}
   d6740:	4630      	mov	r0, r6
   d6742:	b003      	add	sp, #12
   d6744:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return false;
   d6746:	2600      	movs	r6, #0
   d6748:	e7f7      	b.n	d673a <_ZN25PublishQueueAsyncRetained15discardOldEventEb+0x54>
	...

000d674c <_ZN25PublishQueueAsyncRetainedC1EPht>:
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d674c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6750:	460d      	mov	r5, r1
   d6752:	4604      	mov	r4, r0
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6754:	462f      	mov	r7, r5
PublishQueueAsyncRetained::PublishQueueAsyncRetained(uint8_t *retainedBuffer, uint16_t retainedBufferSize) :
   d6756:	4616      	mov	r6, r2
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6758:	f7ff fea8 	bl	d64ac <_ZN21PublishQueueAsyncBaseC1Ev>
   d675c:	4b15      	ldr	r3, [pc, #84]	; (d67b4 <_ZN25PublishQueueAsyncRetainedC1EPht+0x68>)
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d675e:	f857 2b08 	ldr.w	r2, [r7], #8
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6762:	6023      	str	r3, [r4, #0]
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6764:	4b14      	ldr	r3, [pc, #80]	; (d67b8 <_ZN25PublishQueueAsyncRetainedC1EPht+0x6c>)
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d6766:	62e5      	str	r5, [r4, #44]	; 0x2c
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d6768:	429a      	cmp	r2, r3
		retainedBuffer(retainedBuffer), retainedBufferSize(retainedBufferSize) {
   d676a:	8626      	strh	r6, [r4, #48]	; 0x30
	if (hdr->magic == PUBLISH_QUEUE_HEADER_MAGIC && hdr->size == retainedBufferSize) {
   d676c:	4698      	mov	r8, r3
   d676e:	d117      	bne.n	d67a0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
   d6770:	88ab      	ldrh	r3, [r5, #4]
   d6772:	b29b      	uxth	r3, r3
   d6774:	42b3      	cmp	r3, r6
   d6776:	d113      	bne.n	d67a0 <_ZN25PublishQueueAsyncRetainedC1EPht+0x54>
		uint8_t *end = &retainedBuffer[retainedBufferSize];
   d6778:	eb05 0a06 	add.w	sl, r5, r6
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d677c:	6367      	str	r7, [r4, #52]	; 0x34
   d677e:	f04f 0900 	mov.w	r9, #0
		for(uint16_t ii = 0; ii < hdr->numEvents; ii++) {
   d6782:	88eb      	ldrh	r3, [r5, #6]
   d6784:	fa1f f289 	uxth.w	r2, r9
   d6788:	b29b      	uxth	r3, r3
   d678a:	429a      	cmp	r2, r3
   d678c:	d20e      	bcs.n	d67ac <_ZN25PublishQueueAsyncRetainedC1EPht+0x60>
			nextFree = skipEvent(nextFree);
   d678e:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d6790:	4620      	mov	r0, r4
   d6792:	f7ff ff91 	bl	d66b8 <_ZN25PublishQueueAsyncRetained9skipEventEPh>
			if (nextFree > end) {
   d6796:	4550      	cmp	r0, sl
			nextFree = skipEvent(nextFree);
   d6798:	6360      	str	r0, [r4, #52]	; 0x34
			if (nextFree > end) {
   d679a:	f109 0901 	add.w	r9, r9, #1
   d679e:	d9f0      	bls.n	d6782 <_ZN25PublishQueueAsyncRetainedC1EPht+0x36>
		hdr->numEvents = 0;
   d67a0:	2300      	movs	r3, #0
		hdr->magic = PUBLISH_QUEUE_HEADER_MAGIC;
   d67a2:	f8c5 8000 	str.w	r8, [r5]
		nextFree = &retainedBuffer[sizeof(PublishQueueHeader)];
   d67a6:	6367      	str	r7, [r4, #52]	; 0x34
		hdr->size = retainedBufferSize;
   d67a8:	80ae      	strh	r6, [r5, #4]
		hdr->numEvents = 0;
   d67aa:	80eb      	strh	r3, [r5, #6]
}
   d67ac:	4620      	mov	r0, r4
   d67ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67b2:	bf00      	nop
   d67b4:	000d9a70 	.word	0x000d9a70
   d67b8:	d19cab61 	.word	0xd19cab61

000d67bc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>:
	operator=(_Functor&& __f)
   d67bc:	b510      	push	{r4, lr}
   d67be:	e9d1 2300 	ldrd	r2, r3, [r1]
   d67c2:	b086      	sub	sp, #24
    _Function_base() : _M_manager(nullptr) { }
   d67c4:	2100      	movs	r1, #0
	operator=(_Functor&& __f)
   d67c6:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d67c8:	9104      	str	r1, [sp, #16]
	  { return __mp != nullptr; }
   d67ca:	b90a      	cbnz	r2, d67d0 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x14>
   d67cc:	07d9      	lsls	r1, r3, #31
   d67ce:	d505      	bpl.n	d67dc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x20>
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
   d67d0:	e9cd 2302 	strd	r2, r3, [sp, #8]
	    _M_invoker = &_My_handler::_M_invoke;
   d67d4:	4b0f      	ldr	r3, [pc, #60]	; (d6814 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x58>)
   d67d6:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
   d67d8:	4b0f      	ldr	r3, [pc, #60]	; (d6818 <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_+0x5c>)
   d67da:	9304      	str	r3, [sp, #16]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67dc:	ab02      	add	r3, sp, #8
   d67de:	e893 0003 	ldmia.w	r3, {r0, r1}
   d67e2:	466a      	mov	r2, sp
   d67e4:	e882 0003 	stmia.w	r2, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d67e8:	e894 0003 	ldmia.w	r4, {r0, r1}
   d67ec:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d67f0:	e892 0003 	ldmia.w	r2, {r0, r1}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67f4:	9a04      	ldr	r2, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d67f6:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d67fa:	68a1      	ldr	r1, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d67fc:	60a2      	str	r2, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d67fe:	9a05      	ldr	r2, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6800:	9104      	str	r1, [sp, #16]
    class function<_Res(_ArgTypes...)>
   d6802:	4618      	mov	r0, r3
   d6804:	68e1      	ldr	r1, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6806:	60e2      	str	r2, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6808:	9105      	str	r1, [sp, #20]
   d680a:	f7ff fdf9 	bl	d6400 <_ZNSt14_Function_baseD1Ev>
	}
   d680e:	4620      	mov	r0, r4
   d6810:	b006      	add	sp, #24
   d6812:	bd10      	pop	{r4, pc}
   d6814:	000d63e3 	.word	0x000d63e3
   d6818:	000d6399 	.word	0x000d6399

000d681c <_ZN21PublishQueueAsyncBase10startStateEv>:
void PublishQueueAsyncBase::startState() {
   d681c:	b507      	push	{r0, r1, r2, lr}
	stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d681e:	4b05      	ldr	r3, [pc, #20]	; (d6834 <_ZN21PublishQueueAsyncBase10startStateEv+0x18>)
   d6820:	9300      	str	r3, [sp, #0]
   d6822:	4669      	mov	r1, sp
   d6824:	2300      	movs	r3, #0
   d6826:	3010      	adds	r0, #16
   d6828:	9301      	str	r3, [sp, #4]
   d682a:	f7ff ffc7 	bl	d67bc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d682e:	b003      	add	sp, #12
   d6830:	f85d fb04 	ldr.w	pc, [sp], #4
   d6834:	000d6865 	.word	0x000d6865

000d6838 <_ZN21PublishQueueAsyncBase14waitRetryStateEv>:
void PublishQueueAsyncBase::waitRetryState() {
   d6838:	b513      	push	{r0, r1, r4, lr}
   d683a:	4604      	mov	r4, r0
   d683c:	f000 f904 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastPublish >= failureRetryMs) {
   d6840:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6842:	1ac0      	subs	r0, r0, r3
   d6844:	68e3      	ldr	r3, [r4, #12]
   d6846:	4298      	cmp	r0, r3
   d6848:	d308      	bcc.n	d685c <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x24>
		stateHandler = &PublishQueueAsyncBase::checkQueueState;
   d684a:	4b05      	ldr	r3, [pc, #20]	; (d6860 <_ZN21PublishQueueAsyncBase14waitRetryStateEv+0x28>)
   d684c:	9300      	str	r3, [sp, #0]
   d684e:	4669      	mov	r1, sp
   d6850:	2300      	movs	r3, #0
   d6852:	f104 0010 	add.w	r0, r4, #16
   d6856:	9301      	str	r3, [sp, #4]
   d6858:	f7ff ffb0 	bl	d67bc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
}
   d685c:	b002      	add	sp, #8
   d685e:	bd10      	pop	{r4, pc}
   d6860:	000d6865 	.word	0x000d6865

000d6864 <_ZN21PublishQueueAsyncBase15checkQueueStateEv>:
void PublishQueueAsyncBase::checkQueueState() {
   d6864:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6868:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
void PublishQueueAsyncBase::checkQueueState() {
   d686c:	b086      	sub	sp, #24
   d686e:	4604      	mov	r4, r0
	if (!pausePublishing && Particle.connected() && millis() - lastPublish >= 1010) {
   d6870:	2b00      	cmp	r3, #0
   d6872:	d164      	bne.n	d693e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6874:	f000 faea 	bl	d6e4c <spark_cloud_flag_connected>
   d6878:	2800      	cmp	r0, #0
   d687a:	d060      	beq.n	d693e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
   d687c:	f000 f8e4 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
   d6880:	6a63      	ldr	r3, [r4, #36]	; 0x24
   d6882:	1ac0      	subs	r0, r0, r3
   d6884:	f240 33f1 	movw	r3, #1009	; 0x3f1
   d6888:	4298      	cmp	r0, r3
   d688a:	d958      	bls.n	d693e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
		PublishQueueEventData *data = getOldestEvent();
   d688c:	6823      	ldr	r3, [r4, #0]
   d688e:	4620      	mov	r0, r4
   d6890:	695b      	ldr	r3, [r3, #20]
   d6892:	4798      	blx	r3
		if (data) {
   d6894:	4605      	mov	r5, r0
   d6896:	2800      	cmp	r0, #0
   d6898:	d051      	beq.n	d693e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
			const char *eventName = &buf[sizeof(PublishQueueEventData)];
   d689a:	f100 0708 	add.w	r7, r0, #8
			isSending = true;
   d689e:	2301      	movs	r3, #1
   d68a0:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			eventData += strlen(eventData) + 1;
   d68a4:	4638      	mov	r0, r7
   d68a6:	f002 fd16 	bl	d92d6 <strlen>
			PublishFlags flags(PublishFlag(data->flags));
   d68aa:	f895 8004 	ldrb.w	r8, [r5, #4]
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d68ae:	f8cd 8004 	str.w	r8, [sp, #4]
			eventData += strlen(eventData) + 1;
   d68b2:	3001      	adds	r0, #1
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d68b4:	682b      	ldr	r3, [r5, #0]
   d68b6:	492b      	ldr	r1, [pc, #172]	; (d6964 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x100>)
   d68b8:	9300      	str	r3, [sp, #0]
			eventData += strlen(eventData) + 1;
   d68ba:	183e      	adds	r6, r7, r0
			pubqLogger.info("publishing %s %s ttl=%d flags=%x", eventName, eventData, data->ttl, flags.value());
   d68bc:	4633      	mov	r3, r6
   d68be:	482a      	ldr	r0, [pc, #168]	; (d6968 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d68c0:	463a      	mov	r2, r7
   d68c2:	f7ff f835 	bl	d5930 <_ZNK5spark6Logger4infoEPKcz>
			auto request = Particle.publish(eventName, eventData, data->ttl, flags);
   d68c6:	682b      	ldr	r3, [r5, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d68c8:	f88d 8000 	strb.w	r8, [sp]
   d68cc:	4632      	mov	r2, r6
   d68ce:	4639      	mov	r1, r7
   d68d0:	a802      	add	r0, sp, #8
   d68d2:	f000 fdcf 	bl	d7474 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, int(__m));
   d68d6:	9d02      	ldr	r5, [sp, #8]
   d68d8:	786b      	ldrb	r3, [r5, #1]
			while(!request.isDone()) {
   d68da:	b91b      	cbnz	r3, d68e4 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x80>
				delay(1);
   d68dc:	2001      	movs	r0, #1
   d68de:	f000 fbb5 	bl	d704c <delay>
			while(!request.isDone()) {
   d68e2:	e7f8      	b.n	d68d6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x72>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d68e4:	2000      	movs	r0, #0
   d68e6:	f000 fa49 	bl	d6d7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d68ea:	b120      	cbz	r0, d68f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
   d68ec:	786b      	ldrb	r3, [r5, #1]
                if (isDone()) { // We can use relaxed ordering here, as long as the future's result is not examined
   d68ee:	b913      	cbnz	r3, d68f6 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x92>
        spark_process();
   d68f0:	f000 fa9c 	bl	d6e2c <spark_process>
    }
   d68f4:	e7fa      	b.n	d68ec <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x88>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d68f6:	782b      	ldrb	r3, [r5, #0]
			if (bResult) {
   d68f8:	2b01      	cmp	r3, #1
   d68fa:	d123      	bne.n	d6944 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xe0>
				pubqLogger.info("published successfully");
   d68fc:	491b      	ldr	r1, [pc, #108]	; (d696c <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x108>)
   d68fe:	481a      	ldr	r0, [pc, #104]	; (d6968 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d6900:	f7ff f816 	bl	d5930 <_ZNK5spark6Logger4infoEPKcz>
				discardOldEvent(false);
   d6904:	6823      	ldr	r3, [r4, #0]
   d6906:	2100      	movs	r1, #0
   d6908:	699b      	ldr	r3, [r3, #24]
   d690a:	4620      	mov	r0, r4
   d690c:	4798      	blx	r3
			isSending = false;
   d690e:	2300      	movs	r3, #0
   d6910:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   d6914:	f000 f898 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
			lastPublish = millis();
   d6918:	6260      	str	r0, [r4, #36]	; 0x24
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d691a:	9c03      	ldr	r4, [sp, #12]
   d691c:	b17c      	cbz	r4, d693e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
      if (--_M_use_count == 0)
   d691e:	6863      	ldr	r3, [r4, #4]
   d6920:	3b01      	subs	r3, #1
   d6922:	6063      	str	r3, [r4, #4]
   d6924:	b95b      	cbnz	r3, d693e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
          _M_dispose();
   d6926:	6823      	ldr	r3, [r4, #0]
   d6928:	4620      	mov	r0, r4
   d692a:	689b      	ldr	r3, [r3, #8]
   d692c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d692e:	68a3      	ldr	r3, [r4, #8]
   d6930:	3b01      	subs	r3, #1
   d6932:	60a3      	str	r3, [r4, #8]
   d6934:	b91b      	cbnz	r3, d693e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xda>
            _M_destroy();
   d6936:	6823      	ldr	r3, [r4, #0]
   d6938:	4620      	mov	r0, r4
   d693a:	68db      	ldr	r3, [r3, #12]
   d693c:	4798      	blx	r3
}
   d693e:	b006      	add	sp, #24
   d6940:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				pubqLogger.info("published failed, will retry in %lu ms", failureRetryMs);
   d6944:	68e2      	ldr	r2, [r4, #12]
   d6946:	490a      	ldr	r1, [pc, #40]	; (d6970 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x10c>)
   d6948:	4807      	ldr	r0, [pc, #28]	; (d6968 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x104>)
   d694a:	f7fe fff1 	bl	d5930 <_ZNK5spark6Logger4infoEPKcz>
				stateHandler = &PublishQueueAsyncBase::waitRetryState;
   d694e:	4b09      	ldr	r3, [pc, #36]	; (d6974 <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0x110>)
   d6950:	9304      	str	r3, [sp, #16]
   d6952:	a904      	add	r1, sp, #16
   d6954:	2300      	movs	r3, #0
   d6956:	f104 0010 	add.w	r0, r4, #16
   d695a:	9305      	str	r3, [sp, #20]
   d695c:	f7ff ff2e 	bl	d67bc <_ZNSt8functionIFvR21PublishQueueAsyncBaseEEaSIMS0_FvvEEENSt9enable_ifIXsrNS3_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSC_JS1_EEEE5valueERS3_E4typeEOSA_>
   d6960:	e7d5      	b.n	d690e <_ZN21PublishQueueAsyncBase15checkQueueStateEv+0xaa>
   d6962:	bf00      	nop
   d6964:	000d99d7 	.word	0x000d99d7
   d6968:	2003e5c0 	.word	0x2003e5c0
   d696c:	000d99f8 	.word	0x000d99f8
   d6970:	000d9a0f 	.word	0x000d9a0f
   d6974:	000d6839 	.word	0x000d6839

000d6978 <_GLOBAL__sub_I_pubqLogger>:
   d6978:	4b01      	ldr	r3, [pc, #4]	; (d6980 <_GLOBAL__sub_I_pubqLogger+0x8>)
   d697a:	4a02      	ldr	r2, [pc, #8]	; (d6984 <_GLOBAL__sub_I_pubqLogger+0xc>)
   d697c:	601a      	str	r2, [r3, #0]
}
   d697e:	4770      	bx	lr
   d6980:	2003e5c0 	.word	0x2003e5c0
   d6984:	000d9a36 	.word	0x000d9a36

000d6988 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d6988:	b508      	push	{r3, lr}
   d698a:	4b02      	ldr	r3, [pc, #8]	; (d6994 <os_thread_create+0xc>)
   d698c:	681b      	ldr	r3, [r3, #0]
   d698e:	685b      	ldr	r3, [r3, #4]
   d6990:	9301      	str	r3, [sp, #4]
   d6992:	bd08      	pop	{r3, pc}
   d6994:	00030248 	.word	0x00030248

000d6998 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d6998:	b508      	push	{r3, lr}
   d699a:	4b02      	ldr	r3, [pc, #8]	; (d69a4 <os_thread_yield+0xc>)
   d699c:	681b      	ldr	r3, [r3, #0]
   d699e:	68db      	ldr	r3, [r3, #12]
   d69a0:	9301      	str	r3, [sp, #4]
   d69a2:	bd08      	pop	{r3, pc}
   d69a4:	00030248 	.word	0x00030248

000d69a8 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d69a8:	b508      	push	{r3, lr}
   d69aa:	4b02      	ldr	r3, [pc, #8]	; (d69b4 <os_mutex_create+0xc>)
   d69ac:	681b      	ldr	r3, [r3, #0]
   d69ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d69b0:	9301      	str	r3, [sp, #4]
   d69b2:	bd08      	pop	{r3, pc}
   d69b4:	00030248 	.word	0x00030248

000d69b8 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
   d69b8:	b508      	push	{r3, lr}
   d69ba:	4b02      	ldr	r3, [pc, #8]	; (d69c4 <os_mutex_lock+0xc>)
   d69bc:	681b      	ldr	r3, [r3, #0]
   d69be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d69c0:	9301      	str	r3, [sp, #4]
   d69c2:	bd08      	pop	{r3, pc}
   d69c4:	00030248 	.word	0x00030248

000d69c8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
   d69c8:	b508      	push	{r3, lr}
   d69ca:	4b02      	ldr	r3, [pc, #8]	; (d69d4 <os_mutex_unlock+0xc>)
   d69cc:	681b      	ldr	r3, [r3, #0]
   d69ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d69d0:	9301      	str	r3, [sp, #4]
   d69d2:	bd08      	pop	{r3, pc}
   d69d4:	00030248 	.word	0x00030248

000d69d8 <os_mutex_recursive_create>:

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d69d8:	b508      	push	{r3, lr}
   d69da:	4b02      	ldr	r3, [pc, #8]	; (d69e4 <os_mutex_recursive_create+0xc>)
   d69dc:	681b      	ldr	r3, [r3, #0]
   d69de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d69e0:	9301      	str	r3, [sp, #4]
   d69e2:	bd08      	pop	{r3, pc}
   d69e4:	00030248 	.word	0x00030248

000d69e8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d69e8:	b508      	push	{r3, lr}
   d69ea:	4b02      	ldr	r3, [pc, #8]	; (d69f4 <os_mutex_recursive_destroy+0xc>)
   d69ec:	681b      	ldr	r3, [r3, #0]
   d69ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d69f0:	9301      	str	r3, [sp, #4]
   d69f2:	bd08      	pop	{r3, pc}
   d69f4:	00030248 	.word	0x00030248

000d69f8 <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d69f8:	b508      	push	{r3, lr}
   d69fa:	4b02      	ldr	r3, [pc, #8]	; (d6a04 <os_thread_exit+0xc>)
   d69fc:	681b      	ldr	r3, [r3, #0]
   d69fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d6a00:	9301      	str	r3, [sp, #4]
   d6a02:	bd08      	pop	{r3, pc}
   d6a04:	00030248 	.word	0x00030248

000d6a08 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d6a08:	b508      	push	{r3, lr}
   d6a0a:	4b02      	ldr	r3, [pc, #8]	; (d6a14 <HAL_Feature_Set+0xc>)
   d6a0c:	681b      	ldr	r3, [r3, #0]
   d6a0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6a10:	9301      	str	r3, [sp, #4]
   d6a12:	bd08      	pop	{r3, pc}
   d6a14:	00030234 	.word	0x00030234

000d6a18 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6a18:	b508      	push	{r3, lr}
   d6a1a:	4b02      	ldr	r3, [pc, #8]	; (d6a24 <HAL_RNG_GetRandomNumber+0xc>)
   d6a1c:	681b      	ldr	r3, [r3, #0]
   d6a1e:	685b      	ldr	r3, [r3, #4]
   d6a20:	9301      	str	r3, [sp, #4]
   d6a22:	bd08      	pop	{r3, pc}
   d6a24:	00030218 	.word	0x00030218

000d6a28 <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d6a28:	b508      	push	{r3, lr}
   d6a2a:	4b02      	ldr	r3, [pc, #8]	; (d6a34 <HAL_Delay_Milliseconds+0xc>)
   d6a2c:	681b      	ldr	r3, [r3, #0]
   d6a2e:	689b      	ldr	r3, [r3, #8]
   d6a30:	9301      	str	r3, [sp, #4]
   d6a32:	bd08      	pop	{r3, pc}
   d6a34:	00030218 	.word	0x00030218

000d6a38 <HAL_Delay_Microseconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d6a38:	b508      	push	{r3, lr}
   d6a3a:	4b02      	ldr	r3, [pc, #8]	; (d6a44 <HAL_Delay_Microseconds+0xc>)
   d6a3c:	681b      	ldr	r3, [r3, #0]
   d6a3e:	68db      	ldr	r3, [r3, #12]
   d6a40:	9301      	str	r3, [sp, #4]
   d6a42:	bd08      	pop	{r3, pc}
   d6a44:	00030218 	.word	0x00030218

000d6a48 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6a48:	b508      	push	{r3, lr}
   d6a4a:	4b02      	ldr	r3, [pc, #8]	; (d6a54 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6a4c:	681b      	ldr	r3, [r3, #0]
   d6a4e:	695b      	ldr	r3, [r3, #20]
   d6a50:	9301      	str	r3, [sp, #4]
   d6a52:	bd08      	pop	{r3, pc}
   d6a54:	00030218 	.word	0x00030218

000d6a58 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d6a58:	b508      	push	{r3, lr}
   d6a5a:	4b02      	ldr	r3, [pc, #8]	; (d6a64 <hal_rtc_time_is_valid+0xc>)
   d6a5c:	681b      	ldr	r3, [r3, #0]
   d6a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6a60:	9301      	str	r3, [sp, #4]
   d6a62:	bd08      	pop	{r3, pc}
   d6a64:	00030218 	.word	0x00030218

000d6a68 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d6a68:	b508      	push	{r3, lr}
   d6a6a:	4b02      	ldr	r3, [pc, #8]	; (d6a74 <hal_timer_millis+0xc>)
   d6a6c:	681b      	ldr	r3, [r3, #0]
   d6a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6a70:	9301      	str	r3, [sp, #4]
   d6a72:	bd08      	pop	{r3, pc}
   d6a74:	00030218 	.word	0x00030218

000d6a78 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d6a78:	b508      	push	{r3, lr}
   d6a7a:	4b02      	ldr	r3, [pc, #8]	; (d6a84 <hal_rtc_get_time+0xc>)
   d6a7c:	681b      	ldr	r3, [r3, #0]
   d6a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d6a80:	9301      	str	r3, [sp, #4]
   d6a82:	bd08      	pop	{r3, pc}
   d6a84:	00030218 	.word	0x00030218

000d6a88 <hal_rtc_set_time>:
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d6a88:	b508      	push	{r3, lr}
   d6a8a:	4b02      	ldr	r3, [pc, #8]	; (d6a94 <hal_rtc_set_time+0xc>)
   d6a8c:	681b      	ldr	r3, [r3, #0]
   d6a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d6a90:	9301      	str	r3, [sp, #4]
   d6a92:	bd08      	pop	{r3, pc}
   d6a94:	00030218 	.word	0x00030218

000d6a98 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d6a98:	b508      	push	{r3, lr}
   d6a9a:	4b02      	ldr	r3, [pc, #8]	; (d6aa4 <HAL_Pin_Map+0xc>)
   d6a9c:	681b      	ldr	r3, [r3, #0]
   d6a9e:	681b      	ldr	r3, [r3, #0]
   d6aa0:	9301      	str	r3, [sp, #4]
   d6aa2:	bd08      	pop	{r3, pc}
   d6aa4:	0003022c 	.word	0x0003022c

000d6aa8 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d6aa8:	b508      	push	{r3, lr}
   d6aaa:	4b02      	ldr	r3, [pc, #8]	; (d6ab4 <HAL_Pin_Mode+0xc>)
   d6aac:	681b      	ldr	r3, [r3, #0]
   d6aae:	689b      	ldr	r3, [r3, #8]
   d6ab0:	9301      	str	r3, [sp, #4]
   d6ab2:	bd08      	pop	{r3, pc}
   d6ab4:	0003022c 	.word	0x0003022c

000d6ab8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d6ab8:	b508      	push	{r3, lr}
   d6aba:	4b02      	ldr	r3, [pc, #8]	; (d6ac4 <HAL_Get_Pin_Mode+0xc>)
   d6abc:	681b      	ldr	r3, [r3, #0]
   d6abe:	68db      	ldr	r3, [r3, #12]
   d6ac0:	9301      	str	r3, [sp, #4]
   d6ac2:	bd08      	pop	{r3, pc}
   d6ac4:	0003022c 	.word	0x0003022c

000d6ac8 <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d6ac8:	b508      	push	{r3, lr}
   d6aca:	4b02      	ldr	r3, [pc, #8]	; (d6ad4 <HAL_GPIO_Read+0xc>)
   d6acc:	681b      	ldr	r3, [r3, #0]
   d6ace:	695b      	ldr	r3, [r3, #20]
   d6ad0:	9301      	str	r3, [sp, #4]
   d6ad2:	bd08      	pop	{r3, pc}
   d6ad4:	0003022c 	.word	0x0003022c

000d6ad8 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, int(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
   d6ad8:	b508      	push	{r3, lr}
   d6ada:	4b02      	ldr	r3, [pc, #8]	; (d6ae4 <HAL_Interrupts_Attach+0xc>)
   d6adc:	681b      	ldr	r3, [r3, #0]
   d6ade:	699b      	ldr	r3, [r3, #24]
   d6ae0:	9301      	str	r3, [sp, #4]
   d6ae2:	bd08      	pop	{r3, pc}
   d6ae4:	0003022c 	.word	0x0003022c

000d6ae8 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
   d6ae8:	b508      	push	{r3, lr}
   d6aea:	4b02      	ldr	r3, [pc, #8]	; (d6af4 <HAL_Interrupts_Detach+0xc>)
   d6aec:	681b      	ldr	r3, [r3, #0]
   d6aee:	69db      	ldr	r3, [r3, #28]
   d6af0:	9301      	str	r3, [sp, #4]
   d6af2:	bd08      	pop	{r3, pc}
   d6af4:	0003022c 	.word	0x0003022c

000d6af8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6af8:	b508      	push	{r3, lr}
   d6afa:	4b02      	ldr	r3, [pc, #8]	; (d6b04 <hal_i2c_begin+0xc>)
   d6afc:	681b      	ldr	r3, [r3, #0]
   d6afe:	68db      	ldr	r3, [r3, #12]
   d6b00:	9301      	str	r3, [sp, #4]
   d6b02:	bd08      	pop	{r3, pc}
   d6b04:	00030228 	.word	0x00030228

000d6b08 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6b08:	b508      	push	{r3, lr}
   d6b0a:	4b02      	ldr	r3, [pc, #8]	; (d6b14 <hal_i2c_begin_transmission+0xc>)
   d6b0c:	681b      	ldr	r3, [r3, #0]
   d6b0e:	699b      	ldr	r3, [r3, #24]
   d6b10:	9301      	str	r3, [sp, #4]
   d6b12:	bd08      	pop	{r3, pc}
   d6b14:	00030228 	.word	0x00030228

000d6b18 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6b18:	b508      	push	{r3, lr}
   d6b1a:	4b02      	ldr	r3, [pc, #8]	; (d6b24 <hal_i2c_end_transmission+0xc>)
   d6b1c:	681b      	ldr	r3, [r3, #0]
   d6b1e:	69db      	ldr	r3, [r3, #28]
   d6b20:	9301      	str	r3, [sp, #4]
   d6b22:	bd08      	pop	{r3, pc}
   d6b24:	00030228 	.word	0x00030228

000d6b28 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6b28:	b508      	push	{r3, lr}
   d6b2a:	4b02      	ldr	r3, [pc, #8]	; (d6b34 <hal_i2c_write+0xc>)
   d6b2c:	681b      	ldr	r3, [r3, #0]
   d6b2e:	6a1b      	ldr	r3, [r3, #32]
   d6b30:	9301      	str	r3, [sp, #4]
   d6b32:	bd08      	pop	{r3, pc}
   d6b34:	00030228 	.word	0x00030228

000d6b38 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6b38:	b508      	push	{r3, lr}
   d6b3a:	4b02      	ldr	r3, [pc, #8]	; (d6b44 <hal_i2c_available+0xc>)
   d6b3c:	681b      	ldr	r3, [r3, #0]
   d6b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6b40:	9301      	str	r3, [sp, #4]
   d6b42:	bd08      	pop	{r3, pc}
   d6b44:	00030228 	.word	0x00030228

000d6b48 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6b48:	b508      	push	{r3, lr}
   d6b4a:	4b02      	ldr	r3, [pc, #8]	; (d6b54 <hal_i2c_read+0xc>)
   d6b4c:	681b      	ldr	r3, [r3, #0]
   d6b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6b50:	9301      	str	r3, [sp, #4]
   d6b52:	bd08      	pop	{r3, pc}
   d6b54:	00030228 	.word	0x00030228

000d6b58 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6b58:	b508      	push	{r3, lr}
   d6b5a:	4b02      	ldr	r3, [pc, #8]	; (d6b64 <hal_i2c_peek+0xc>)
   d6b5c:	681b      	ldr	r3, [r3, #0]
   d6b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6b60:	9301      	str	r3, [sp, #4]
   d6b62:	bd08      	pop	{r3, pc}
   d6b64:	00030228 	.word	0x00030228

000d6b68 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6b68:	b508      	push	{r3, lr}
   d6b6a:	4b02      	ldr	r3, [pc, #8]	; (d6b74 <hal_i2c_flush+0xc>)
   d6b6c:	681b      	ldr	r3, [r3, #0]
   d6b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6b70:	9301      	str	r3, [sp, #4]
   d6b72:	bd08      	pop	{r3, pc}
   d6b74:	00030228 	.word	0x00030228

000d6b78 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6b78:	b508      	push	{r3, lr}
   d6b7a:	4b02      	ldr	r3, [pc, #8]	; (d6b84 <hal_i2c_is_enabled+0xc>)
   d6b7c:	681b      	ldr	r3, [r3, #0]
   d6b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6b80:	9301      	str	r3, [sp, #4]
   d6b82:	bd08      	pop	{r3, pc}
   d6b84:	00030228 	.word	0x00030228

000d6b88 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6b88:	b508      	push	{r3, lr}
   d6b8a:	4b02      	ldr	r3, [pc, #8]	; (d6b94 <hal_i2c_init+0xc>)
   d6b8c:	681b      	ldr	r3, [r3, #0]
   d6b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6b90:	9301      	str	r3, [sp, #4]
   d6b92:	bd08      	pop	{r3, pc}
   d6b94:	00030228 	.word	0x00030228

000d6b98 <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d6b98:	b508      	push	{r3, lr}
   d6b9a:	4b02      	ldr	r3, [pc, #8]	; (d6ba4 <hal_i2c_lock+0xc>)
   d6b9c:	681b      	ldr	r3, [r3, #0]
   d6b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6ba0:	9301      	str	r3, [sp, #4]
   d6ba2:	bd08      	pop	{r3, pc}
   d6ba4:	00030228 	.word	0x00030228

000d6ba8 <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d6ba8:	b508      	push	{r3, lr}
   d6baa:	4b02      	ldr	r3, [pc, #8]	; (d6bb4 <hal_i2c_unlock+0xc>)
   d6bac:	681b      	ldr	r3, [r3, #0]
   d6bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6bb0:	9301      	str	r3, [sp, #4]
   d6bb2:	bd08      	pop	{r3, pc}
   d6bb4:	00030228 	.word	0x00030228

000d6bb8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d6bb8:	b508      	push	{r3, lr}
   d6bba:	4b02      	ldr	r3, [pc, #8]	; (d6bc4 <hal_i2c_request_ex+0xc>)
   d6bbc:	681b      	ldr	r3, [r3, #0]
   d6bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6bc0:	9301      	str	r3, [sp, #4]
   d6bc2:	bd08      	pop	{r3, pc}
   d6bc4:	00030228 	.word	0x00030228

000d6bc8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6bc8:	b508      	push	{r3, lr}
   d6bca:	4b02      	ldr	r3, [pc, #8]	; (d6bd4 <inet_inet_ntop+0xc>)
   d6bcc:	681b      	ldr	r3, [r3, #0]
   d6bce:	695b      	ldr	r3, [r3, #20]
   d6bd0:	9301      	str	r3, [sp, #4]
   d6bd2:	bd08      	pop	{r3, pc}
   d6bd4:	00030264 	.word	0x00030264

000d6bd8 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d6bd8:	b508      	push	{r3, lr}
   d6bda:	4b02      	ldr	r3, [pc, #8]	; (d6be4 <netdb_freeaddrinfo+0xc>)
   d6bdc:	681b      	ldr	r3, [r3, #0]
   d6bde:	689b      	ldr	r3, [r3, #8]
   d6be0:	9301      	str	r3, [sp, #4]
   d6be2:	bd08      	pop	{r3, pc}
   d6be4:	00030268 	.word	0x00030268

000d6be8 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d6be8:	b508      	push	{r3, lr}
   d6bea:	4b02      	ldr	r3, [pc, #8]	; (d6bf4 <netdb_getaddrinfo+0xc>)
   d6bec:	681b      	ldr	r3, [r3, #0]
   d6bee:	68db      	ldr	r3, [r3, #12]
   d6bf0:	9301      	str	r3, [sp, #4]
   d6bf2:	bd08      	pop	{r3, pc}
   d6bf4:	00030268 	.word	0x00030268

000d6bf8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6bf8:	b508      	push	{r3, lr}
   d6bfa:	4b02      	ldr	r3, [pc, #8]	; (d6c04 <hal_spi_init+0xc>)
   d6bfc:	681b      	ldr	r3, [r3, #0]
   d6bfe:	69db      	ldr	r3, [r3, #28]
   d6c00:	9301      	str	r3, [sp, #4]
   d6c02:	bd08      	pop	{r3, pc}
   d6c04:	00030230 	.word	0x00030230

000d6c08 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6c08:	b508      	push	{r3, lr}
   d6c0a:	4b02      	ldr	r3, [pc, #8]	; (d6c14 <hal_spi_is_enabled+0xc>)
   d6c0c:	681b      	ldr	r3, [r3, #0]
   d6c0e:	6a1b      	ldr	r3, [r3, #32]
   d6c10:	9301      	str	r3, [sp, #4]
   d6c12:	bd08      	pop	{r3, pc}
   d6c14:	00030230 	.word	0x00030230

000d6c18 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6c18:	b508      	push	{r3, lr}
   d6c1a:	4b02      	ldr	r3, [pc, #8]	; (d6c24 <hal_usart_init+0xc>)
   d6c1c:	681b      	ldr	r3, [r3, #0]
   d6c1e:	681b      	ldr	r3, [r3, #0]
   d6c20:	9301      	str	r3, [sp, #4]
   d6c22:	bd08      	pop	{r3, pc}
   d6c24:	0003023c 	.word	0x0003023c

000d6c28 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6c28:	b508      	push	{r3, lr}
   d6c2a:	4b02      	ldr	r3, [pc, #8]	; (d6c34 <hal_usart_write+0xc>)
   d6c2c:	681b      	ldr	r3, [r3, #0]
   d6c2e:	68db      	ldr	r3, [r3, #12]
   d6c30:	9301      	str	r3, [sp, #4]
   d6c32:	bd08      	pop	{r3, pc}
   d6c34:	0003023c 	.word	0x0003023c

000d6c38 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6c38:	b508      	push	{r3, lr}
   d6c3a:	4b02      	ldr	r3, [pc, #8]	; (d6c44 <hal_usart_available+0xc>)
   d6c3c:	681b      	ldr	r3, [r3, #0]
   d6c3e:	691b      	ldr	r3, [r3, #16]
   d6c40:	9301      	str	r3, [sp, #4]
   d6c42:	bd08      	pop	{r3, pc}
   d6c44:	0003023c 	.word	0x0003023c

000d6c48 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d6c48:	b508      	push	{r3, lr}
   d6c4a:	4b02      	ldr	r3, [pc, #8]	; (d6c54 <hal_usart_read+0xc>)
   d6c4c:	681b      	ldr	r3, [r3, #0]
   d6c4e:	695b      	ldr	r3, [r3, #20]
   d6c50:	9301      	str	r3, [sp, #4]
   d6c52:	bd08      	pop	{r3, pc}
   d6c54:	0003023c 	.word	0x0003023c

000d6c58 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d6c58:	b508      	push	{r3, lr}
   d6c5a:	4b02      	ldr	r3, [pc, #8]	; (d6c64 <hal_usart_peek+0xc>)
   d6c5c:	681b      	ldr	r3, [r3, #0]
   d6c5e:	699b      	ldr	r3, [r3, #24]
   d6c60:	9301      	str	r3, [sp, #4]
   d6c62:	bd08      	pop	{r3, pc}
   d6c64:	0003023c 	.word	0x0003023c

000d6c68 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d6c68:	b508      	push	{r3, lr}
   d6c6a:	4b02      	ldr	r3, [pc, #8]	; (d6c74 <hal_usart_flush+0xc>)
   d6c6c:	681b      	ldr	r3, [r3, #0]
   d6c6e:	69db      	ldr	r3, [r3, #28]
   d6c70:	9301      	str	r3, [sp, #4]
   d6c72:	bd08      	pop	{r3, pc}
   d6c74:	0003023c 	.word	0x0003023c

000d6c78 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d6c78:	b508      	push	{r3, lr}
   d6c7a:	4b02      	ldr	r3, [pc, #8]	; (d6c84 <hal_usart_is_enabled+0xc>)
   d6c7c:	681b      	ldr	r3, [r3, #0]
   d6c7e:	6a1b      	ldr	r3, [r3, #32]
   d6c80:	9301      	str	r3, [sp, #4]
   d6c82:	bd08      	pop	{r3, pc}
   d6c84:	0003023c 	.word	0x0003023c

000d6c88 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d6c88:	b508      	push	{r3, lr}
   d6c8a:	4b02      	ldr	r3, [pc, #8]	; (d6c94 <hal_usart_available_data_for_write+0xc>)
   d6c8c:	681b      	ldr	r3, [r3, #0]
   d6c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6c90:	9301      	str	r3, [sp, #4]
   d6c92:	bd08      	pop	{r3, pc}
   d6c94:	0003023c 	.word	0x0003023c

000d6c98 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6c98:	b508      	push	{r3, lr}
   d6c9a:	4b02      	ldr	r3, [pc, #8]	; (d6ca4 <HAL_USB_USART_Init+0xc>)
   d6c9c:	681b      	ldr	r3, [r3, #0]
   d6c9e:	681b      	ldr	r3, [r3, #0]
   d6ca0:	9301      	str	r3, [sp, #4]
   d6ca2:	bd08      	pop	{r3, pc}
   d6ca4:	0003024c 	.word	0x0003024c

000d6ca8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d6ca8:	b508      	push	{r3, lr}
   d6caa:	4b02      	ldr	r3, [pc, #8]	; (d6cb4 <HAL_USB_USART_Available_Data+0xc>)
   d6cac:	681b      	ldr	r3, [r3, #0]
   d6cae:	691b      	ldr	r3, [r3, #16]
   d6cb0:	9301      	str	r3, [sp, #4]
   d6cb2:	bd08      	pop	{r3, pc}
   d6cb4:	0003024c 	.word	0x0003024c

000d6cb8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d6cb8:	b508      	push	{r3, lr}
   d6cba:	4b02      	ldr	r3, [pc, #8]	; (d6cc4 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d6cbc:	681b      	ldr	r3, [r3, #0]
   d6cbe:	695b      	ldr	r3, [r3, #20]
   d6cc0:	9301      	str	r3, [sp, #4]
   d6cc2:	bd08      	pop	{r3, pc}
   d6cc4:	0003024c 	.word	0x0003024c

000d6cc8 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6cc8:	b508      	push	{r3, lr}
   d6cca:	4b02      	ldr	r3, [pc, #8]	; (d6cd4 <HAL_USB_USART_Receive_Data+0xc>)
   d6ccc:	681b      	ldr	r3, [r3, #0]
   d6cce:	699b      	ldr	r3, [r3, #24]
   d6cd0:	9301      	str	r3, [sp, #4]
   d6cd2:	bd08      	pop	{r3, pc}
   d6cd4:	0003024c 	.word	0x0003024c

000d6cd8 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d6cd8:	b508      	push	{r3, lr}
   d6cda:	4b02      	ldr	r3, [pc, #8]	; (d6ce4 <HAL_USB_USART_Send_Data+0xc>)
   d6cdc:	681b      	ldr	r3, [r3, #0]
   d6cde:	69db      	ldr	r3, [r3, #28]
   d6ce0:	9301      	str	r3, [sp, #4]
   d6ce2:	bd08      	pop	{r3, pc}
   d6ce4:	0003024c 	.word	0x0003024c

000d6ce8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d6ce8:	b508      	push	{r3, lr}
   d6cea:	4b02      	ldr	r3, [pc, #8]	; (d6cf4 <HAL_USB_USART_Flush_Data+0xc>)
   d6cec:	681b      	ldr	r3, [r3, #0]
   d6cee:	6a1b      	ldr	r3, [r3, #32]
   d6cf0:	9301      	str	r3, [sp, #4]
   d6cf2:	bd08      	pop	{r3, pc}
   d6cf4:	0003024c 	.word	0x0003024c

000d6cf8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d6cf8:	b508      	push	{r3, lr}
   d6cfa:	4b02      	ldr	r3, [pc, #8]	; (d6d04 <panic_+0xc>)
   d6cfc:	681b      	ldr	r3, [r3, #0]
   d6cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6d00:	9301      	str	r3, [sp, #4]
   d6d02:	bd08      	pop	{r3, pc}
   d6d04:	00030260 	.word	0x00030260

000d6d08 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6d08:	b508      	push	{r3, lr}
   d6d0a:	4b02      	ldr	r3, [pc, #8]	; (d6d14 <log_message+0xc>)
   d6d0c:	681b      	ldr	r3, [r3, #0]
   d6d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6d10:	9301      	str	r3, [sp, #4]
   d6d12:	bd08      	pop	{r3, pc}
   d6d14:	00030260 	.word	0x00030260

000d6d18 <log_message_v>:
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d6d18:	b508      	push	{r3, lr}
   d6d1a:	4b02      	ldr	r3, [pc, #8]	; (d6d24 <log_message_v+0xc>)
   d6d1c:	681b      	ldr	r3, [r3, #0]
   d6d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6d20:	9301      	str	r3, [sp, #4]
   d6d22:	bd08      	pop	{r3, pc}
   d6d24:	00030260 	.word	0x00030260

000d6d28 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d6d28:	b508      	push	{r3, lr}
   d6d2a:	4b03      	ldr	r3, [pc, #12]	; (d6d38 <diag_get_source+0x10>)
   d6d2c:	681b      	ldr	r3, [r3, #0]
   d6d2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d6d32:	9301      	str	r3, [sp, #4]
   d6d34:	bd08      	pop	{r3, pc}
   d6d36:	0000      	.short	0x0000
   d6d38:	00030260 	.word	0x00030260

000d6d3c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d6d3c:	b508      	push	{r3, lr}
   d6d3e:	4b02      	ldr	r3, [pc, #8]	; (d6d48 <system_mode+0xc>)
   d6d40:	681b      	ldr	r3, [r3, #0]
   d6d42:	681b      	ldr	r3, [r3, #0]
   d6d44:	9301      	str	r3, [sp, #4]
   d6d46:	bd08      	pop	{r3, pc}
   d6d48:	00030220 	.word	0x00030220

000d6d4c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6d4c:	b508      	push	{r3, lr}
   d6d4e:	4b02      	ldr	r3, [pc, #8]	; (d6d58 <set_system_mode+0xc>)
   d6d50:	681b      	ldr	r3, [r3, #0]
   d6d52:	685b      	ldr	r3, [r3, #4]
   d6d54:	9301      	str	r3, [sp, #4]
   d6d56:	bd08      	pop	{r3, pc}
   d6d58:	00030220 	.word	0x00030220

000d6d5c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6d5c:	b508      	push	{r3, lr}
   d6d5e:	4b02      	ldr	r3, [pc, #8]	; (d6d68 <system_delay_ms+0xc>)
   d6d60:	681b      	ldr	r3, [r3, #0]
   d6d62:	695b      	ldr	r3, [r3, #20]
   d6d64:	9301      	str	r3, [sp, #4]
   d6d66:	bd08      	pop	{r3, pc}
   d6d68:	00030220 	.word	0x00030220

000d6d6c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d6d6c:	b508      	push	{r3, lr}
   d6d6e:	4b02      	ldr	r3, [pc, #8]	; (d6d78 <system_thread_set_state+0xc>)
   d6d70:	681b      	ldr	r3, [r3, #0]
   d6d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6d74:	9301      	str	r3, [sp, #4]
   d6d76:	bd08      	pop	{r3, pc}
   d6d78:	00030220 	.word	0x00030220

000d6d7c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d6d7c:	b508      	push	{r3, lr}
   d6d7e:	4b02      	ldr	r3, [pc, #8]	; (d6d88 <application_thread_current+0xc>)
   d6d80:	681b      	ldr	r3, [r3, #0]
   d6d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6d84:	9301      	str	r3, [sp, #4]
   d6d86:	bd08      	pop	{r3, pc}
   d6d88:	00030220 	.word	0x00030220

000d6d8c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d6d8c:	b508      	push	{r3, lr}
   d6d8e:	4b02      	ldr	r3, [pc, #8]	; (d6d98 <application_thread_invoke+0xc>)
   d6d90:	681b      	ldr	r3, [r3, #0]
   d6d92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6d94:	9301      	str	r3, [sp, #4]
   d6d96:	bd08      	pop	{r3, pc}
   d6d98:	00030220 	.word	0x00030220

000d6d9c <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d6d9c:	b508      	push	{r3, lr}
   d6d9e:	4b02      	ldr	r3, [pc, #8]	; (d6da8 <system_thread_get_state+0xc>)
   d6da0:	681b      	ldr	r3, [r3, #0]
   d6da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6da4:	9301      	str	r3, [sp, #4]
   d6da6:	bd08      	pop	{r3, pc}
   d6da8:	00030220 	.word	0x00030220

000d6dac <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d6dac:	b508      	push	{r3, lr}
   d6dae:	4b02      	ldr	r3, [pc, #8]	; (d6db8 <system_notify_time_changed+0xc>)
   d6db0:	681b      	ldr	r3, [r3, #0]
   d6db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d6db4:	9301      	str	r3, [sp, #4]
   d6db6:	bd08      	pop	{r3, pc}
   d6db8:	00030220 	.word	0x00030220

000d6dbc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6dbc:	b508      	push	{r3, lr}
   d6dbe:	4b03      	ldr	r3, [pc, #12]	; (d6dcc <system_ctrl_set_app_request_handler+0x10>)
   d6dc0:	681b      	ldr	r3, [r3, #0]
   d6dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6dc6:	9301      	str	r3, [sp, #4]
   d6dc8:	bd08      	pop	{r3, pc}
   d6dca:	0000      	.short	0x0000
   d6dcc:	00030220 	.word	0x00030220

000d6dd0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6dd0:	b508      	push	{r3, lr}
   d6dd2:	4b03      	ldr	r3, [pc, #12]	; (d6de0 <system_ctrl_set_result+0x10>)
   d6dd4:	681b      	ldr	r3, [r3, #0]
   d6dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6dda:	9301      	str	r3, [sp, #4]
   d6ddc:	bd08      	pop	{r3, pc}
   d6dde:	0000      	.short	0x0000
   d6de0:	00030220 	.word	0x00030220

000d6de4 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d6de4:	b508      	push	{r3, lr}
   d6de6:	4b03      	ldr	r3, [pc, #12]	; (d6df4 <system_sleep_ext+0x10>)
   d6de8:	681b      	ldr	r3, [r3, #0]
   d6dea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d6dee:	9301      	str	r3, [sp, #4]
   d6df0:	bd08      	pop	{r3, pc}
   d6df2:	0000      	.short	0x0000
   d6df4:	00030220 	.word	0x00030220

000d6df8 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d6df8:	b508      	push	{r3, lr}
   d6dfa:	4b03      	ldr	r3, [pc, #12]	; (d6e08 <system_reset+0x10>)
   d6dfc:	681b      	ldr	r3, [r3, #0]
   d6dfe:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d6e02:	9301      	str	r3, [sp, #4]
   d6e04:	bd08      	pop	{r3, pc}
   d6e06:	0000      	.short	0x0000
   d6e08:	00030220 	.word	0x00030220

000d6e0c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d6e0c:	b508      	push	{r3, lr}
   d6e0e:	4b02      	ldr	r3, [pc, #8]	; (d6e18 <spark_variable+0xc>)
   d6e10:	681b      	ldr	r3, [r3, #0]
   d6e12:	681b      	ldr	r3, [r3, #0]
   d6e14:	9301      	str	r3, [sp, #4]
   d6e16:	bd08      	pop	{r3, pc}
   d6e18:	00030244 	.word	0x00030244

000d6e1c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d6e1c:	b508      	push	{r3, lr}
   d6e1e:	4b02      	ldr	r3, [pc, #8]	; (d6e28 <spark_function+0xc>)
   d6e20:	681b      	ldr	r3, [r3, #0]
   d6e22:	685b      	ldr	r3, [r3, #4]
   d6e24:	9301      	str	r3, [sp, #4]
   d6e26:	bd08      	pop	{r3, pc}
   d6e28:	00030244 	.word	0x00030244

000d6e2c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d6e2c:	b508      	push	{r3, lr}
   d6e2e:	4b02      	ldr	r3, [pc, #8]	; (d6e38 <spark_process+0xc>)
   d6e30:	681b      	ldr	r3, [r3, #0]
   d6e32:	689b      	ldr	r3, [r3, #8]
   d6e34:	9301      	str	r3, [sp, #4]
   d6e36:	bd08      	pop	{r3, pc}
   d6e38:	00030244 	.word	0x00030244

000d6e3c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d6e3c:	b508      	push	{r3, lr}
   d6e3e:	4b02      	ldr	r3, [pc, #8]	; (d6e48 <spark_cloud_flag_connect+0xc>)
   d6e40:	681b      	ldr	r3, [r3, #0]
   d6e42:	68db      	ldr	r3, [r3, #12]
   d6e44:	9301      	str	r3, [sp, #4]
   d6e46:	bd08      	pop	{r3, pc}
   d6e48:	00030244 	.word	0x00030244

000d6e4c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d6e4c:	b508      	push	{r3, lr}
   d6e4e:	4b02      	ldr	r3, [pc, #8]	; (d6e58 <spark_cloud_flag_connected+0xc>)
   d6e50:	681b      	ldr	r3, [r3, #0]
   d6e52:	695b      	ldr	r3, [r3, #20]
   d6e54:	9301      	str	r3, [sp, #4]
   d6e56:	bd08      	pop	{r3, pc}
   d6e58:	00030244 	.word	0x00030244

000d6e5c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d6e5c:	b508      	push	{r3, lr}
   d6e5e:	4b02      	ldr	r3, [pc, #8]	; (d6e68 <spark_deviceID+0xc>)
   d6e60:	681b      	ldr	r3, [r3, #0]
   d6e62:	69db      	ldr	r3, [r3, #28]
   d6e64:	9301      	str	r3, [sp, #4]
   d6e66:	bd08      	pop	{r3, pc}
   d6e68:	00030244 	.word	0x00030244

000d6e6c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6e6c:	b508      	push	{r3, lr}
   d6e6e:	4b02      	ldr	r3, [pc, #8]	; (d6e78 <spark_send_event+0xc>)
   d6e70:	681b      	ldr	r3, [r3, #0]
   d6e72:	6a1b      	ldr	r3, [r3, #32]
   d6e74:	9301      	str	r3, [sp, #4]
   d6e76:	bd08      	pop	{r3, pc}
   d6e78:	00030244 	.word	0x00030244

000d6e7c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d6e7c:	b508      	push	{r3, lr}
   d6e7e:	4b02      	ldr	r3, [pc, #8]	; (d6e88 <spark_subscribe+0xc>)
   d6e80:	681b      	ldr	r3, [r3, #0]
   d6e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6e84:	9301      	str	r3, [sp, #4]
   d6e86:	bd08      	pop	{r3, pc}
   d6e88:	00030244 	.word	0x00030244

000d6e8c <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d6e8c:	b508      	push	{r3, lr}
   d6e8e:	4b02      	ldr	r3, [pc, #8]	; (d6e98 <spark_sync_time+0xc>)
   d6e90:	681b      	ldr	r3, [r3, #0]
   d6e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6e94:	9301      	str	r3, [sp, #4]
   d6e96:	bd08      	pop	{r3, pc}
   d6e98:	00030244 	.word	0x00030244

000d6e9c <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d6e9c:	b508      	push	{r3, lr}
   d6e9e:	4b02      	ldr	r3, [pc, #8]	; (d6ea8 <spark_sync_time_pending+0xc>)
   d6ea0:	681b      	ldr	r3, [r3, #0]
   d6ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ea4:	9301      	str	r3, [sp, #4]
   d6ea6:	bd08      	pop	{r3, pc}
   d6ea8:	00030244 	.word	0x00030244

000d6eac <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
   d6eac:	b508      	push	{r3, lr}
   d6eae:	4b02      	ldr	r3, [pc, #8]	; (d6eb8 <spark_sync_time_last+0xc>)
   d6eb0:	681b      	ldr	r3, [r3, #0]
   d6eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6eb4:	9301      	str	r3, [sp, #4]
   d6eb6:	bd08      	pop	{r3, pc}
   d6eb8:	00030244 	.word	0x00030244

000d6ebc <spark_set_connection_property>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
   d6ebc:	b508      	push	{r3, lr}
   d6ebe:	4b02      	ldr	r3, [pc, #8]	; (d6ec8 <spark_set_connection_property+0xc>)
   d6ec0:	681b      	ldr	r3, [r3, #0]
   d6ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6ec4:	9301      	str	r3, [sp, #4]
   d6ec6:	bd08      	pop	{r3, pc}
   d6ec8:	00030244 	.word	0x00030244

000d6ecc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d6ecc:	b508      	push	{r3, lr}
   d6ece:	4b02      	ldr	r3, [pc, #8]	; (d6ed8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6ed0:	681b      	ldr	r3, [r3, #0]
   d6ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6ed4:	9301      	str	r3, [sp, #4]
   d6ed6:	bd08      	pop	{r3, pc}
   d6ed8:	00030244 	.word	0x00030244

000d6edc <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d6edc:	b508      	push	{r3, lr}
   d6ede:	4b02      	ldr	r3, [pc, #8]	; (d6ee8 <spark_cloud_disconnect+0xc>)
   d6ee0:	681b      	ldr	r3, [r3, #0]
   d6ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6ee4:	9301      	str	r3, [sp, #4]
   d6ee6:	bd08      	pop	{r3, pc}
   d6ee8:	00030244 	.word	0x00030244

000d6eec <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6eec:	b508      	push	{r3, lr}
   d6eee:	4b02      	ldr	r3, [pc, #8]	; (d6ef8 <network_connect+0xc>)
   d6ef0:	681b      	ldr	r3, [r3, #0]
   d6ef2:	685b      	ldr	r3, [r3, #4]
   d6ef4:	9301      	str	r3, [sp, #4]
   d6ef6:	bd08      	pop	{r3, pc}
   d6ef8:	00030240 	.word	0x00030240

000d6efc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6efc:	b508      	push	{r3, lr}
   d6efe:	4b02      	ldr	r3, [pc, #8]	; (d6f08 <network_connecting+0xc>)
   d6f00:	681b      	ldr	r3, [r3, #0]
   d6f02:	689b      	ldr	r3, [r3, #8]
   d6f04:	9301      	str	r3, [sp, #4]
   d6f06:	bd08      	pop	{r3, pc}
   d6f08:	00030240 	.word	0x00030240

000d6f0c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6f0c:	b508      	push	{r3, lr}
   d6f0e:	4b02      	ldr	r3, [pc, #8]	; (d6f18 <network_disconnect+0xc>)
   d6f10:	681b      	ldr	r3, [r3, #0]
   d6f12:	68db      	ldr	r3, [r3, #12]
   d6f14:	9301      	str	r3, [sp, #4]
   d6f16:	bd08      	pop	{r3, pc}
   d6f18:	00030240 	.word	0x00030240

000d6f1c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6f1c:	b508      	push	{r3, lr}
   d6f1e:	4b02      	ldr	r3, [pc, #8]	; (d6f28 <network_ready+0xc>)
   d6f20:	681b      	ldr	r3, [r3, #0]
   d6f22:	691b      	ldr	r3, [r3, #16]
   d6f24:	9301      	str	r3, [sp, #4]
   d6f26:	bd08      	pop	{r3, pc}
   d6f28:	00030240 	.word	0x00030240

000d6f2c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6f2c:	b508      	push	{r3, lr}
   d6f2e:	4b02      	ldr	r3, [pc, #8]	; (d6f38 <network_on+0xc>)
   d6f30:	681b      	ldr	r3, [r3, #0]
   d6f32:	695b      	ldr	r3, [r3, #20]
   d6f34:	9301      	str	r3, [sp, #4]
   d6f36:	bd08      	pop	{r3, pc}
   d6f38:	00030240 	.word	0x00030240

000d6f3c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6f3c:	b508      	push	{r3, lr}
   d6f3e:	4b02      	ldr	r3, [pc, #8]	; (d6f48 <network_off+0xc>)
   d6f40:	681b      	ldr	r3, [r3, #0]
   d6f42:	699b      	ldr	r3, [r3, #24]
   d6f44:	9301      	str	r3, [sp, #4]
   d6f46:	bd08      	pop	{r3, pc}
   d6f48:	00030240 	.word	0x00030240

000d6f4c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6f4c:	b508      	push	{r3, lr}
   d6f4e:	4b02      	ldr	r3, [pc, #8]	; (d6f58 <network_listen+0xc>)
   d6f50:	681b      	ldr	r3, [r3, #0]
   d6f52:	69db      	ldr	r3, [r3, #28]
   d6f54:	9301      	str	r3, [sp, #4]
   d6f56:	bd08      	pop	{r3, pc}
   d6f58:	00030240 	.word	0x00030240

000d6f5c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6f5c:	b508      	push	{r3, lr}
   d6f5e:	4b02      	ldr	r3, [pc, #8]	; (d6f68 <network_listening+0xc>)
   d6f60:	681b      	ldr	r3, [r3, #0]
   d6f62:	6a1b      	ldr	r3, [r3, #32]
   d6f64:	9301      	str	r3, [sp, #4]
   d6f66:	bd08      	pop	{r3, pc}
   d6f68:	00030240 	.word	0x00030240

000d6f6c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6f6c:	b508      	push	{r3, lr}
   d6f6e:	4b02      	ldr	r3, [pc, #8]	; (d6f78 <network_set_listen_timeout+0xc>)
   d6f70:	681b      	ldr	r3, [r3, #0]
   d6f72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6f74:	9301      	str	r3, [sp, #4]
   d6f76:	bd08      	pop	{r3, pc}
   d6f78:	00030240 	.word	0x00030240

000d6f7c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6f7c:	b508      	push	{r3, lr}
   d6f7e:	4b02      	ldr	r3, [pc, #8]	; (d6f88 <network_get_listen_timeout+0xc>)
   d6f80:	681b      	ldr	r3, [r3, #0]
   d6f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6f84:	9301      	str	r3, [sp, #4]
   d6f86:	bd08      	pop	{r3, pc}
   d6f88:	00030240 	.word	0x00030240

000d6f8c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6f8c:	b508      	push	{r3, lr}
   d6f8e:	4b02      	ldr	r3, [pc, #8]	; (d6f98 <malloc+0xc>)
   d6f90:	681b      	ldr	r3, [r3, #0]
   d6f92:	681b      	ldr	r3, [r3, #0]
   d6f94:	9301      	str	r3, [sp, #4]
   d6f96:	bd08      	pop	{r3, pc}
   d6f98:	0003021c 	.word	0x0003021c

000d6f9c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6f9c:	b508      	push	{r3, lr}
   d6f9e:	4b02      	ldr	r3, [pc, #8]	; (d6fa8 <free+0xc>)
   d6fa0:	681b      	ldr	r3, [r3, #0]
   d6fa2:	685b      	ldr	r3, [r3, #4]
   d6fa4:	9301      	str	r3, [sp, #4]
   d6fa6:	bd08      	pop	{r3, pc}
   d6fa8:	0003021c 	.word	0x0003021c

000d6fac <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6fac:	b508      	push	{r3, lr}
   d6fae:	4b02      	ldr	r3, [pc, #8]	; (d6fb8 <realloc+0xc>)
   d6fb0:	681b      	ldr	r3, [r3, #0]
   d6fb2:	689b      	ldr	r3, [r3, #8]
   d6fb4:	9301      	str	r3, [sp, #4]
   d6fb6:	bd08      	pop	{r3, pc}
   d6fb8:	0003021c 	.word	0x0003021c

000d6fbc <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d6fbc:	b508      	push	{r3, lr}
   d6fbe:	4b02      	ldr	r3, [pc, #8]	; (d6fc8 <siprintf+0xc>)
   d6fc0:	681b      	ldr	r3, [r3, #0]
   d6fc2:	691b      	ldr	r3, [r3, #16]
   d6fc4:	9301      	str	r3, [sp, #4]
   d6fc6:	bd08      	pop	{r3, pc}
   d6fc8:	0003021c 	.word	0x0003021c

000d6fcc <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d6fcc:	b508      	push	{r3, lr}
   d6fce:	4b02      	ldr	r3, [pc, #8]	; (d6fd8 <snprintf+0xc>)
   d6fd0:	681b      	ldr	r3, [r3, #0]
   d6fd2:	69db      	ldr	r3, [r3, #28]
   d6fd4:	9301      	str	r3, [sp, #4]
   d6fd6:	bd08      	pop	{r3, pc}
   d6fd8:	0003021c 	.word	0x0003021c

000d6fdc <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d6fdc:	b508      	push	{r3, lr}
   d6fde:	4b02      	ldr	r3, [pc, #8]	; (d6fe8 <abort+0xc>)
   d6fe0:	681b      	ldr	r3, [r3, #0]
   d6fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6fe4:	9301      	str	r3, [sp, #4]
   d6fe6:	bd08      	pop	{r3, pc}
   d6fe8:	0003021c 	.word	0x0003021c

000d6fec <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d6fec:	b508      	push	{r3, lr}
   d6fee:	4b02      	ldr	r3, [pc, #8]	; (d6ff8 <_malloc_r+0xc>)
   d6ff0:	681b      	ldr	r3, [r3, #0]
   d6ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6ff4:	9301      	str	r3, [sp, #4]
   d6ff6:	bd08      	pop	{r3, pc}
   d6ff8:	0003021c 	.word	0x0003021c

000d6ffc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6ffc:	b508      	push	{r3, lr}
   d6ffe:	4b02      	ldr	r3, [pc, #8]	; (d7008 <newlib_impure_ptr_callback+0xc>)
   d7000:	681b      	ldr	r3, [r3, #0]
   d7002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d7004:	9301      	str	r3, [sp, #4]
   d7006:	bd08      	pop	{r3, pc}
   d7008:	0003021c 	.word	0x0003021c

000d700c <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d700c:	b508      	push	{r3, lr}
   d700e:	4b02      	ldr	r3, [pc, #8]	; (d7018 <strftime+0xc>)
   d7010:	681b      	ldr	r3, [r3, #0]
   d7012:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7014:	9301      	str	r3, [sp, #4]
   d7016:	bd08      	pop	{r3, pc}
   d7018:	0003021c 	.word	0x0003021c

000d701c <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d701c:	b508      	push	{r3, lr}
   d701e:	4b02      	ldr	r3, [pc, #8]	; (d7028 <localtime_r+0xc>)
   d7020:	681b      	ldr	r3, [r3, #0]
   d7022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d7024:	9301      	str	r3, [sp, #4]
   d7026:	bd08      	pop	{r3, pc}
   d7028:	0003021c 	.word	0x0003021c

000d702c <gmtime_r>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d702c:	b508      	push	{r3, lr}
   d702e:	4b02      	ldr	r3, [pc, #8]	; (d7038 <gmtime_r+0xc>)
   d7030:	681b      	ldr	r3, [r3, #0]
   d7032:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d7034:	9301      	str	r3, [sp, #4]
   d7036:	bd08      	pop	{r3, pc}
   d7038:	0003021c 	.word	0x0003021c

000d703c <mktime>:
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d703c:	b508      	push	{r3, lr}
   d703e:	4b02      	ldr	r3, [pc, #8]	; (d7048 <mktime+0xc>)
   d7040:	681b      	ldr	r3, [r3, #0]
   d7042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d7044:	9301      	str	r3, [sp, #4]
   d7046:	bd08      	pop	{r3, pc}
   d7048:	0003021c 	.word	0x0003021c

000d704c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d704c:	2100      	movs	r1, #0
   d704e:	f7ff be85 	b.w	d6d5c <system_delay_ms>

000d7052 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d7052:	b510      	push	{r4, lr}
      if (_M_empty())
   d7054:	6883      	ldr	r3, [r0, #8]
   d7056:	4604      	mov	r4, r0
   d7058:	b90b      	cbnz	r3, d705e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d705a:	f001 fc4e 	bl	d88fa <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d705e:	68c3      	ldr	r3, [r0, #12]
   d7060:	4798      	blx	r3
      if (_M_manager)
   d7062:	68a3      	ldr	r3, [r4, #8]
   d7064:	b11b      	cbz	r3, d706e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d7066:	2203      	movs	r2, #3
   d7068:	4621      	mov	r1, r4
   d706a:	4620      	mov	r0, r4
   d706c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d706e:	4620      	mov	r0, r4
   d7070:	2110      	movs	r1, #16
}
   d7072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d7076:	f001 bc3a 	b.w	d88ee <_ZdlPvj>

000d707a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d707a:	b510      	push	{r4, lr}
          _M_dispose();
   d707c:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d707e:	4604      	mov	r4, r0
          _M_dispose();
   d7080:	689b      	ldr	r3, [r3, #8]
   d7082:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7084:	68a3      	ldr	r3, [r4, #8]
   d7086:	3b01      	subs	r3, #1
   d7088:	60a3      	str	r3, [r4, #8]
   d708a:	b92b      	cbnz	r3, d7098 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d708c:	6823      	ldr	r3, [r4, #0]
   d708e:	4620      	mov	r0, r4
   d7090:	68db      	ldr	r3, [r3, #12]
    }
   d7092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d7096:	4718      	bx	r3
    }
   d7098:	bd10      	pop	{r4, pc}

000d709a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d709a:	b510      	push	{r4, lr}
   d709c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d709e:	6800      	ldr	r0, [r0, #0]
   d70a0:	b108      	cbz	r0, d70a6 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d70a2:	f7ff fca1 	bl	d69e8 <os_mutex_recursive_destroy>
    }
   d70a6:	4620      	mov	r0, r4
   d70a8:	bd10      	pop	{r4, pc}

000d70aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d70aa:	680b      	ldr	r3, [r1, #0]
   d70ac:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d70ae:	b113      	cbz	r3, d70b6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d70b0:	685a      	ldr	r2, [r3, #4]
   d70b2:	3201      	adds	r2, #1
   d70b4:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d70b6:	4770      	bx	lr

000d70b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d70b8:	b510      	push	{r4, lr}
   d70ba:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d70bc:	6800      	ldr	r0, [r0, #0]
   d70be:	b128      	cbz	r0, d70cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d70c0:	6843      	ldr	r3, [r0, #4]
   d70c2:	3b01      	subs	r3, #1
   d70c4:	6043      	str	r3, [r0, #4]
   d70c6:	b90b      	cbnz	r3, d70cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d70c8:	f7ff ffd7 	bl	d707a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d70cc:	4620      	mov	r0, r4
   d70ce:	bd10      	pop	{r4, pc}

000d70d0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d70d0:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d70d2:	4c06      	ldr	r4, [pc, #24]	; (d70ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d70d4:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d70d6:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d70d8:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d70da:	f7ff fc7d 	bl	d69d8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d70de:	4620      	mov	r0, r4
   d70e0:	4a03      	ldr	r2, [pc, #12]	; (d70f0 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d70e2:	4904      	ldr	r1, [pc, #16]	; (d70f4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d70e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d70e8:	f001 bbfc 	b.w	d88e4 <__aeabi_atexit>
   d70ec:	2003e5c4 	.word	0x2003e5c4
   d70f0:	2003e3a8 	.word	0x2003e3a8
   d70f4:	000d709b 	.word	0x000d709b

000d70f8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d70f8:	2200      	movs	r2, #0
   d70fa:	6840      	ldr	r0, [r0, #4]
   d70fc:	4611      	mov	r1, r2
   d70fe:	f7ff bf0d 	b.w	d6f1c <network_ready>

000d7102 <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d7102:	2200      	movs	r2, #0
   d7104:	6840      	ldr	r0, [r0, #4]
   d7106:	4611      	mov	r1, r2
   d7108:	f7ff bf28 	b.w	d6f5c <network_listening>

000d710c <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d710c:	2200      	movs	r2, #0
   d710e:	6840      	ldr	r0, [r0, #4]
   d7110:	4611      	mov	r1, r2
   d7112:	f7ff bf33 	b.w	d6f7c <network_get_listen_timeout>

000d7116 <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7116:	6840      	ldr	r0, [r0, #4]
   d7118:	2200      	movs	r2, #0
   d711a:	f7ff bf27 	b.w	d6f6c <network_set_listen_timeout>

000d711e <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d711e:	6840      	ldr	r0, [r0, #4]
   d7120:	2200      	movs	r2, #0
   d7122:	f081 0101 	eor.w	r1, r1, #1
   d7126:	f7ff bf11 	b.w	d6f4c <network_listen>

000d712a <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d712a:	2300      	movs	r3, #0
   d712c:	6840      	ldr	r0, [r0, #4]
   d712e:	461a      	mov	r2, r3
   d7130:	4619      	mov	r1, r3
   d7132:	f7ff bf03 	b.w	d6f3c <network_off>

000d7136 <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7136:	2300      	movs	r3, #0
   d7138:	6840      	ldr	r0, [r0, #4]
   d713a:	461a      	mov	r2, r3
   d713c:	4619      	mov	r1, r3
   d713e:	f7ff bef5 	b.w	d6f2c <network_on>

000d7142 <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d7142:	2200      	movs	r2, #0
   d7144:	6840      	ldr	r0, [r0, #4]
   d7146:	4611      	mov	r1, r2
   d7148:	f7ff bed8 	b.w	d6efc <network_connecting>

000d714c <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d714c:	6840      	ldr	r0, [r0, #4]
   d714e:	2200      	movs	r2, #0
   d7150:	2102      	movs	r1, #2
   d7152:	f7ff bedb 	b.w	d6f0c <network_disconnect>

000d7156 <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7156:	2300      	movs	r3, #0
   d7158:	6840      	ldr	r0, [r0, #4]
   d715a:	461a      	mov	r2, r3
   d715c:	f7ff bec6 	b.w	d6eec <network_connect>

000d7160 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d7160:	4b08      	ldr	r3, [pc, #32]	; (d7184 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d7162:	b510      	push	{r4, lr}
   d7164:	2428      	movs	r4, #40	; 0x28
   d7166:	4622      	mov	r2, r4
   d7168:	4618      	mov	r0, r3
   d716a:	2100      	movs	r1, #0
   d716c:	f002 f858 	bl	d9220 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d7170:	4b05      	ldr	r3, [pc, #20]	; (d7188 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d7172:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d7174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7178:	6042      	str	r2, [r0, #4]
   d717a:	2204      	movs	r2, #4
   d717c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d717e:	4a03      	ldr	r2, [pc, #12]	; (d718c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d7180:	601a      	str	r2, [r3, #0]
   d7182:	bd10      	pop	{r4, pc}
   d7184:	2003e5d0 	.word	0x2003e5d0
   d7188:	2003e5c8 	.word	0x2003e5c8
   d718c:	000d9a98 	.word	0x000d9a98

000d7190 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7190:	4770      	bx	lr

000d7192 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d7192:	2000      	movs	r0, #0
   d7194:	4770      	bx	lr

000d7196 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d7196:	b510      	push	{r4, lr}
   d7198:	2110      	movs	r1, #16
   d719a:	4604      	mov	r4, r0
   d719c:	f001 fba7 	bl	d88ee <_ZdlPvj>
   d71a0:	4620      	mov	r0, r4
   d71a2:	bd10      	pop	{r4, pc}

000d71a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d71a4:	b508      	push	{r3, lr}
      { delete this; }
   d71a6:	f7ff fff6 	bl	d7196 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d71aa:	bd08      	pop	{r3, pc}

000d71ac <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d71ac:	b530      	push	{r4, r5, lr}
        type_(type) {
   d71ae:	2200      	movs	r2, #0
   d71b0:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d71b4:	6002      	str	r2, [r0, #0]
   d71b6:	8084      	strh	r4, [r0, #4]
   d71b8:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d71ba:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d71bc:	680c      	ldr	r4, [r1, #0]
   d71be:	8085      	strh	r5, [r0, #4]
   d71c0:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d71c2:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d71c4:	bd30      	pop	{r4, r5, pc}

000d71c6 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d71c6:	b510      	push	{r4, lr}
   d71c8:	4604      	mov	r4, r0
    free((void*)msg_);
   d71ca:	6800      	ldr	r0, [r0, #0]
   d71cc:	f7ff fee6 	bl	d6f9c <free>
}
   d71d0:	4620      	mov	r0, r4
   d71d2:	bd10      	pop	{r4, pc}

000d71d4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d71d4:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d71d6:	68c4      	ldr	r4, [r0, #12]
   d71d8:	b1f4      	cbz	r4, d7218 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
   d71da:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d71dc:	2b02      	cmp	r3, #2
   d71de:	d103      	bne.n	d71e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d71e0:	f104 000c 	add.w	r0, r4, #12
   d71e4:	f7ff ffef 	bl	d71c6 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d71e8:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d71ea:	b135      	cbz	r5, d71fa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d71ec:	4628      	mov	r0, r5
   d71ee:	f7ff f907 	bl	d6400 <_ZNSt14_Function_baseD1Ev>
   d71f2:	2110      	movs	r1, #16
   d71f4:	4628      	mov	r0, r5
   d71f6:	f001 fb7a 	bl	d88ee <_ZdlPvj>
   d71fa:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d71fc:	b135      	cbz	r5, d720c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d71fe:	4628      	mov	r0, r5
   d7200:	f7ff f8fe 	bl	d6400 <_ZNSt14_Function_baseD1Ev>
   d7204:	2110      	movs	r1, #16
   d7206:	4628      	mov	r0, r5
   d7208:	f001 fb71 	bl	d88ee <_ZdlPvj>
   d720c:	4620      	mov	r0, r4
   d720e:	2114      	movs	r1, #20
   d7210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7214:	f001 bb6b 	b.w	d88ee <_ZdlPvj>
   d7218:	bd38      	pop	{r3, r4, r5, pc}

000d721a <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d721a:	b510      	push	{r4, lr}
   d721c:	b088      	sub	sp, #32
   d721e:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d7220:	4668      	mov	r0, sp
   d7222:	f000 fe22 	bl	d7e6a <_ZN6StringC1EPKc>
    return (*fn)(p);
   d7226:	4669      	mov	r1, sp
   d7228:	a804      	add	r0, sp, #16
   d722a:	f000 fe41 	bl	d7eb0 <_ZN6StringC1ERKS_>
   d722e:	a804      	add	r0, sp, #16
   d7230:	47a0      	blx	r4
   d7232:	4604      	mov	r4, r0
   d7234:	a804      	add	r0, sp, #16
   d7236:	f000 fdcd 	bl	d7dd4 <_ZN6StringD1Ev>
    String p(param);
   d723a:	4668      	mov	r0, sp
   d723c:	f000 fdca 	bl	d7dd4 <_ZN6StringD1Ev>
}
   d7240:	4620      	mov	r0, r4
   d7242:	b008      	add	sp, #32
   d7244:	bd10      	pop	{r4, pc}

000d7246 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d7246:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d7248:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d724a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d724e:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d7250:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d7252:	461a      	mov	r2, r3
   d7254:	4669      	mov	r1, sp
   d7256:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d7258:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d725c:	f8ad 4000 	strh.w	r4, [sp]
   d7260:	f7ff fddc 	bl	d6e1c <spark_function>
}
   d7264:	b004      	add	sp, #16
   d7266:	bd10      	pop	{r4, pc}

000d7268 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d7268:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d726a:	2308      	movs	r3, #8
   d726c:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d7270:	6803      	ldr	r3, [r0, #0]
   d7272:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d7276:	7a03      	ldrb	r3, [r0, #8]
   d7278:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d727c:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d727e:	6843      	ldr	r3, [r0, #4]
   d7280:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d7282:	4668      	mov	r0, sp
   d7284:	f7ff fe2a 	bl	d6edc <spark_cloud_disconnect>
}
   d7288:	b003      	add	sp, #12
   d728a:	f85d fb04 	ldr.w	pc, [sp], #4

000d728e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d728e:	b573      	push	{r0, r1, r4, r5, r6, lr}
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7290:	460e      	mov	r6, r1
   d7292:	4604      	mov	r4, r0
   d7294:	f856 3b04 	ldr.w	r3, [r6], #4
   d7298:	9300      	str	r3, [sp, #0]
   d729a:	460d      	mov	r5, r1
   d729c:	a801      	add	r0, sp, #4
   d729e:	4631      	mov	r1, r6
   d72a0:	f7ff ff03 	bl	d70aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d72a4:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d72a6:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d72a8:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d72aa:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d72ac:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d72ae:	2300      	movs	r3, #0
   d72b0:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d72b2:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d72b4:	f7ff ff00 	bl	d70b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d72b8:	4630      	mov	r0, r6
   d72ba:	f7ff fefd 	bl	d70b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d72be:	4628      	mov	r0, r5
   d72c0:	2108      	movs	r1, #8
   d72c2:	f001 fb14 	bl	d88ee <_ZdlPvj>
        return p;
    }
   d72c6:	4620      	mov	r0, r4
   d72c8:	b002      	add	sp, #8
   d72ca:	bd70      	pop	{r4, r5, r6, pc}

000d72cc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d72cc:	b513      	push	{r0, r1, r4, lr}
   d72ce:	460b      	mov	r3, r1
   d72d0:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d72d2:	e9d0 0100 	ldrd	r0, r1, [r0]
   d72d6:	466c      	mov	r4, sp
   d72d8:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d72dc:	e893 0003 	ldmia.w	r3, {r0, r1}
   d72e0:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d72e4:	e894 0003 	ldmia.w	r4, {r0, r1}
   d72e8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d72ec:	b002      	add	sp, #8
   d72ee:	bd10      	pop	{r4, pc}

000d72f0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d72f0:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d72f2:	b510      	push	{r4, lr}
      if (_M_empty())
   d72f4:	b90a      	cbnz	r2, d72fa <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d72f6:	f001 fb00 	bl	d88fa <_ZSt25__throw_bad_function_callv>
    }
   d72fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d72fe:	68c3      	ldr	r3, [r0, #12]
   d7300:	4718      	bx	r3

000d7302 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7302:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7304:	6800      	ldr	r0, [r0, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d7306:	f100 0110 	add.w	r1, r0, #16
   d730a:	f7ff fff1 	bl	d72f0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d730e:	bd08      	pop	{r3, pc}

000d7310 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d7310:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d7312:	b510      	push	{r4, lr}
      if (_M_empty())
   d7314:	b90a      	cbnz	r2, d731a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d7316:	f001 faf0 	bl	d88fa <_ZSt25__throw_bad_function_callv>
    }
   d731a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d731e:	68c3      	ldr	r3, [r0, #12]
   d7320:	4718      	bx	r3

000d7322 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d7322:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d7324:	6800      	ldr	r0, [r0, #0]
   d7326:	f100 0110 	add.w	r1, r0, #16
   d732a:	f7ff fff1 	bl	d7310 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d732e:	bd08      	pop	{r3, pc}

000d7330 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d7330:	b538      	push	{r3, r4, r5, lr}
   d7332:	2300      	movs	r3, #0
   d7334:	4604      	mov	r4, r0
   d7336:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d7338:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d733a:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d733c:	f7fc feab 	bl	d4096 <_Znwj>
   d7340:	b128      	cbz	r0, d734e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d7342:	2301      	movs	r3, #1
   d7344:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d7348:	4b02      	ldr	r3, [pc, #8]	; (d7354 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d734a:	6003      	str	r3, [r0, #0]
   d734c:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d734e:	6020      	str	r0, [r4, #0]
	}
   d7350:	4620      	mov	r0, r4
   d7352:	bd38      	pop	{r3, r4, r5, pc}
   d7354:	000d9acc 	.word	0x000d9acc

000d7358 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d7358:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d735a:	2300      	movs	r3, #0
   d735c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d735e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d7360:	4604      	mov	r4, r0
   d7362:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7364:	b12b      	cbz	r3, d7372 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7366:	2202      	movs	r2, #2
   d7368:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d736a:	68eb      	ldr	r3, [r5, #12]
   d736c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d736e:	68ab      	ldr	r3, [r5, #8]
   d7370:	60a3      	str	r3, [r4, #8]
    }
   d7372:	4620      	mov	r0, r4
   d7374:	bd38      	pop	{r3, r4, r5, pc}
	...

000d7378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d7378:	b5f0      	push	{r4, r5, r6, r7, lr}
   d737a:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d737c:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d737e:	4668      	mov	r0, sp
   d7380:	f7ff ff14 	bl	d71ac <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d7384:	f04f 0302 	mov.w	r3, #2
   d7388:	e8d4 2f4f 	ldrexb	r2, [r4]
   d738c:	2a00      	cmp	r2, #0
   d738e:	d103      	bne.n	d7398 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d7390:	e8c4 3f41 	strexb	r1, r3, [r4]
   d7394:	2900      	cmp	r1, #0
   d7396:	d1f7      	bne.n	d7388 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d7398:	d125      	bne.n	d73e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d739a:	f104 050c 	add.w	r5, r4, #12
   d739e:	4669      	mov	r1, sp
   d73a0:	4628      	mov	r0, r5
   d73a2:	f7ff ff03 	bl	d71ac <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d73a6:	f3bf 8f5b 	dmb	ish
   d73aa:	2301      	movs	r3, #1
   d73ac:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d73ae:	2000      	movs	r0, #0
   d73b0:	f104 0308 	add.w	r3, r4, #8
   d73b4:	f3bf 8f5b 	dmb	ish
   d73b8:	e853 6f00 	ldrex	r6, [r3]
   d73bc:	e843 0200 	strex	r2, r0, [r3]
   d73c0:	2a00      	cmp	r2, #0
   d73c2:	d1f9      	bne.n	d73b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d73c4:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d73c8:	b16e      	cbz	r6, d73e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d73ca:	f7ff fcd7 	bl	d6d7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d73ce:	b178      	cbz	r0, d73f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d73d0:	4629      	mov	r1, r5
   d73d2:	4630      	mov	r0, r6
   d73d4:	f7ff ff8c 	bl	d72f0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d73d8:	4630      	mov	r0, r6
   d73da:	f7ff f811 	bl	d6400 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d73de:	2110      	movs	r1, #16
   d73e0:	4630      	mov	r0, r6
   d73e2:	f001 fa84 	bl	d88ee <_ZdlPvj>
        p_->setError(std::move(error));
   d73e6:	4668      	mov	r0, sp
   d73e8:	f7ff feed 	bl	d71c6 <_ZN8particle5ErrorD1Ev>
    }
   d73ec:	b009      	add	sp, #36	; 0x24
   d73ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d73f0:	4631      	mov	r1, r6
   d73f2:	a802      	add	r0, sp, #8
   d73f4:	f7ff ffb0 	bl	d7358 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d73f8:	68e0      	ldr	r0, [r4, #12]
   d73fa:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d73fe:	b108      	cbz	r0, d7404 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d7400:	f001 ff4c 	bl	d929c <strdup>
        type_(type) {
   d7404:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7406:	2010      	movs	r0, #16
   d7408:	f8ad 501c 	strh.w	r5, [sp, #28]
   d740c:	f7fc fe43 	bl	d4096 <_Znwj>
   d7410:	4605      	mov	r5, r0
   d7412:	b1e8      	cbz	r0, d7450 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d7414:	2700      	movs	r7, #0
   d7416:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d7418:	2018      	movs	r0, #24
   d741a:	f7fc fe3c 	bl	d4096 <_Znwj>
   d741e:	4604      	mov	r4, r0
   d7420:	b188      	cbz	r0, d7446 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d7422:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d7424:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d7426:	a802      	add	r0, sp, #8
   d7428:	f7ff ff50 	bl	d72cc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d742c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d742e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7430:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7432:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7434:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7436:	a906      	add	r1, sp, #24
   d7438:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d743a:	60e3      	str	r3, [r4, #12]
   d743c:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d7440:	9205      	str	r2, [sp, #20]
   d7442:	f7ff feb3 	bl	d71ac <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d7446:	4b08      	ldr	r3, [pc, #32]	; (d7468 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d7448:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d744a:	4b08      	ldr	r3, [pc, #32]	; (d746c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d744c:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d744e:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d7450:	a806      	add	r0, sp, #24
   d7452:	f7ff feb8 	bl	d71c6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d7456:	a802      	add	r0, sp, #8
   d7458:	f7fe ffd2 	bl	d6400 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d745c:	2200      	movs	r2, #0
   d745e:	4629      	mov	r1, r5
   d7460:	4803      	ldr	r0, [pc, #12]	; (d7470 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d7462:	f7ff fc93 	bl	d6d8c <application_thread_invoke>
   d7466:	e7b7      	b.n	d73d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d7468:	000d7303 	.word	0x000d7303
   d746c:	000d7599 	.word	0x000d7599
   d7470:	000d7053 	.word	0x000d7053

000d7474 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d7474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7478:	b08a      	sub	sp, #40	; 0x28
   d747a:	4605      	mov	r5, r0
   d747c:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d7480:	460c      	mov	r4, r1
   d7482:	4617      	mov	r7, r2
   d7484:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7486:	f7ff fce1 	bl	d6e4c <spark_cloud_flag_connected>
   d748a:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d748c:	4682      	mov	sl, r0
   d748e:	bb38      	cbnz	r0, d74e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d7490:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d7494:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d7496:	a905      	add	r1, sp, #20
   d7498:	4630      	mov	r0, r6
   d749a:	f8ad 3018 	strh.w	r3, [sp, #24]
   d749e:	f7ff fe85 	bl	d71ac <_ZN8particle5ErrorC1EOS0_>
   d74a2:	2014      	movs	r0, #20
   d74a4:	f7fc fdf7 	bl	d4096 <_Znwj>
   d74a8:	4604      	mov	r4, r0
   d74aa:	b148      	cbz	r0, d74c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d74ac:	2302      	movs	r3, #2
   d74ae:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d74b0:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d74b2:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d74b6:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d74b8:	4631      	mov	r1, r6
   d74ba:	300c      	adds	r0, #12
   d74bc:	f7ff fe76 	bl	d71ac <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d74c0:	4628      	mov	r0, r5
	: __shared_count(__p)
   d74c2:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d74c4:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d74c8:	f7ff ff32 	bl	d7330 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d74cc:	4630      	mov	r0, r6
   d74ce:	f7ff fe7a 	bl	d71c6 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d74d2:	a805      	add	r0, sp, #20
   d74d4:	f7ff fe77 	bl	d71c6 <_ZN8particle5ErrorD1Ev>
}
   d74d8:	4628      	mov	r0, r5
   d74da:	b00a      	add	sp, #40	; 0x28
   d74dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d74e0:	230c      	movs	r3, #12
   d74e2:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d74e6:	2014      	movs	r0, #20
   d74e8:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d74ec:	9307      	str	r3, [sp, #28]
   d74ee:	f7fc fdd2 	bl	d4096 <_Znwj>
   d74f2:	4601      	mov	r1, r0
   d74f4:	b128      	cbz	r0, d7502 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d74f6:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d74fa:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d74fe:	f880 a001 	strb.w	sl, [r0, #1]
   d7502:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d7504:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d7506:	f7ff ff13 	bl	d7330 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d750a:	4b22      	ldr	r3, [pc, #136]	; (d7594 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d750c:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d750e:	2008      	movs	r0, #8
   d7510:	f7fc fdc1 	bl	d4096 <_Znwj>
   d7514:	4682      	mov	sl, r0
   d7516:	b128      	cbz	r0, d7524 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d7518:	9b03      	ldr	r3, [sp, #12]
   d751a:	f840 3b04 	str.w	r3, [r0], #4
   d751e:	a904      	add	r1, sp, #16
   d7520:	f7ff fdc3 	bl	d70aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7524:	9600      	str	r6, [sp, #0]
   d7526:	fa5f f389 	uxtb.w	r3, r9
   d752a:	4642      	mov	r2, r8
   d752c:	4639      	mov	r1, r7
   d752e:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d7530:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d7534:	f7ff fc9a 	bl	d6e6c <spark_send_event>
   d7538:	b9b8      	cbnz	r0, d756a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d753a:	9b03      	ldr	r3, [sp, #12]
   d753c:	785b      	ldrb	r3, [r3, #1]
   d753e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d7542:	b993      	cbnz	r3, d756a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d7544:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d7548:	a905      	add	r1, sp, #20
   d754a:	a803      	add	r0, sp, #12
   d754c:	9205      	str	r2, [sp, #20]
   d754e:	f8ad 3018 	strh.w	r3, [sp, #24]
   d7552:	f7ff ff11 	bl	d7378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7556:	a805      	add	r0, sp, #20
   d7558:	f7ff fe35 	bl	d71c6 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d755c:	a805      	add	r0, sp, #20
   d755e:	9909      	ldr	r1, [sp, #36]	; 0x24
   d7560:	f7ff fe95 	bl	d728e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d7564:	a806      	add	r0, sp, #24
   d7566:	f7ff fda7 	bl	d70b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d756a:	9b03      	ldr	r3, [sp, #12]
   d756c:	9305      	str	r3, [sp, #20]
   d756e:	a904      	add	r1, sp, #16
   d7570:	a806      	add	r0, sp, #24
   d7572:	f7ff fd9a 	bl	d70aa <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d7576:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d7578:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d757a:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d757c:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d757e:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d7580:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d7582:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d7584:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d7586:	f7ff fd97 	bl	d70b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d758a:	a804      	add	r0, sp, #16
   d758c:	f7ff fd94 	bl	d70b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d7590:	e7a2      	b.n	d74d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d7592:	bf00      	nop
   d7594:	000d765d 	.word	0x000d765d

000d7598 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d7598:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d759a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d759c:	4605      	mov	r5, r0
	  switch (__op)
   d759e:	d007      	beq.n	d75b0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d75a0:	2a03      	cmp	r2, #3
   d75a2:	d018      	beq.n	d75d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d75a4:	2a01      	cmp	r2, #1
   d75a6:	d101      	bne.n	d75ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d75a8:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d75aa:	6003      	str	r3, [r0, #0]
	}
   d75ac:	2000      	movs	r0, #0
   d75ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d75b0:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d75b2:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d75b4:	f7fc fd6f 	bl	d4096 <_Znwj>
   d75b8:	4604      	mov	r4, r0
   d75ba:	b150      	cbz	r0, d75d2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d75bc:	4631      	mov	r1, r6
   d75be:	f7ff fecb 	bl	d7358 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d75c2:	6930      	ldr	r0, [r6, #16]
   d75c4:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d75c8:	b108      	cbz	r0, d75ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d75ca:	f001 fe67 	bl	d929c <strdup>
        type_(type) {
   d75ce:	6120      	str	r0, [r4, #16]
   d75d0:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d75d2:	602c      	str	r4, [r5, #0]
	}
   d75d4:	e7ea      	b.n	d75ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d75d6:	6804      	ldr	r4, [r0, #0]
   d75d8:	2c00      	cmp	r4, #0
   d75da:	d0e7      	beq.n	d75ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d75dc:	f104 0010 	add.w	r0, r4, #16
   d75e0:	f7ff fdf1 	bl	d71c6 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d75e4:	4620      	mov	r0, r4
   d75e6:	f7fe ff0b 	bl	d6400 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d75ea:	2118      	movs	r1, #24
   d75ec:	4620      	mov	r0, r4
   d75ee:	f001 f97e 	bl	d88ee <_ZdlPvj>
   d75f2:	e7db      	b.n	d75ac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d75f4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d75f4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d75f6:	2300      	movs	r3, #0
   d75f8:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d75fa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d75fc:	4604      	mov	r4, r0
   d75fe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d7600:	b12b      	cbz	r3, d760e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d7602:	2202      	movs	r2, #2
   d7604:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d7606:	68eb      	ldr	r3, [r5, #12]
   d7608:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d760a:	68ab      	ldr	r3, [r5, #8]
   d760c:	60a3      	str	r3, [r4, #8]
    }
   d760e:	4620      	mov	r0, r4
   d7610:	bd38      	pop	{r3, r4, r5, pc}

000d7612 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d7612:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d7614:	b570      	push	{r4, r5, r6, lr}
   d7616:	4604      	mov	r4, r0
	  switch (__op)
   d7618:	d007      	beq.n	d762a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d761a:	2a03      	cmp	r2, #3
   d761c:	d012      	beq.n	d7644 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d761e:	2a01      	cmp	r2, #1
   d7620:	d101      	bne.n	d7626 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d7622:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d7624:	6003      	str	r3, [r0, #0]
	}
   d7626:	2000      	movs	r0, #0
   d7628:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d762a:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d762c:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d762e:	f7fc fd32 	bl	d4096 <_Znwj>
   d7632:	4605      	mov	r5, r0
   d7634:	b120      	cbz	r0, d7640 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d7636:	4631      	mov	r1, r6
   d7638:	f7ff ffdc 	bl	d75f4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d763c:	7c33      	ldrb	r3, [r6, #16]
   d763e:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d7640:	6025      	str	r5, [r4, #0]
	}
   d7642:	e7f0      	b.n	d7626 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d7644:	6804      	ldr	r4, [r0, #0]
   d7646:	2c00      	cmp	r4, #0
   d7648:	d0ed      	beq.n	d7626 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d764a:	4620      	mov	r0, r4
   d764c:	f7fe fed8 	bl	d6400 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d7650:	2114      	movs	r1, #20
   d7652:	4620      	mov	r0, r4
   d7654:	f001 f94b 	bl	d88ee <_ZdlPvj>
   d7658:	e7e5      	b.n	d7626 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d765c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d765c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d765e:	b089      	sub	sp, #36	; 0x24
   d7660:	4604      	mov	r4, r0
   d7662:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d7664:	a801      	add	r0, sp, #4
   d7666:	4611      	mov	r1, r2
   d7668:	f7ff fe11 	bl	d728e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d766c:	b1a4      	cbz	r4, d7698 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d766e:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d7670:	b11d      	cbz	r5, d767a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d7672:	4628      	mov	r0, r5
   d7674:	f001 fe12 	bl	d929c <strdup>
   d7678:	4605      	mov	r5, r0
   d767a:	a801      	add	r0, sp, #4
   d767c:	a903      	add	r1, sp, #12
        type_(type) {
   d767e:	9503      	str	r5, [sp, #12]
   d7680:	f8ad 4010 	strh.w	r4, [sp, #16]
   d7684:	f7ff fe78 	bl	d7378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d7688:	a803      	add	r0, sp, #12
   d768a:	f7ff fd9c 	bl	d71c6 <_ZN8particle5ErrorD1Ev>
   d768e:	a802      	add	r0, sp, #8
   d7690:	f7ff fd12 	bl	d70b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d7694:	b009      	add	sp, #36	; 0x24
   d7696:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7698:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d769a:	2301      	movs	r3, #1
   d769c:	e8d5 2f4f 	ldrexb	r2, [r5]
   d76a0:	2a00      	cmp	r2, #0
   d76a2:	d103      	bne.n	d76ac <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d76a4:	e8c5 3f41 	strexb	r1, r3, [r5]
   d76a8:	2900      	cmp	r1, #0
   d76aa:	d1f7      	bne.n	d769c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d76ac:	d1ef      	bne.n	d768e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d76ae:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d76b0:	f3bf 8f5b 	dmb	ish
   d76b4:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d76b6:	1d2b      	adds	r3, r5, #4
   d76b8:	f3bf 8f5b 	dmb	ish
   d76bc:	e853 6f00 	ldrex	r6, [r3]
   d76c0:	e843 4200 	strex	r2, r4, [r3]
   d76c4:	2a00      	cmp	r2, #0
   d76c6:	d1f9      	bne.n	d76bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d76c8:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d76cc:	2e00      	cmp	r6, #0
   d76ce:	d0de      	beq.n	d768e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d76d0:	4620      	mov	r0, r4
   d76d2:	f7ff fb53 	bl	d6d7c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d76d6:	4607      	mov	r7, r0
   d76d8:	b160      	cbz	r0, d76f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d76da:	f105 010c 	add.w	r1, r5, #12
   d76de:	4630      	mov	r0, r6
   d76e0:	f7ff fe16 	bl	d7310 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d76e4:	4630      	mov	r0, r6
   d76e6:	f7fe fe8b 	bl	d6400 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d76ea:	2110      	movs	r1, #16
   d76ec:	4630      	mov	r0, r6
   d76ee:	f001 f8fe 	bl	d88ee <_ZdlPvj>
   d76f2:	e7cc      	b.n	d768e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d76f4:	4631      	mov	r1, r6
   d76f6:	a803      	add	r0, sp, #12
   d76f8:	f7ff ff7c 	bl	d75f4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d76fc:	7b2b      	ldrb	r3, [r5, #12]
   d76fe:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d7702:	2010      	movs	r0, #16
   d7704:	f7fc fcc7 	bl	d4096 <_Znwj>
   d7708:	4605      	mov	r5, r0
   d770a:	b1d0      	cbz	r0, d7742 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d770c:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d770e:	2014      	movs	r0, #20
   d7710:	f7fc fcc1 	bl	d4096 <_Znwj>
   d7714:	4604      	mov	r4, r0
   d7716:	b178      	cbz	r0, d7738 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d7718:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d771a:	4601      	mov	r1, r0
   d771c:	a803      	add	r0, sp, #12
   d771e:	f7ff fdd5 	bl	d72cc <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7722:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d7724:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7726:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7728:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d772a:	9205      	str	r2, [sp, #20]
   d772c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d772e:	60e3      	str	r3, [r4, #12]
   d7730:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d7734:	9206      	str	r2, [sp, #24]
   d7736:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d7738:	4b06      	ldr	r3, [pc, #24]	; (d7754 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d773a:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d773c:	4b06      	ldr	r3, [pc, #24]	; (d7758 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d773e:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d7740:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d7742:	a803      	add	r0, sp, #12
   d7744:	f7fe fe5c 	bl	d6400 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d7748:	2200      	movs	r2, #0
   d774a:	4629      	mov	r1, r5
   d774c:	4803      	ldr	r0, [pc, #12]	; (d775c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d774e:	f7ff fb1d 	bl	d6d8c <application_thread_invoke>
   d7752:	e7c7      	b.n	d76e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d7754:	000d7323 	.word	0x000d7323
   d7758:	000d7613 	.word	0x000d7613
   d775c:	000d7053 	.word	0x000d7053

000d7760 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d7760:	2200      	movs	r2, #0
   d7762:	6840      	ldr	r0, [r0, #4]
   d7764:	4611      	mov	r1, r2
   d7766:	f7ff bbf9 	b.w	d6f5c <network_listening>

000d776a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d776a:	2200      	movs	r2, #0
   d776c:	6840      	ldr	r0, [r0, #4]
   d776e:	4611      	mov	r1, r2
   d7770:	f7ff bc04 	b.w	d6f7c <network_get_listen_timeout>

000d7774 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7774:	6840      	ldr	r0, [r0, #4]
   d7776:	2200      	movs	r2, #0
   d7778:	f7ff bbf8 	b.w	d6f6c <network_set_listen_timeout>

000d777c <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d777c:	6840      	ldr	r0, [r0, #4]
   d777e:	2200      	movs	r2, #0
   d7780:	f081 0101 	eor.w	r1, r1, #1
   d7784:	f7ff bbe2 	b.w	d6f4c <network_listen>

000d7788 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7788:	2300      	movs	r3, #0
   d778a:	6840      	ldr	r0, [r0, #4]
   d778c:	461a      	mov	r2, r3
   d778e:	4619      	mov	r1, r3
   d7790:	f7ff bbd4 	b.w	d6f3c <network_off>

000d7794 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7794:	2300      	movs	r3, #0
   d7796:	6840      	ldr	r0, [r0, #4]
   d7798:	461a      	mov	r2, r3
   d779a:	4619      	mov	r1, r3
   d779c:	f7ff bbc6 	b.w	d6f2c <network_on>

000d77a0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d77a0:	2200      	movs	r2, #0
   d77a2:	6840      	ldr	r0, [r0, #4]
   d77a4:	4611      	mov	r1, r2
   d77a6:	f7ff bbb9 	b.w	d6f1c <network_ready>

000d77aa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d77aa:	2200      	movs	r2, #0
   d77ac:	6840      	ldr	r0, [r0, #4]
   d77ae:	4611      	mov	r1, r2
   d77b0:	f7ff bba4 	b.w	d6efc <network_connecting>

000d77b4 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d77b4:	6840      	ldr	r0, [r0, #4]
   d77b6:	2200      	movs	r2, #0
   d77b8:	2102      	movs	r1, #2
   d77ba:	f7ff bba7 	b.w	d6f0c <network_disconnect>

000d77be <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d77be:	2300      	movs	r3, #0
   d77c0:	6840      	ldr	r0, [r0, #4]
   d77c2:	461a      	mov	r2, r3
   d77c4:	f7ff bb92 	b.w	d6eec <network_connect>

000d77c8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d77c8:	4b02      	ldr	r3, [pc, #8]	; (d77d4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d77ca:	2203      	movs	r2, #3
   d77cc:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d77ce:	4a02      	ldr	r2, [pc, #8]	; (d77d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d77d0:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d77d2:	4770      	bx	lr
   d77d4:	2003e5f8 	.word	0x2003e5f8
   d77d8:	000d9ae8 	.word	0x000d9ae8

000d77dc <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d77dc:	4770      	bx	lr

000d77de <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d77de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d77e0:	4606      	mov	r6, r0
   d77e2:	4615      	mov	r5, r2
   d77e4:	460c      	mov	r4, r1
   d77e6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d77e8:	42bc      	cmp	r4, r7
   d77ea:	d006      	beq.n	d77fa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d77ec:	6833      	ldr	r3, [r6, #0]
   d77ee:	f814 1b01 	ldrb.w	r1, [r4], #1
   d77f2:	689b      	ldr	r3, [r3, #8]
   d77f4:	4630      	mov	r0, r6
   d77f6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d77f8:	e7f6      	b.n	d77e8 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d77fa:	4628      	mov	r0, r5
   d77fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d77fe <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d77fe:	7c00      	ldrb	r0, [r0, #16]
   d7800:	2200      	movs	r2, #0
   d7802:	f7ff b991 	b.w	d6b28 <hal_i2c_write>

000d7806 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7806:	7c00      	ldrb	r0, [r0, #16]
   d7808:	2100      	movs	r1, #0
   d780a:	f7ff b995 	b.w	d6b38 <hal_i2c_available>

000d780e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d780e:	7c00      	ldrb	r0, [r0, #16]
   d7810:	2100      	movs	r1, #0
   d7812:	f7ff b999 	b.w	d6b48 <hal_i2c_read>

000d7816 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7816:	7c00      	ldrb	r0, [r0, #16]
   d7818:	2100      	movs	r1, #0
   d781a:	f7ff b99d 	b.w	d6b58 <hal_i2c_peek>

000d781e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d781e:	7c00      	ldrb	r0, [r0, #16]
   d7820:	2100      	movs	r1, #0
   d7822:	f7ff b9a1 	b.w	d6b68 <hal_i2c_flush>

000d7826 <_ZN7TwoWireD0Ev>:
   d7826:	b510      	push	{r4, lr}
   d7828:	2114      	movs	r1, #20
   d782a:	4604      	mov	r4, r0
   d782c:	f001 f85f 	bl	d88ee <_ZdlPvj>
   d7830:	4620      	mov	r0, r4
   d7832:	bd10      	pop	{r4, pc}

000d7834 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7834:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d783a:	4604      	mov	r4, r0
   d783c:	4608      	mov	r0, r1
   d783e:	2100      	movs	r1, #0
   d7840:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7844:	4b03      	ldr	r3, [pc, #12]	; (d7854 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7846:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7848:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d784a:	4611      	mov	r1, r2
   d784c:	f7ff f99c 	bl	d6b88 <hal_i2c_init>
}
   d7850:	4620      	mov	r0, r4
   d7852:	bd10      	pop	{r4, pc}
   d7854:	000d9b1c 	.word	0x000d9b1c

000d7858 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7858:	2300      	movs	r3, #0
   d785a:	7c00      	ldrb	r0, [r0, #16]
   d785c:	461a      	mov	r2, r3
   d785e:	4619      	mov	r1, r3
   d7860:	f7ff b94a 	b.w	d6af8 <hal_i2c_begin>

000d7864 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7864:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7866:	2200      	movs	r2, #0
   d7868:	2314      	movs	r3, #20
   d786a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d786e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7872:	780b      	ldrb	r3, [r1, #0]
   d7874:	f88d 3008 	strb.w	r3, [sp, #8]
   d7878:	684b      	ldr	r3, [r1, #4]
   d787a:	9303      	str	r3, [sp, #12]
   d787c:	68cb      	ldr	r3, [r1, #12]
   d787e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7880:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7882:	7a0b      	ldrb	r3, [r1, #8]
   d7884:	9305      	str	r3, [sp, #20]
   d7886:	a901      	add	r1, sp, #4
   d7888:	f7ff f996 	bl	d6bb8 <hal_i2c_request_ex>
}
   d788c:	b007      	add	sp, #28
   d788e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7892 <_ZN7TwoWire11requestFromEhjh>:
{
   d7892:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7894:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7896:	f88d 1000 	strb.w	r1, [sp]
   d789a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d789e:	9103      	str	r1, [sp, #12]
   d78a0:	bf18      	it	ne
   d78a2:	2301      	movne	r3, #1
   d78a4:	4669      	mov	r1, sp
    size_ = size;
   d78a6:	9201      	str	r2, [sp, #4]
   d78a8:	f88d 3008 	strb.w	r3, [sp, #8]
   d78ac:	f7ff ffda 	bl	d7864 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d78b0:	b005      	add	sp, #20
   d78b2:	f85d fb04 	ldr.w	pc, [sp], #4

000d78b6 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d78b6:	2301      	movs	r3, #1
   d78b8:	f7ff bfeb 	b.w	d7892 <_ZN7TwoWire11requestFromEhjh>

000d78bc <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d78bc:	7c00      	ldrb	r0, [r0, #16]
   d78be:	2200      	movs	r2, #0
   d78c0:	f7ff b922 	b.w	d6b08 <hal_i2c_begin_transmission>

000d78c4 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d78c4:	b2c9      	uxtb	r1, r1
   d78c6:	f7ff bff9 	b.w	d78bc <_ZN7TwoWire17beginTransmissionEh>

000d78ca <_ZN7TwoWire17beginTransmissionERK16WireTransmission>:
void TwoWire::beginTransmission(const WireTransmission& transfer) {
   d78ca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d78cc:	2300      	movs	r3, #0
   d78ce:	e9cd 3301 	strd	r3, r3, [sp, #4]
    };
   d78d2:	684a      	ldr	r2, [r1, #4]
   d78d4:	9203      	str	r2, [sp, #12]
    hal_i2c_transmission_config_t conf = {
   d78d6:	2314      	movs	r3, #20
    };
   d78d8:	68ca      	ldr	r2, [r1, #12]
    hal_i2c_transmission_config_t conf = {
   d78da:	f8ad 3004 	strh.w	r3, [sp, #4]
      .address = address_,
   d78de:	780b      	ldrb	r3, [r1, #0]
    };
   d78e0:	9204      	str	r2, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d78e2:	7a0a      	ldrb	r2, [r1, #8]
   d78e4:	9205      	str	r2, [sp, #20]
  hal_i2c_begin_transmission(_i2c, conf.address, &conf);
   d78e6:	7c00      	ldrb	r0, [r0, #16]
    };
   d78e8:	f88d 3008 	strb.w	r3, [sp, #8]
   d78ec:	aa01      	add	r2, sp, #4
   d78ee:	4619      	mov	r1, r3
   d78f0:	f7ff f90a 	bl	d6b08 <hal_i2c_begin_transmission>
}
   d78f4:	b007      	add	sp, #28
   d78f6:	f85d fb04 	ldr.w	pc, [sp], #4

000d78fa <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d78fa:	7c00      	ldrb	r0, [r0, #16]
   d78fc:	2200      	movs	r2, #0
   d78fe:	f7ff b90b 	b.w	d6b18 <hal_i2c_end_transmission>

000d7902 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7902:	2101      	movs	r1, #1
   d7904:	f7ff bff9 	b.w	d78fa <_ZN7TwoWire15endTransmissionEh>

000d7908 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d7908:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d790a:	2100      	movs	r1, #0
   d790c:	7c00      	ldrb	r0, [r0, #16]
   d790e:	f7ff f943 	bl	d6b98 <hal_i2c_lock>
}
   d7912:	fab0 f080 	clz	r0, r0
   d7916:	0940      	lsrs	r0, r0, #5
   d7918:	bd08      	pop	{r3, pc}

000d791a <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d791a:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d791c:	2100      	movs	r1, #0
   d791e:	7c00      	ldrb	r0, [r0, #16]
   d7920:	f7ff f942 	bl	d6ba8 <hal_i2c_unlock>
}
   d7924:	fab0 f080 	clz	r0, r0
   d7928:	0940      	lsrs	r0, r0, #5
   d792a:	bd08      	pop	{r3, pc}

000d792c <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
   d792c:	4700      	bx	r0
	...

000d7930 <_Z15attachInterrupttPFvvE13InterruptModeah>:
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
   d7930:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
   d7934:	2400      	movs	r4, #0
{
   d7936:	461d      	mov	r5, r3
   d7938:	460f      	mov	r7, r1
   d793a:	4690      	mov	r8, r2
   d793c:	4606      	mov	r6, r0
    HAL_Interrupts_Detach(pin);
   d793e:	f7ff f8d3 	bl	d6ae8 <HAL_Interrupts_Detach>
  if (priority >= 0) {
   d7942:	42a5      	cmp	r5, r4
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d7944:	f04f 0304 	mov.w	r3, #4
    HAL_InterruptExtraConfiguration extra = {0};
   d7948:	f8ad 400d 	strh.w	r4, [sp, #13]
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
   d794c:	f88d 300c 	strb.w	r3, [sp, #12]
    HAL_InterruptExtraConfiguration extra = {0};
   d7950:	f88d 400f 	strb.w	r4, [sp, #15]
    extra.IRQChannelSubPriority = subpriority;
   d7954:	bfa2      	ittt	ge
   d7956:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
   d795a:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
   d795e:	ac03      	addge	r4, sp, #12
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7960:	4907      	ldr	r1, [pc, #28]	; (d7980 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)
   d7962:	9400      	str	r4, [sp, #0]
   d7964:	4643      	mov	r3, r8
   d7966:	463a      	mov	r2, r7
   d7968:	4630      	mov	r0, r6
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
   d796a:	bfa8      	it	ge
   d796c:	f88d 500d 	strbge.w	r5, [sp, #13]
    if (SYSTEM_ERROR_NONE != HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority))) {
   d7970:	f7ff f8b2 	bl	d6ad8 <HAL_Interrupts_Attach>
        return false;
    }
    return true;
}
   d7974:	fab0 f080 	clz	r0, r0
   d7978:	0940      	lsrs	r0, r0, #5
   d797a:	b004      	add	sp, #16
   d797c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7980:	000d792d 	.word	0x000d792d

000d7984 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d7984:	4770      	bx	lr

000d7986 <_ZN9IPAddressD0Ev>:
   d7986:	b510      	push	{r4, lr}
   d7988:	2118      	movs	r1, #24
   d798a:	4604      	mov	r4, r0
   d798c:	f000 ffaf 	bl	d88ee <_ZdlPvj>
   d7990:	4620      	mov	r0, r4
   d7992:	bd10      	pop	{r4, pc}

000d7994 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7994:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7996:	7d03      	ldrb	r3, [r0, #20]
   d7998:	2b06      	cmp	r3, #6
{
   d799a:	b08d      	sub	sp, #52	; 0x34
   d799c:	460e      	mov	r6, r1
   d799e:	f100 0704 	add.w	r7, r0, #4
   d79a2:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d79a6:	d012      	beq.n	d79ce <_ZNK9IPAddress7printToER5Print+0x3a>
   d79a8:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d79ac:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d79b0:	220a      	movs	r2, #10
   d79b2:	4630      	mov	r0, r6
   d79b4:	f000 f9d1 	bl	d7d5a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d79b8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d79ba:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d79bc:	d019      	beq.n	d79f2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d79be:	2c00      	cmp	r4, #0
   d79c0:	d0f4      	beq.n	d79ac <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d79c2:	212e      	movs	r1, #46	; 0x2e
   d79c4:	4630      	mov	r0, r6
   d79c6:	f000 f9c5 	bl	d7d54 <_ZN5Print5printEc>
   d79ca:	4404      	add	r4, r0
   d79cc:	e7ee      	b.n	d79ac <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d79ce:	232f      	movs	r3, #47	; 0x2f
   d79d0:	466a      	mov	r2, sp
   d79d2:	4639      	mov	r1, r7
   d79d4:	200a      	movs	r0, #10
		buf[0] = 0;
   d79d6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d79da:	f7ff f8f5 	bl	d6bc8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d79de:	4668      	mov	r0, sp
   d79e0:	f001 fc79 	bl	d92d6 <strlen>
   d79e4:	6833      	ldr	r3, [r6, #0]
   d79e6:	4602      	mov	r2, r0
   d79e8:	68db      	ldr	r3, [r3, #12]
   d79ea:	4669      	mov	r1, sp
   d79ec:	4630      	mov	r0, r6
   d79ee:	4798      	blx	r3
   d79f0:	4604      	mov	r4, r0
    }
    return n;
}
   d79f2:	4620      	mov	r0, r4
   d79f4:	b00d      	add	sp, #52	; 0x34
   d79f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d79f8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d79f8:	b510      	push	{r4, lr}
   d79fa:	4b05      	ldr	r3, [pc, #20]	; (d7a10 <_ZN9IPAddressC1Ev+0x18>)
   d79fc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d79fe:	2211      	movs	r2, #17
   d7a00:	f840 3b04 	str.w	r3, [r0], #4
   d7a04:	2100      	movs	r1, #0
   d7a06:	f001 fc0b 	bl	d9220 <memset>
}
   d7a0a:	4620      	mov	r0, r4
   d7a0c:	bd10      	pop	{r4, pc}
   d7a0e:	bf00      	nop
   d7a10:	000d9b44 	.word	0x000d9b44

000d7a14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7a14:	4603      	mov	r3, r0
   d7a16:	4a07      	ldr	r2, [pc, #28]	; (d7a34 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7a18:	b510      	push	{r4, lr}
   d7a1a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7a1e:	f101 0210 	add.w	r2, r1, #16
   d7a22:	f851 4b04 	ldr.w	r4, [r1], #4
   d7a26:	f843 4b04 	str.w	r4, [r3], #4
   d7a2a:	4291      	cmp	r1, r2
   d7a2c:	d1f9      	bne.n	d7a22 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7a2e:	780a      	ldrb	r2, [r1, #0]
   d7a30:	701a      	strb	r2, [r3, #0]
}
   d7a32:	bd10      	pop	{r4, pc}
   d7a34:	000d9b44 	.word	0x000d9b44

000d7a38 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7a38:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7a3a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7a3e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7a42:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7a46:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7a4a:	2304      	movs	r3, #4
   d7a4c:	6041      	str	r1, [r0, #4]
   d7a4e:	7503      	strb	r3, [r0, #20]
}
   d7a50:	bd10      	pop	{r4, pc}

000d7a52 <_ZN9IPAddressaSEPKh>:
{
   d7a52:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d7a54:	78cb      	ldrb	r3, [r1, #3]
   d7a56:	9300      	str	r3, [sp, #0]
   d7a58:	788b      	ldrb	r3, [r1, #2]
   d7a5a:	784a      	ldrb	r2, [r1, #1]
   d7a5c:	7809      	ldrb	r1, [r1, #0]
   d7a5e:	f7ff ffeb 	bl	d7a38 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7a62:	b002      	add	sp, #8
   d7a64:	bd10      	pop	{r4, pc}
	...

000d7a68 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7a68:	4b01      	ldr	r3, [pc, #4]	; (d7a70 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d7a6a:	4a02      	ldr	r2, [pc, #8]	; (d7a74 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d7a6c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d7a6e:	4770      	bx	lr
   d7a70:	2003e600 	.word	0x2003e600
   d7a74:	000d9b50 	.word	0x000d9b50

000d7a78 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7a78:	2300      	movs	r3, #0
   d7a7a:	6840      	ldr	r0, [r0, #4]
   d7a7c:	461a      	mov	r2, r3
   d7a7e:	f7ff ba35 	b.w	d6eec <network_connect>

000d7a82 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d7a82:	6840      	ldr	r0, [r0, #4]
   d7a84:	2200      	movs	r2, #0
   d7a86:	2102      	movs	r1, #2
   d7a88:	f7ff ba40 	b.w	d6f0c <network_disconnect>

000d7a8c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7a8c:	2200      	movs	r2, #0
   d7a8e:	6840      	ldr	r0, [r0, #4]
   d7a90:	4611      	mov	r1, r2
   d7a92:	f7ff ba33 	b.w	d6efc <network_connecting>

000d7a96 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d7a96:	2200      	movs	r2, #0
   d7a98:	6840      	ldr	r0, [r0, #4]
   d7a9a:	4611      	mov	r1, r2
   d7a9c:	f7ff ba3e 	b.w	d6f1c <network_ready>

000d7aa0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7aa0:	2300      	movs	r3, #0
   d7aa2:	6840      	ldr	r0, [r0, #4]
   d7aa4:	461a      	mov	r2, r3
   d7aa6:	4619      	mov	r1, r3
   d7aa8:	f7ff ba40 	b.w	d6f2c <network_on>

000d7aac <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d7aac:	2300      	movs	r3, #0
   d7aae:	6840      	ldr	r0, [r0, #4]
   d7ab0:	461a      	mov	r2, r3
   d7ab2:	4619      	mov	r1, r3
   d7ab4:	f7ff ba42 	b.w	d6f3c <network_off>

000d7ab8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d7ab8:	6840      	ldr	r0, [r0, #4]
   d7aba:	2200      	movs	r2, #0
   d7abc:	f081 0101 	eor.w	r1, r1, #1
   d7ac0:	f7ff ba44 	b.w	d6f4c <network_listen>

000d7ac4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7ac4:	6840      	ldr	r0, [r0, #4]
   d7ac6:	2200      	movs	r2, #0
   d7ac8:	f7ff ba50 	b.w	d6f6c <network_set_listen_timeout>

000d7acc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7acc:	2200      	movs	r2, #0
   d7ace:	6840      	ldr	r0, [r0, #4]
   d7ad0:	4611      	mov	r1, r2
   d7ad2:	f7ff ba53 	b.w	d6f7c <network_get_listen_timeout>

000d7ad6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d7ad6:	2200      	movs	r2, #0
   d7ad8:	6840      	ldr	r0, [r0, #4]
   d7ada:	4611      	mov	r1, r2
   d7adc:	f7ff ba3e 	b.w	d6f5c <network_listening>

000d7ae0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7ae0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7ae4:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d7ae6:	b095      	sub	sp, #84	; 0x54
   d7ae8:	4616      	mov	r6, r2
   d7aea:	460d      	mov	r5, r1
   d7aec:	4607      	mov	r7, r0
    IPAddress addr;
   d7aee:	f7ff ff83 	bl	d79f8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7af2:	4621      	mov	r1, r4
   d7af4:	2218      	movs	r2, #24
   d7af6:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7af8:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7afa:	f001 fb91 	bl	d9220 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7afe:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7b00:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7b04:	4621      	mov	r1, r4
   d7b06:	466b      	mov	r3, sp
   d7b08:	aa0c      	add	r2, sp, #48	; 0x30
   d7b0a:	4630      	mov	r0, r6
   d7b0c:	f7ff f86c 	bl	d6be8 <netdb_getaddrinfo>
    if (!r) {
   d7b10:	4604      	mov	r4, r0
   d7b12:	2800      	cmp	r0, #0
   d7b14:	d146      	bne.n	d7ba4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7b16:	4602      	mov	r2, r0
   d7b18:	2101      	movs	r1, #1
   d7b1a:	6868      	ldr	r0, [r5, #4]
   d7b1c:	f7ff f9fe 	bl	d6f1c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7b20:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7b22:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7b24:	4622      	mov	r2, r4
   d7b26:	6868      	ldr	r0, [r5, #4]
   d7b28:	f7ff f9f8 	bl	d6f1c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7b2c:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7b2e:	4681      	mov	r9, r0
        bool ok = false;
   d7b30:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7b32:	2e00      	cmp	r6, #0
   d7b34:	d036      	beq.n	d7ba4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d7b36:	2900      	cmp	r1, #0
   d7b38:	d134      	bne.n	d7ba4 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7b3a:	6873      	ldr	r3, [r6, #4]
   d7b3c:	2b02      	cmp	r3, #2
   d7b3e:	d003      	beq.n	d7b48 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7b40:	2b0a      	cmp	r3, #10
   d7b42:	d00b      	beq.n	d7b5c <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7b44:	69f6      	ldr	r6, [r6, #28]
   d7b46:	e7f4      	b.n	d7b32 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7b48:	f1b8 0f00 	cmp.w	r8, #0
   d7b4c:	d004      	beq.n	d7b58 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7b4e:	6971      	ldr	r1, [r6, #20]
   d7b50:	4638      	mov	r0, r7
   d7b52:	3104      	adds	r1, #4
   d7b54:	f7ff ff7d 	bl	d7a52 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7b58:	4641      	mov	r1, r8
   d7b5a:	e7f3      	b.n	d7b44 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7b5c:	f1b9 0f00 	cmp.w	r9, #0
   d7b60:	d101      	bne.n	d7b66 <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d7b62:	4649      	mov	r1, r9
   d7b64:	e7ee      	b.n	d7b44 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7b66:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7b68:	2210      	movs	r2, #16
   d7b6a:	a801      	add	r0, sp, #4
   d7b6c:	f001 fb58 	bl	d9220 <memset>
                    a.v = 6;
   d7b70:	2306      	movs	r3, #6
   d7b72:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7b76:	ad01      	add	r5, sp, #4
   d7b78:	f104 0308 	add.w	r3, r4, #8
   d7b7c:	3418      	adds	r4, #24
   d7b7e:	6818      	ldr	r0, [r3, #0]
   d7b80:	6859      	ldr	r1, [r3, #4]
   d7b82:	462a      	mov	r2, r5
   d7b84:	c203      	stmia	r2!, {r0, r1}
   d7b86:	3308      	adds	r3, #8
   d7b88:	42a3      	cmp	r3, r4
   d7b8a:	4615      	mov	r5, r2
   d7b8c:	d1f7      	bne.n	d7b7e <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7b8e:	a901      	add	r1, sp, #4
   d7b90:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d7b92:	ad07      	add	r5, sp, #28
   d7b94:	f7ff ff3e 	bl	d7a14 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7b98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7b9a:	1d3c      	adds	r4, r7, #4
   d7b9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7b9e:	682b      	ldr	r3, [r5, #0]
   d7ba0:	7023      	strb	r3, [r4, #0]
   d7ba2:	e7de      	b.n	d7b62 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7ba4:	9800      	ldr	r0, [sp, #0]
   d7ba6:	f7ff f817 	bl	d6bd8 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d7baa:	4638      	mov	r0, r7
   d7bac:	b015      	add	sp, #84	; 0x54
   d7bae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d7bb4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d7bb4:	4b02      	ldr	r3, [pc, #8]	; (d7bc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d7bb6:	4a03      	ldr	r2, [pc, #12]	; (d7bc4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d7bb8:	601a      	str	r2, [r3, #0]
   d7bba:	2200      	movs	r2, #0
   d7bbc:	605a      	str	r2, [r3, #4]

} // spark
   d7bbe:	4770      	bx	lr
   d7bc0:	2003e604 	.word	0x2003e604
   d7bc4:	000d9b5c 	.word	0x000d9b5c

000d7bc8 <_ZN4PMIC4lockEv.constprop.0>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d7bc8:	b508      	push	{r3, lr}
            return &Wire1;
   d7bca:	f000 fe63 	bl	d8894 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}
   d7bce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->lock();
   d7bd2:	f7ff be99 	b.w	d7908 <_ZN7TwoWire4lockEv>

000d7bd6 <_ZN4PMICC1Eb>:
PMIC::PMIC(bool _lock) :
   d7bd6:	b510      	push	{r4, lr}
   d7bd8:	4604      	mov	r4, r0
    lock_(_lock)
   d7bda:	7001      	strb	r1, [r0, #0]
    if (lock_) {
   d7bdc:	b109      	cbz	r1, d7be2 <_ZN4PMICC1Eb+0xc>
        lock();
   d7bde:	f7ff fff3 	bl	d7bc8 <_ZN4PMIC4lockEv.constprop.0>
}
   d7be2:	4620      	mov	r0, r4
   d7be4:	bd10      	pop	{r4, pc}

000d7be6 <_ZN4PMIC6unlockEv>:

bool PMIC::unlock() {
   d7be6:	b508      	push	{r3, lr}
            return &Wire1;
   d7be8:	f000 fe54 	bl	d8894 <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->unlock();
}
   d7bec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    return pmicWireInstance()->unlock();
   d7bf0:	f7ff be93 	b.w	d791a <_ZN7TwoWire6unlockEv>

000d7bf4 <_ZN4PMICD1Ev>:
PMIC::~PMIC()
   d7bf4:	b510      	push	{r4, lr}
    if (lock_) {
   d7bf6:	7803      	ldrb	r3, [r0, #0]
PMIC::~PMIC()
   d7bf8:	4604      	mov	r4, r0
    if (lock_) {
   d7bfa:	b10b      	cbz	r3, d7c00 <_ZN4PMICD1Ev+0xc>
        unlock();
   d7bfc:	f7ff fff3 	bl	d7be6 <_ZN4PMIC6unlockEv>
}
   d7c00:	4620      	mov	r0, r4
   d7c02:	bd10      	pop	{r4, pc}

000d7c04 <_ZNSt10lock_guardI4PMICED1Ev>:
      ~lock_guard()
   d7c04:	b510      	push	{r4, lr}
   d7c06:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d7c08:	6800      	ldr	r0, [r0, #0]
   d7c0a:	f7ff ffec 	bl	d7be6 <_ZN4PMIC6unlockEv>
   d7c0e:	4620      	mov	r0, r4
   d7c10:	bd10      	pop	{r4, pc}

000d7c12 <_ZN4PMIC12readRegisterEh>:
byte PMIC::readRegister(byte startAddress) {
   d7c12:	b530      	push	{r4, r5, lr}
   d7c14:	b087      	sub	sp, #28
   d7c16:	460d      	mov	r5, r1
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7c18:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7c1a:	f7ff ffd5 	bl	d7bc8 <_ZN4PMIC4lockEv.constprop.0>
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7c1e:	236b      	movs	r3, #107	; 0x6b
   d7c20:	f88d 3008 	strb.w	r3, [sp, #8]
   d7c24:	2300      	movs	r3, #0
   d7c26:	2401      	movs	r4, #1
   d7c28:	9303      	str	r3, [sp, #12]
    timeout_ = ms;
   d7c2a:	230a      	movs	r3, #10
   d7c2c:	9305      	str	r3, [sp, #20]
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7c2e:	f88d 4010 	strb.w	r4, [sp, #16]
            return &Wire1;
   d7c32:	f000 fe2f 	bl	d8894 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(config);
   d7c36:	a902      	add	r1, sp, #8
   d7c38:	f7ff fe47 	bl	d78ca <_ZN7TwoWire17beginTransmissionERK16WireTransmission>
            return &Wire1;
   d7c3c:	f000 fe2a 	bl	d8894 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->write(startAddress);
   d7c40:	6803      	ldr	r3, [r0, #0]
   d7c42:	4629      	mov	r1, r5
   d7c44:	689b      	ldr	r3, [r3, #8]
   d7c46:	4798      	blx	r3
            return &Wire1;
   d7c48:	f000 fe24 	bl	d8894 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
   d7c4c:	4621      	mov	r1, r4
   d7c4e:	f7ff fe54 	bl	d78fa <_ZN7TwoWire15endTransmissionEh>
    size_ = size;
   d7c52:	9403      	str	r4, [sp, #12]
            return &Wire1;
   d7c54:	f000 fe1e 	bl	d8894 <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->requestFrom(config);
   d7c58:	a902      	add	r1, sp, #8
   d7c5a:	f7ff fe03 	bl	d7864 <_ZN7TwoWire11requestFromERK16WireTransmission>
            return &Wire1;
   d7c5e:	f000 fe19 	bl	d8894 <_Z20__fetch_global_Wire1v>
    DATA = pmicWireInstance()->read();
   d7c62:	6803      	ldr	r3, [r0, #0]
   d7c64:	695b      	ldr	r3, [r3, #20]
   d7c66:	4798      	blx	r3
   d7c68:	4604      	mov	r4, r0
    std::lock_guard<PMIC> l(*this);
   d7c6a:	a801      	add	r0, sp, #4
   d7c6c:	f7ff ffca 	bl	d7c04 <_ZNSt10lock_guardI4PMICED1Ev>
}
   d7c70:	b2e0      	uxtb	r0, r4
   d7c72:	b007      	add	sp, #28
   d7c74:	bd30      	pop	{r4, r5, pc}

000d7c76 <_ZN4PMIC23readInputSourceRegisterEv>:
    return readRegister(INPUT_SOURCE_REGISTER);
   d7c76:	2100      	movs	r1, #0
   d7c78:	f7ff bfcb 	b.w	d7c12 <_ZN4PMIC12readRegisterEh>

000d7c7c <_ZN4PMIC20getInputCurrentLimitEv>:
uint16_t PMIC::getInputCurrentLimit(void) {
   d7c7c:	b508      	push	{r3, lr}
    byte raw = readInputSourceRegister();
   d7c7e:	f7ff fffa 	bl	d7c76 <_ZN4PMIC23readInputSourceRegisterEv>
}
   d7c82:	4b03      	ldr	r3, [pc, #12]	; (d7c90 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
    return mapping[raw];
   d7c84:	f000 0007 	and.w	r0, r0, #7
}
   d7c88:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   d7c8c:	bd08      	pop	{r3, pc}
   d7c8e:	bf00      	nop
   d7c90:	000d9b88 	.word	0x000d9b88

000d7c94 <_ZN4PMIC21getChargeCurrentValueEv>:
uint16_t PMIC::getChargeCurrentValue(void) {
   d7c94:	b508      	push	{r3, lr}
    uint8_t ccr = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
   d7c96:	2102      	movs	r1, #2
   d7c98:	f7ff ffbb 	bl	d7c12 <_ZN4PMIC12readRegisterEh>
    uint16_t v = (((uint16_t)ccr >> 2) & 0b111111) << 6;
   d7c9c:	f3c0 0087 	ubfx	r0, r0, #2, #8
   d7ca0:	0180      	lsls	r0, r0, #6
}
   d7ca2:	f500 7000 	add.w	r0, r0, #512	; 0x200
   d7ca6:	bd08      	pop	{r3, pc}

000d7ca8 <_ZN4PMIC16getChargeVoltageEv>:
    return readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
   d7ca8:	2104      	movs	r1, #4
   d7caa:	f7ff bfb2 	b.w	d7c12 <_ZN4PMIC12readRegisterEh>

000d7cae <_ZN4PMIC21getChargeVoltageValueEv>:
uint16_t PMIC::getChargeVoltageValue() {
   d7cae:	b510      	push	{r4, lr}
    byte raw = getChargeVoltage();
   d7cb0:	f7ff fffa 	bl	d7ca8 <_ZN4PMIC16getChargeVoltageEv>
   d7cb4:	2302      	movs	r3, #2
    unsigned v = 3504;
   d7cb6:	f44f 625b 	mov.w	r2, #3504	; 0xdb0
    unsigned baseVoltage = 16;
   d7cba:	2110      	movs	r1, #16
        byte b = (raw >> (i + 2)) & 0x01;
   d7cbc:	fa40 f403 	asr.w	r4, r0, r3
   d7cc0:	3301      	adds	r3, #1
        v += ((unsigned)b) * baseVoltage;
   d7cc2:	f004 0401 	and.w	r4, r4, #1
    for (unsigned i = 0; i < 6; i++) {
   d7cc6:	2b08      	cmp	r3, #8
        v += ((unsigned)b) * baseVoltage;
   d7cc8:	fb01 2204 	mla	r2, r1, r4, r2
        baseVoltage *= 2;
   d7ccc:	ea4f 0141 	mov.w	r1, r1, lsl #1
    for (unsigned i = 0; i < 6; i++) {
   d7cd0:	d1f4      	bne.n	d7cbc <_ZN4PMIC21getChargeVoltageValueEv+0xe>
}
   d7cd2:	b290      	uxth	r0, r2
   d7cd4:	bd10      	pop	{r4, pc}

000d7cd6 <_ZN4PMIC20getInputVoltageLimitEv>:
uint16_t PMIC::getInputVoltageLimit(void) {
   d7cd6:	b513      	push	{r0, r1, r4, lr}
   d7cd8:	4604      	mov	r4, r0
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d7cda:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d7cdc:	f7ff ff74 	bl	d7bc8 <_ZN4PMIC4lockEv.constprop.0>
    uint8_t isr = readRegister(INPUT_SOURCE_REGISTER);
   d7ce0:	2100      	movs	r1, #0
   d7ce2:	4620      	mov	r0, r4
   d7ce4:	f7ff ff95 	bl	d7c12 <_ZN4PMIC12readRegisterEh>
    isr = (isr >> 3) & 0b1111;
   d7ce8:	f3c0 04c7 	ubfx	r4, r0, #3, #8
    std::lock_guard<PMIC> l(*this);
   d7cec:	a801      	add	r0, sp, #4
   d7cee:	f7ff ff89 	bl	d7c04 <_ZNSt10lock_guardI4PMICED1Ev>
    return baseValue + isr * 80;
   d7cf2:	f004 000f 	and.w	r0, r4, #15
   d7cf6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d7cfa:	0100      	lsls	r0, r0, #4
}
   d7cfc:	f600 7028 	addw	r0, r0, #3880	; 0xf28
   d7d00:	b002      	add	sp, #8
   d7d02:	bd10      	pop	{r4, pc}

000d7d04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d06:	4606      	mov	r6, r0
   d7d08:	460d      	mov	r5, r1
  size_t n = 0;
   d7d0a:	188f      	adds	r7, r1, r2
   d7d0c:	2400      	movs	r4, #0
  while (size--) {
   d7d0e:	42bd      	cmp	r5, r7
   d7d10:	d00c      	beq.n	d7d2c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d7d12:	6833      	ldr	r3, [r6, #0]
   d7d14:	f815 1b01 	ldrb.w	r1, [r5], #1
   d7d18:	689b      	ldr	r3, [r3, #8]
   d7d1a:	4630      	mov	r0, r6
   d7d1c:	4798      	blx	r3
     if (chunk>=0)
   d7d1e:	1e03      	subs	r3, r0, #0
   d7d20:	db01      	blt.n	d7d26 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d7d22:	441c      	add	r4, r3
  while (size--) {
   d7d24:	e7f3      	b.n	d7d0e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d7d26:	2c00      	cmp	r4, #0
   d7d28:	bf08      	it	eq
   d7d2a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d7d2c:	4620      	mov	r0, r4
   d7d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7d30 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d7d30:	b513      	push	{r0, r1, r4, lr}
   d7d32:	4604      	mov	r4, r0
    }
   d7d34:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7d36:	b159      	cbz	r1, d7d50 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7d38:	9101      	str	r1, [sp, #4]
   d7d3a:	f001 facc 	bl	d92d6 <strlen>
   d7d3e:	6823      	ldr	r3, [r4, #0]
   d7d40:	9901      	ldr	r1, [sp, #4]
   d7d42:	68db      	ldr	r3, [r3, #12]
   d7d44:	4602      	mov	r2, r0
   d7d46:	4620      	mov	r0, r4
    }
   d7d48:	b002      	add	sp, #8
   d7d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d7d4e:	4718      	bx	r3
    }
   d7d50:	b002      	add	sp, #8
   d7d52:	bd10      	pop	{r4, pc}

000d7d54 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7d54:	6803      	ldr	r3, [r0, #0]
   d7d56:	689b      	ldr	r3, [r3, #8]
   d7d58:	4718      	bx	r3

000d7d5a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7d5a:	b530      	push	{r4, r5, lr}
   d7d5c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7d5e:	2300      	movs	r3, #0
   d7d60:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7d64:	2a01      	cmp	r2, #1
   d7d66:	bf98      	it	ls
   d7d68:	220a      	movls	r2, #10
   d7d6a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7d6c:	460d      	mov	r5, r1
   d7d6e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7d72:	fb01 5312 	mls	r3, r1, r2, r5
   d7d76:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7d7a:	2b09      	cmp	r3, #9
   d7d7c:	bf94      	ite	ls
   d7d7e:	3330      	addls	r3, #48	; 0x30
   d7d80:	3337      	addhi	r3, #55	; 0x37
   d7d82:	b2db      	uxtb	r3, r3
  } while(n);
   d7d84:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7d86:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7d8a:	d9ef      	bls.n	d7d6c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7d8c:	4621      	mov	r1, r4
   d7d8e:	f7ff ffcf 	bl	d7d30 <_ZN5Print5writeEPKc>
}
   d7d92:	b00b      	add	sp, #44	; 0x2c
   d7d94:	bd30      	pop	{r4, r5, pc}

000d7d96 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7d96:	b510      	push	{r4, lr}
   d7d98:	4604      	mov	r4, r0
   d7d9a:	f7fe fb31 	bl	d6400 <_ZNSt14_Function_baseD1Ev>
   d7d9e:	4620      	mov	r0, r4
   d7da0:	bd10      	pop	{r4, pc}
	...

000d7da4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d7da4:	4803      	ldr	r0, [pc, #12]	; (d7db4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7da6:	4a04      	ldr	r2, [pc, #16]	; (d7db8 <_GLOBAL__sub_I_RGB+0x14>)
   d7da8:	4904      	ldr	r1, [pc, #16]	; (d7dbc <_GLOBAL__sub_I_RGB+0x18>)
   d7daa:	2300      	movs	r3, #0
   d7dac:	6083      	str	r3, [r0, #8]
   d7dae:	f000 bd99 	b.w	d88e4 <__aeabi_atexit>
   d7db2:	bf00      	nop
   d7db4:	2003e60c 	.word	0x2003e60c
   d7db8:	2003e3a8 	.word	0x2003e3a8
   d7dbc:	000d7d97 	.word	0x000d7d97

000d7dc0 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d7dc0:	b510      	push	{r4, lr}
   d7dc2:	4604      	mov	r4, r0
   d7dc4:	4608      	mov	r0, r1
{
    _spi = spi;
   d7dc6:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7dc8:	f7fe ff16 	bl	d6bf8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7dcc:	2300      	movs	r3, #0
   d7dce:	6063      	str	r3, [r4, #4]
}
   d7dd0:	4620      	mov	r0, r4
   d7dd2:	bd10      	pop	{r4, pc}

000d7dd4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7dd4:	b510      	push	{r4, lr}
   d7dd6:	4604      	mov	r4, r0
{
	free(buffer);
   d7dd8:	6800      	ldr	r0, [r0, #0]
   d7dda:	f7ff f8df 	bl	d6f9c <free>
}
   d7dde:	4620      	mov	r0, r4
   d7de0:	bd10      	pop	{r4, pc}

000d7de2 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d7de2:	b510      	push	{r4, lr}
   d7de4:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7de6:	6800      	ldr	r0, [r0, #0]
   d7de8:	b108      	cbz	r0, d7dee <_ZN6String10invalidateEv+0xc>
   d7dea:	f7ff f8d7 	bl	d6f9c <free>
	buffer = NULL;
   d7dee:	2300      	movs	r3, #0
	capacity = len = 0;
   d7df0:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7df4:	6023      	str	r3, [r4, #0]
}
   d7df6:	bd10      	pop	{r4, pc}

000d7df8 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7df8:	b538      	push	{r3, r4, r5, lr}
   d7dfa:	4604      	mov	r4, r0
   d7dfc:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d7dfe:	6800      	ldr	r0, [r0, #0]
   d7e00:	3101      	adds	r1, #1
   d7e02:	f7ff f8d3 	bl	d6fac <realloc>
	if (newbuffer) {
   d7e06:	b110      	cbz	r0, d7e0e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7e08:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7e0c:	2001      	movs	r0, #1
	}
	return 0;
}
   d7e0e:	bd38      	pop	{r3, r4, r5, pc}

000d7e10 <_ZN6String7reserveEj>:
{
   d7e10:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d7e12:	6803      	ldr	r3, [r0, #0]
{
   d7e14:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7e16:	b123      	cbz	r3, d7e22 <_ZN6String7reserveEj+0x12>
   d7e18:	6843      	ldr	r3, [r0, #4]
   d7e1a:	428b      	cmp	r3, r1
   d7e1c:	d301      	bcc.n	d7e22 <_ZN6String7reserveEj+0x12>
   d7e1e:	2001      	movs	r0, #1
}
   d7e20:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d7e22:	4620      	mov	r0, r4
   d7e24:	f7ff ffe8 	bl	d7df8 <_ZN6String12changeBufferEj>
   d7e28:	2800      	cmp	r0, #0
   d7e2a:	d0f9      	beq.n	d7e20 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d7e2c:	68a3      	ldr	r3, [r4, #8]
   d7e2e:	2b00      	cmp	r3, #0
   d7e30:	d1f5      	bne.n	d7e1e <_ZN6String7reserveEj+0xe>
   d7e32:	6822      	ldr	r2, [r4, #0]
   d7e34:	7013      	strb	r3, [r2, #0]
   d7e36:	e7f2      	b.n	d7e1e <_ZN6String7reserveEj+0xe>

000d7e38 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7e3a:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d7e3c:	4611      	mov	r1, r2
   d7e3e:	9201      	str	r2, [sp, #4]
{
   d7e40:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d7e42:	f7ff ffe5 	bl	d7e10 <_ZN6String7reserveEj>
   d7e46:	9a01      	ldr	r2, [sp, #4]
   d7e48:	b928      	cbnz	r0, d7e56 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d7e4a:	4620      	mov	r0, r4
   d7e4c:	f7ff ffc9 	bl	d7de2 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d7e50:	4620      	mov	r0, r4
   d7e52:	b003      	add	sp, #12
   d7e54:	bd30      	pop	{r4, r5, pc}
	len = length;
   d7e56:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d7e58:	4629      	mov	r1, r5
   d7e5a:	6820      	ldr	r0, [r4, #0]
   d7e5c:	f001 f9b8 	bl	d91d0 <memcpy>
	buffer[len] = 0;
   d7e60:	6822      	ldr	r2, [r4, #0]
   d7e62:	68a3      	ldr	r3, [r4, #8]
   d7e64:	2100      	movs	r1, #0
   d7e66:	54d1      	strb	r1, [r2, r3]
	return *this;
   d7e68:	e7f2      	b.n	d7e50 <_ZN6String4copyEPKcj+0x18>

000d7e6a <_ZN6StringC1EPKc>:
	buffer = NULL;
   d7e6a:	2300      	movs	r3, #0
String::String(const char *cstr)
   d7e6c:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d7e6e:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d7e72:	4604      	mov	r4, r0
	len = 0;
   d7e74:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7e76:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d7e78:	b141      	cbz	r1, d7e8c <_ZN6StringC1EPKc+0x22>
   d7e7a:	4608      	mov	r0, r1
   d7e7c:	9101      	str	r1, [sp, #4]
   d7e7e:	f001 fa2a 	bl	d92d6 <strlen>
   d7e82:	9901      	ldr	r1, [sp, #4]
   d7e84:	4602      	mov	r2, r0
   d7e86:	4620      	mov	r0, r4
   d7e88:	f7ff ffd6 	bl	d7e38 <_ZN6String4copyEPKcj>
}
   d7e8c:	4620      	mov	r0, r4
   d7e8e:	b002      	add	sp, #8
   d7e90:	bd10      	pop	{r4, pc}

000d7e92 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7e92:	4288      	cmp	r0, r1
{
   d7e94:	b510      	push	{r4, lr}
   d7e96:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7e98:	d005      	beq.n	d7ea6 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7e9a:	680b      	ldr	r3, [r1, #0]
   d7e9c:	b12b      	cbz	r3, d7eaa <_ZN6StringaSERKS_+0x18>
   d7e9e:	688a      	ldr	r2, [r1, #8]
   d7ea0:	4619      	mov	r1, r3
   d7ea2:	f7ff ffc9 	bl	d7e38 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7ea6:	4620      	mov	r0, r4
   d7ea8:	bd10      	pop	{r4, pc}
	else invalidate();
   d7eaa:	f7ff ff9a 	bl	d7de2 <_ZN6String10invalidateEv>
   d7eae:	e7fa      	b.n	d7ea6 <_ZN6StringaSERKS_+0x14>

000d7eb0 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d7eb0:	b510      	push	{r4, lr}
	buffer = NULL;
   d7eb2:	2300      	movs	r3, #0
String::String(const String &value)
   d7eb4:	4604      	mov	r4, r0
	capacity = 0;
   d7eb6:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d7eba:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7ebc:	7303      	strb	r3, [r0, #12]
	*this = value;
   d7ebe:	f7ff ffe8 	bl	d7e92 <_ZN6StringaSERKS_>
}
   d7ec2:	4620      	mov	r0, r4
   d7ec4:	bd10      	pop	{r4, pc}

000d7ec6 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d7ec6:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7ec8:	6882      	ldr	r2, [r0, #8]
   d7eca:	b93a      	cbnz	r2, d7edc <_ZNK6String6equalsEPKc+0x16>
   d7ecc:	b121      	cbz	r1, d7ed8 <_ZNK6String6equalsEPKc+0x12>
   d7ece:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d7ed0:	fab0 f080 	clz	r0, r0
   d7ed4:	0940      	lsrs	r0, r0, #5
   d7ed6:	e000      	b.n	d7eda <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d7ed8:	2001      	movs	r0, #1
}
   d7eda:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d7edc:	6800      	ldr	r0, [r0, #0]
   d7ede:	b909      	cbnz	r1, d7ee4 <_ZNK6String6equalsEPKc+0x1e>
   d7ee0:	7800      	ldrb	r0, [r0, #0]
   d7ee2:	e7f5      	b.n	d7ed0 <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d7ee4:	f001 f9c8 	bl	d9278 <strcmp>
   d7ee8:	e7f2      	b.n	d7ed0 <_ZNK6String6equalsEPKc+0xa>

000d7eea <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d7eea:	b558      	push	{r3, r4, r6, lr}
   d7eec:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d7eee:	b12a      	cbz	r2, d7efc <_ZNK6String8getBytesEPhjj+0x12>
   d7ef0:	b121      	cbz	r1, d7efc <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d7ef2:	6884      	ldr	r4, [r0, #8]
   d7ef4:	429c      	cmp	r4, r3
   d7ef6:	d802      	bhi.n	d7efe <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d7ef8:	2300      	movs	r3, #0
   d7efa:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d7efc:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d7efe:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d7f00:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d7f02:	6801      	ldr	r1, [r0, #0]
   d7f04:	4294      	cmp	r4, r2
   d7f06:	bf28      	it	cs
   d7f08:	4614      	movcs	r4, r2
   d7f0a:	4419      	add	r1, r3
   d7f0c:	4622      	mov	r2, r4
   d7f0e:	4630      	mov	r0, r6
   d7f10:	f001 f9e9 	bl	d92e6 <strncpy>
	buf[n] = 0;
   d7f14:	2300      	movs	r3, #0
   d7f16:	5533      	strb	r3, [r6, r4]
   d7f18:	e7f0      	b.n	d7efc <_ZNK6String8getBytesEPhjj+0x12>

000d7f1a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7f1a:	b510      	push	{r4, lr}
   d7f1c:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d7f1e:	6800      	ldr	r0, [r0, #0]
   d7f20:	b118      	cbz	r0, d7f2a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d7f22:	f7ff f83b 	bl	d6f9c <free>
            wakeupSource_ = nullptr;
   d7f26:	2300      	movs	r3, #0
   d7f28:	6023      	str	r3, [r4, #0]
        }
    }
   d7f2a:	bd10      	pop	{r4, pc}

000d7f2c <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7f2c:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d7f2e:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d7f32:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d7f34:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7f36:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d7f38:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d7f3c:	f8c0 2006 	str.w	r2, [r0, #6]
   d7f40:	889b      	ldrh	r3, [r3, #4]
   d7f42:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d7f44:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d7f46:	f7ff ffe8 	bl	d7f1a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d7f4a:	682b      	ldr	r3, [r5, #0]
   d7f4c:	b113      	cbz	r3, d7f54 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d7f4e:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d7f50:	2300      	movs	r3, #0
   d7f52:	602b      	str	r3, [r5, #0]
    }
   d7f54:	4620      	mov	r0, r4
   d7f56:	bd38      	pop	{r3, r4, r5, pc}

000d7f58 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d7f58:	b538      	push	{r3, r4, r5, lr}
   d7f5a:	460c      	mov	r4, r1
   d7f5c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d7f5e:	f7ff ffdc 	bl	d7f1a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d7f62:	b144      	cbz	r4, d7f76 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d7f64:	8820      	ldrh	r0, [r4, #0]
   d7f66:	f7ff f811 	bl	d6f8c <malloc>
   d7f6a:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d7f6c:	b128      	cbz	r0, d7f7a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d7f6e:	8822      	ldrh	r2, [r4, #0]
   d7f70:	4621      	mov	r1, r4
   d7f72:	f001 f92d 	bl	d91d0 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d7f76:	2000      	movs	r0, #0
    }
   d7f78:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d7f7a:	4801      	ldr	r0, [pc, #4]	; (d7f80 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d7f7c:	e7fc      	b.n	d7f78 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d7f7e:	bf00      	nop
   d7f80:	fffffefc 	.word	0xfffffefc

000d7f84 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d7f84:	b507      	push	{r0, r1, r2, lr}
   d7f86:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7f88:	2100      	movs	r1, #0
{
   d7f8a:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d7f8c:	9100      	str	r1, [sp, #0]
   d7f8e:	2001      	movs	r0, #1
   d7f90:	218c      	movs	r1, #140	; 0x8c
   d7f92:	f7fe ff31 	bl	d6df8 <system_reset>
}
   d7f96:	b003      	add	sp, #12
   d7f98:	f85d fb04 	ldr.w	pc, [sp], #4

000d7f9c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d7f9c:	4601      	mov	r1, r0
    reset(0, flags);
   d7f9e:	2000      	movs	r0, #0
   d7fa0:	f7ff bff0 	b.w	d7f84 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d7fa4 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d7fa4:	2000      	movs	r0, #0
   d7fa6:	f7ff bff9 	b.w	d7f9c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d7fac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d7fac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7fae:	4d2d      	ldr	r5, [pc, #180]	; (d8064 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d7fb0:	7d0b      	ldrb	r3, [r1, #20]
   d7fb2:	4604      	mov	r4, r0
   d7fb4:	b08b      	sub	sp, #44	; 0x2c
   d7fb6:	4608      	mov	r0, r1
   d7fb8:	1daf      	adds	r7, r5, #6
   d7fba:	2b00      	cmp	r3, #0
   d7fbc:	d038      	beq.n	d8030 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d7fbe:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d7fc0:	791b      	ldrb	r3, [r3, #4]
   d7fc2:	2b00      	cmp	r3, #0
   d7fc4:	d034      	beq.n	d8030 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d7fc6:	2200      	movs	r2, #0
    SleepResult() {}
   d7fc8:	4b27      	ldr	r3, [pc, #156]	; (d8068 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d7fca:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d7fcc:	a902      	add	r1, sp, #8
   d7fce:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d7fd0:	9202      	str	r2, [sp, #8]
   d7fd2:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d7fd6:	f88d 200e 	strb.w	r2, [sp, #14]
   d7fda:	f7fe ff03 	bl	d6de4 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d7fde:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d7fe2:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d7fe6:	b200      	sxth	r0, r0
   d7fe8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d7fec:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d7ff0:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d7ff2:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d7ff4:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d7ff6:	4628      	mov	r0, r5
   d7ff8:	f7ff ffae 	bl	d7f58 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d7ffc:	a802      	add	r0, sp, #8
   d7ffe:	f7ff ff8c 	bl	d7f1a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d8002:	2300      	movs	r3, #0
   d8004:	6023      	str	r3, [r4, #0]
   d8006:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d8008:	71a3      	strb	r3, [r4, #6]
   d800a:	8123      	strh	r3, [r4, #8]
   d800c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d8010:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d8012:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d8016:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d8018:	683b      	ldr	r3, [r7, #0]
   d801a:	f8c4 3006 	str.w	r3, [r4, #6]
   d801e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d8020:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d8022:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d8024:	4620      	mov	r0, r4
   d8026:	f7ff ff97 	bl	d7f58 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d802a:	4620      	mov	r0, r4
   d802c:	b00b      	add	sp, #44	; 0x2c
   d802e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d8030:	2600      	movs	r6, #0
   d8032:	2320      	movs	r3, #32
   d8034:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d8038:	4b0c      	ldr	r3, [pc, #48]	; (d806c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d803a:	9300      	str	r3, [sp, #0]
   d803c:	490c      	ldr	r1, [pc, #48]	; (d8070 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d803e:	4633      	mov	r3, r6
   d8040:	aa02      	add	r2, sp, #8
   d8042:	2032      	movs	r0, #50	; 0x32
   d8044:	f7fe fe60 	bl	d6d08 <log_message>
    SleepResult() {}
   d8048:	4b07      	ldr	r3, [pc, #28]	; (d8068 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d804a:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d804c:	a902      	add	r1, sp, #8
        error_ = error;
   d804e:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d8052:	4804      	ldr	r0, [pc, #16]	; (d8064 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d8054:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d8056:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d805a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d805e:	f7ff ff65 	bl	d7f2c <_ZN17SystemSleepResultaSEOS_>
   d8062:	e7cb      	b.n	d7ffc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d8064:	2003e61c 	.word	0x2003e61c
   d8068:	ffff0000 	.word	0xffff0000
   d806c:	000d9b9f 	.word	0x000d9b9f
   d8070:	000d9b98 	.word	0x000d9b98

000d8074 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d8074:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d8076:	4b09      	ldr	r3, [pc, #36]	; (d809c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d8078:	4c09      	ldr	r4, [pc, #36]	; (d80a0 <_GLOBAL__sub_I_System+0x2c>)
   d807a:	2202      	movs	r2, #2
   d807c:	2000      	movs	r0, #0
   d807e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d8080:	4b08      	ldr	r3, [pc, #32]	; (d80a4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d8082:	6020      	str	r0, [r4, #0]
   d8084:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d8086:	71a0      	strb	r0, [r4, #6]
   d8088:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d808a:	f7fe fe5f 	bl	d6d4c <set_system_mode>
SystemClass System;
   d808e:	4620      	mov	r0, r4
   d8090:	4a05      	ldr	r2, [pc, #20]	; (d80a8 <_GLOBAL__sub_I_System+0x34>)
   d8092:	4906      	ldr	r1, [pc, #24]	; (d80ac <_GLOBAL__sub_I_System+0x38>)
   d8094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d8098:	f000 bc24 	b.w	d88e4 <__aeabi_atexit>
   d809c:	2003e628 	.word	0x2003e628
   d80a0:	2003e61c 	.word	0x2003e61c
   d80a4:	ffff0000 	.word	0xffff0000
   d80a8:	2003e3a8 	.word	0x2003e3a8
   d80ac:	000d419b 	.word	0x000d419b

000d80b0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d80b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d80b4:	4a15      	ldr	r2, [pc, #84]	; (d810c <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d80b6:	f8df 8060 	ldr.w	r8, [pc, #96]	; d8118 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d80ba:	e9d2 3200 	ldrd	r3, r2, [r2]
   d80be:	18c0      	adds	r0, r0, r3
   d80c0:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d80c4:	4a12      	ldr	r2, [pc, #72]	; (d8110 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d80c6:	e9d2 3200 	ldrd	r3, r2, [r2]
   d80ca:	18c6      	adds	r6, r0, r3
   d80cc:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d80d0:	e9d8 2300 	ldrd	r2, r3, [r8]
   d80d4:	42bb      	cmp	r3, r7
   d80d6:	bf08      	it	eq
   d80d8:	42b2      	cmpeq	r2, r6
{
   d80da:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d80dc:	d013      	beq.n	d8106 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d80de:	a903      	add	r1, sp, #12
   d80e0:	4668      	mov	r0, sp
   d80e2:	e9cd 6700 	strd	r6, r7, [sp]
   d80e6:	f7fe ff99 	bl	d701c <localtime_r>
	calendar_time.tm_year += 1900;
   d80ea:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d80ec:	4d09      	ldr	r5, [pc, #36]	; (d8114 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d80ee:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d80f2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d80f4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d80f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d80f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d80fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d80fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d80fe:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d8102:	6823      	ldr	r3, [r4, #0]
   d8104:	602b      	str	r3, [r5, #0]
    }
}
   d8106:	b00c      	add	sp, #48	; 0x30
   d8108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d810c:	2003e660 	.word	0x2003e660
   d8110:	2003e658 	.word	0x2003e658
   d8114:	2003e634 	.word	0x2003e634
   d8118:	2003e668 	.word	0x2003e668

000d811c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d811c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d811e:	2000      	movs	r0, #0
   d8120:	f7fe febc 	bl	d6e9c <spark_sync_time_pending>
   d8124:	b128      	cbz	r0, d8132 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d8126:	f7fe fe91 	bl	d6e4c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d812a:	f080 0001 	eor.w	r0, r0, #1
   d812e:	b2c0      	uxtb	r0, r0
    }
   d8130:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d8132:	2001      	movs	r0, #1
   d8134:	e7fc      	b.n	d8130 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d8136 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d8136:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d8138:	4602      	mov	r2, r0
   d813a:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d813c:	4668      	mov	r0, sp
    struct timeval tv = {
   d813e:	2100      	movs	r1, #0
    };
   d8140:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d8144:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d8148:	f7fe fc9e 	bl	d6a88 <hal_rtc_set_time>
   d814c:	4602      	mov	r2, r0
   d814e:	b910      	cbnz	r0, d8156 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d8150:	4601      	mov	r1, r0
   d8152:	f7fe fe2b 	bl	d6dac <system_notify_time_changed>
    }
}
   d8156:	b005      	add	sp, #20
   d8158:	f85d fb04 	ldr.w	pc, [sp], #4

000d815c <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d815c:	b530      	push	{r4, r5, lr}
   d815e:	4604      	mov	r4, r0
    t += time_zone_cache;
   d8160:	4818      	ldr	r0, [pc, #96]	; (d81c4 <_ZN9TimeClass7timeStrEx+0x68>)
   d8162:	e9d0 1000 	ldrd	r1, r0, [r0]
   d8166:	1852      	adds	r2, r2, r1
   d8168:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d816c:	4816      	ldr	r0, [pc, #88]	; (d81c8 <_ZN9TimeClass7timeStrEx+0x6c>)
   d816e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d8172:	1852      	adds	r2, r2, r1
{
   d8174:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d8176:	eb40 0303 	adc.w	r3, r0, r3
   d817a:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d817e:	2224      	movs	r2, #36	; 0x24
   d8180:	eb0d 0002 	add.w	r0, sp, r2
   d8184:	2100      	movs	r1, #0
   d8186:	f001 f84b 	bl	d9220 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d818a:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d818c:	a909      	add	r1, sp, #36	; 0x24
   d818e:	4668      	mov	r0, sp
   d8190:	f7fe ff44 	bl	d701c <localtime_r>
    char ascstr[26] = {};
   d8194:	2216      	movs	r2, #22
   d8196:	4629      	mov	r1, r5
   d8198:	a803      	add	r0, sp, #12
   d819a:	9502      	str	r5, [sp, #8]
   d819c:	f001 f840 	bl	d9220 <memset>
    asctime_r(&calendar_time, ascstr);
   d81a0:	a902      	add	r1, sp, #8
   d81a2:	a809      	add	r0, sp, #36	; 0x24
   d81a4:	f000 ffca 	bl	d913c <asctime_r>
    int len = strlen(ascstr);
   d81a8:	a802      	add	r0, sp, #8
   d81aa:	f001 f894 	bl	d92d6 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d81ae:	ab12      	add	r3, sp, #72	; 0x48
   d81b0:	4418      	add	r0, r3
    return String(ascstr);
   d81b2:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d81b4:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d81b8:	4620      	mov	r0, r4
   d81ba:	f7ff fe56 	bl	d7e6a <_ZN6StringC1EPKc>
}
   d81be:	4620      	mov	r0, r4
   d81c0:	b013      	add	sp, #76	; 0x4c
   d81c2:	bd30      	pop	{r4, r5, pc}
   d81c4:	2003e660 	.word	0x2003e660
   d81c8:	2003e658 	.word	0x2003e658

000d81cc <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d81cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d81d0:	b0a5      	sub	sp, #148	; 0x94
   d81d2:	4607      	mov	r7, r0
   d81d4:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d81d6:	a814      	add	r0, sp, #80	; 0x50
{
   d81d8:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d81da:	223f      	movs	r2, #63	; 0x3f
{
   d81dc:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d81de:	f001 f882 	bl	d92e6 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d81e2:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d81e4:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d81e6:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d81ea:	f001 f874 	bl	d92d6 <strlen>
   d81ee:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d81f0:	bb5d      	cbnz	r5, d824a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d81f2:	492a      	ldr	r1, [pc, #168]	; (d829c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d81f4:	a803      	add	r0, sp, #12
   d81f6:	f001 f849 	bl	d928c <strcpy>
   d81fa:	ae14      	add	r6, sp, #80	; 0x50
{
   d81fc:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d81fe:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d8202:	45ab      	cmp	fp, r5
   d8204:	d936      	bls.n	d8274 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d8206:	46b1      	mov	r9, r6
   d8208:	f105 0a01 	add.w	sl, r5, #1
   d820c:	f819 3b01 	ldrb.w	r3, [r9], #1
   d8210:	2b25      	cmp	r3, #37	; 0x25
   d8212:	d117      	bne.n	d8244 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d8214:	7873      	ldrb	r3, [r6, #1]
   d8216:	2b7a      	cmp	r3, #122	; 0x7a
   d8218:	d114      	bne.n	d8244 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d821a:	a803      	add	r0, sp, #12
   d821c:	f001 f85b 	bl	d92d6 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d8220:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d8222:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d8224:	1828      	adds	r0, r5, r0
   d8226:	4418      	add	r0, r3
   d8228:	ebab 0205 	sub.w	r2, fp, r5
   d822c:	1cb1      	adds	r1, r6, #2
   d822e:	f000 ffcf 	bl	d91d0 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d8232:	4622      	mov	r2, r4
   d8234:	a903      	add	r1, sp, #12
   d8236:	4630      	mov	r0, r6
   d8238:	f000 ffca 	bl	d91d0 <memcpy>
            len = strlen(format_str);
   d823c:	a814      	add	r0, sp, #80	; 0x50
   d823e:	f001 f84a 	bl	d92d6 <strlen>
   d8242:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d8244:	464e      	mov	r6, r9
   d8246:	4655      	mov	r5, sl
   d8248:	e7d9      	b.n	d81fe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d824a:	213c      	movs	r1, #60	; 0x3c
   d824c:	fb95 f3f1 	sdiv	r3, r5, r1
   d8250:	2b00      	cmp	r3, #0
   d8252:	bfb8      	it	lt
   d8254:	425b      	neglt	r3, r3
   d8256:	fbb3 f2f1 	udiv	r2, r3, r1
   d825a:	fb01 3312 	mls	r3, r1, r2, r3
   d825e:	9300      	str	r3, [sp, #0]
   d8260:	4a0f      	ldr	r2, [pc, #60]	; (d82a0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d8262:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8266:	2110      	movs	r1, #16
   d8268:	a803      	add	r0, sp, #12
   d826a:	fb95 f3f3 	sdiv	r3, r5, r3
   d826e:	f7fe fead 	bl	d6fcc <snprintf>
   d8272:	e7c2      	b.n	d81fa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d8274:	2100      	movs	r1, #0
   d8276:	222e      	movs	r2, #46	; 0x2e
   d8278:	a808      	add	r0, sp, #32
   d827a:	9107      	str	r1, [sp, #28]
   d827c:	f000 ffd0 	bl	d9220 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d8280:	4643      	mov	r3, r8
   d8282:	aa14      	add	r2, sp, #80	; 0x50
   d8284:	2132      	movs	r1, #50	; 0x32
   d8286:	a807      	add	r0, sp, #28
   d8288:	f7fe fec0 	bl	d700c <strftime>
    return String(buf);
   d828c:	a907      	add	r1, sp, #28
   d828e:	4638      	mov	r0, r7
   d8290:	f7ff fdeb 	bl	d7e6a <_ZN6StringC1EPKc>
}
   d8294:	4638      	mov	r0, r7
   d8296:	b025      	add	sp, #148	; 0x94
   d8298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d829c:	000d9bc6 	.word	0x000d9bc6
   d82a0:	000d9bc8 	.word	0x000d9bc8

000d82a4 <_ZN9TimeClass6formatExPKc>:
{
   d82a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   d82a6:	b08d      	sub	sp, #52	; 0x34
   d82a8:	e9cd 2300 	strd	r2, r3, [sp]
   d82ac:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d82ae:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d82b0:	b915      	cbnz	r5, d82b8 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d82b2:	4b19      	ldr	r3, [pc, #100]	; (d8318 <_ZN9TimeClass6formatExPKc+0x74>)
   d82b4:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d82b6:	b12d      	cbz	r5, d82c4 <_ZN9TimeClass6formatExPKc+0x20>
   d82b8:	4b18      	ldr	r3, [pc, #96]	; (d831c <_ZN9TimeClass6formatExPKc+0x78>)
   d82ba:	4628      	mov	r0, r5
   d82bc:	6819      	ldr	r1, [r3, #0]
   d82be:	f000 ffdb 	bl	d9278 <strcmp>
   d82c2:	b938      	cbnz	r0, d82d4 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d82c4:	e9dd 2300 	ldrd	r2, r3, [sp]
   d82c8:	4620      	mov	r0, r4
   d82ca:	f7ff ff47 	bl	d815c <_ZN9TimeClass7timeStrEx>
}
   d82ce:	4620      	mov	r0, r4
   d82d0:	b00d      	add	sp, #52	; 0x34
   d82d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d82d4:	4e12      	ldr	r6, [pc, #72]	; (d8320 <_ZN9TimeClass6formatExPKc+0x7c>)
   d82d6:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d82d8:	4f12      	ldr	r7, [pc, #72]	; (d8324 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d82da:	e9d6 3200 	ldrd	r3, r2, [r6]
   d82de:	185b      	adds	r3, r3, r1
   d82e0:	9901      	ldr	r1, [sp, #4]
   d82e2:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d82e6:	e9d7 0100 	ldrd	r0, r1, [r7]
   d82ea:	181b      	adds	r3, r3, r0
   d82ec:	eb41 0202 	adc.w	r2, r1, r2
   d82f0:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d82f4:	2100      	movs	r1, #0
   d82f6:	2224      	movs	r2, #36	; 0x24
   d82f8:	a803      	add	r0, sp, #12
   d82fa:	f000 ff91 	bl	d9220 <memset>
    localtime_r(&t, &calendar_time);
   d82fe:	a903      	add	r1, sp, #12
   d8300:	4668      	mov	r0, sp
   d8302:	f7fe fe8b 	bl	d701c <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d8306:	6832      	ldr	r2, [r6, #0]
   d8308:	683b      	ldr	r3, [r7, #0]
   d830a:	a903      	add	r1, sp, #12
   d830c:	4413      	add	r3, r2
   d830e:	4620      	mov	r0, r4
   d8310:	462a      	mov	r2, r5
   d8312:	f7ff ff5b 	bl	d81cc <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d8316:	e7da      	b.n	d82ce <_ZN9TimeClass6formatExPKc+0x2a>
   d8318:	2003e630 	.word	0x2003e630
   d831c:	2003e340 	.word	0x2003e340
   d8320:	2003e660 	.word	0x2003e660
   d8324:	2003e658 	.word	0x2003e658

000d8328 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d8328:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d832a:	2000      	movs	r0, #0
   d832c:	f7fe fb94 	bl	d6a58 <hal_rtc_time_is_valid>
    if (rtcstate)
   d8330:	4604      	mov	r4, r0
   d8332:	b9a0      	cbnz	r0, d835e <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d8334:	f7fe fd02 	bl	d6d3c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d8338:	2801      	cmp	r0, #1
   d833a:	d110      	bne.n	d835e <_ZN9TimeClass7isValidEv+0x36>
   d833c:	4620      	mov	r0, r4
   d833e:	f7fe fd2d 	bl	d6d9c <system_thread_get_state>
   d8342:	b960      	cbnz	r0, d835e <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d8344:	f7ff feea 	bl	d811c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d8348:	b910      	cbnz	r0, d8350 <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d834a:	f7fe fd6f 	bl	d6e2c <spark_process>
        while (_while() && !_condition()) {
   d834e:	e7f9      	b.n	d8344 <_ZN9TimeClass7isValidEv+0x1c>
   d8350:	f7ff fee4 	bl	d811c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d8354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d8358:	2000      	movs	r0, #0
   d835a:	f7fe bb7d 	b.w	d6a58 <hal_rtc_time_is_valid>
}
   d835e:	4620      	mov	r0, r4
   d8360:	bd10      	pop	{r4, pc}

000d8362 <_ZN9TimeClass3nowEv>:
{
   d8362:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d8364:	f7ff ffe0 	bl	d8328 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d8368:	2210      	movs	r2, #16
   d836a:	2100      	movs	r1, #0
   d836c:	4668      	mov	r0, sp
   d836e:	f000 ff57 	bl	d9220 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d8372:	2100      	movs	r1, #0
   d8374:	4668      	mov	r0, sp
   d8376:	f7fe fb7f 	bl	d6a78 <hal_rtc_get_time>
}
   d837a:	9800      	ldr	r0, [sp, #0]
   d837c:	b005      	add	sp, #20
   d837e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8384 <_ZN9TimeClass4hourEv>:
{
   d8384:	b508      	push	{r3, lr}
	return hour(now());
   d8386:	f7ff ffec 	bl	d8362 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d838a:	17c1      	asrs	r1, r0, #31
   d838c:	f7ff fe90 	bl	d80b0 <_ZL22Refresh_UnixTime_Cachex>
}
   d8390:	4b01      	ldr	r3, [pc, #4]	; (d8398 <_ZN9TimeClass4hourEv+0x14>)
   d8392:	6898      	ldr	r0, [r3, #8]
   d8394:	bd08      	pop	{r3, pc}
   d8396:	bf00      	nop
   d8398:	2003e634 	.word	0x2003e634

000d839c <_ZN9TimeClass4yearEv>:
{
   d839c:	b508      	push	{r3, lr}
	return year(now());
   d839e:	f7ff ffe0 	bl	d8362 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d83a2:	17c1      	asrs	r1, r0, #31
   d83a4:	f7ff fe84 	bl	d80b0 <_ZL22Refresh_UnixTime_Cachex>
}
   d83a8:	4b01      	ldr	r3, [pc, #4]	; (d83b0 <_ZN9TimeClass4yearEv+0x14>)
   d83aa:	6958      	ldr	r0, [r3, #20]
   d83ac:	bd08      	pop	{r3, pc}
   d83ae:	bf00      	nop
   d83b0:	2003e634 	.word	0x2003e634

000d83b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d83b4:	4b02      	ldr	r3, [pc, #8]	; (d83c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d83b6:	681a      	ldr	r2, [r3, #0]
   d83b8:	4b02      	ldr	r3, [pc, #8]	; (d83c4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d83ba:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d83bc:	4770      	bx	lr
   d83be:	bf00      	nop
   d83c0:	2003e340 	.word	0x2003e340
   d83c4:	2003e630 	.word	0x2003e630

000d83c8 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d83c8:	4770      	bx	lr

000d83ca <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d83ca:	7441      	strb	r1, [r0, #17]
}
   d83cc:	4770      	bx	lr

000d83ce <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d83ce:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d83d0:	7c00      	ldrb	r0, [r0, #16]
   d83d2:	f7fe fc59 	bl	d6c88 <hal_usart_available_data_for_write>
}
   d83d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d83da:	bd08      	pop	{r3, pc}

000d83dc <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d83dc:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d83de:	7c00      	ldrb	r0, [r0, #16]
   d83e0:	f7fe fc2a 	bl	d6c38 <hal_usart_available>
}
   d83e4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d83e8:	bd08      	pop	{r3, pc}

000d83ea <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d83ea:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d83ec:	7c00      	ldrb	r0, [r0, #16]
   d83ee:	f7fe fc33 	bl	d6c58 <hal_usart_peek>
}
   d83f2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d83f6:	bd08      	pop	{r3, pc}

000d83f8 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d83f8:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d83fa:	7c00      	ldrb	r0, [r0, #16]
   d83fc:	f7fe fc24 	bl	d6c48 <hal_usart_read>
}
   d8400:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d8404:	bd08      	pop	{r3, pc}

000d8406 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d8406:	7c00      	ldrb	r0, [r0, #16]
   d8408:	f7fe bc2e 	b.w	d6c68 <hal_usart_flush>

000d840c <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d840c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d840e:	7c45      	ldrb	r5, [r0, #17]
{
   d8410:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8412:	b12d      	cbz	r5, d8420 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d8414:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8416:	b003      	add	sp, #12
   d8418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d841c:	f7fe bc04 	b.w	d6c28 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d8420:	7c00      	ldrb	r0, [r0, #16]
   d8422:	9101      	str	r1, [sp, #4]
   d8424:	f7fe fc30 	bl	d6c88 <hal_usart_available_data_for_write>
   d8428:	2800      	cmp	r0, #0
   d842a:	9901      	ldr	r1, [sp, #4]
   d842c:	dcf2      	bgt.n	d8414 <_ZN11USARTSerial5writeEh+0x8>
}
   d842e:	4628      	mov	r0, r5
   d8430:	b003      	add	sp, #12
   d8432:	bd30      	pop	{r4, r5, pc}

000d8434 <_ZN11USARTSerialD0Ev>:
   d8434:	b510      	push	{r4, lr}
   d8436:	2114      	movs	r1, #20
   d8438:	4604      	mov	r4, r0
   d843a:	f000 fa58 	bl	d88ee <_ZdlPvj>
   d843e:	4620      	mov	r0, r4
   d8440:	bd10      	pop	{r4, pc}
	...

000d8444 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d8444:	b510      	push	{r4, lr}
   d8446:	f04f 0c00 	mov.w	ip, #0
   d844a:	4604      	mov	r4, r0
   d844c:	4608      	mov	r0, r1
   d844e:	4611      	mov	r1, r2
   d8450:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8454:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d8458:	4a04      	ldr	r2, [pc, #16]	; (d846c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d845a:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d845c:	2201      	movs	r2, #1
  _serial = serial;
   d845e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8460:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d8462:	461a      	mov	r2, r3
   d8464:	f7fe fbd8 	bl	d6c18 <hal_usart_init>
}
   d8468:	4620      	mov	r0, r4
   d846a:	bd10      	pop	{r4, pc}
   d846c:	000d9bf8 	.word	0x000d9bf8

000d8470 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d8470:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d8472:	4c0e      	ldr	r4, [pc, #56]	; (d84ac <_Z22__fetch_global_Serial1v+0x3c>)
   d8474:	7821      	ldrb	r1, [r4, #0]
   d8476:	f3bf 8f5b 	dmb	ish
   d847a:	f011 0101 	ands.w	r1, r1, #1
   d847e:	d112      	bne.n	d84a6 <_Z22__fetch_global_Serial1v+0x36>
   d8480:	4620      	mov	r0, r4
   d8482:	9101      	str	r1, [sp, #4]
   d8484:	f7fb fe18 	bl	d40b8 <__cxa_guard_acquire>
   d8488:	9901      	ldr	r1, [sp, #4]
   d848a:	b160      	cbz	r0, d84a6 <_Z22__fetch_global_Serial1v+0x36>
   d848c:	4a08      	ldr	r2, [pc, #32]	; (d84b0 <_Z22__fetch_global_Serial1v+0x40>)
   d848e:	4b09      	ldr	r3, [pc, #36]	; (d84b4 <_Z22__fetch_global_Serial1v+0x44>)
   d8490:	4809      	ldr	r0, [pc, #36]	; (d84b8 <_Z22__fetch_global_Serial1v+0x48>)
   d8492:	f7ff ffd7 	bl	d8444 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d8496:	4620      	mov	r0, r4
   d8498:	f7fb fe13 	bl	d40c2 <__cxa_guard_release>
   d849c:	4a07      	ldr	r2, [pc, #28]	; (d84bc <_Z22__fetch_global_Serial1v+0x4c>)
   d849e:	4908      	ldr	r1, [pc, #32]	; (d84c0 <_Z22__fetch_global_Serial1v+0x50>)
   d84a0:	4805      	ldr	r0, [pc, #20]	; (d84b8 <_Z22__fetch_global_Serial1v+0x48>)
   d84a2:	f000 fa1f 	bl	d88e4 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d84a6:	4804      	ldr	r0, [pc, #16]	; (d84b8 <_Z22__fetch_global_Serial1v+0x48>)
   d84a8:	b002      	add	sp, #8
   d84aa:	bd10      	pop	{r4, pc}
   d84ac:	2003e670 	.word	0x2003e670
   d84b0:	2003e674 	.word	0x2003e674
   d84b4:	2003e6f8 	.word	0x2003e6f8
   d84b8:	2003e77c 	.word	0x2003e77c
   d84bc:	2003e3a8 	.word	0x2003e3a8
   d84c0:	000d83c9 	.word	0x000d83c9

000d84c4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d84c4:	7441      	strb	r1, [r0, #17]
}
   d84c6:	4770      	bx	lr

000d84c8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d84c8:	4770      	bx	lr

000d84ca <_ZN9USBSerial4readEv>:
{
   d84ca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d84cc:	2100      	movs	r1, #0
   d84ce:	7c00      	ldrb	r0, [r0, #16]
   d84d0:	f7fe fbfa 	bl	d6cc8 <HAL_USB_USART_Receive_Data>
}
   d84d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d84d8:	bd08      	pop	{r3, pc}

000d84da <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d84da:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d84dc:	2101      	movs	r1, #1
   d84de:	7c00      	ldrb	r0, [r0, #16]
   d84e0:	f7fe fbf2 	bl	d6cc8 <HAL_USB_USART_Receive_Data>
}
   d84e4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d84e8:	bd08      	pop	{r3, pc}

000d84ea <_ZN9USBSerial17availableForWriteEv>:
{
   d84ea:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d84ec:	7c00      	ldrb	r0, [r0, #16]
   d84ee:	f7fe fbe3 	bl	d6cb8 <HAL_USB_USART_Available_Data_For_Write>
}
   d84f2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d84f6:	bd08      	pop	{r3, pc}

000d84f8 <_ZN9USBSerial9availableEv>:
{
   d84f8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d84fa:	7c00      	ldrb	r0, [r0, #16]
   d84fc:	f7fe fbd4 	bl	d6ca8 <HAL_USB_USART_Available_Data>
}
   d8500:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d8504:	bd08      	pop	{r3, pc}

000d8506 <_ZN9USBSerial5writeEh>:
{
   d8506:	b513      	push	{r0, r1, r4, lr}
   d8508:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d850a:	7c00      	ldrb	r0, [r0, #16]
{
   d850c:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d850e:	f7fe fbd3 	bl	d6cb8 <HAL_USB_USART_Available_Data_For_Write>
   d8512:	2800      	cmp	r0, #0
   d8514:	9901      	ldr	r1, [sp, #4]
   d8516:	dc01      	bgt.n	d851c <_ZN9USBSerial5writeEh+0x16>
   d8518:	7c60      	ldrb	r0, [r4, #17]
   d851a:	b120      	cbz	r0, d8526 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d851c:	7c20      	ldrb	r0, [r4, #16]
   d851e:	f7fe fbdb 	bl	d6cd8 <HAL_USB_USART_Send_Data>
   d8522:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d8526:	b002      	add	sp, #8
   d8528:	bd10      	pop	{r4, pc}

000d852a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d852a:	7c00      	ldrb	r0, [r0, #16]
   d852c:	f7fe bbdc 	b.w	d6ce8 <HAL_USB_USART_Flush_Data>

000d8530 <_ZN9USBSerialD0Ev>:
   d8530:	b510      	push	{r4, lr}
   d8532:	2114      	movs	r1, #20
   d8534:	4604      	mov	r4, r0
   d8536:	f000 f9da 	bl	d88ee <_ZdlPvj>
   d853a:	4620      	mov	r0, r4
   d853c:	bd10      	pop	{r4, pc}
	...

000d8540 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8540:	b510      	push	{r4, lr}
   d8542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8546:	4604      	mov	r4, r0
   d8548:	4608      	mov	r0, r1
   d854a:	2100      	movs	r1, #0
   d854c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d8550:	4b04      	ldr	r3, [pc, #16]	; (d8564 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d8552:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d8554:	2301      	movs	r3, #1
  _serial = serial;
   d8556:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d8558:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d855a:	4611      	mov	r1, r2
   d855c:	f7fe fb9c 	bl	d6c98 <HAL_USB_USART_Init>
}
   d8560:	4620      	mov	r0, r4
   d8562:	bd10      	pop	{r4, pc}
   d8564:	000d9c28 	.word	0x000d9c28

000d8568 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d8568:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d856a:	2214      	movs	r2, #20
{
   d856c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d856e:	2100      	movs	r1, #0
   d8570:	f000 fe56 	bl	d9220 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d8574:	4620      	mov	r0, r4
   d8576:	bd10      	pop	{r4, pc}

000d8578 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d8578:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d857a:	4c10      	ldr	r4, [pc, #64]	; (d85bc <_Z16_fetch_usbserialv+0x44>)
{
   d857c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d857e:	a803      	add	r0, sp, #12
   d8580:	f7ff fff2 	bl	d8568 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d8584:	7821      	ldrb	r1, [r4, #0]
   d8586:	f3bf 8f5b 	dmb	ish
   d858a:	f011 0101 	ands.w	r1, r1, #1
   d858e:	d111      	bne.n	d85b4 <_Z16_fetch_usbserialv+0x3c>
   d8590:	4620      	mov	r0, r4
   d8592:	9101      	str	r1, [sp, #4]
   d8594:	f7fb fd90 	bl	d40b8 <__cxa_guard_acquire>
   d8598:	9901      	ldr	r1, [sp, #4]
   d859a:	b158      	cbz	r0, d85b4 <_Z16_fetch_usbserialv+0x3c>
   d859c:	aa03      	add	r2, sp, #12
   d859e:	4808      	ldr	r0, [pc, #32]	; (d85c0 <_Z16_fetch_usbserialv+0x48>)
   d85a0:	f7ff ffce 	bl	d8540 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d85a4:	4620      	mov	r0, r4
   d85a6:	f7fb fd8c 	bl	d40c2 <__cxa_guard_release>
   d85aa:	4a06      	ldr	r2, [pc, #24]	; (d85c4 <_Z16_fetch_usbserialv+0x4c>)
   d85ac:	4906      	ldr	r1, [pc, #24]	; (d85c8 <_Z16_fetch_usbserialv+0x50>)
   d85ae:	4804      	ldr	r0, [pc, #16]	; (d85c0 <_Z16_fetch_usbserialv+0x48>)
   d85b0:	f000 f998 	bl	d88e4 <__aeabi_atexit>
	return _usbserial;
}
   d85b4:	4802      	ldr	r0, [pc, #8]	; (d85c0 <_Z16_fetch_usbserialv+0x48>)
   d85b6:	b008      	add	sp, #32
   d85b8:	bd10      	pop	{r4, pc}
   d85ba:	bf00      	nop
   d85bc:	2003e790 	.word	0x2003e790
   d85c0:	2003e794 	.word	0x2003e794
   d85c4:	2003e3a8 	.word	0x2003e3a8
   d85c8:	000d84c9 	.word	0x000d84c9

000d85cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d85cc:	4b01      	ldr	r3, [pc, #4]	; (d85d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d85ce:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d85d0:	4770      	bx	lr
   d85d2:	bf00      	nop
   d85d4:	2003e344 	.word	0x2003e344

000d85d8 <serialEventRun>:
{
   d85d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d85da:	4b0b      	ldr	r3, [pc, #44]	; (d8608 <serialEventRun+0x30>)
   d85dc:	b143      	cbz	r3, d85f0 <serialEventRun+0x18>
   d85de:	f7ff ffcb 	bl	d8578 <_Z16_fetch_usbserialv>
   d85e2:	6803      	ldr	r3, [r0, #0]
   d85e4:	691b      	ldr	r3, [r3, #16]
   d85e6:	4798      	blx	r3
   d85e8:	2800      	cmp	r0, #0
   d85ea:	dd01      	ble.n	d85f0 <serialEventRun+0x18>
        serialEvent();
   d85ec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d85f0:	4b06      	ldr	r3, [pc, #24]	; (d860c <serialEventRun+0x34>)
   d85f2:	b143      	cbz	r3, d8606 <serialEventRun+0x2e>
   d85f4:	f7ff ff3c 	bl	d8470 <_Z22__fetch_global_Serial1v>
   d85f8:	6803      	ldr	r3, [r0, #0]
   d85fa:	691b      	ldr	r3, [r3, #16]
   d85fc:	4798      	blx	r3
   d85fe:	2800      	cmp	r0, #0
   d8600:	dd01      	ble.n	d8606 <serialEventRun+0x2e>
        serialEvent1();
   d8602:	f3af 8000 	nop.w
}
   d8606:	bd08      	pop	{r3, pc}
	...

000d8610 <_post_loop>:
{
   d8610:	b508      	push	{r3, lr}
	serialEventRun();
   d8612:	f7ff ffe1 	bl	d85d8 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d8616:	f7fe fa17 	bl	d6a48 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d861a:	4b01      	ldr	r3, [pc, #4]	; (d8620 <_post_loop+0x10>)
   d861c:	6018      	str	r0, [r3, #0]
}
   d861e:	bd08      	pop	{r3, pc}
   d8620:	2003e7bc 	.word	0x2003e7bc

000d8624 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d8624:	4802      	ldr	r0, [pc, #8]	; (d8630 <_Z33system_initialize_user_backup_ramv+0xc>)
   d8626:	4a03      	ldr	r2, [pc, #12]	; (d8634 <_Z33system_initialize_user_backup_ramv+0x10>)
   d8628:	4903      	ldr	r1, [pc, #12]	; (d8638 <_Z33system_initialize_user_backup_ramv+0x14>)
   d862a:	1a12      	subs	r2, r2, r0
   d862c:	f000 bdd0 	b.w	d91d0 <memcpy>
   d8630:	2003f400 	.word	0x2003f400
   d8634:	2003fc04 	.word	0x2003fc04
   d8638:	000d9de0 	.word	0x000d9de0

000d863c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d863c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d863e:	2300      	movs	r3, #0
   d8640:	9300      	str	r3, [sp, #0]
   d8642:	461a      	mov	r2, r3
   d8644:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8648:	f7fe fbc2 	bl	d6dd0 <system_ctrl_set_result>
}
   d864c:	b003      	add	sp, #12
   d864e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d8654 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d8654:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d8656:	8843      	ldrh	r3, [r0, #2]
   d8658:	2b0a      	cmp	r3, #10
   d865a:	d008      	beq.n	d866e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d865c:	2b50      	cmp	r3, #80	; 0x50
   d865e:	d10b      	bne.n	d8678 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d8660:	4b09      	ldr	r3, [pc, #36]	; (d8688 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d8662:	681b      	ldr	r3, [r3, #0]
   d8664:	b14b      	cbz	r3, d867a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d8666:	b003      	add	sp, #12
   d8668:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d866c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d866e:	f7ff ffe5 	bl	d863c <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d8672:	b003      	add	sp, #12
   d8674:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8678:	2300      	movs	r3, #0
   d867a:	9300      	str	r3, [sp, #0]
   d867c:	461a      	mov	r2, r3
   d867e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d8682:	f7fe fba5 	bl	d6dd0 <system_ctrl_set_result>
}
   d8686:	e7f4      	b.n	d8672 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d8688:	2003e7ac 	.word	0x2003e7ac

000d868c <module_user_init_hook>:
{
   d868c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d868e:	4c12      	ldr	r4, [pc, #72]	; (d86d8 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8690:	4812      	ldr	r0, [pc, #72]	; (d86dc <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d8692:	4d13      	ldr	r5, [pc, #76]	; (d86e0 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d8694:	2100      	movs	r1, #0
   d8696:	f7fe fcb1 	bl	d6ffc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d869a:	6823      	ldr	r3, [r4, #0]
   d869c:	42ab      	cmp	r3, r5
   d869e:	4b11      	ldr	r3, [pc, #68]	; (d86e4 <module_user_init_hook+0x58>)
   d86a0:	bf0c      	ite	eq
   d86a2:	2201      	moveq	r2, #1
   d86a4:	2200      	movne	r2, #0
   d86a6:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d86a8:	d002      	beq.n	d86b0 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d86aa:	f7ff ffbb 	bl	d8624 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d86ae:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d86b0:	f7fe f9b2 	bl	d6a18 <HAL_RNG_GetRandomNumber>
   d86b4:	4604      	mov	r4, r0
    srand(seed);
   d86b6:	f000 fdbb 	bl	d9230 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d86ba:	4b0b      	ldr	r3, [pc, #44]	; (d86e8 <module_user_init_hook+0x5c>)
   d86bc:	b113      	cbz	r3, d86c4 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d86be:	4620      	mov	r0, r4
   d86c0:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d86c4:	2100      	movs	r1, #0
   d86c6:	4808      	ldr	r0, [pc, #32]	; (d86e8 <module_user_init_hook+0x5c>)
   d86c8:	f7fe fc00 	bl	d6ecc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d86cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d86d0:	4806      	ldr	r0, [pc, #24]	; (d86ec <module_user_init_hook+0x60>)
   d86d2:	2100      	movs	r1, #0
   d86d4:	f7fe bb72 	b.w	d6dbc <system_ctrl_set_app_request_handler>
   d86d8:	2003fc00 	.word	0x2003fc00
   d86dc:	000d85cd 	.word	0x000d85cd
   d86e0:	9a271c1e 	.word	0x9a271c1e
   d86e4:	2003e7a8 	.word	0x2003e7a8
   d86e8:	00000000 	.word	0x00000000
   d86ec:	000d8655 	.word	0x000d8655

000d86f0 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d86f0:	b508      	push	{r3, lr}
   d86f2:	4b02      	ldr	r3, [pc, #8]	; (d86fc <spark_protocol_instance+0xc>)
   d86f4:	681b      	ldr	r3, [r3, #0]
   d86f6:	681b      	ldr	r3, [r3, #0]
   d86f8:	9301      	str	r3, [sp, #4]
   d86fa:	bd08      	pop	{r3, pc}
   d86fc:	0003025c 	.word	0x0003025c

000d8700 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d8700:	b508      	push	{r3, lr}
   d8702:	4b02      	ldr	r3, [pc, #8]	; (d870c <spark_protocol_set_product_id+0xc>)
   d8704:	681b      	ldr	r3, [r3, #0]
   d8706:	685b      	ldr	r3, [r3, #4]
   d8708:	9301      	str	r3, [sp, #4]
   d870a:	bd08      	pop	{r3, pc}
   d870c:	0003025c 	.word	0x0003025c

000d8710 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d8710:	b508      	push	{r3, lr}
   d8712:	4b02      	ldr	r3, [pc, #8]	; (d871c <spark_protocol_set_product_firmware_version+0xc>)
   d8714:	681b      	ldr	r3, [r3, #0]
   d8716:	689b      	ldr	r3, [r3, #8]
   d8718:	9301      	str	r3, [sp, #4]
   d871a:	bd08      	pop	{r3, pc}
   d871c:	0003025c 	.word	0x0003025c

000d8720 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8720:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8722:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8724:	d902      	bls.n	d872c <pinAvailable+0xc>
    return false;
   d8726:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8728:	b002      	add	sp, #8
   d872a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d872c:	f1a0 030b 	sub.w	r3, r0, #11
   d8730:	2b02      	cmp	r3, #2
   d8732:	d81a      	bhi.n	d876a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8734:	4c17      	ldr	r4, [pc, #92]	; (d8794 <pinAvailable+0x74>)
   d8736:	7821      	ldrb	r1, [r4, #0]
   d8738:	f3bf 8f5b 	dmb	ish
   d873c:	f011 0101 	ands.w	r1, r1, #1
   d8740:	d10b      	bne.n	d875a <pinAvailable+0x3a>
   d8742:	4620      	mov	r0, r4
   d8744:	9101      	str	r1, [sp, #4]
   d8746:	f7fb fcb7 	bl	d40b8 <__cxa_guard_acquire>
   d874a:	9901      	ldr	r1, [sp, #4]
   d874c:	b128      	cbz	r0, d875a <pinAvailable+0x3a>
   d874e:	4812      	ldr	r0, [pc, #72]	; (d8798 <pinAvailable+0x78>)
   d8750:	f7ff fb36 	bl	d7dc0 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8754:	4620      	mov	r0, r4
   d8756:	f7fb fcb4 	bl	d40c2 <__cxa_guard_release>
   d875a:	4b0f      	ldr	r3, [pc, #60]	; (d8798 <pinAvailable+0x78>)
   d875c:	7818      	ldrb	r0, [r3, #0]
   d875e:	f7fe fa53 	bl	d6c08 <hal_spi_is_enabled>
   d8762:	2800      	cmp	r0, #0
   d8764:	d1df      	bne.n	d8726 <pinAvailable+0x6>
  return true; // 'pin' is available
   d8766:	2001      	movs	r0, #1
   d8768:	e7de      	b.n	d8728 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d876a:	2801      	cmp	r0, #1
   d876c:	d809      	bhi.n	d8782 <pinAvailable+0x62>
   d876e:	f000 f869 	bl	d8844 <_Z19__fetch_global_Wirev>
   d8772:	2100      	movs	r1, #0
   d8774:	7c00      	ldrb	r0, [r0, #16]
   d8776:	f7fe f9ff 	bl	d6b78 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d877a:	f080 0001 	eor.w	r0, r0, #1
   d877e:	b2c0      	uxtb	r0, r0
   d8780:	e7d2      	b.n	d8728 <pinAvailable+0x8>
   d8782:	3809      	subs	r0, #9
   d8784:	2801      	cmp	r0, #1
   d8786:	d8ee      	bhi.n	d8766 <pinAvailable+0x46>
   d8788:	f7ff fe72 	bl	d8470 <_Z22__fetch_global_Serial1v>
   d878c:	7c00      	ldrb	r0, [r0, #16]
   d878e:	f7fe fa73 	bl	d6c78 <hal_usart_is_enabled>
   d8792:	e7f2      	b.n	d877a <pinAvailable+0x5a>
   d8794:	2003e7b0 	.word	0x2003e7b0
   d8798:	2003e7b4 	.word	0x2003e7b4

000d879c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d879c:	2823      	cmp	r0, #35	; 0x23
{
   d879e:	b538      	push	{r3, r4, r5, lr}
   d87a0:	4604      	mov	r4, r0
   d87a2:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d87a4:	d80a      	bhi.n	d87bc <pinMode+0x20>
   d87a6:	29ff      	cmp	r1, #255	; 0xff
   d87a8:	d008      	beq.n	d87bc <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d87aa:	f7ff ffb9 	bl	d8720 <pinAvailable>
   d87ae:	b128      	cbz	r0, d87bc <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d87b0:	4629      	mov	r1, r5
   d87b2:	4620      	mov	r0, r4
}
   d87b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d87b8:	f7fe b976 	b.w	d6aa8 <HAL_Pin_Mode>
}
   d87bc:	bd38      	pop	{r3, r4, r5, pc}

000d87be <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d87be:	b510      	push	{r4, lr}
   d87c0:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d87c2:	f7fe f979 	bl	d6ab8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d87c6:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d87c8:	b2db      	uxtb	r3, r3
   d87ca:	2b01      	cmp	r3, #1
   d87cc:	d908      	bls.n	d87e0 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d87ce:	4620      	mov	r0, r4
   d87d0:	f7ff ffa6 	bl	d8720 <pinAvailable>
   d87d4:	b120      	cbz	r0, d87e0 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d87d6:	4620      	mov	r0, r4
}
   d87d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d87dc:	f7fe b974 	b.w	d6ac8 <HAL_GPIO_Read>
}
   d87e0:	2000      	movs	r0, #0
   d87e2:	bd10      	pop	{r4, pc}

000d87e4 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d87e4:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d87e6:	2300      	movs	r3, #0
   d87e8:	2520      	movs	r5, #32
   d87ea:	8043      	strh	r3, [r0, #2]
   d87ec:	2314      	movs	r3, #20
{
   d87ee:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d87f0:	8003      	strh	r3, [r0, #0]
   d87f2:	6085      	str	r5, [r0, #8]
   d87f4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d87f6:	4906      	ldr	r1, [pc, #24]	; (d8810 <_Z17acquireWireBufferv+0x2c>)
   d87f8:	4628      	mov	r0, r5
   d87fa:	f000 f87c 	bl	d88f6 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d87fe:	4904      	ldr	r1, [pc, #16]	; (d8810 <_Z17acquireWireBufferv+0x2c>)
	};
   d8800:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8802:	4628      	mov	r0, r5
   d8804:	f000 f877 	bl	d88f6 <_ZnajRKSt9nothrow_t>
	};
   d8808:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d880a:	4620      	mov	r0, r4
   d880c:	bd38      	pop	{r3, r4, r5, pc}
   d880e:	bf00      	nop
   d8810:	000d9c50 	.word	0x000d9c50

000d8814 <_Z18acquireWire1Bufferv>:
   d8814:	b538      	push	{r3, r4, r5, lr}
   d8816:	2300      	movs	r3, #0
   d8818:	2520      	movs	r5, #32
   d881a:	8043      	strh	r3, [r0, #2]
   d881c:	2314      	movs	r3, #20
   d881e:	4604      	mov	r4, r0
   d8820:	8003      	strh	r3, [r0, #0]
   d8822:	6085      	str	r5, [r0, #8]
   d8824:	6105      	str	r5, [r0, #16]
   d8826:	4906      	ldr	r1, [pc, #24]	; (d8840 <_Z18acquireWire1Bufferv+0x2c>)
   d8828:	4628      	mov	r0, r5
   d882a:	f000 f864 	bl	d88f6 <_ZnajRKSt9nothrow_t>
   d882e:	4904      	ldr	r1, [pc, #16]	; (d8840 <_Z18acquireWire1Bufferv+0x2c>)
   d8830:	6060      	str	r0, [r4, #4]
   d8832:	4628      	mov	r0, r5
   d8834:	f000 f85f 	bl	d88f6 <_ZnajRKSt9nothrow_t>
   d8838:	60e0      	str	r0, [r4, #12]
   d883a:	4620      	mov	r0, r4
   d883c:	bd38      	pop	{r3, r4, r5, pc}
   d883e:	bf00      	nop
   d8840:	000d9c50 	.word	0x000d9c50

000d8844 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8844:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8846:	4d0f      	ldr	r5, [pc, #60]	; (d8884 <_Z19__fetch_global_Wirev+0x40>)
   d8848:	7829      	ldrb	r1, [r5, #0]
   d884a:	f3bf 8f5b 	dmb	ish
   d884e:	f011 0401 	ands.w	r4, r1, #1
{
   d8852:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8854:	d113      	bne.n	d887e <_Z19__fetch_global_Wirev+0x3a>
   d8856:	4628      	mov	r0, r5
   d8858:	f7fb fc2e 	bl	d40b8 <__cxa_guard_acquire>
   d885c:	b178      	cbz	r0, d887e <_Z19__fetch_global_Wirev+0x3a>
   d885e:	a801      	add	r0, sp, #4
   d8860:	f7ff ffc0 	bl	d87e4 <_Z17acquireWireBufferv>
   d8864:	aa01      	add	r2, sp, #4
   d8866:	4621      	mov	r1, r4
   d8868:	4807      	ldr	r0, [pc, #28]	; (d8888 <_Z19__fetch_global_Wirev+0x44>)
   d886a:	f7fe ffe3 	bl	d7834 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d886e:	4628      	mov	r0, r5
   d8870:	f7fb fc27 	bl	d40c2 <__cxa_guard_release>
   d8874:	4a05      	ldr	r2, [pc, #20]	; (d888c <_Z19__fetch_global_Wirev+0x48>)
   d8876:	4906      	ldr	r1, [pc, #24]	; (d8890 <_Z19__fetch_global_Wirev+0x4c>)
   d8878:	4803      	ldr	r0, [pc, #12]	; (d8888 <_Z19__fetch_global_Wirev+0x44>)
   d887a:	f000 f833 	bl	d88e4 <__aeabi_atexit>
	return wire;
}
   d887e:	4802      	ldr	r0, [pc, #8]	; (d8888 <_Z19__fetch_global_Wirev+0x44>)
   d8880:	b007      	add	sp, #28
   d8882:	bd30      	pop	{r4, r5, pc}
   d8884:	2003e7c0 	.word	0x2003e7c0
   d8888:	2003e7c8 	.word	0x2003e7c8
   d888c:	2003e3a8 	.word	0x2003e3a8
   d8890:	000d77dd 	.word	0x000d77dd

000d8894 <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d8894:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d8896:	4c0f      	ldr	r4, [pc, #60]	; (d88d4 <_Z20__fetch_global_Wire1v+0x40>)
   d8898:	7823      	ldrb	r3, [r4, #0]
   d889a:	f3bf 8f5b 	dmb	ish
   d889e:	07db      	lsls	r3, r3, #31
{
   d88a0:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d88a2:	d413      	bmi.n	d88cc <_Z20__fetch_global_Wire1v+0x38>
   d88a4:	4620      	mov	r0, r4
   d88a6:	f7fb fc07 	bl	d40b8 <__cxa_guard_acquire>
   d88aa:	b178      	cbz	r0, d88cc <_Z20__fetch_global_Wire1v+0x38>
   d88ac:	a801      	add	r0, sp, #4
   d88ae:	f7ff ffb1 	bl	d8814 <_Z18acquireWire1Bufferv>
   d88b2:	aa01      	add	r2, sp, #4
   d88b4:	2101      	movs	r1, #1
   d88b6:	4808      	ldr	r0, [pc, #32]	; (d88d8 <_Z20__fetch_global_Wire1v+0x44>)
   d88b8:	f7fe ffbc 	bl	d7834 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d88bc:	4620      	mov	r0, r4
   d88be:	f7fb fc00 	bl	d40c2 <__cxa_guard_release>
   d88c2:	4a06      	ldr	r2, [pc, #24]	; (d88dc <_Z20__fetch_global_Wire1v+0x48>)
   d88c4:	4906      	ldr	r1, [pc, #24]	; (d88e0 <_Z20__fetch_global_Wire1v+0x4c>)
   d88c6:	4804      	ldr	r0, [pc, #16]	; (d88d8 <_Z20__fetch_global_Wire1v+0x44>)
   d88c8:	f000 f80c 	bl	d88e4 <__aeabi_atexit>
	return wire;
}
   d88cc:	4802      	ldr	r0, [pc, #8]	; (d88d8 <_Z20__fetch_global_Wire1v+0x44>)
   d88ce:	b006      	add	sp, #24
   d88d0:	bd10      	pop	{r4, pc}
   d88d2:	bf00      	nop
   d88d4:	2003e7c4 	.word	0x2003e7c4
   d88d8:	2003e7dc 	.word	0x2003e7dc
   d88dc:	2003e3a8 	.word	0x2003e3a8
   d88e0:	000d77dd 	.word	0x000d77dd

000d88e4 <__aeabi_atexit>:
   d88e4:	460b      	mov	r3, r1
   d88e6:	4601      	mov	r1, r0
   d88e8:	4618      	mov	r0, r3
   d88ea:	f000 bc51 	b.w	d9190 <__cxa_atexit>

000d88ee <_ZdlPvj>:
   d88ee:	f7fb bbd6 	b.w	d409e <_ZdlPv>

000d88f2 <_ZnwjRKSt9nothrow_t>:
   d88f2:	f7fb bbd0 	b.w	d4096 <_Znwj>

000d88f6 <_ZnajRKSt9nothrow_t>:
   d88f6:	f7fb bbd0 	b.w	d409a <_Znaj>

000d88fa <_ZSt25__throw_bad_function_callv>:
   d88fa:	b508      	push	{r3, lr}
   d88fc:	f7fe fb6e 	bl	d6fdc <abort>

000d8900 <__aeabi_drsub>:
   d8900:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8904:	e002      	b.n	d890c <__adddf3>
   d8906:	bf00      	nop

000d8908 <__aeabi_dsub>:
   d8908:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d890c <__adddf3>:
   d890c:	b530      	push	{r4, r5, lr}
   d890e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8912:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8916:	ea94 0f05 	teq	r4, r5
   d891a:	bf08      	it	eq
   d891c:	ea90 0f02 	teqeq	r0, r2
   d8920:	bf1f      	itttt	ne
   d8922:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8926:	ea55 0c02 	orrsne.w	ip, r5, r2
   d892a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d892e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8932:	f000 80e2 	beq.w	d8afa <__adddf3+0x1ee>
   d8936:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d893a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d893e:	bfb8      	it	lt
   d8940:	426d      	neglt	r5, r5
   d8942:	dd0c      	ble.n	d895e <__adddf3+0x52>
   d8944:	442c      	add	r4, r5
   d8946:	ea80 0202 	eor.w	r2, r0, r2
   d894a:	ea81 0303 	eor.w	r3, r1, r3
   d894e:	ea82 0000 	eor.w	r0, r2, r0
   d8952:	ea83 0101 	eor.w	r1, r3, r1
   d8956:	ea80 0202 	eor.w	r2, r0, r2
   d895a:	ea81 0303 	eor.w	r3, r1, r3
   d895e:	2d36      	cmp	r5, #54	; 0x36
   d8960:	bf88      	it	hi
   d8962:	bd30      	pophi	{r4, r5, pc}
   d8964:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8968:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d896c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8970:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8974:	d002      	beq.n	d897c <__adddf3+0x70>
   d8976:	4240      	negs	r0, r0
   d8978:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d897c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8980:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8984:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8988:	d002      	beq.n	d8990 <__adddf3+0x84>
   d898a:	4252      	negs	r2, r2
   d898c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8990:	ea94 0f05 	teq	r4, r5
   d8994:	f000 80a7 	beq.w	d8ae6 <__adddf3+0x1da>
   d8998:	f1a4 0401 	sub.w	r4, r4, #1
   d899c:	f1d5 0e20 	rsbs	lr, r5, #32
   d89a0:	db0d      	blt.n	d89be <__adddf3+0xb2>
   d89a2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d89a6:	fa22 f205 	lsr.w	r2, r2, r5
   d89aa:	1880      	adds	r0, r0, r2
   d89ac:	f141 0100 	adc.w	r1, r1, #0
   d89b0:	fa03 f20e 	lsl.w	r2, r3, lr
   d89b4:	1880      	adds	r0, r0, r2
   d89b6:	fa43 f305 	asr.w	r3, r3, r5
   d89ba:	4159      	adcs	r1, r3
   d89bc:	e00e      	b.n	d89dc <__adddf3+0xd0>
   d89be:	f1a5 0520 	sub.w	r5, r5, #32
   d89c2:	f10e 0e20 	add.w	lr, lr, #32
   d89c6:	2a01      	cmp	r2, #1
   d89c8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d89cc:	bf28      	it	cs
   d89ce:	f04c 0c02 	orrcs.w	ip, ip, #2
   d89d2:	fa43 f305 	asr.w	r3, r3, r5
   d89d6:	18c0      	adds	r0, r0, r3
   d89d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d89dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d89e0:	d507      	bpl.n	d89f2 <__adddf3+0xe6>
   d89e2:	f04f 0e00 	mov.w	lr, #0
   d89e6:	f1dc 0c00 	rsbs	ip, ip, #0
   d89ea:	eb7e 0000 	sbcs.w	r0, lr, r0
   d89ee:	eb6e 0101 	sbc.w	r1, lr, r1
   d89f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d89f6:	d31b      	bcc.n	d8a30 <__adddf3+0x124>
   d89f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d89fc:	d30c      	bcc.n	d8a18 <__adddf3+0x10c>
   d89fe:	0849      	lsrs	r1, r1, #1
   d8a00:	ea5f 0030 	movs.w	r0, r0, rrx
   d8a04:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8a08:	f104 0401 	add.w	r4, r4, #1
   d8a0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8a10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8a14:	f080 809a 	bcs.w	d8b4c <__adddf3+0x240>
   d8a18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8a1c:	bf08      	it	eq
   d8a1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8a22:	f150 0000 	adcs.w	r0, r0, #0
   d8a26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8a2a:	ea41 0105 	orr.w	r1, r1, r5
   d8a2e:	bd30      	pop	{r4, r5, pc}
   d8a30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8a34:	4140      	adcs	r0, r0
   d8a36:	eb41 0101 	adc.w	r1, r1, r1
   d8a3a:	3c01      	subs	r4, #1
   d8a3c:	bf28      	it	cs
   d8a3e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8a42:	d2e9      	bcs.n	d8a18 <__adddf3+0x10c>
   d8a44:	f091 0f00 	teq	r1, #0
   d8a48:	bf04      	itt	eq
   d8a4a:	4601      	moveq	r1, r0
   d8a4c:	2000      	moveq	r0, #0
   d8a4e:	fab1 f381 	clz	r3, r1
   d8a52:	bf08      	it	eq
   d8a54:	3320      	addeq	r3, #32
   d8a56:	f1a3 030b 	sub.w	r3, r3, #11
   d8a5a:	f1b3 0220 	subs.w	r2, r3, #32
   d8a5e:	da0c      	bge.n	d8a7a <__adddf3+0x16e>
   d8a60:	320c      	adds	r2, #12
   d8a62:	dd08      	ble.n	d8a76 <__adddf3+0x16a>
   d8a64:	f102 0c14 	add.w	ip, r2, #20
   d8a68:	f1c2 020c 	rsb	r2, r2, #12
   d8a6c:	fa01 f00c 	lsl.w	r0, r1, ip
   d8a70:	fa21 f102 	lsr.w	r1, r1, r2
   d8a74:	e00c      	b.n	d8a90 <__adddf3+0x184>
   d8a76:	f102 0214 	add.w	r2, r2, #20
   d8a7a:	bfd8      	it	le
   d8a7c:	f1c2 0c20 	rsble	ip, r2, #32
   d8a80:	fa01 f102 	lsl.w	r1, r1, r2
   d8a84:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8a88:	bfdc      	itt	le
   d8a8a:	ea41 010c 	orrle.w	r1, r1, ip
   d8a8e:	4090      	lslle	r0, r2
   d8a90:	1ae4      	subs	r4, r4, r3
   d8a92:	bfa2      	ittt	ge
   d8a94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8a98:	4329      	orrge	r1, r5
   d8a9a:	bd30      	popge	{r4, r5, pc}
   d8a9c:	ea6f 0404 	mvn.w	r4, r4
   d8aa0:	3c1f      	subs	r4, #31
   d8aa2:	da1c      	bge.n	d8ade <__adddf3+0x1d2>
   d8aa4:	340c      	adds	r4, #12
   d8aa6:	dc0e      	bgt.n	d8ac6 <__adddf3+0x1ba>
   d8aa8:	f104 0414 	add.w	r4, r4, #20
   d8aac:	f1c4 0220 	rsb	r2, r4, #32
   d8ab0:	fa20 f004 	lsr.w	r0, r0, r4
   d8ab4:	fa01 f302 	lsl.w	r3, r1, r2
   d8ab8:	ea40 0003 	orr.w	r0, r0, r3
   d8abc:	fa21 f304 	lsr.w	r3, r1, r4
   d8ac0:	ea45 0103 	orr.w	r1, r5, r3
   d8ac4:	bd30      	pop	{r4, r5, pc}
   d8ac6:	f1c4 040c 	rsb	r4, r4, #12
   d8aca:	f1c4 0220 	rsb	r2, r4, #32
   d8ace:	fa20 f002 	lsr.w	r0, r0, r2
   d8ad2:	fa01 f304 	lsl.w	r3, r1, r4
   d8ad6:	ea40 0003 	orr.w	r0, r0, r3
   d8ada:	4629      	mov	r1, r5
   d8adc:	bd30      	pop	{r4, r5, pc}
   d8ade:	fa21 f004 	lsr.w	r0, r1, r4
   d8ae2:	4629      	mov	r1, r5
   d8ae4:	bd30      	pop	{r4, r5, pc}
   d8ae6:	f094 0f00 	teq	r4, #0
   d8aea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8aee:	bf06      	itte	eq
   d8af0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8af4:	3401      	addeq	r4, #1
   d8af6:	3d01      	subne	r5, #1
   d8af8:	e74e      	b.n	d8998 <__adddf3+0x8c>
   d8afa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8afe:	bf18      	it	ne
   d8b00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8b04:	d029      	beq.n	d8b5a <__adddf3+0x24e>
   d8b06:	ea94 0f05 	teq	r4, r5
   d8b0a:	bf08      	it	eq
   d8b0c:	ea90 0f02 	teqeq	r0, r2
   d8b10:	d005      	beq.n	d8b1e <__adddf3+0x212>
   d8b12:	ea54 0c00 	orrs.w	ip, r4, r0
   d8b16:	bf04      	itt	eq
   d8b18:	4619      	moveq	r1, r3
   d8b1a:	4610      	moveq	r0, r2
   d8b1c:	bd30      	pop	{r4, r5, pc}
   d8b1e:	ea91 0f03 	teq	r1, r3
   d8b22:	bf1e      	ittt	ne
   d8b24:	2100      	movne	r1, #0
   d8b26:	2000      	movne	r0, #0
   d8b28:	bd30      	popne	{r4, r5, pc}
   d8b2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8b2e:	d105      	bne.n	d8b3c <__adddf3+0x230>
   d8b30:	0040      	lsls	r0, r0, #1
   d8b32:	4149      	adcs	r1, r1
   d8b34:	bf28      	it	cs
   d8b36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8b3a:	bd30      	pop	{r4, r5, pc}
   d8b3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8b40:	bf3c      	itt	cc
   d8b42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8b46:	bd30      	popcc	{r4, r5, pc}
   d8b48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8b4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8b50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8b54:	f04f 0000 	mov.w	r0, #0
   d8b58:	bd30      	pop	{r4, r5, pc}
   d8b5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8b5e:	bf1a      	itte	ne
   d8b60:	4619      	movne	r1, r3
   d8b62:	4610      	movne	r0, r2
   d8b64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8b68:	bf1c      	itt	ne
   d8b6a:	460b      	movne	r3, r1
   d8b6c:	4602      	movne	r2, r0
   d8b6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8b72:	bf06      	itte	eq
   d8b74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8b78:	ea91 0f03 	teqeq	r1, r3
   d8b7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8b80:	bd30      	pop	{r4, r5, pc}
   d8b82:	bf00      	nop

000d8b84 <__aeabi_ui2d>:
   d8b84:	f090 0f00 	teq	r0, #0
   d8b88:	bf04      	itt	eq
   d8b8a:	2100      	moveq	r1, #0
   d8b8c:	4770      	bxeq	lr
   d8b8e:	b530      	push	{r4, r5, lr}
   d8b90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8b94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8b98:	f04f 0500 	mov.w	r5, #0
   d8b9c:	f04f 0100 	mov.w	r1, #0
   d8ba0:	e750      	b.n	d8a44 <__adddf3+0x138>
   d8ba2:	bf00      	nop

000d8ba4 <__aeabi_i2d>:
   d8ba4:	f090 0f00 	teq	r0, #0
   d8ba8:	bf04      	itt	eq
   d8baa:	2100      	moveq	r1, #0
   d8bac:	4770      	bxeq	lr
   d8bae:	b530      	push	{r4, r5, lr}
   d8bb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8bb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8bb8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8bbc:	bf48      	it	mi
   d8bbe:	4240      	negmi	r0, r0
   d8bc0:	f04f 0100 	mov.w	r1, #0
   d8bc4:	e73e      	b.n	d8a44 <__adddf3+0x138>
   d8bc6:	bf00      	nop

000d8bc8 <__aeabi_f2d>:
   d8bc8:	0042      	lsls	r2, r0, #1
   d8bca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8bce:	ea4f 0131 	mov.w	r1, r1, rrx
   d8bd2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8bd6:	bf1f      	itttt	ne
   d8bd8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8bdc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8be0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8be4:	4770      	bxne	lr
   d8be6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8bea:	bf08      	it	eq
   d8bec:	4770      	bxeq	lr
   d8bee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8bf2:	bf04      	itt	eq
   d8bf4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8bf8:	4770      	bxeq	lr
   d8bfa:	b530      	push	{r4, r5, lr}
   d8bfc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8c00:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8c04:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8c08:	e71c      	b.n	d8a44 <__adddf3+0x138>
   d8c0a:	bf00      	nop

000d8c0c <__aeabi_ul2d>:
   d8c0c:	ea50 0201 	orrs.w	r2, r0, r1
   d8c10:	bf08      	it	eq
   d8c12:	4770      	bxeq	lr
   d8c14:	b530      	push	{r4, r5, lr}
   d8c16:	f04f 0500 	mov.w	r5, #0
   d8c1a:	e00a      	b.n	d8c32 <__aeabi_l2d+0x16>

000d8c1c <__aeabi_l2d>:
   d8c1c:	ea50 0201 	orrs.w	r2, r0, r1
   d8c20:	bf08      	it	eq
   d8c22:	4770      	bxeq	lr
   d8c24:	b530      	push	{r4, r5, lr}
   d8c26:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8c2a:	d502      	bpl.n	d8c32 <__aeabi_l2d+0x16>
   d8c2c:	4240      	negs	r0, r0
   d8c2e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8c32:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8c36:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8c3a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8c3e:	f43f aed8 	beq.w	d89f2 <__adddf3+0xe6>
   d8c42:	f04f 0203 	mov.w	r2, #3
   d8c46:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8c4a:	bf18      	it	ne
   d8c4c:	3203      	addne	r2, #3
   d8c4e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8c52:	bf18      	it	ne
   d8c54:	3203      	addne	r2, #3
   d8c56:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8c5a:	f1c2 0320 	rsb	r3, r2, #32
   d8c5e:	fa00 fc03 	lsl.w	ip, r0, r3
   d8c62:	fa20 f002 	lsr.w	r0, r0, r2
   d8c66:	fa01 fe03 	lsl.w	lr, r1, r3
   d8c6a:	ea40 000e 	orr.w	r0, r0, lr
   d8c6e:	fa21 f102 	lsr.w	r1, r1, r2
   d8c72:	4414      	add	r4, r2
   d8c74:	e6bd      	b.n	d89f2 <__adddf3+0xe6>
   d8c76:	bf00      	nop

000d8c78 <__aeabi_dmul>:
   d8c78:	b570      	push	{r4, r5, r6, lr}
   d8c7a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8c7e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8c82:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8c86:	bf1d      	ittte	ne
   d8c88:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8c8c:	ea94 0f0c 	teqne	r4, ip
   d8c90:	ea95 0f0c 	teqne	r5, ip
   d8c94:	f000 f8de 	bleq	d8e54 <__aeabi_dmul+0x1dc>
   d8c98:	442c      	add	r4, r5
   d8c9a:	ea81 0603 	eor.w	r6, r1, r3
   d8c9e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8ca2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8ca6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8caa:	bf18      	it	ne
   d8cac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8cb0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8cb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8cb8:	d038      	beq.n	d8d2c <__aeabi_dmul+0xb4>
   d8cba:	fba0 ce02 	umull	ip, lr, r0, r2
   d8cbe:	f04f 0500 	mov.w	r5, #0
   d8cc2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8cc6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8cca:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8cce:	f04f 0600 	mov.w	r6, #0
   d8cd2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8cd6:	f09c 0f00 	teq	ip, #0
   d8cda:	bf18      	it	ne
   d8cdc:	f04e 0e01 	orrne.w	lr, lr, #1
   d8ce0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8ce4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8ce8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8cec:	d204      	bcs.n	d8cf8 <__aeabi_dmul+0x80>
   d8cee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8cf2:	416d      	adcs	r5, r5
   d8cf4:	eb46 0606 	adc.w	r6, r6, r6
   d8cf8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8cfc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8d00:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8d04:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8d08:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8d0c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8d10:	bf88      	it	hi
   d8d12:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8d16:	d81e      	bhi.n	d8d56 <__aeabi_dmul+0xde>
   d8d18:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8d1c:	bf08      	it	eq
   d8d1e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8d22:	f150 0000 	adcs.w	r0, r0, #0
   d8d26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8d2a:	bd70      	pop	{r4, r5, r6, pc}
   d8d2c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8d30:	ea46 0101 	orr.w	r1, r6, r1
   d8d34:	ea40 0002 	orr.w	r0, r0, r2
   d8d38:	ea81 0103 	eor.w	r1, r1, r3
   d8d3c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8d40:	bfc2      	ittt	gt
   d8d42:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8d46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8d4a:	bd70      	popgt	{r4, r5, r6, pc}
   d8d4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8d50:	f04f 0e00 	mov.w	lr, #0
   d8d54:	3c01      	subs	r4, #1
   d8d56:	f300 80ab 	bgt.w	d8eb0 <__aeabi_dmul+0x238>
   d8d5a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8d5e:	bfde      	ittt	le
   d8d60:	2000      	movle	r0, #0
   d8d62:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8d66:	bd70      	pople	{r4, r5, r6, pc}
   d8d68:	f1c4 0400 	rsb	r4, r4, #0
   d8d6c:	3c20      	subs	r4, #32
   d8d6e:	da35      	bge.n	d8ddc <__aeabi_dmul+0x164>
   d8d70:	340c      	adds	r4, #12
   d8d72:	dc1b      	bgt.n	d8dac <__aeabi_dmul+0x134>
   d8d74:	f104 0414 	add.w	r4, r4, #20
   d8d78:	f1c4 0520 	rsb	r5, r4, #32
   d8d7c:	fa00 f305 	lsl.w	r3, r0, r5
   d8d80:	fa20 f004 	lsr.w	r0, r0, r4
   d8d84:	fa01 f205 	lsl.w	r2, r1, r5
   d8d88:	ea40 0002 	orr.w	r0, r0, r2
   d8d8c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8d90:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8d94:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8d98:	fa21 f604 	lsr.w	r6, r1, r4
   d8d9c:	eb42 0106 	adc.w	r1, r2, r6
   d8da0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8da4:	bf08      	it	eq
   d8da6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8daa:	bd70      	pop	{r4, r5, r6, pc}
   d8dac:	f1c4 040c 	rsb	r4, r4, #12
   d8db0:	f1c4 0520 	rsb	r5, r4, #32
   d8db4:	fa00 f304 	lsl.w	r3, r0, r4
   d8db8:	fa20 f005 	lsr.w	r0, r0, r5
   d8dbc:	fa01 f204 	lsl.w	r2, r1, r4
   d8dc0:	ea40 0002 	orr.w	r0, r0, r2
   d8dc4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8dc8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8dcc:	f141 0100 	adc.w	r1, r1, #0
   d8dd0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8dd4:	bf08      	it	eq
   d8dd6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8dda:	bd70      	pop	{r4, r5, r6, pc}
   d8ddc:	f1c4 0520 	rsb	r5, r4, #32
   d8de0:	fa00 f205 	lsl.w	r2, r0, r5
   d8de4:	ea4e 0e02 	orr.w	lr, lr, r2
   d8de8:	fa20 f304 	lsr.w	r3, r0, r4
   d8dec:	fa01 f205 	lsl.w	r2, r1, r5
   d8df0:	ea43 0302 	orr.w	r3, r3, r2
   d8df4:	fa21 f004 	lsr.w	r0, r1, r4
   d8df8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8dfc:	fa21 f204 	lsr.w	r2, r1, r4
   d8e00:	ea20 0002 	bic.w	r0, r0, r2
   d8e04:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8e08:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8e0c:	bf08      	it	eq
   d8e0e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8e12:	bd70      	pop	{r4, r5, r6, pc}
   d8e14:	f094 0f00 	teq	r4, #0
   d8e18:	d10f      	bne.n	d8e3a <__aeabi_dmul+0x1c2>
   d8e1a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8e1e:	0040      	lsls	r0, r0, #1
   d8e20:	eb41 0101 	adc.w	r1, r1, r1
   d8e24:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8e28:	bf08      	it	eq
   d8e2a:	3c01      	subeq	r4, #1
   d8e2c:	d0f7      	beq.n	d8e1e <__aeabi_dmul+0x1a6>
   d8e2e:	ea41 0106 	orr.w	r1, r1, r6
   d8e32:	f095 0f00 	teq	r5, #0
   d8e36:	bf18      	it	ne
   d8e38:	4770      	bxne	lr
   d8e3a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8e3e:	0052      	lsls	r2, r2, #1
   d8e40:	eb43 0303 	adc.w	r3, r3, r3
   d8e44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8e48:	bf08      	it	eq
   d8e4a:	3d01      	subeq	r5, #1
   d8e4c:	d0f7      	beq.n	d8e3e <__aeabi_dmul+0x1c6>
   d8e4e:	ea43 0306 	orr.w	r3, r3, r6
   d8e52:	4770      	bx	lr
   d8e54:	ea94 0f0c 	teq	r4, ip
   d8e58:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8e5c:	bf18      	it	ne
   d8e5e:	ea95 0f0c 	teqne	r5, ip
   d8e62:	d00c      	beq.n	d8e7e <__aeabi_dmul+0x206>
   d8e64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8e68:	bf18      	it	ne
   d8e6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8e6e:	d1d1      	bne.n	d8e14 <__aeabi_dmul+0x19c>
   d8e70:	ea81 0103 	eor.w	r1, r1, r3
   d8e74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8e78:	f04f 0000 	mov.w	r0, #0
   d8e7c:	bd70      	pop	{r4, r5, r6, pc}
   d8e7e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8e82:	bf06      	itte	eq
   d8e84:	4610      	moveq	r0, r2
   d8e86:	4619      	moveq	r1, r3
   d8e88:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8e8c:	d019      	beq.n	d8ec2 <__aeabi_dmul+0x24a>
   d8e8e:	ea94 0f0c 	teq	r4, ip
   d8e92:	d102      	bne.n	d8e9a <__aeabi_dmul+0x222>
   d8e94:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8e98:	d113      	bne.n	d8ec2 <__aeabi_dmul+0x24a>
   d8e9a:	ea95 0f0c 	teq	r5, ip
   d8e9e:	d105      	bne.n	d8eac <__aeabi_dmul+0x234>
   d8ea0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8ea4:	bf1c      	itt	ne
   d8ea6:	4610      	movne	r0, r2
   d8ea8:	4619      	movne	r1, r3
   d8eaa:	d10a      	bne.n	d8ec2 <__aeabi_dmul+0x24a>
   d8eac:	ea81 0103 	eor.w	r1, r1, r3
   d8eb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8eb4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8eb8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8ebc:	f04f 0000 	mov.w	r0, #0
   d8ec0:	bd70      	pop	{r4, r5, r6, pc}
   d8ec2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8ec6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8eca:	bd70      	pop	{r4, r5, r6, pc}

000d8ecc <__aeabi_ddiv>:
   d8ecc:	b570      	push	{r4, r5, r6, lr}
   d8ece:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8ed2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8ed6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8eda:	bf1d      	ittte	ne
   d8edc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8ee0:	ea94 0f0c 	teqne	r4, ip
   d8ee4:	ea95 0f0c 	teqne	r5, ip
   d8ee8:	f000 f8a7 	bleq	d903a <__aeabi_ddiv+0x16e>
   d8eec:	eba4 0405 	sub.w	r4, r4, r5
   d8ef0:	ea81 0e03 	eor.w	lr, r1, r3
   d8ef4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8ef8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8efc:	f000 8088 	beq.w	d9010 <__aeabi_ddiv+0x144>
   d8f00:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8f04:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8f08:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8f0c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8f10:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8f14:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8f18:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8f1c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8f20:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8f24:	429d      	cmp	r5, r3
   d8f26:	bf08      	it	eq
   d8f28:	4296      	cmpeq	r6, r2
   d8f2a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8f2e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8f32:	d202      	bcs.n	d8f3a <__aeabi_ddiv+0x6e>
   d8f34:	085b      	lsrs	r3, r3, #1
   d8f36:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f3a:	1ab6      	subs	r6, r6, r2
   d8f3c:	eb65 0503 	sbc.w	r5, r5, r3
   d8f40:	085b      	lsrs	r3, r3, #1
   d8f42:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f46:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d8f4a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d8f4e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f52:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f56:	bf22      	ittt	cs
   d8f58:	1ab6      	subcs	r6, r6, r2
   d8f5a:	4675      	movcs	r5, lr
   d8f5c:	ea40 000c 	orrcs.w	r0, r0, ip
   d8f60:	085b      	lsrs	r3, r3, #1
   d8f62:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f66:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f6a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f6e:	bf22      	ittt	cs
   d8f70:	1ab6      	subcs	r6, r6, r2
   d8f72:	4675      	movcs	r5, lr
   d8f74:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d8f78:	085b      	lsrs	r3, r3, #1
   d8f7a:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f7e:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f82:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f86:	bf22      	ittt	cs
   d8f88:	1ab6      	subcs	r6, r6, r2
   d8f8a:	4675      	movcs	r5, lr
   d8f8c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d8f90:	085b      	lsrs	r3, r3, #1
   d8f92:	ea4f 0232 	mov.w	r2, r2, rrx
   d8f96:	ebb6 0e02 	subs.w	lr, r6, r2
   d8f9a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d8f9e:	bf22      	ittt	cs
   d8fa0:	1ab6      	subcs	r6, r6, r2
   d8fa2:	4675      	movcs	r5, lr
   d8fa4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d8fa8:	ea55 0e06 	orrs.w	lr, r5, r6
   d8fac:	d018      	beq.n	d8fe0 <__aeabi_ddiv+0x114>
   d8fae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d8fb2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d8fb6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d8fba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d8fbe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d8fc2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d8fc6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d8fca:	d1c0      	bne.n	d8f4e <__aeabi_ddiv+0x82>
   d8fcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8fd0:	d10b      	bne.n	d8fea <__aeabi_ddiv+0x11e>
   d8fd2:	ea41 0100 	orr.w	r1, r1, r0
   d8fd6:	f04f 0000 	mov.w	r0, #0
   d8fda:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d8fde:	e7b6      	b.n	d8f4e <__aeabi_ddiv+0x82>
   d8fe0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8fe4:	bf04      	itt	eq
   d8fe6:	4301      	orreq	r1, r0
   d8fe8:	2000      	moveq	r0, #0
   d8fea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8fee:	bf88      	it	hi
   d8ff0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8ff4:	f63f aeaf 	bhi.w	d8d56 <__aeabi_dmul+0xde>
   d8ff8:	ebb5 0c03 	subs.w	ip, r5, r3
   d8ffc:	bf04      	itt	eq
   d8ffe:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9002:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9006:	f150 0000 	adcs.w	r0, r0, #0
   d900a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d900e:	bd70      	pop	{r4, r5, r6, pc}
   d9010:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9014:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9018:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d901c:	bfc2      	ittt	gt
   d901e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9022:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9026:	bd70      	popgt	{r4, r5, r6, pc}
   d9028:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d902c:	f04f 0e00 	mov.w	lr, #0
   d9030:	3c01      	subs	r4, #1
   d9032:	e690      	b.n	d8d56 <__aeabi_dmul+0xde>
   d9034:	ea45 0e06 	orr.w	lr, r5, r6
   d9038:	e68d      	b.n	d8d56 <__aeabi_dmul+0xde>
   d903a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d903e:	ea94 0f0c 	teq	r4, ip
   d9042:	bf08      	it	eq
   d9044:	ea95 0f0c 	teqeq	r5, ip
   d9048:	f43f af3b 	beq.w	d8ec2 <__aeabi_dmul+0x24a>
   d904c:	ea94 0f0c 	teq	r4, ip
   d9050:	d10a      	bne.n	d9068 <__aeabi_ddiv+0x19c>
   d9052:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9056:	f47f af34 	bne.w	d8ec2 <__aeabi_dmul+0x24a>
   d905a:	ea95 0f0c 	teq	r5, ip
   d905e:	f47f af25 	bne.w	d8eac <__aeabi_dmul+0x234>
   d9062:	4610      	mov	r0, r2
   d9064:	4619      	mov	r1, r3
   d9066:	e72c      	b.n	d8ec2 <__aeabi_dmul+0x24a>
   d9068:	ea95 0f0c 	teq	r5, ip
   d906c:	d106      	bne.n	d907c <__aeabi_ddiv+0x1b0>
   d906e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9072:	f43f aefd 	beq.w	d8e70 <__aeabi_dmul+0x1f8>
   d9076:	4610      	mov	r0, r2
   d9078:	4619      	mov	r1, r3
   d907a:	e722      	b.n	d8ec2 <__aeabi_dmul+0x24a>
   d907c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9080:	bf18      	it	ne
   d9082:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9086:	f47f aec5 	bne.w	d8e14 <__aeabi_dmul+0x19c>
   d908a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d908e:	f47f af0d 	bne.w	d8eac <__aeabi_dmul+0x234>
   d9092:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9096:	f47f aeeb 	bne.w	d8e70 <__aeabi_dmul+0x1f8>
   d909a:	e712      	b.n	d8ec2 <__aeabi_dmul+0x24a>

000d909c <__aeabi_d2f>:
   d909c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d90a0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d90a4:	bf24      	itt	cs
   d90a6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d90aa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d90ae:	d90d      	bls.n	d90cc <__aeabi_d2f+0x30>
   d90b0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d90b4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d90b8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d90bc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d90c0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d90c4:	bf08      	it	eq
   d90c6:	f020 0001 	biceq.w	r0, r0, #1
   d90ca:	4770      	bx	lr
   d90cc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d90d0:	d121      	bne.n	d9116 <__aeabi_d2f+0x7a>
   d90d2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d90d6:	bfbc      	itt	lt
   d90d8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d90dc:	4770      	bxlt	lr
   d90de:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d90e2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d90e6:	f1c2 0218 	rsb	r2, r2, #24
   d90ea:	f1c2 0c20 	rsb	ip, r2, #32
   d90ee:	fa10 f30c 	lsls.w	r3, r0, ip
   d90f2:	fa20 f002 	lsr.w	r0, r0, r2
   d90f6:	bf18      	it	ne
   d90f8:	f040 0001 	orrne.w	r0, r0, #1
   d90fc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9100:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9104:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9108:	ea40 000c 	orr.w	r0, r0, ip
   d910c:	fa23 f302 	lsr.w	r3, r3, r2
   d9110:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9114:	e7cc      	b.n	d90b0 <__aeabi_d2f+0x14>
   d9116:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d911a:	d107      	bne.n	d912c <__aeabi_d2f+0x90>
   d911c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9120:	bf1e      	ittt	ne
   d9122:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9126:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d912a:	4770      	bxne	lr
   d912c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9130:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9134:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9138:	4770      	bx	lr
   d913a:	bf00      	nop

000d913c <asctime_r>:
   d913c:	b510      	push	{r4, lr}
   d913e:	460c      	mov	r4, r1
   d9140:	6941      	ldr	r1, [r0, #20]
   d9142:	6903      	ldr	r3, [r0, #16]
   d9144:	6982      	ldr	r2, [r0, #24]
   d9146:	b086      	sub	sp, #24
   d9148:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d914c:	9104      	str	r1, [sp, #16]
   d914e:	6801      	ldr	r1, [r0, #0]
   d9150:	9103      	str	r1, [sp, #12]
   d9152:	6841      	ldr	r1, [r0, #4]
   d9154:	9102      	str	r1, [sp, #8]
   d9156:	6881      	ldr	r1, [r0, #8]
   d9158:	9101      	str	r1, [sp, #4]
   d915a:	68c1      	ldr	r1, [r0, #12]
   d915c:	9100      	str	r1, [sp, #0]
   d915e:	4907      	ldr	r1, [pc, #28]	; (d917c <asctime_r+0x40>)
   d9160:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d9164:	440b      	add	r3, r1
   d9166:	4906      	ldr	r1, [pc, #24]	; (d9180 <asctime_r+0x44>)
   d9168:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d916c:	440a      	add	r2, r1
   d916e:	4620      	mov	r0, r4
   d9170:	4904      	ldr	r1, [pc, #16]	; (d9184 <asctime_r+0x48>)
   d9172:	f7fd ff23 	bl	d6fbc <siprintf>
   d9176:	4620      	mov	r0, r4
   d9178:	b006      	add	sp, #24
   d917a:	bd10      	pop	{r4, pc}
   d917c:	000d9c86 	.word	0x000d9c86
   d9180:	000d9c71 	.word	0x000d9c71
   d9184:	000d9c51 	.word	0x000d9c51

000d9188 <atoi>:
   d9188:	220a      	movs	r2, #10
   d918a:	2100      	movs	r1, #0
   d918c:	f000 b938 	b.w	d9400 <strtol>

000d9190 <__cxa_atexit>:
   d9190:	b510      	push	{r4, lr}
   d9192:	4c05      	ldr	r4, [pc, #20]	; (d91a8 <__cxa_atexit+0x18>)
   d9194:	4613      	mov	r3, r2
   d9196:	b12c      	cbz	r4, d91a4 <__cxa_atexit+0x14>
   d9198:	460a      	mov	r2, r1
   d919a:	4601      	mov	r1, r0
   d919c:	2002      	movs	r0, #2
   d919e:	f3af 8000 	nop.w
   d91a2:	bd10      	pop	{r4, pc}
   d91a4:	4620      	mov	r0, r4
   d91a6:	e7fc      	b.n	d91a2 <__cxa_atexit+0x12>
   d91a8:	00000000 	.word	0x00000000

000d91ac <gmtime>:
   d91ac:	b538      	push	{r3, r4, r5, lr}
   d91ae:	4b07      	ldr	r3, [pc, #28]	; (d91cc <gmtime+0x20>)
   d91b0:	681d      	ldr	r5, [r3, #0]
   d91b2:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   d91b4:	4604      	mov	r4, r0
   d91b6:	b91b      	cbnz	r3, d91c0 <gmtime+0x14>
   d91b8:	2024      	movs	r0, #36	; 0x24
   d91ba:	f7fd fee7 	bl	d6f8c <malloc>
   d91be:	63e8      	str	r0, [r5, #60]	; 0x3c
   d91c0:	6be9      	ldr	r1, [r5, #60]	; 0x3c
   d91c2:	4620      	mov	r0, r4
   d91c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d91c8:	f7fd bf30 	b.w	d702c <gmtime_r>
   d91cc:	2003e344 	.word	0x2003e344

000d91d0 <memcpy>:
   d91d0:	440a      	add	r2, r1
   d91d2:	4291      	cmp	r1, r2
   d91d4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d91d8:	d100      	bne.n	d91dc <memcpy+0xc>
   d91da:	4770      	bx	lr
   d91dc:	b510      	push	{r4, lr}
   d91de:	f811 4b01 	ldrb.w	r4, [r1], #1
   d91e2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d91e6:	4291      	cmp	r1, r2
   d91e8:	d1f9      	bne.n	d91de <memcpy+0xe>
   d91ea:	bd10      	pop	{r4, pc}

000d91ec <memmove>:
   d91ec:	4288      	cmp	r0, r1
   d91ee:	b510      	push	{r4, lr}
   d91f0:	eb01 0402 	add.w	r4, r1, r2
   d91f4:	d902      	bls.n	d91fc <memmove+0x10>
   d91f6:	4284      	cmp	r4, r0
   d91f8:	4623      	mov	r3, r4
   d91fa:	d807      	bhi.n	d920c <memmove+0x20>
   d91fc:	1e43      	subs	r3, r0, #1
   d91fe:	42a1      	cmp	r1, r4
   d9200:	d008      	beq.n	d9214 <memmove+0x28>
   d9202:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9206:	f803 2f01 	strb.w	r2, [r3, #1]!
   d920a:	e7f8      	b.n	d91fe <memmove+0x12>
   d920c:	4402      	add	r2, r0
   d920e:	4601      	mov	r1, r0
   d9210:	428a      	cmp	r2, r1
   d9212:	d100      	bne.n	d9216 <memmove+0x2a>
   d9214:	bd10      	pop	{r4, pc}
   d9216:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d921a:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d921e:	e7f7      	b.n	d9210 <memmove+0x24>

000d9220 <memset>:
   d9220:	4402      	add	r2, r0
   d9222:	4603      	mov	r3, r0
   d9224:	4293      	cmp	r3, r2
   d9226:	d100      	bne.n	d922a <memset+0xa>
   d9228:	4770      	bx	lr
   d922a:	f803 1b01 	strb.w	r1, [r3], #1
   d922e:	e7f9      	b.n	d9224 <memset+0x4>

000d9230 <srand>:
   d9230:	b538      	push	{r3, r4, r5, lr}
   d9232:	4b0d      	ldr	r3, [pc, #52]	; (d9268 <srand+0x38>)
   d9234:	681d      	ldr	r5, [r3, #0]
   d9236:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d9238:	4604      	mov	r4, r0
   d923a:	b97b      	cbnz	r3, d925c <srand+0x2c>
   d923c:	2018      	movs	r0, #24
   d923e:	f7fd fea5 	bl	d6f8c <malloc>
   d9242:	4a0a      	ldr	r2, [pc, #40]	; (d926c <srand+0x3c>)
   d9244:	4b0a      	ldr	r3, [pc, #40]	; (d9270 <srand+0x40>)
   d9246:	63a8      	str	r0, [r5, #56]	; 0x38
   d9248:	e9c0 2300 	strd	r2, r3, [r0]
   d924c:	4b09      	ldr	r3, [pc, #36]	; (d9274 <srand+0x44>)
   d924e:	6083      	str	r3, [r0, #8]
   d9250:	230b      	movs	r3, #11
   d9252:	8183      	strh	r3, [r0, #12]
   d9254:	2201      	movs	r2, #1
   d9256:	2300      	movs	r3, #0
   d9258:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d925c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d925e:	2200      	movs	r2, #0
   d9260:	611c      	str	r4, [r3, #16]
   d9262:	615a      	str	r2, [r3, #20]
   d9264:	bd38      	pop	{r3, r4, r5, pc}
   d9266:	bf00      	nop
   d9268:	2003e344 	.word	0x2003e344
   d926c:	abcd330e 	.word	0xabcd330e
   d9270:	e66d1234 	.word	0xe66d1234
   d9274:	0005deec 	.word	0x0005deec

000d9278 <strcmp>:
   d9278:	f810 2b01 	ldrb.w	r2, [r0], #1
   d927c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9280:	2a01      	cmp	r2, #1
   d9282:	bf28      	it	cs
   d9284:	429a      	cmpcs	r2, r3
   d9286:	d0f7      	beq.n	d9278 <strcmp>
   d9288:	1ad0      	subs	r0, r2, r3
   d928a:	4770      	bx	lr

000d928c <strcpy>:
   d928c:	4603      	mov	r3, r0
   d928e:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9292:	f803 2b01 	strb.w	r2, [r3], #1
   d9296:	2a00      	cmp	r2, #0
   d9298:	d1f9      	bne.n	d928e <strcpy+0x2>
   d929a:	4770      	bx	lr

000d929c <strdup>:
   d929c:	4b02      	ldr	r3, [pc, #8]	; (d92a8 <strdup+0xc>)
   d929e:	4601      	mov	r1, r0
   d92a0:	6818      	ldr	r0, [r3, #0]
   d92a2:	f000 b803 	b.w	d92ac <_strdup_r>
   d92a6:	bf00      	nop
   d92a8:	2003e344 	.word	0x2003e344

000d92ac <_strdup_r>:
   d92ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d92ae:	4604      	mov	r4, r0
   d92b0:	4608      	mov	r0, r1
   d92b2:	460d      	mov	r5, r1
   d92b4:	f000 f80f 	bl	d92d6 <strlen>
   d92b8:	1c42      	adds	r2, r0, #1
   d92ba:	4611      	mov	r1, r2
   d92bc:	4620      	mov	r0, r4
   d92be:	9201      	str	r2, [sp, #4]
   d92c0:	f7fd fe94 	bl	d6fec <_malloc_r>
   d92c4:	4604      	mov	r4, r0
   d92c6:	b118      	cbz	r0, d92d0 <_strdup_r+0x24>
   d92c8:	9a01      	ldr	r2, [sp, #4]
   d92ca:	4629      	mov	r1, r5
   d92cc:	f7ff ff80 	bl	d91d0 <memcpy>
   d92d0:	4620      	mov	r0, r4
   d92d2:	b003      	add	sp, #12
   d92d4:	bd30      	pop	{r4, r5, pc}

000d92d6 <strlen>:
   d92d6:	4603      	mov	r3, r0
   d92d8:	f813 2b01 	ldrb.w	r2, [r3], #1
   d92dc:	2a00      	cmp	r2, #0
   d92de:	d1fb      	bne.n	d92d8 <strlen+0x2>
   d92e0:	1a18      	subs	r0, r3, r0
   d92e2:	3801      	subs	r0, #1
   d92e4:	4770      	bx	lr

000d92e6 <strncpy>:
   d92e6:	b510      	push	{r4, lr}
   d92e8:	3901      	subs	r1, #1
   d92ea:	4603      	mov	r3, r0
   d92ec:	b132      	cbz	r2, d92fc <strncpy+0x16>
   d92ee:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d92f2:	f803 4b01 	strb.w	r4, [r3], #1
   d92f6:	3a01      	subs	r2, #1
   d92f8:	2c00      	cmp	r4, #0
   d92fa:	d1f7      	bne.n	d92ec <strncpy+0x6>
   d92fc:	441a      	add	r2, r3
   d92fe:	2100      	movs	r1, #0
   d9300:	4293      	cmp	r3, r2
   d9302:	d100      	bne.n	d9306 <strncpy+0x20>
   d9304:	bd10      	pop	{r4, pc}
   d9306:	f803 1b01 	strb.w	r1, [r3], #1
   d930a:	e7f9      	b.n	d9300 <strncpy+0x1a>

000d930c <_strtol_l.isra.0>:
   d930c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9310:	4e3a      	ldr	r6, [pc, #232]	; (d93fc <_strtol_l.isra.0+0xf0>)
   d9312:	4686      	mov	lr, r0
   d9314:	468c      	mov	ip, r1
   d9316:	4660      	mov	r0, ip
   d9318:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d931c:	5da5      	ldrb	r5, [r4, r6]
   d931e:	f015 0508 	ands.w	r5, r5, #8
   d9322:	d1f8      	bne.n	d9316 <_strtol_l.isra.0+0xa>
   d9324:	2c2d      	cmp	r4, #45	; 0x2d
   d9326:	d133      	bne.n	d9390 <_strtol_l.isra.0+0x84>
   d9328:	f89c 4000 	ldrb.w	r4, [ip]
   d932c:	f04f 0801 	mov.w	r8, #1
   d9330:	f100 0c02 	add.w	ip, r0, #2
   d9334:	2b00      	cmp	r3, #0
   d9336:	d05c      	beq.n	d93f2 <_strtol_l.isra.0+0xe6>
   d9338:	2b10      	cmp	r3, #16
   d933a:	d10c      	bne.n	d9356 <_strtol_l.isra.0+0x4a>
   d933c:	2c30      	cmp	r4, #48	; 0x30
   d933e:	d10a      	bne.n	d9356 <_strtol_l.isra.0+0x4a>
   d9340:	f89c 0000 	ldrb.w	r0, [ip]
   d9344:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d9348:	2858      	cmp	r0, #88	; 0x58
   d934a:	d14d      	bne.n	d93e8 <_strtol_l.isra.0+0xdc>
   d934c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d9350:	2310      	movs	r3, #16
   d9352:	f10c 0c02 	add.w	ip, ip, #2
   d9356:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d935a:	3f01      	subs	r7, #1
   d935c:	2600      	movs	r6, #0
   d935e:	fbb7 f9f3 	udiv	r9, r7, r3
   d9362:	4630      	mov	r0, r6
   d9364:	fb03 7a19 	mls	sl, r3, r9, r7
   d9368:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d936c:	2d09      	cmp	r5, #9
   d936e:	d818      	bhi.n	d93a2 <_strtol_l.isra.0+0x96>
   d9370:	462c      	mov	r4, r5
   d9372:	42a3      	cmp	r3, r4
   d9374:	dd24      	ble.n	d93c0 <_strtol_l.isra.0+0xb4>
   d9376:	1c75      	adds	r5, r6, #1
   d9378:	d007      	beq.n	d938a <_strtol_l.isra.0+0x7e>
   d937a:	4581      	cmp	r9, r0
   d937c:	d31d      	bcc.n	d93ba <_strtol_l.isra.0+0xae>
   d937e:	d101      	bne.n	d9384 <_strtol_l.isra.0+0x78>
   d9380:	45a2      	cmp	sl, r4
   d9382:	db1a      	blt.n	d93ba <_strtol_l.isra.0+0xae>
   d9384:	fb00 4003 	mla	r0, r0, r3, r4
   d9388:	2601      	movs	r6, #1
   d938a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d938e:	e7eb      	b.n	d9368 <_strtol_l.isra.0+0x5c>
   d9390:	2c2b      	cmp	r4, #43	; 0x2b
   d9392:	bf08      	it	eq
   d9394:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9398:	46a8      	mov	r8, r5
   d939a:	bf08      	it	eq
   d939c:	f100 0c02 	addeq.w	ip, r0, #2
   d93a0:	e7c8      	b.n	d9334 <_strtol_l.isra.0+0x28>
   d93a2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d93a6:	2d19      	cmp	r5, #25
   d93a8:	d801      	bhi.n	d93ae <_strtol_l.isra.0+0xa2>
   d93aa:	3c37      	subs	r4, #55	; 0x37
   d93ac:	e7e1      	b.n	d9372 <_strtol_l.isra.0+0x66>
   d93ae:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d93b2:	2d19      	cmp	r5, #25
   d93b4:	d804      	bhi.n	d93c0 <_strtol_l.isra.0+0xb4>
   d93b6:	3c57      	subs	r4, #87	; 0x57
   d93b8:	e7db      	b.n	d9372 <_strtol_l.isra.0+0x66>
   d93ba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d93be:	e7e4      	b.n	d938a <_strtol_l.isra.0+0x7e>
   d93c0:	1c73      	adds	r3, r6, #1
   d93c2:	d106      	bne.n	d93d2 <_strtol_l.isra.0+0xc6>
   d93c4:	2322      	movs	r3, #34	; 0x22
   d93c6:	f8ce 3000 	str.w	r3, [lr]
   d93ca:	4638      	mov	r0, r7
   d93cc:	b942      	cbnz	r2, d93e0 <_strtol_l.isra.0+0xd4>
   d93ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d93d2:	f1b8 0f00 	cmp.w	r8, #0
   d93d6:	d000      	beq.n	d93da <_strtol_l.isra.0+0xce>
   d93d8:	4240      	negs	r0, r0
   d93da:	2a00      	cmp	r2, #0
   d93dc:	d0f7      	beq.n	d93ce <_strtol_l.isra.0+0xc2>
   d93de:	b10e      	cbz	r6, d93e4 <_strtol_l.isra.0+0xd8>
   d93e0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d93e4:	6011      	str	r1, [r2, #0]
   d93e6:	e7f2      	b.n	d93ce <_strtol_l.isra.0+0xc2>
   d93e8:	2430      	movs	r4, #48	; 0x30
   d93ea:	2b00      	cmp	r3, #0
   d93ec:	d1b3      	bne.n	d9356 <_strtol_l.isra.0+0x4a>
   d93ee:	2308      	movs	r3, #8
   d93f0:	e7b1      	b.n	d9356 <_strtol_l.isra.0+0x4a>
   d93f2:	2c30      	cmp	r4, #48	; 0x30
   d93f4:	d0a4      	beq.n	d9340 <_strtol_l.isra.0+0x34>
   d93f6:	230a      	movs	r3, #10
   d93f8:	e7ad      	b.n	d9356 <_strtol_l.isra.0+0x4a>
   d93fa:	bf00      	nop
   d93fc:	000d9cab 	.word	0x000d9cab

000d9400 <strtol>:
   d9400:	4613      	mov	r3, r2
   d9402:	460a      	mov	r2, r1
   d9404:	4601      	mov	r1, r0
   d9406:	4802      	ldr	r0, [pc, #8]	; (d9410 <strtol+0x10>)
   d9408:	6800      	ldr	r0, [r0, #0]
   d940a:	f7ff bf7f 	b.w	d930c <_strtol_l.isra.0>
   d940e:	bf00      	nop
   d9410:	2003e344 	.word	0x2003e344

000d9414 <dynalib_user>:
   d9414:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d9424:	00000000 6e6b6e75 006e776f 006e6976     ....unknown.vin.
   d9434:	20627375 74736f68 62737500 61646120     usb host.usb ada
   d9444:	72657470 62737500 67746f20 74616200     pter.usb otg.bat
   d9454:	79726574 6b6e5500 6e776f6e 746f4e00     tery.Unknown.Not
   d9464:	61684320 6e696772 68430067 65677261      Charging.Charge
   d9474:	69440064 61686373 6e696772 61460067     d.Discharging.Fa
   d9484:	00746c75 6f636944 63656e6e 00646574     ult.Diconnected.
   d9494:	302e3431 00310030 44206f4e 00617461     14.00.1.No Data.
   d94a4:	64696255 2073746f 6b6f6f48 73655200     Ubidots Hook.Res
   d94b4:	736e6f70 65522065 76696563 53006465     ponse Received.S
   d94c4:	65746174 74655300 72655620 65736f62     tate.Set Verbose
   d94d4:	646f4d20 6c430065 65726165 65562064      Mode.Cleared Ve
   d94e4:	736f6272 6f4d2065 53006564 74207465     rbose Mode.Set t
   d94f4:	7233206f 61502064 20797472 006d6953     o 3rd Party Sim.
   d9504:	20746553 50206f74 69747261 20656c63     Set to Particle 
   d9514:	006d6953 7065654b 696c4120 73206576     Sim.Keep Alive s
   d9524:	74207465 6925206f 63657320 65654b00     et to %i sec.Kee
   d9534:	6c412070 00657669 64616f4c 20676e69     p Alive.Loading 
   d9544:	74737953 44206d65 75616665 0073746c     System Defaults.
   d9554:	6554227b 7265706d 72757461 253a2265     {"Temperature":%
   d9564:	66312e34 4822202c 64696d75 22797469     4.1f, "Humidity"
   d9574:	2e34253a 202c6631 754c2220 253a2278     :%4.1f,  "Lux":%
   d9584:	66312e34 2220202c 74696857 253a2265     4.1f,  "White":%
   d9594:	66312e34 2220202c 22534c41 2e34253a     4.1f,  "ALS":%4.
   d95a4:	222c6631 74746142 22797265 7d69253a     1f,"Battery":%i}
   d95b4:	454c4700 4f4f485f 7246004b 25206d6f     .GLE_HOOK.From %
   d95c4:	6f742073 00732520 74617453 72542065     s to %s.State Tr
   d95d4:	69736e61 6e6f6974 2e342500 432a6631     ansition.%4.1f*C
   d95e4:	2e342500 25256631 78754c00 25203a20     .%4.1f%%.Lux : %
   d95f4:	66312e34 69685700 3a206574 2e342520     4.1f.White : %4.
   d9604:	41006631 3a20534c 2e342520 25006631     1f.ALS : %4.1f.%
   d9614:	25252069 4e495600 696d5620 25203a6e     i %%.VIN Vmin: %
   d9624:	49560075 6d49204e 203a7861 49007525     u.VIN Imax: %u.I
   d9634:	3a676863 00752520 72657449 25203a6d     chg: %u.Iterm: %
   d9644:	6f500075 20726577 72756f73 203a6563     u.Power source: 
   d9654:	45007325 726f7272 6b617420 20676e69     %s.Error taking 
   d9664:	7361654d 6d657275 73746e65 61707300     Measurements.spa
   d9674:	642f6b72 63697665 65732f65 6f697373     rk/device/sessio
   d9684:	6e652f6e 72450064 20726f72 74617453     n/end.Error Stat
   d9694:	202d2065 65736552 65520074 7361656c     e - Reset.Releas
   d96a4:	65740065 7265706d 72757461 75680065     e.temperature.hu
   d96b4:	6964696d 4c007974 57007875 65746968     midity.Lux.White
   d96c4:	77615200 534c4120 4e495600 696d5620     .Raw ALS.VIN Vmi
   d96d4:	4956006e 6d49204e 49007861 20676863     n.VIN Imax.Ichg 
   d96e4:	65744900 00206d72 65776f50 756f5372     .Iterm .PowerSou
   d96f4:	00656372 74746142 00797265 74746142     rce.Battery.Batt
   d9704:	43797265 65746e6f 4b007478 20706565     eryContext.Keep 
   d9714:	76696c41 65532065 654d0063 72757361     Alive Sec.Measur
   d9724:	6f4e2d65 65560077 736f6272 6f4d2d65     e-Now.Verbose-Mo
   d9734:	45006564 726f7272 53202d20 31335448     de.Error - SHT31
   d9744:	696e4920 6c616974 74617a69 006e6f69      Initialization.
   d9754:	6f727245 202d2072 4c4d4556 696e4920     Error - VEML Ini
   d9764:	6c616974 74617a69 006e6f69 72617453     tialization.Star
   d9774:	00707574                                tup.

000d9778 <_ZTV17PublishQueueAsync>:
	...
   d9780:	000d4139 000d414d 000d6415 000d65a1     9A..MA...d...e..
   d9790:	000d6561 000d653f 000d66e7 000d6587     ae..?e...f...e..

000d97a0 <_ZTV8MB85RC64>:
	...
   d97a8:	000d4161 000d4175 000d59f9 000d5a8f     aA..uA...Y...Z..
   d97b8:	000d5b11 000d9459 000d9461 000d9465     .[..Y...a...e...
   d97c8:	000d946e 000d9476 000d9482 000d9488     n...v...........
   d97d8:	000d9428 000d9430 000d9434 000d943d     (...0...4...=...
   d97e8:	000d9449 000d9451 72617453 20707574     I...Q...Startup 
   d97f8:	63637553 66737365 00006c75 00000000     Successful......
	...

000d9830 <_ZL17FRAMversionNumber>:
   d9830:	00000004 74697277 74614465 61662061     ....writeData fa
   d9840:	64656c69 72756420 20676e69 73617265     iled during eras
   d9850:	72662065 64416d61 253d7264 00000075     e framAddr=%u...

000d9860 <_ZTV6MB85RC>:
	...
   d9868:	000d5919 000d591b 000d59f9 000d5a8f     .Y...Y...Y...Z..
   d9878:	000d5b11 69766564 65526563 66206461     .[..deviceRead f
   d9888:	656c6961 74732064 253d7461 65730064     ailed stat=%d.se
   d9898:	69542074 6620656d 206d6f72 20435452     t Time from RTC 
   d98a8:	64007325 63697665 69725765 66206574     %s.deviceWrite f
   d98b8:	656c6961 74732064 253d7461 65730064     ailed stat=%d.se
   d98c8:	54522074 72662043 63206d6f 64756f6c     t RTC from cloud
   d98d8:	00732520 756f6c63 69742064 6e20656d      %s.cloud time n
   d98e8:	7620746f 64696c61 76656400 57656369     ot valid.deviceW
   d98f8:	65746972 52504545 66204d4f 656c6961     riteEEPROM faile
   d9908:	74732064 253d7461 70610064 74722e70     d stat=%d.app.rt
   d9918:	00000063                                c...

000d991c <_ZTV12MCP79410SRAM>:
	...
   d9924:	000d5bd1 000d5be7 000d5bc1 000d5bc5     .[...[...[...[..
   d9934:	000d5c11 000d5ef9 000d6119              .\...^...a..

000d9940 <_ZTV12MCP79410Time>:
	...
   d9948:	000d5bd5 000d5bd9                       .[...[..

000d9950 <_ZTV14MCP79410EEPROM>:
	...
   d9958:	000d5bd3 000d5bf5 000d5bc9 000d5bcd     .[...[...[...[..
   d9968:	000d5c11 000d5f33 000d6359              .\..3_..Yc..

000d9974 <_ZTV8MCP79410>:
	...
   d997c:	000d5bd7 000d5c03 6c627550 51687369     .[...\..PublishQ
   d998c:	65756575 6e797341 75710063 69657565     ueueAsync.queuei
   d999c:	6520676e 746e6576 656d614e 2073253d     ng eventName=%s 
   d99ac:	61746164 2073253d 3d6c7474 66206425     data=%s ttl=%d f
   d99bc:	7367616c 64253d31 616c6620 3d327367     lags1=%d flags2=
   d99cc:	73206425 3d657a69 70006425 696c6275     %d size=%d.publi
   d99dc:	6e696873 73252067 20732520 3d6c7474     shing %s %s ttl=
   d99ec:	66206425 7367616c 0078253d 6c627570     %d flags=%x.publ
   d99fc:	65687369 75732064 73656363 6c756673     ished successful
   d9a0c:	7000796c 696c6275 64656873 69616620     ly.published fai
   d9a1c:	2c64656c 6c697720 6572206c 20797274     led, will retry 
   d9a2c:	25206e69 6d20756c 70610073 75702e70     in %lu ms.app.pu
   d9a3c:	00007162                                bq..

000d9a40 <_ZTV21PublishQueueAsyncBase>:
	...
   d9a50:	000d6415 000d40a5 000d40a5 000d40a5     .d...@...@...@..
   d9a60:	000d40a5 000d40a5                       .@...@..

000d9a68 <_ZTV25PublishQueueAsyncRetained>:
	...
   d9a70:	000d64fd 000d6511 000d6415 000d65a1     .d...e...d...e..
   d9a80:	000d6561 000d653f 000d66e7 000d6587     ae..?e...f...e..

000d9a90 <_ZTVN5spark13CellularClassE>:
	...
   d9a98:	000d7157 000d714d 000d7143 000d70f9     Wq..Mq..Cq...p..
   d9aa8:	000d7137 000d712b 000d711f 000d7117     7q..+q...q...q..
   d9ab8:	000d710d 000d7103 000d7ae1              .q...q...z..

000d9ac4 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9acc:	000d7191 000d7197 000d71d5 000d71a5     .q...q...q...q..
   d9adc:	000d7193                                .q..

000d9ae0 <_ZTVN5spark13EthernetClassE>:
	...
   d9ae8:	000d77bf 000d77b5 000d77ab 000d77a1     .w...w...w...w..
   d9af8:	000d7795 000d7789 000d777d 000d7775     .w...w..}w..uw..
   d9b08:	000d776b 000d7761 000d7ae1              kw..aw...z..

000d9b14 <_ZTV7TwoWire>:
	...
   d9b1c:	000d77dd 000d7827 000d77ff 000d77df     .w..'x...w...w..
   d9b2c:	000d7807 000d780f 000d7817 000d781f     .x...x...x...x..

000d9b3c <_ZTV9IPAddress>:
	...
   d9b44:	000d7995 000d7985 000d7987 00707061     .y...y...y..app.

000d9b54 <_ZTVN5spark12NetworkClassE>:
	...
   d9b5c:	000d7a79 000d7a83 000d7a8d 000d7a97     yz...z...z...z..
   d9b6c:	000d7aa1 000d7aad 000d7ab9 000d7ac5     .z...z...z...z..
   d9b7c:	000d7acd 000d7ad7 000d7ae1              .z...z...z..

000d9b88 <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
   d9b88:	00960064 038401f4 05dc04b0 0bb807d0     d...............
   d9b98:	69726977 5300676e 65747379 6c73206d     wiring.System sl
   d9ba8:	20706565 666e6f63 72756769 6f697461     eep configuratio
   d9bb8:	7369206e 766e6920 64696c61 005a002e     n is invalid..Z.
   d9bc8:	33302b25 30253a64 25007532 6d252d59     %+03d:%02u.%Y-%m
   d9bd8:	5464252d 253a4825 53253a4d 61007a25     -%dT%H:%M:%S%z.a
   d9be8:	69746373 0000656d                       sctime..

000d9bf0 <_ZTV11USARTSerial>:
	...
   d9bf8:	000d83c9 000d8435 000d840d 000d7d05     ....5........}..
   d9c08:	000d83dd 000d83f9 000d83eb 000d8407     ................
   d9c18:	000d83cb 000d83cf                       ........

000d9c20 <_ZTV9USBSerial>:
	...
   d9c28:	000d84c9 000d8531 000d8507 000d7d05     ....1........}..
   d9c38:	000d84f9 000d84cb 000d84db 000d852b     ............+...
   d9c48:	000d84eb 000d84c5                       ........

000d9c50 <_ZSt7nothrow>:
   d9c50:	332e2500 2e252073 33257333 2e252064     .%.3s %.3s%3d %.
   d9c60:	253a6432 3a64322e 64322e25 0a642520     2d:%.2d:%.2d %d.
	...

000d9c71 <day_name.6145>:
   d9c71:	4d6e7553 75546e6f 64655765 46756854     SunMonTueWedThuF
   d9c81:	61536972                                 riSat

000d9c86 <mon_name.6146>:
   d9c86:	466e614a 614d6265 72704172 4a79614d     JanFebMarAprMayJ
   d9c96:	754a6e75 6775416c 4f706553 6f4e7463     unJulAugSepOctNo
   d9ca6:	63654476                                vDec

000d9caa <_ctype_>:
   d9caa:	20202000 20202020 28282020 20282828     .         ((((( 
   d9cba:	20202020 20202020 20202020 20202020                     
   d9cca:	10108820 10101010 10101010 10101010      ...............
   d9cda:	04040410 04040404 10040404 10101010     ................
   d9cea:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9cfa:	01010101 01010101 01010101 10101010     ................
   d9d0a:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9d1a:	02020202 02020202 02020202 10101010     ................
   d9d2a:	00000020 00000000 00000000 00000000      ...............
	...

000d9dab <link_const_variable_data_end>:
	...

000d9dac <link_constructors_location>:
   d9dac:	000d50dd 	.word	0x000d50dd
   d9db0:	000d6389 	.word	0x000d6389
   d9db4:	000d6979 	.word	0x000d6979
   d9db8:	000d70d1 	.word	0x000d70d1
   d9dbc:	000d7161 	.word	0x000d7161
   d9dc0:	000d77c9 	.word	0x000d77c9
   d9dc4:	000d7a69 	.word	0x000d7a69
   d9dc8:	000d7bb5 	.word	0x000d7bb5
   d9dcc:	000d7da5 	.word	0x000d7da5
   d9dd0:	000d8075 	.word	0x000d8075
   d9dd4:	000d83b5 	.word	0x000d83b5

000d9dd8 <link_constructors_end>:
	...
