
/Users/abdulhannanmustajab/Desktop/Projects/IoT/GLE_Chili_Dryer/GLE_Chili/target/2.0.0-rc.4/boron/GLE_Chili.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003fe0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8000  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000144  2003e34c  000d8004  0001e34c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000360  2003e490  2003e490  0002e490  2**3
                  ALLOC
  6 .module_info_suffix 0000002c  000d8148  000d8148  00028148  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .module_info_crc 00000004  000d8174  000d8174  00028174  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001858b3  00000000  00000000  00028178  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001931c  00000000  00000000  001ada2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002c9f1  00000000  00000000  001c6d47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002b98  00000000  00000000  001f3738  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007d18  00000000  00000000  001f62d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003c2e0  00000000  00000000  001fdfe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00040624  00000000  00000000  0023a2c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010d4c5  00000000  00000000  0027a8ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00007564  00000000  00000000  00387db4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f003 fbad 	bl	d7790 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f003 fbb5 	bl	d77ac <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e34c 	.word	0x2003e34c
   d404c:	000d8004 	.word	0x000d8004
   d4050:	2003e490 	.word	0x2003e490
   d4054:	2003e490 	.word	0x2003e490
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fe67 	bl	d6d34 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d7fd0 	.word	0x000d7fd0
   d4080:	000d7ff4 	.word	0x000d7ff4

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 baac 	b.w	d45e0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fc7d 	bl	d4988 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 be11 	b.w	d6cb8 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f001 bc71 	b.w	d597c <malloc>

000d409a <_Znaj>:
   d409a:	f001 bc6f 	b.w	d597c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f001 bc75 	b.w	d598c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
   d40b4:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d40b6:	4904      	ldr	r1, [pc, #16]	; (d40c8 <_Z10measureNow6String+0x14>)
   d40b8:	f002 fafc 	bl	d66b4 <_ZNK6String6equalsEPKc>
  if (command == "1") {
   d40bc:	b118      	cbz	r0, d40c6 <_Z10measureNow6String+0x12>
    state = MEASURING_STATE;
   d40be:	4b03      	ldr	r3, [pc, #12]	; (d40cc <_Z10measureNow6String+0x18>)
   d40c0:	2203      	movs	r2, #3
   d40c2:	701a      	strb	r2, [r3, #0]
    return 1;
   d40c4:	2001      	movs	r0, #1
  }
  else return 0;
}
   d40c6:	bd08      	pop	{r3, pc}
   d40c8:	000d7ba5 	.word	0x000d7ba5
   d40cc:	2003e574 	.word	0x2003e574

000d40d0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, typename T::PointerType userVar, const T& userVarType)
    {
        return spark_variable(varKey, (const void*)userVar, T::TYPE_ID, NULL);
   d40d0:	2300      	movs	r3, #0
   d40d2:	2204      	movs	r2, #4
   d40d4:	f001 bbaa 	b.w	d582c <spark_variable>

000d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d40da:	f89d 5018 	ldrb.w	r5, [sp, #24]
        val_(val) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT> particle::Flags<TagT, ValueT>::operator|(Flags<TagT, ValueT> flags) const {
    return Flags<TagT, ValueT>(val_ | flags.val_);
   d40de:	431d      	orrs	r5, r3
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e0:	f88d 5000 	strb.w	r5, [sp]
   d40e4:	233c      	movs	r3, #60	; 0x3c
    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
   d40e6:	4604      	mov	r4, r0
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d40e8:	f001 fe76 	bl	d5dd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }
   d40ec:	4620      	mov	r0, r4
   d40ee:	b003      	add	sp, #12
   d40f0:	bd30      	pop	{r4, r5, pc}

000d40f2 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40f2:	b510      	push	{r4, lr}
   d40f4:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40f6:	6800      	ldr	r0, [r0, #0]
   d40f8:	b108      	cbz	r0, d40fe <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40fa:	f001 fc47 	bl	d598c <free>
class SystemClass {
   d40fe:	4620      	mov	r0, r4
   d4100:	bd10      	pop	{r4, pc}
	...

000d4104 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE>:
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }

    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
   d4104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (valid_) {
   d4106:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& network(network_interface_t netif, EnumFlags<SystemSleepNetworkFlag> flags = SystemSleepNetworkFlag::NONE) {
   d4108:	4605      	mov	r5, r0
   d410a:	460f      	mov	r7, r1
   d410c:	4616      	mov	r6, r2
        if (valid_) {
   d410e:	b1b3      	cbz	r3, d413e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d4110:	6803      	ldr	r3, [r0, #0]
   d4112:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4114:	b1ab      	cbz	r3, d4142 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
            if (start->type == type) {
   d4116:	889a      	ldrh	r2, [r3, #4]
   d4118:	2a0e      	cmp	r2, #14
   d411a:	d006      	beq.n	d412a <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x26>
            start = start->next;
   d411c:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d411e:	e7f9      	b.n	d4114 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x10>
                    if (networkWakeup->flags != flags.value()) {
                        networkWakeup->flags |= flags.value();
                    }
                    return *this;
                }
                wakeup = wakeupSourceFeatured(HAL_WAKEUP_SOURCE_TYPE_NETWORK, wakeup->next);
   d4120:	689b      	ldr	r3, [r3, #8]
        if (!start) {
   d4122:	b173      	cbz	r3, d4142 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
            if (start->type == type) {
   d4124:	889a      	ldrh	r2, [r3, #4]
   d4126:	2a0e      	cmp	r2, #14
   d4128:	d1fa      	bne.n	d4120 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x1c>
            while (wakeup) {
   d412a:	b153      	cbz	r3, d4142 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3e>
                if (networkWakeup->index == netif) {
   d412c:	7b1a      	ldrb	r2, [r3, #12]
   d412e:	42ba      	cmp	r2, r7
   d4130:	d1f6      	bne.n	d4120 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x1c>
                    if (networkWakeup->flags != flags.value()) {
   d4132:	89da      	ldrh	r2, [r3, #14]
   d4134:	8831      	ldrh	r1, [r6, #0]
   d4136:	428a      	cmp	r2, r1
   d4138:	d001      	beq.n	d413e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
                        networkWakeup->flags |= flags.value();
   d413a:	430a      	orrs	r2, r1
   d413c:	81da      	strh	r2, [r3, #14]
            wakeupSource->index = static_cast<network_interface_index>(netif);
            wakeupSource->flags = flags.value();
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
        }
        return *this;
    }
   d413e:	4628      	mov	r0, r5
   d4140:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_network_t();
   d4142:	490b      	ldr	r1, [pc, #44]	; (d4170 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x6c>)
   d4144:	2014      	movs	r0, #20
   d4146:	f002 feec 	bl	d6f22 <_ZnwjRKSt9nothrow_t>
   d414a:	4604      	mov	r4, r0
   d414c:	b170      	cbz	r0, d416c <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x68>
   d414e:	2214      	movs	r2, #20
   d4150:	2100      	movs	r1, #0
   d4152:	f003 fb2b 	bl	d77ac <memset>
            wakeupSource->base.size = sizeof(hal_wakeup_source_gpio_t);
   d4156:	4b07      	ldr	r3, [pc, #28]	; (d4174 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x70>)
   d4158:	6023      	str	r3, [r4, #0]
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_NETWORK;
   d415a:	230e      	movs	r3, #14
   d415c:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d415e:	692b      	ldr	r3, [r5, #16]
   d4160:	60a3      	str	r3, [r4, #8]
            wakeupSource->flags = flags.value();
   d4162:	8833      	ldrh	r3, [r6, #0]
            wakeupSource->index = static_cast<network_interface_index>(netif);
   d4164:	7327      	strb	r7, [r4, #12]
            wakeupSource->flags = flags.value();
   d4166:	81e3      	strh	r3, [r4, #14]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4168:	612c      	str	r4, [r5, #16]
   d416a:	e7e8      	b.n	d413e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
                valid_ = false;
   d416c:	7528      	strb	r0, [r5, #20]
                return *this;
   d416e:	e7e6      	b.n	d413e <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE+0x3a>
   d4170:	000d7ecc 	.word	0x000d7ecc
   d4174:	00030010 	.word	0x00030010

000d4178 <_Z17connectToParticlev>:
bool connectToParticle() {
   d4178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d417c:	f001 fb6e 	bl	d585c <spark_cloud_flag_connect>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4180:	f8df a058 	ldr.w	sl, [pc, #88]	; d41dc <_Z17connectToParticlev+0x64>
   d4184:	f44f 7496 	mov.w	r4, #300	; 0x12c
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
   d4188:	f04f 0b00 	mov.w	fp, #0
        while (_while() && !_condition()) {
   d418c:	f240 38e7 	movw	r8, #999	; 0x3e7
   d4190:	f04f 0900 	mov.w	r9, #0
        return hal_timer_millis(nullptr);
   d4194:	2000      	movs	r0, #0
   d4196:	f001 f9bf 	bl	d5518 <hal_timer_millis>
   d419a:	4605      	mov	r5, r0
   d419c:	2000      	movs	r0, #0
   d419e:	f001 f9bb 	bl	d5518 <hal_timer_millis>
        return waitConditionWhile(_condition, [=]{ return (millis()-start)<timeout; });
   d41a2:	1b46      	subs	r6, r0, r5
   d41a4:	eb61 070b 	sbc.w	r7, r1, fp
        while (_while() && !_condition()) {
   d41a8:	45b9      	cmp	r9, r7
   d41aa:	bf08      	it	eq
   d41ac:	45b0      	cmpeq	r8, r6
   d41ae:	d305      	bcc.n	d41bc <_Z17connectToParticlev+0x44>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d41b0:	f001 fb5c 	bl	d586c <spark_cloud_flag_connected>
   d41b4:	b910      	cbnz	r0, d41bc <_Z17connectToParticlev+0x44>
            spark_process();
   d41b6:	f001 fb49 	bl	d584c <spark_process>
        while (_while() && !_condition()) {
   d41ba:	e7ef      	b.n	d419c <_Z17connectToParticlev+0x24>
   d41bc:	f001 fb56 	bl	d586c <spark_cloud_flag_connected>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d41c0:	b118      	cbz	r0, d41ca <_Z17connectToParticlev+0x52>
}
   d41c2:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d41c6:	f001 bb51 	b.w	d586c <spark_cloud_flag_connected>
		return HAL_Timer_Get_Milli_Seconds();
   d41ca:	f001 f975 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
		last_checkin = current_time();
   d41ce:	f8ca 0000 	str.w	r0, [sl]
    }
    static void disconnect(const CloudDisconnectOptions& options = CloudDisconnectOptions());
    static void process(void) {
    		application_checkin();
    		spark_process();
   d41d2:	f001 fb3b 	bl	d584c <spark_process>
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
   d41d6:	3c01      	subs	r4, #1
   d41d8:	d1dc      	bne.n	d4194 <_Z17connectToParticlev+0x1c>
   d41da:	e7f2      	b.n	d41c2 <_Z17connectToParticlev+0x4a>
   d41dc:	2003e7cc 	.word	0x2003e7cc

000d41e0 <_Z20meterParticlePublishv>:
  Serial.println(stateTransitionString);
}


bool meterParticlePublish(void)
{
   d41e0:	b508      	push	{r3, lr}

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d41e2:	f001 f969 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
   d41e6:	4b04      	ldr	r3, [pc, #16]	; (d41f8 <_Z20meterParticlePublishv+0x18>)
   d41e8:	681b      	ldr	r3, [r3, #0]
   d41ea:	1ac0      	subs	r0, r0, r3
  else return 0;
}
   d41ec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d41f0:	bf34      	ite	cc
   d41f2:	2000      	movcc	r0, #0
   d41f4:	2001      	movcs	r0, #1
   d41f6:	bd08      	pop	{r3, pc}
   d41f8:	2003e514 	.word	0x2003e514

000d41fc <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>:
    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
   d41fc:	b508      	push	{r3, lr}
        waitUntil(meterParticlePublish);
   d41fe:	f7ff ffef 	bl	d41e0 <_Z20meterParticlePublishv>
        while (_while() && !_condition()) {
   d4202:	b910      	cbnz	r0, d420a <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0xe>
            spark_process();
   d4204:	f001 fb22 	bl	d584c <spark_process>
        while (_while() && !_condition()) {
   d4208:	e7f9      	b.n	d41fe <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0+0x2>
    }
   d420a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d420e:	f7ff bfe7 	b.w	d41e0 <_Z20meterParticlePublishv>
	...

000d4214 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d4214:	b530      	push	{r4, r5, lr}
   d4216:	b085      	sub	sp, #20
   d4218:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d421a:	2200      	movs	r2, #0
    const int ret = diag_get_source(id, &src, nullptr);
   d421c:	4669      	mov	r1, sp
    const diag_source* src = nullptr;
   d421e:	9200      	str	r2, [sp, #0]
    const int ret = diag_get_source(id, &src, nullptr);
   d4220:	f001 fa9a 	bl	d5758 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d4224:	b9b0      	cbnz	r0, d4254 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d4226:	9c00      	ldr	r4, [sp, #0]
    SPARK_ASSERT(src && src->callback);
   d4228:	b10c      	cbz	r4, d422e <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1a>
   d422a:	6923      	ldr	r3, [r4, #16]
   d422c:	b923      	cbnz	r3, d4238 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x24>
   d422e:	4a0a      	ldr	r2, [pc, #40]	; (d4258 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d4230:	2100      	movs	r1, #0
   d4232:	200a      	movs	r0, #10
   d4234:	f001 fa80 	bl	d5738 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d4238:	2300      	movs	r3, #0
   d423a:	f8ad 3006 	strh.w	r3, [sp, #6]
   d423e:	230c      	movs	r3, #12
   d4240:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4244:	2304      	movs	r3, #4
   d4246:	9303      	str	r3, [sp, #12]
   d4248:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d424a:	6923      	ldr	r3, [r4, #16]
   d424c:	aa01      	add	r2, sp, #4
   d424e:	2101      	movs	r1, #1
   d4250:	4620      	mov	r0, r4
   d4252:	4798      	blx	r3
}
   d4254:	b005      	add	sp, #20
   d4256:	bd30      	pop	{r4, r5, pc}
   d4258:	000d54a9 	.word	0x000d54a9

000d425c <_Z17getBatteryContextv>:
// {
//   voltage = analogRead(BATT) * 0.0011224;
//   snprintf(batteryString, sizeof(batteryString), "%3.1f V", voltage);
// }

void getBatteryContext() {
   d425c:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d425e:	4d0e      	ldr	r5, [pc, #56]	; (d4298 <_Z17getBatteryContextv+0x3c>)
   d4260:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void getBatteryContext() {
   d4262:	b089      	sub	sp, #36	; 0x24
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4264:	ac01      	add	r4, sp, #4
   d4266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4268:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d426c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d4270:	4669      	mov	r1, sp
   d4272:	2007      	movs	r0, #7
   d4274:	f7ff ffce 	bl	d4214 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        const auto r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val);
        if (r < 0) {
   d4278:	2800      	cmp	r0, #0
            return r;
        }
        return val;
   d427a:	bfa8      	it	ge
   d427c:	9800      	ldrge	r0, [sp, #0]
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-

  snprintf(batteryContextStr, sizeof(batteryContextStr),"%s", batteryContext[System.batteryState()]);
   d427e:	4a07      	ldr	r2, [pc, #28]	; (d429c <_Z17getBatteryContextv+0x40>)
   d4280:	ab08      	add	r3, sp, #32
   d4282:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d4286:	2110      	movs	r1, #16
   d4288:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d428c:	4804      	ldr	r0, [pc, #16]	; (d42a0 <_Z17getBatteryContextv+0x44>)
   d428e:	f001 fb8d 	bl	d59ac <snprintf>

}
   d4292:	b009      	add	sp, #36	; 0x24
   d4294:	bd30      	pop	{r4, r5, pc}
   d4296:	bf00      	nop
   d4298:	000d7ccc 	.word	0x000d7ccc
   d429c:	000d7c37 	.word	0x000d7c37
   d42a0:	2003e4d8 	.word	0x2003e4d8

000d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d42a4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d42a6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   d42a8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   d42aa:	b17c      	cbz	r4, d42cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   d42ac:	6863      	ldr	r3, [r4, #4]
   d42ae:	3b01      	subs	r3, #1
   d42b0:	6063      	str	r3, [r4, #4]
   d42b2:	b95b      	cbnz	r3, d42cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   d42b4:	6823      	ldr	r3, [r4, #0]
   d42b6:	4620      	mov	r0, r4
   d42b8:	689b      	ldr	r3, [r3, #8]
   d42ba:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42bc:	68a3      	ldr	r3, [r4, #8]
   d42be:	3b01      	subs	r3, #1
   d42c0:	60a3      	str	r3, [r4, #8]
   d42c2:	b91b      	cbnz	r3, d42cc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d42c4:	6823      	ldr	r3, [r4, #0]
   d42c6:	4620      	mov	r0, r4
   d42c8:	68db      	ldr	r3, [r3, #12]
   d42ca:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   d42cc:	4628      	mov	r0, r5
   d42ce:	bd38      	pop	{r3, r4, r5, pc}

000d42d0 <_Z9sendEventv>:
{
   d42d0:	b530      	push	{r4, r5, lr}
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
   d42d2:	4c29      	ldr	r4, [pc, #164]	; (d4378 <_Z9sendEventv+0xa8>)
   d42d4:	b0a9      	sub	sp, #164	; 0xa4
   d42d6:	2508      	movs	r5, #8
    sensor_data = EEPROM.get(8 + i*100,sensor_data);                  // This spacing of the objects - 100 - must match what we put in the takeMeasurements() function
   d42d8:	f002 fdc6 	bl	d6e68 <_Z21__fetch_global_EEPROMv>
   d42dc:	4628      	mov	r0, r5
   d42de:	4926      	ldr	r1, [pc, #152]	; (d4378 <_Z9sendEventv+0xa8>)
   d42e0:	2238      	movs	r2, #56	; 0x38
   d42e2:	3564      	adds	r5, #100	; 0x64
   d42e4:	f001 f900 	bl	d54e8 <HAL_EEPROM_Get>
   for (int i = 0; i < 4; i++) {
   d42e8:	f5b5 7fcc 	cmp.w	r5, #408	; 0x198
   d42ec:	d1f4      	bne.n	d42d8 <_Z9sendEventv+0x8>
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,  \"Lux\":%4.1f,  \"White\":%4.1f,  \"ALS\":%4.1f,\"Battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.lux,sensor_data.white,sensor_data.raw_als,sensor_data.stateOfCharge);
   d42ee:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d42f0:	930a      	str	r3, [sp, #40]	; 0x28
   d42f2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d42f4:	f002 ff80 	bl	d71f8 <__aeabi_f2d>
   d42f8:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d42fc:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d42fe:	f002 ff7b 	bl	d71f8 <__aeabi_f2d>
   d4302:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d4306:	6a20      	ldr	r0, [r4, #32]
   d4308:	f002 ff76 	bl	d71f8 <__aeabi_f2d>
   d430c:	e9cd 0104 	strd	r0, r1, [sp, #16]
   d4310:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
   d4314:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d4318:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   d431c:	2164      	movs	r1, #100	; 0x64
   d431e:	e9cd 2300 	strd	r2, r3, [sp]
   d4322:	a80f      	add	r0, sp, #60	; 0x3c
   d4324:	4a15      	ldr	r2, [pc, #84]	; (d437c <_Z9sendEventv+0xac>)
  currentCountTime = Time.now();
   d4326:	4c16      	ldr	r4, [pc, #88]	; (d4380 <_Z9sendEventv+0xb0>)
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f,  \"Lux\":%4.1f,  \"White\":%4.1f,  \"ALS\":%4.1f,\"Battery\":%i}", sensor_data.temperatureInC, sensor_data.relativeHumidity,sensor_data.lux,sensor_data.white,sensor_data.raw_als,sensor_data.stateOfCharge);
   d4328:	f001 fb40 	bl	d59ac <snprintf>
  Particle.publish("GLE_HOOK", data, PRIVATE);
   d432c:	2300      	movs	r3, #0
   d432e:	f88d 3000 	strb.w	r3, [sp]
   d4332:	4b14      	ldr	r3, [pc, #80]	; (d4384 <_Z9sendEventv+0xb4>)
   d4334:	4914      	ldr	r1, [pc, #80]	; (d4388 <_Z9sendEventv+0xb8>)
   d4336:	781b      	ldrb	r3, [r3, #0]
   d4338:	aa0f      	add	r2, sp, #60	; 0x3c
   d433a:	a80d      	add	r0, sp, #52	; 0x34
   d433c:	f7ff fecc 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4340:	a80e      	add	r0, sp, #56	; 0x38
   d4342:	f7ff ffaf 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentCountTime = Time.now();
   d4346:	f002 fb0b 	bl	d6960 <_ZN9TimeClass3nowEv>
   d434a:	17c1      	asrs	r1, r0, #31
   d434c:	e9c4 0100 	strd	r0, r1, [r4]
  EEPROM.write(MEM_MAP::currentCountsTimeAddr, currentCountTime);
   d4350:	f002 fd8a 	bl	d6e68 <_Z21__fetch_global_EEPROMv>
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
   d4354:	7821      	ldrb	r1, [r4, #0]
   d4356:	2003      	movs	r0, #3
   d4358:	f001 f8be 	bl	d54d8 <HAL_EEPROM_Write>
  currentHourlyPeriod = Time.hour();                                                        // Change the time period
   d435c:	f002 fb10 	bl	d6980 <_ZN9TimeClass4hourEv>
   d4360:	4b0a      	ldr	r3, [pc, #40]	; (d438c <_Z9sendEventv+0xbc>)
   d4362:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                                      // set the data inflight flag
   d4364:	4b0a      	ldr	r3, [pc, #40]	; (d4390 <_Z9sendEventv+0xc0>)
   d4366:	2201      	movs	r2, #1
   d4368:	701a      	strb	r2, [r3, #0]
   d436a:	f001 f8a5 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
   d436e:	4b09      	ldr	r3, [pc, #36]	; (d4394 <_Z9sendEventv+0xc4>)
   d4370:	6018      	str	r0, [r3, #0]
}
   d4372:	b029      	add	sp, #164	; 0xa4
   d4374:	bd30      	pop	{r4, r5, pc}
   d4376:	bf00      	nop
   d4378:	2003e530 	.word	0x2003e530
   d437c:	000d79f4 	.word	0x000d79f4
   d4380:	2003e4f8 	.word	0x2003e4f8
   d4384:	2003e4d1 	.word	0x2003e4d1
   d4388:	000d7a55 	.word	0x000d7a55
   d438c:	2003e500 	.word	0x2003e500
   d4390:	2003e34c 	.word	0x2003e34c
   d4394:	2003e5c4 	.word	0x2003e5c4

000d4398 <_Z14UbidotsHandlerPKcS0_>:
{                                                                                           // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
   d4398:	b530      	push	{r4, r5, lr}
   d439a:	4d1e      	ldr	r5, [pc, #120]	; (d4414 <_Z14UbidotsHandlerPKcS0_+0x7c>)
   d439c:	b085      	sub	sp, #20
  if (!data) {                                                                    // First check to see if there is any data
   d439e:	460c      	mov	r4, r1
   d43a0:	b981      	cbnz	r1, d43c4 <_Z14UbidotsHandlerPKcS0_+0x2c>
    if (verboseMode) {
   d43a2:	782b      	ldrb	r3, [r5, #0]
   d43a4:	b343      	cbz	r3, d43f8 <_Z14UbidotsHandlerPKcS0_+0x60>
        return waitConditionWhile(_condition, []{ return true; });
   d43a6:	f7ff ff29 	bl	d41fc <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("Ubidots Hook", "No Data", PRIVATE);
   d43aa:	4b1b      	ldr	r3, [pc, #108]	; (d4418 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d43ac:	f88d 4000 	strb.w	r4, [sp]
   d43b0:	781b      	ldrb	r3, [r3, #0]
   d43b2:	4a1a      	ldr	r2, [pc, #104]	; (d441c <_Z14UbidotsHandlerPKcS0_+0x84>)
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d43b4:	491a      	ldr	r1, [pc, #104]	; (d4420 <_Z14UbidotsHandlerPKcS0_+0x88>)
   d43b6:	a802      	add	r0, sp, #8
   d43b8:	f7ff fe8e 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d43bc:	a803      	add	r0, sp, #12
   d43be:	f7ff ff71 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d43c2:	e019      	b.n	d43f8 <_Z14UbidotsHandlerPKcS0_+0x60>
  int responseCode = atoi(data);                                                  // Response is only a single number thanks to Template
   d43c4:	4608      	mov	r0, r1
   d43c6:	f003 f9d1 	bl	d776c <atoi>
  if ((responseCode == 200) || (responseCode == 201))
   d43ca:	38c8      	subs	r0, #200	; 0xc8
   d43cc:	2801      	cmp	r0, #1
    if (verboseMode) {
   d43ce:	782b      	ldrb	r3, [r5, #0]
  if ((responseCode == 200) || (responseCode == 201))
   d43d0:	d814      	bhi.n	d43fc <_Z14UbidotsHandlerPKcS0_+0x64>
    if (verboseMode) {
   d43d2:	b173      	cbz	r3, d43f2 <_Z14UbidotsHandlerPKcS0_+0x5a>
   d43d4:	f7ff ff12 	bl	d41fc <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
      Particle.publish("State", "Response Received", PRIVATE);
   d43d8:	2300      	movs	r3, #0
   d43da:	f88d 3000 	strb.w	r3, [sp]
   d43de:	4b0e      	ldr	r3, [pc, #56]	; (d4418 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d43e0:	4a10      	ldr	r2, [pc, #64]	; (d4424 <_Z14UbidotsHandlerPKcS0_+0x8c>)
   d43e2:	781b      	ldrb	r3, [r3, #0]
   d43e4:	4910      	ldr	r1, [pc, #64]	; (d4428 <_Z14UbidotsHandlerPKcS0_+0x90>)
   d43e6:	a802      	add	r0, sp, #8
   d43e8:	f7ff fe76 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d43ec:	a803      	add	r0, sp, #12
   d43ee:	f7ff ff59 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    dataInFlight = false;    
   d43f2:	4b0e      	ldr	r3, [pc, #56]	; (d442c <_Z14UbidotsHandlerPKcS0_+0x94>)
   d43f4:	2200      	movs	r2, #0
   d43f6:	701a      	strb	r2, [r3, #0]
}
   d43f8:	b005      	add	sp, #20
   d43fa:	bd30      	pop	{r4, r5, pc}
  else if (verboseMode) {
   d43fc:	2b00      	cmp	r3, #0
   d43fe:	d0fb      	beq.n	d43f8 <_Z14UbidotsHandlerPKcS0_+0x60>
   d4400:	f7ff fefc 	bl	d41fc <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("Ubidots Hook", data, PRIVATE);                              // Publish the response code
   d4404:	2300      	movs	r3, #0
   d4406:	f88d 3000 	strb.w	r3, [sp]
   d440a:	4b03      	ldr	r3, [pc, #12]	; (d4418 <_Z14UbidotsHandlerPKcS0_+0x80>)
   d440c:	4622      	mov	r2, r4
   d440e:	781b      	ldrb	r3, [r3, #0]
   d4410:	e7d0      	b.n	d43b4 <_Z14UbidotsHandlerPKcS0_+0x1c>
   d4412:	bf00      	nop
   d4414:	2003e424 	.word	0x2003e424
   d4418:	2003e4d1 	.word	0x2003e4d1
   d441c:	000d7a5e 	.word	0x000d7a5e
   d4420:	000d7a66 	.word	0x000d7a66
   d4424:	000d7a73 	.word	0x000d7a73
   d4428:	000d7a85 	.word	0x000d7a85
   d442c:	2003e34c 	.word	0x2003e34c

000d4430 <_Z16takeMeasurementsv>:
bool takeMeasurements() {
   d4430:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  sensor_data.validData = false;
   d4432:	4c57      	ldr	r4, [pc, #348]	; (d4590 <_Z16takeMeasurementsv+0x160>)
  if (sht31.readTemperature()){
   d4434:	4857      	ldr	r0, [pc, #348]	; (d4594 <_Z16takeMeasurementsv+0x164>)
  sensor_data.validData = false;
   d4436:	2500      	movs	r5, #0
   d4438:	7025      	strb	r5, [r4, #0]
  if (sht31.readTemperature()){
   d443a:	f000 fff9 	bl	d5430 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d443e:	eeb5 0a40 	vcmp.f32	s0, #0.0
   d4442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4446:	f000 8091 	beq.w	d456c <_Z16takeMeasurementsv+0x13c>
    currentCountTime = Time.now();
   d444a:	f002 fa89 	bl	d6960 <_ZN9TimeClass3nowEv>
   d444e:	4b52      	ldr	r3, [pc, #328]	; (d4598 <_Z16takeMeasurementsv+0x168>)
   d4450:	17c1      	asrs	r1, r0, #31
   d4452:	e9c3 0100 	strd	r0, r1, [r3]
    int currentMinutes = Time.minute();                                // So we only have to check once
   d4456:	f002 fa9f 	bl	d6998 <_ZN9TimeClass6minuteEv>
    switch (currentMinutes) {
   d445a:	281e      	cmp	r0, #30
   d445c:	d07f      	beq.n	d455e <_Z16takeMeasurementsv+0x12e>
   d445e:	282d      	cmp	r0, #45	; 0x2d
   d4460:	d07f      	beq.n	d4562 <_Z16takeMeasurementsv+0x132>
        reportCycle = 0;                                                // This is the first of the sample-only periods
   d4462:	280f      	cmp	r0, #15
   d4464:	bf14      	ite	ne
   d4466:	2603      	movne	r6, #3
   d4468:	462e      	moveq	r6, r5
    sensor_data.temperatureInC = sht31.readTemperature();
   d446a:	484a      	ldr	r0, [pc, #296]	; (d4594 <_Z16takeMeasurementsv+0x164>)
   d446c:	f000 ffe0 	bl	d5430 <_ZN14Adafruit_SHT3115readTemperatureEv>
   d4470:	ee10 0a10 	vmov	r0, s0
   d4474:	f002 fec0 	bl	d71f8 <__aeabi_f2d>
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d4478:	4a48      	ldr	r2, [pc, #288]	; (d459c <_Z16takeMeasurementsv+0x16c>)
    sensor_data.temperatureInC = sht31.readTemperature();
   d447a:	e9c4 0104 	strd	r0, r1, [r4, #16]
    snprintf(temperatureString,sizeof(temperatureString),"%4.1f*C", sensor_data.temperatureInC);
   d447e:	e9cd 0100 	strd	r0, r1, [sp]
   d4482:	2110      	movs	r1, #16
   d4484:	4846      	ldr	r0, [pc, #280]	; (d45a0 <_Z16takeMeasurementsv+0x170>)
   d4486:	f001 fa91 	bl	d59ac <snprintf>
    sensor_data.relativeHumidity = sht31.readHumidity();
   d448a:	4842      	ldr	r0, [pc, #264]	; (d4594 <_Z16takeMeasurementsv+0x164>)
   d448c:	f000 ffde 	bl	d544c <_ZN14Adafruit_SHT3112readHumidityEv>
   d4490:	ee10 0a10 	vmov	r0, s0
   d4494:	f002 feb0 	bl	d71f8 <__aeabi_f2d>
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d4498:	4a42      	ldr	r2, [pc, #264]	; (d45a4 <_Z16takeMeasurementsv+0x174>)
    sensor_data.relativeHumidity = sht31.readHumidity();
   d449a:	e9c4 0106 	strd	r0, r1, [r4, #24]
    snprintf(humidityString,sizeof(humidityString),"%4.1f%%", sensor_data.relativeHumidity);
   d449e:	e9cd 0100 	strd	r0, r1, [sp]
   d44a2:	2110      	movs	r1, #16
   d44a4:	4840      	ldr	r0, [pc, #256]	; (d45a8 <_Z16takeMeasurementsv+0x178>)
   d44a6:	f001 fa81 	bl	d59ac <snprintf>
    sensor_data.lux = veml.readLux();
   d44aa:	4840      	ldr	r0, [pc, #256]	; (d45ac <_Z16takeMeasurementsv+0x17c>)
   d44ac:	f000 fdd0 	bl	d5050 <_ZN17Adafruit_VEML77007readLuxEv>
    sensor_data.white = veml.readWhite();
   d44b0:	483e      	ldr	r0, [pc, #248]	; (d45ac <_Z16takeMeasurementsv+0x17c>)
    sensor_data.lux = veml.readLux();
   d44b2:	ed84 0a08 	vstr	s0, [r4, #32]
    sensor_data.white = veml.readWhite();
   d44b6:	f000 fdeb 	bl	d5090 <_ZN17Adafruit_VEML77009readWhiteEv>
    sensor_data.raw_als = veml.readALS();
   d44ba:	483c      	ldr	r0, [pc, #240]	; (d45ac <_Z16takeMeasurementsv+0x17c>)
    sensor_data.white = veml.readWhite();
   d44bc:	ed84 0a09 	vstr	s0, [r4, #36]	; 0x24
    sensor_data.raw_als = veml.readALS();
   d44c0:	f000 fd66 	bl	d4f90 <_ZN17Adafruit_VEML77007readALSEv>
   d44c4:	ee07 0a90 	vmov	s15, r0
   d44c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    snprintf(luxString,sizeof(luxString),"Lux : %4.1f", sensor_data.lux);
   d44cc:	6a20      	ldr	r0, [r4, #32]
    sensor_data.raw_als = veml.readALS();
   d44ce:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
    snprintf(luxString,sizeof(luxString),"Lux : %4.1f", sensor_data.lux);
   d44d2:	f002 fe91 	bl	d71f8 <__aeabi_f2d>
   d44d6:	4a36      	ldr	r2, [pc, #216]	; (d45b0 <_Z16takeMeasurementsv+0x180>)
   d44d8:	e9cd 0100 	strd	r0, r1, [sp]
   d44dc:	2110      	movs	r1, #16
   d44de:	4835      	ldr	r0, [pc, #212]	; (d45b4 <_Z16takeMeasurementsv+0x184>)
   d44e0:	f001 fa64 	bl	d59ac <snprintf>
    snprintf(whiteString,sizeof(whiteString),"White : %4.1f", sensor_data.white);
   d44e4:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d44e6:	f002 fe87 	bl	d71f8 <__aeabi_f2d>
   d44ea:	4a33      	ldr	r2, [pc, #204]	; (d45b8 <_Z16takeMeasurementsv+0x188>)
   d44ec:	e9cd 0100 	strd	r0, r1, [sp]
   d44f0:	2110      	movs	r1, #16
   d44f2:	4832      	ldr	r0, [pc, #200]	; (d45bc <_Z16takeMeasurementsv+0x18c>)
   d44f4:	f001 fa5a 	bl	d59ac <snprintf>
    snprintf(ALSString,sizeof(ALSString),"ALS : %4.1f", sensor_data.raw_als);
   d44f8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   d44fa:	f002 fe7d 	bl	d71f8 <__aeabi_f2d>
   d44fe:	4a30      	ldr	r2, [pc, #192]	; (d45c0 <_Z16takeMeasurementsv+0x190>)
   d4500:	e9cd 0100 	strd	r0, r1, [sp]
   d4504:	2110      	movs	r1, #16
   d4506:	482f      	ldr	r0, [pc, #188]	; (d45c4 <_Z16takeMeasurementsv+0x194>)
   d4508:	f001 fa50 	bl	d59ac <snprintf>
   d450c:	a902      	add	r1, sp, #8
   d450e:	2003      	movs	r0, #3
   d4510:	f7ff fe80 	bl	d4214 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d4514:	bb38      	cbnz	r0, d4566 <_Z16takeMeasurementsv+0x136>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4516:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   d451a:	ee07 3a90 	vmov	s15, r3
   d451e:	eefb 7acc 	vcvt.f32.u32	s15, s15, #8
    sensor_data.stateOfCharge = int(System.batteryCharge());
   d4522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensor_data.stateOfCharge);
   d4526:	4a28      	ldr	r2, [pc, #160]	; (d45c8 <_Z16takeMeasurementsv+0x198>)
   d4528:	4828      	ldr	r0, [pc, #160]	; (d45cc <_Z16takeMeasurementsv+0x19c>)
    sensor_data.stateOfCharge = int(System.batteryCharge());
   d452a:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensor_data.stateOfCharge);
   d452e:	2110      	movs	r1, #16
    sensor_data.stateOfCharge = int(System.batteryCharge());
   d4530:	ee17 3a90 	vmov	r3, s15
    sensor_data.validData = true;
   d4534:	2501      	movs	r5, #1
    snprintf(batteryString, sizeof(batteryString), "%i %%", sensor_data.stateOfCharge);
   d4536:	f001 fa39 	bl	d59ac <snprintf>
    getBatteryContext();                   // Check what the battery is doing.
   d453a:	f7ff fe8f 	bl	d425c <_Z17getBatteryContextv>
    sensor_data.validData = true;
   d453e:	7025      	strb	r5, [r4, #0]
    sensor_data.timeStamp = Time.now();
   d4540:	f002 fa0e 	bl	d6960 <_ZN9TimeClass3nowEv>
   d4544:	6060      	str	r0, [r4, #4]
    EEPROM.put(8 + 100*reportCycle,sensor_data);     
   d4546:	f002 fc8f 	bl	d6e68 <_Z21__fetch_global_EEPROMv>
   d454a:	2064      	movs	r0, #100	; 0x64
   d454c:	4370      	muls	r0, r6
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
   d454e:	4910      	ldr	r1, [pc, #64]	; (d4590 <_Z16takeMeasurementsv+0x160>)
   d4550:	2238      	movs	r2, #56	; 0x38
   d4552:	3008      	adds	r0, #8
   d4554:	f000 ffd0 	bl	d54f8 <HAL_EEPROM_Put>
        return 0;
   d4558:	4628      	mov	r0, r5
}
   d455a:	b004      	add	sp, #16
   d455c:	bd70      	pop	{r4, r5, r6, pc}
    switch (currentMinutes) {
   d455e:	2601      	movs	r6, #1
   d4560:	e783      	b.n	d446a <_Z16takeMeasurementsv+0x3a>
        reportCycle = 2;                                                // This is the third of the sample-only periods
   d4562:	2602      	movs	r6, #2
   d4564:	e781      	b.n	d446a <_Z16takeMeasurementsv+0x3a>
            return -1.0f;
   d4566:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
   d456a:	e7da      	b.n	d4522 <_Z16takeMeasurementsv+0xf2>
inline particle::Future<bool> CloudClass::publish(const char* name) {
    return publish(name, PUBLIC);
}

inline particle::Future<bool> CloudClass::publish(const char* name, const char* data) {
    return publish(name, data, PUBLIC);
   d456c:	4b18      	ldr	r3, [pc, #96]	; (d45d0 <_Z16takeMeasurementsv+0x1a0>)
   d456e:	f88d 5000 	strb.w	r5, [sp]
   d4572:	781b      	ldrb	r3, [r3, #0]
   d4574:	4a17      	ldr	r2, [pc, #92]	; (d45d4 <_Z16takeMeasurementsv+0x1a4>)
   d4576:	4918      	ldr	r1, [pc, #96]	; (d45d8 <_Z16takeMeasurementsv+0x1a8>)
   d4578:	a802      	add	r0, sp, #8
   d457a:	f7ff fdad 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d457e:	a803      	add	r0, sp, #12
   d4580:	f7ff fe90 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Serial.println("Failed to take reading!");
   d4584:	f002 fafa 	bl	d6b7c <_Z16_fetch_usbserialv>
   d4588:	4914      	ldr	r1, [pc, #80]	; (d45dc <_Z16takeMeasurementsv+0x1ac>)
   d458a:	f001 ffae 	bl	d64ea <_ZN5Print7printlnEPKc>
   d458e:	e7e3      	b.n	d4558 <_Z16takeMeasurementsv+0x128>
   d4590:	2003e530 	.word	0x2003e530
   d4594:	2003e568 	.word	0x2003e568
   d4598:	2003e4f8 	.word	0x2003e4f8
   d459c:	000d7a8b 	.word	0x000d7a8b
   d45a0:	2003e575 	.word	0x2003e575
   d45a4:	000d7a93 	.word	0x000d7a93
   d45a8:	2003e501 	.word	0x2003e501
   d45ac:	2003e588 	.word	0x2003e588
   d45b0:	000d7a9b 	.word	0x000d7a9b
   d45b4:	2003e51a 	.word	0x2003e51a
   d45b8:	000d7aa7 	.word	0x000d7aa7
   d45bc:	2003e5c8 	.word	0x2003e5c8
   d45c0:	000d7ab5 	.word	0x000d7ab5
   d45c4:	2003e494 	.word	0x2003e494
   d45c8:	000d7ac1 	.word	0x000d7ac1
   d45cc:	2003e4e8 	.word	0x2003e4e8
   d45d0:	2003e4d0 	.word	0x2003e4d0
   d45d4:	000d7ac7 	.word	0x000d7ac7
   d45d8:	000d7ae4 	.word	0x000d7ae4
   d45dc:	000d7ae8 	.word	0x000d7ae8

000d45e0 <setup>:
{
   d45e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d45e2:	b0bd      	sub	sp, #244	; 0xf4
  Serial.begin(115200);
   d45e4:	f002 faca 	bl	d6b7c <_Z16_fetch_usbserialv>
   d45e8:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
   d45ec:	f002 faba 	bl	d6b64 <_ZN9USBSerial5beginEl>
  Serial.println("SHT31 test");
   d45f0:	f002 fac4 	bl	d6b7c <_Z16_fetch_usbserialv>
   d45f4:	497f      	ldr	r1, [pc, #508]	; (d47f4 <setup+0x214>)
   d45f6:	f001 ff78 	bl	d64ea <_ZN5Print7printlnEPKc>
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d45fa:	4b7f      	ldr	r3, [pc, #508]	; (d47f8 <setup+0x218>)
   d45fc:	aa0c      	add	r2, sp, #48	; 0x30
   d45fe:	f103 0510 	add.w	r5, r3, #16
   d4602:	4616      	mov	r6, r2
   d4604:	6818      	ldr	r0, [r3, #0]
   d4606:	6859      	ldr	r1, [r3, #4]
   d4608:	4614      	mov	r4, r2
   d460a:	c403      	stmia	r4!, {r0, r1}
   d460c:	3308      	adds	r3, #8
   d460e:	42ab      	cmp	r3, r5
   d4610:	4622      	mov	r2, r4
   d4612:	d1f7      	bne.n	d4604 <setup+0x24>
   d4614:	8819      	ldrh	r1, [r3, #0]
   d4616:	789b      	ldrb	r3, [r3, #2]
   d4618:	8021      	strh	r1, [r4, #0]
   d461a:	222d      	movs	r2, #45	; 0x2d
   d461c:	70a3      	strb	r3, [r4, #2]
   d461e:	2100      	movs	r1, #0
  state = IDLE_STATE;
   d4620:	4c76      	ldr	r4, [pc, #472]	; (d47fc <setup+0x21c>)
  char StartupMessage[64] = "Startup Successful";                                           // Messages from Initialization
   d4622:	f10d 0043 	add.w	r0, sp, #67	; 0x43
   d4626:	f003 f8c1 	bl	d77ac <memset>
  state = IDLE_STATE;
   d462a:	2302      	movs	r3, #2
  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d462c:	2101      	movs	r1, #1
   d462e:	2007      	movs	r0, #7
  state = IDLE_STATE;
   d4630:	7023      	strb	r3, [r4, #0]
  pinMode(HumidityLED, OUTPUT);                                                             // declare the Blue LED Pin as an output
   d4632:	f002 fc07 	bl	d6e44 <pinMode>
  pinMode(tempLED,OUTPUT);
   d4636:	2101      	movs	r1, #1
   d4638:	2005      	movs	r0, #5
   d463a:	f002 fc03 	bl	d6e44 <pinMode>
    static String deviceID(void) { return spark_deviceID(); }
   d463e:	a804      	add	r0, sp, #16
   d4640:	f001 f91c 	bl	d587c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4644:	2300      	movs	r3, #0
   d4646:	227d      	movs	r2, #125	; 0x7d
   d4648:	a91c      	add	r1, sp, #112	; 0x70
   d464a:	a804      	add	r0, sp, #16
   d464c:	f002 f844 	bl	d66d8 <_ZNK6String8getBytesEPhjj>
        return spark_subscribe(eventName, handler, NULL, scope, NULL, NULL);
   d4650:	2300      	movs	r3, #0
   d4652:	461a      	mov	r2, r3
   d4654:	e9cd 3300 	strd	r3, r3, [sp]
   d4658:	4969      	ldr	r1, [pc, #420]	; (d4800 <setup+0x220>)
   d465a:	a81c      	add	r0, sp, #112	; 0x70
   d465c:	f001 f91e 	bl	d589c <spark_subscribe>
  Particle.variable("Release",releaseNumber);
   d4660:	4b68      	ldr	r3, [pc, #416]	; (d4804 <setup+0x224>)
        return _variable(varKey, var, STRING);
   d4662:	4869      	ldr	r0, [pc, #420]	; (d4808 <setup+0x228>)
   d4664:	6819      	ldr	r1, [r3, #0]
   d4666:	f7ff fd33 	bl	d40d0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d466a:	4968      	ldr	r1, [pc, #416]	; (d480c <setup+0x22c>)
   d466c:	4868      	ldr	r0, [pc, #416]	; (d4810 <setup+0x230>)
   d466e:	f7ff fd2f 	bl	d40d0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4672:	4968      	ldr	r1, [pc, #416]	; (d4814 <setup+0x234>)
   d4674:	4868      	ldr	r0, [pc, #416]	; (d4818 <setup+0x238>)
   d4676:	f7ff fd2b 	bl	d40d0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d467a:	4968      	ldr	r1, [pc, #416]	; (d481c <setup+0x23c>)
   d467c:	4868      	ldr	r0, [pc, #416]	; (d4820 <setup+0x240>)
   d467e:	f7ff fd27 	bl	d40d0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4682:	4968      	ldr	r1, [pc, #416]	; (d4824 <setup+0x244>)
   d4684:	4868      	ldr	r0, [pc, #416]	; (d4828 <setup+0x248>)
   d4686:	f7ff fd23 	bl	d40d0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d468a:	4968      	ldr	r1, [pc, #416]	; (d482c <setup+0x24c>)
   d468c:	4868      	ldr	r0, [pc, #416]	; (d4830 <setup+0x250>)
   d468e:	f7ff fd1f 	bl	d40d0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d4692:	4968      	ldr	r1, [pc, #416]	; (d4834 <setup+0x254>)
   d4694:	4868      	ldr	r0, [pc, #416]	; (d4838 <setup+0x258>)
   d4696:	f7ff fd1b 	bl	d40d0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d469a:	4968      	ldr	r1, [pc, #416]	; (d483c <setup+0x25c>)
   d469c:	4868      	ldr	r0, [pc, #416]	; (d4840 <setup+0x260>)
   d469e:	f7ff fd17 	bl	d40d0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
   d46a2:	4968      	ldr	r1, [pc, #416]	; (d4844 <setup+0x264>)
   d46a4:	4868      	ldr	r0, [pc, #416]	; (d4848 <setup+0x268>)
   d46a6:	f7ff fd13 	bl	d40d0 <_ZN10CloudClass9_variableI17CloudVariableTypeIPKcvEEEbS3_NT_11PointerTypeERKS5_.isra.0>
        return register_function(call_raw_user_function, (void*)func, funcKey);
   d46aa:	4a68      	ldr	r2, [pc, #416]	; (d484c <setup+0x26c>)
   d46ac:	4968      	ldr	r1, [pc, #416]	; (d4850 <setup+0x270>)
   d46ae:	4869      	ldr	r0, [pc, #420]	; (d4854 <setup+0x274>)
   d46b0:	f001 fa8e 	bl	d5bd0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
   d46b4:	4968      	ldr	r1, [pc, #416]	; (d4858 <setup+0x278>)
   d46b6:	4a69      	ldr	r2, [pc, #420]	; (d485c <setup+0x27c>)
   d46b8:	4866      	ldr	r0, [pc, #408]	; (d4854 <setup+0x274>)
   d46ba:	f001 fa89 	bl	d5bd0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
  if (! sht31.begin(0x44)) {                                                                      // Start the BME680 Sensor
   d46be:	4868      	ldr	r0, [pc, #416]	; (d4860 <setup+0x280>)
   d46c0:	2144      	movs	r1, #68	; 0x44
   d46c2:	f000 fe20 	bl	d5306 <_ZN14Adafruit_SHT315beginEh>
   d46c6:	b988      	cbnz	r0, d46ec <setup+0x10c>
   d46c8:	f000 fef6 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d46cc:	4d65      	ldr	r5, [pc, #404]	; (d4864 <setup+0x284>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d46ce:	4966      	ldr	r1, [pc, #408]	; (d4868 <setup+0x288>)
    resetTimeStamp = millis();
   d46d0:	6028      	str	r0, [r5, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - SHT31 Initialization");
   d46d2:	4630      	mov	r0, r6
   d46d4:	f003 f8a0 	bl	d7818 <strcpy>
    Serial.println("Couldn't find SHT31");
   d46d8:	f002 fa50 	bl	d6b7c <_Z16_fetch_usbserialv>
   d46dc:	4963      	ldr	r1, [pc, #396]	; (d486c <setup+0x28c>)
   d46de:	f001 ff04 	bl	d64ea <_ZN5Print7printlnEPKc>
    state = ERROR_STATE;
   d46e2:	2301      	movs	r3, #1
   d46e4:	7023      	strb	r3, [r4, #0]
   d46e6:	f000 fee7 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d46ea:	6028      	str	r0, [r5, #0]
  if (!veml.begin()) {                                                                      // Start the BME680 Sensor
   d46ec:	f002 fbea 	bl	d6ec4 <_Z19__fetch_global_Wirev>
   d46f0:	4601      	mov	r1, r0
   d46f2:	485f      	ldr	r0, [pc, #380]	; (d4870 <setup+0x290>)
   d46f4:	f000 fcef 	bl	d50d6 <_ZN17Adafruit_VEML77005beginEP7TwoWire>
   d46f8:	b988      	cbnz	r0, d471e <setup+0x13e>
   d46fa:	f000 fedd 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d46fe:	4d59      	ldr	r5, [pc, #356]	; (d4864 <setup+0x284>)
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - VEML Initialization");
   d4700:	495c      	ldr	r1, [pc, #368]	; (d4874 <setup+0x294>)
    resetTimeStamp = millis();
   d4702:	6028      	str	r0, [r5, #0]
    snprintf(StartupMessage,sizeof(StartupMessage),"Error - VEML Initialization");
   d4704:	4630      	mov	r0, r6
   d4706:	f003 f887 	bl	d7818 <strcpy>
    Serial.println("Couldn't find VEML");
   d470a:	f002 fa37 	bl	d6b7c <_Z16_fetch_usbserialv>
   d470e:	495a      	ldr	r1, [pc, #360]	; (d4878 <setup+0x298>)
   d4710:	f001 feeb 	bl	d64ea <_ZN5Print7printlnEPKc>
    state = ERROR_STATE;
   d4714:	2301      	movs	r3, #1
   d4716:	7023      	strb	r3, [r4, #0]
   d4718:	f000 fece 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d471c:	6028      	str	r0, [r5, #0]
  veml.setGain(VEML7700_GAIN_1/8); 
   d471e:	4854      	ldr	r0, [pc, #336]	; (d4870 <setup+0x290>)
   d4720:	4d56      	ldr	r5, [pc, #344]	; (d487c <setup+0x29c>)
   d4722:	2100      	movs	r1, #0
   d4724:	f000 fc4e 	bl	d4fc4 <_ZN17Adafruit_VEML77007setGainEh>
  veml.setIntegrationTime(VEML7700_IT_25MS);
   d4728:	210c      	movs	r1, #12
   d472a:	4851      	ldr	r0, [pc, #324]	; (d4870 <setup+0x290>)
   d472c:	f000 fc41 	bl	d4fb2 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  veml.getGain();
   d4730:	484f      	ldr	r0, [pc, #316]	; (d4870 <setup+0x290>)
   d4732:	f000 fc4a 	bl	d4fca <_ZN17Adafruit_VEML77007getGainEv>
        val_(0) {
   d4736:	2700      	movs	r7, #0
  Particle.publish("Gain",String(1/8),PRIVATE);
   d4738:	220a      	movs	r2, #10
   d473a:	2100      	movs	r1, #0
   d473c:	a808      	add	r0, sp, #32
   d473e:	f001 ffa6 	bl	d668e <_ZN6StringC1Eih>
   d4742:	f88d 7000 	strb.w	r7, [sp]
   d4746:	782b      	ldrb	r3, [r5, #0]
   d4748:	9a08      	ldr	r2, [sp, #32]
   d474a:	494d      	ldr	r1, [pc, #308]	; (d4880 <setup+0x2a0>)
   d474c:	a802      	add	r0, sp, #8
   d474e:	f7ff fcc3 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4752:	a803      	add	r0, sp, #12
   d4754:	f7ff fda6 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4758:	a808      	add	r0, sp, #32
   d475a:	f001 ff0d 	bl	d6578 <_ZN6StringD1Ev>
  veml.getIntegrationTime();
   d475e:	4844      	ldr	r0, [pc, #272]	; (d4870 <setup+0x290>)
   d4760:	f000 fc2a 	bl	d4fb8 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
  Particle.publish("Integration Time",String(25),PRIVATE);
   d4764:	220a      	movs	r2, #10
   d4766:	2119      	movs	r1, #25
   d4768:	a808      	add	r0, sp, #32
   d476a:	f001 ff90 	bl	d668e <_ZN6StringC1Eih>
   d476e:	f88d 7000 	strb.w	r7, [sp]
   d4772:	782b      	ldrb	r3, [r5, #0]
   d4774:	9a08      	ldr	r2, [sp, #32]
   d4776:	4943      	ldr	r1, [pc, #268]	; (d4884 <setup+0x2a4>)
   d4778:	a802      	add	r0, sp, #8
   d477a:	f7ff fcad 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d477e:	a803      	add	r0, sp, #12
   d4780:	f7ff fd90 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4784:	a808      	add	r0, sp, #32
   d4786:	f001 fef7 	bl	d6578 <_ZN6StringD1Ev>
  veml.setLowThreshold(10000);
   d478a:	4839      	ldr	r0, [pc, #228]	; (d4870 <setup+0x290>)
   d478c:	f242 7110 	movw	r1, #10000	; 0x2710
   d4790:	f000 fd8a 	bl	d52a8 <_ZN17Adafruit_VEML770015setLowThresholdEt>
  veml.setHighThreshold(20000);
   d4794:	4836      	ldr	r0, [pc, #216]	; (d4870 <setup+0x290>)
   d4796:	f644 6120 	movw	r1, #20000	; 0x4e20
   d479a:	f000 fd89 	bl	d52b0 <_ZN17Adafruit_VEML770016setHighThresholdEt>
  veml.interruptEnable(true);
   d479e:	2101      	movs	r1, #1
   d47a0:	4833      	ldr	r0, [pc, #204]	; (d4870 <setup+0x290>)
   d47a2:	f000 fc00 	bl	d4fa6 <_ZN17Adafruit_VEML770015interruptEnableEb>
  takeMeasurements();                                                                      // For the benefit of monitoring the device
   d47a6:	f7ff fe43 	bl	d4430 <_Z16takeMeasurementsv>
  if(!connectToParticle()) {
   d47aa:	f7ff fce5 	bl	d4178 <_Z17connectToParticlev>
   d47ae:	b948      	cbnz	r0, d47c4 <setup+0x1e4>
    state = ERROR_STATE;                                                                   // We failed to connect can reset here or go to the ERROR state for remediation
   d47b0:	2301      	movs	r3, #1
   d47b2:	7023      	strb	r3, [r4, #0]
   d47b4:	f000 fe80 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
    resetTimeStamp = millis();
   d47b8:	4b2a      	ldr	r3, [pc, #168]	; (d4864 <setup+0x284>)
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d47ba:	4933      	ldr	r1, [pc, #204]	; (d4888 <setup+0x2a8>)
    resetTimeStamp = millis();
   d47bc:	6018      	str	r0, [r3, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
   d47be:	4630      	mov	r0, r6
   d47c0:	f003 f82a 	bl	d7818 <strcpy>
  if(verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);                      // Let Particle know how the startup process went
   d47c4:	4b31      	ldr	r3, [pc, #196]	; (d488c <setup+0x2ac>)
   d47c6:	781b      	ldrb	r3, [r3, #0]
   d47c8:	b15b      	cbz	r3, d47e2 <setup+0x202>
   d47ca:	2300      	movs	r3, #0
   d47cc:	f88d 3000 	strb.w	r3, [sp]
   d47d0:	a808      	add	r0, sp, #32
   d47d2:	782b      	ldrb	r3, [r5, #0]
   d47d4:	492e      	ldr	r1, [pc, #184]	; (d4890 <setup+0x2b0>)
   d47d6:	4632      	mov	r2, r6
   d47d8:	f7ff fc7e 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d47dc:	a809      	add	r0, sp, #36	; 0x24
   d47de:	f7ff fd61 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d47e2:	f000 fe69 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
   d47e6:	4b2b      	ldr	r3, [pc, #172]	; (d4894 <setup+0x2b4>)
   d47e8:	6018      	str	r0, [r3, #0]
  String deviceID = System.deviceID();                                                      // Multiple Electrons share the same hook - keeps things straight
   d47ea:	a804      	add	r0, sp, #16
   d47ec:	f001 fec4 	bl	d6578 <_ZN6StringD1Ev>
}
   d47f0:	b03d      	add	sp, #244	; 0xf4
   d47f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d47f4:	000d7b00 	.word	0x000d7b00
   d47f8:	000d7ce8 	.word	0x000d7ce8
   d47fc:	2003e574 	.word	0x2003e574
   d4800:	000d4399 	.word	0x000d4399
   d4804:	2003e350 	.word	0x2003e350
   d4808:	000d7b0b 	.word	0x000d7b0b
   d480c:	2003e575 	.word	0x2003e575
   d4810:	000d7b13 	.word	0x000d7b13
   d4814:	2003e501 	.word	0x2003e501
   d4818:	000d7b1f 	.word	0x000d7b1f
   d481c:	2003e51a 	.word	0x2003e51a
   d4820:	000d7b28 	.word	0x000d7b28
   d4824:	2003e5c8 	.word	0x2003e5c8
   d4828:	000d7b2c 	.word	0x000d7b2c
   d482c:	2003e494 	.word	0x2003e494
   d4830:	000d7b32 	.word	0x000d7b32
   d4834:	2003e4e8 	.word	0x2003e4e8
   d4838:	000d7b3a 	.word	0x000d7b3a
   d483c:	2003e4d8 	.word	0x2003e4d8
   d4840:	000d7b42 	.word	0x000d7b42
   d4844:	2003e4a4 	.word	0x2003e4a4
   d4848:	000d7b51 	.word	0x000d7b51
   d484c:	000d7b5d 	.word	0x000d7b5d
   d4850:	000d40b5 	.word	0x000d40b5
   d4854:	000d5ba5 	.word	0x000d5ba5
   d4858:	000d4899 	.word	0x000d4899
   d485c:	000d7b69 	.word	0x000d7b69
   d4860:	2003e568 	.word	0x2003e568
   d4864:	2003e52c 	.word	0x2003e52c
   d4868:	000d7b76 	.word	0x000d7b76
   d486c:	000d7b93 	.word	0x000d7b93
   d4870:	2003e588 	.word	0x2003e588
   d4874:	000d7ba7 	.word	0x000d7ba7
   d4878:	000d7bc3 	.word	0x000d7bc3
   d487c:	2003e4d1 	.word	0x2003e4d1
   d4880:	000d7bd6 	.word	0x000d7bd6
   d4884:	000d7bdb 	.word	0x000d7bdb
   d4888:	000d7bec 	.word	0x000d7bec
   d488c:	2003e424 	.word	0x2003e424
   d4890:	000d7bfe 	.word	0x000d7bfe
   d4894:	2003e514 	.word	0x2003e514

000d4898 <_Z14setVerboseMode6String>:
{
   d4898:	b530      	push	{r4, r5, lr}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
   d489a:	4914      	ldr	r1, [pc, #80]	; (d48ec <_Z14setVerboseMode6String+0x54>)
   d489c:	b085      	sub	sp, #20
   d489e:	4605      	mov	r5, r0
   d48a0:	f001 ff08 	bl	d66b4 <_ZNK6String6equalsEPKc>
  if (command == "1")
   d48a4:	4604      	mov	r4, r0
   d48a6:	b190      	cbz	r0, d48ce <_Z14setVerboseMode6String+0x36>
    verboseMode = true;
   d48a8:	4b11      	ldr	r3, [pc, #68]	; (d48f0 <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d48aa:	4a12      	ldr	r2, [pc, #72]	; (d48f4 <_Z14setVerboseMode6String+0x5c>)
    verboseMode = true;
   d48ac:	2401      	movs	r4, #1
   d48ae:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
   d48b0:	2300      	movs	r3, #0
   d48b2:	f88d 3000 	strb.w	r3, [sp]
   d48b6:	4b10      	ldr	r3, [pc, #64]	; (d48f8 <_Z14setVerboseMode6String+0x60>)
   d48b8:	781b      	ldrb	r3, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d48ba:	4910      	ldr	r1, [pc, #64]	; (d48fc <_Z14setVerboseMode6String+0x64>)
   d48bc:	a802      	add	r0, sp, #8
   d48be:	f7ff fc0b 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d48c2:	a803      	add	r0, sp, #12
   d48c4:	f7ff fcee 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d48c8:	2001      	movs	r0, #1
}
   d48ca:	b005      	add	sp, #20
   d48cc:	bd30      	pop	{r4, r5, pc}
   d48ce:	490c      	ldr	r1, [pc, #48]	; (d4900 <_Z14setVerboseMode6String+0x68>)
   d48d0:	4628      	mov	r0, r5
   d48d2:	f001 feef 	bl	d66b4 <_ZNK6String6equalsEPKc>
  else if (command == "0")
   d48d6:	2800      	cmp	r0, #0
   d48d8:	d0f7      	beq.n	d48ca <_Z14setVerboseMode6String+0x32>
    verboseMode = false;
   d48da:	4b05      	ldr	r3, [pc, #20]	; (d48f0 <_Z14setVerboseMode6String+0x58>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d48dc:	4a09      	ldr	r2, [pc, #36]	; (d4904 <_Z14setVerboseMode6String+0x6c>)
    verboseMode = false;
   d48de:	701c      	strb	r4, [r3, #0]
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
   d48e0:	4b05      	ldr	r3, [pc, #20]	; (d48f8 <_Z14setVerboseMode6String+0x60>)
   d48e2:	f88d 4000 	strb.w	r4, [sp]
   d48e6:	781b      	ldrb	r3, [r3, #0]
   d48e8:	e7e7      	b.n	d48ba <_Z14setVerboseMode6String+0x22>
   d48ea:	bf00      	nop
   d48ec:	000d7ba5 	.word	0x000d7ba5
   d48f0:	2003e424 	.word	0x2003e424
   d48f4:	000d7c06 	.word	0x000d7c06
   d48f8:	2003e4d1 	.word	0x2003e4d1
   d48fc:	000d7c27 	.word	0x000d7c27
   d4900:	000d79f2 	.word	0x000d79f2
   d4904:	000d7c17 	.word	0x000d7c17

000d4908 <_Z22publishStateTransitionv>:
{
   d4908:	b530      	push	{r4, r5, lr}
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d490a:	4d18      	ldr	r5, [pc, #96]	; (d496c <_Z22publishStateTransitionv+0x64>)
   d490c:	4c18      	ldr	r4, [pc, #96]	; (d4970 <_Z22publishStateTransitionv+0x68>)
   d490e:	4919      	ldr	r1, [pc, #100]	; (d4974 <_Z22publishStateTransitionv+0x6c>)
   d4910:	782a      	ldrb	r2, [r5, #0]
   d4912:	7820      	ldrb	r0, [r4, #0]
{
   d4914:	b08f      	sub	sp, #60	; 0x3c
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
   d4916:	231a      	movs	r3, #26
   d4918:	fb03 1202 	mla	r2, r3, r2, r1
   d491c:	9200      	str	r2, [sp, #0]
   d491e:	fb03 1300 	mla	r3, r3, r0, r1
   d4922:	4a15      	ldr	r2, [pc, #84]	; (d4978 <_Z22publishStateTransitionv+0x70>)
   d4924:	2128      	movs	r1, #40	; 0x28
   d4926:	a804      	add	r0, sp, #16
   d4928:	f001 f840 	bl	d59ac <snprintf>
  oldState = state;
   d492c:	782b      	ldrb	r3, [r5, #0]
   d492e:	7023      	strb	r3, [r4, #0]
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4930:	f000 ff9c 	bl	d586c <spark_cloud_flag_connected>
  if(Particle.connected()) {
   d4934:	b190      	cbz	r0, d495c <_Z22publishStateTransitionv+0x54>
        return waitConditionWhile(_condition, []{ return true; });
   d4936:	f7ff fc61 	bl	d41fc <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
   d493a:	2300      	movs	r3, #0
   d493c:	f88d 3000 	strb.w	r3, [sp]
   d4940:	4b0e      	ldr	r3, [pc, #56]	; (d497c <_Z22publishStateTransitionv+0x74>)
   d4942:	490f      	ldr	r1, [pc, #60]	; (d4980 <_Z22publishStateTransitionv+0x78>)
   d4944:	781b      	ldrb	r3, [r3, #0]
   d4946:	aa04      	add	r2, sp, #16
   d4948:	a802      	add	r0, sp, #8
   d494a:	f7ff fbc5 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d494e:	a803      	add	r0, sp, #12
   d4950:	f7ff fca8 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4954:	f000 fdb0 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
   d4958:	4b0a      	ldr	r3, [pc, #40]	; (d4984 <_Z22publishStateTransitionv+0x7c>)
   d495a:	6018      	str	r0, [r3, #0]
  Serial.println(stateTransitionString);
   d495c:	f002 f90e 	bl	d6b7c <_Z16_fetch_usbserialv>
   d4960:	a904      	add	r1, sp, #16
   d4962:	f001 fdc2 	bl	d64ea <_ZN5Print7printlnEPKc>
}
   d4966:	b00f      	add	sp, #60	; 0x3c
   d4968:	bd30      	pop	{r4, r5, pc}
   d496a:	bf00      	nop
   d496c:	2003e574 	.word	0x2003e574
   d4970:	2003e52a 	.word	0x2003e52a
   d4974:	2003e354 	.word	0x2003e354
   d4978:	000d7c2c 	.word	0x000d7c2c
   d497c:	2003e4d1 	.word	0x2003e4d1
   d4980:	000d7c3a 	.word	0x000d7c3a
   d4984:	2003e514 	.word	0x2003e514

000d4988 <loop>:
{
   d4988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  switch(state) {
   d498c:	4c7a      	ldr	r4, [pc, #488]	; (d4b78 <loop+0x1f0>)
   d498e:	7823      	ldrb	r3, [r4, #0]
   d4990:	3b01      	subs	r3, #1
{
   d4992:	b09c      	sub	sp, #112	; 0x70
   d4994:	2b06      	cmp	r3, #6
   d4996:	d81d      	bhi.n	d49d4 <loop+0x4c>
   d4998:	e8df f013 	tbh	[pc, r3, lsl #1]
   d499c:	000700c2 	.word	0x000700c2
   d49a0:	00380048 	.word	0x00380048
   d49a4:	00930073 	.word	0x00930073
   d49a8:	0114      	.short	0x0114
    if (verboseMode && state != oldState) publishStateTransition();
   d49aa:	4b74      	ldr	r3, [pc, #464]	; (d4b7c <loop+0x1f4>)
   d49ac:	781b      	ldrb	r3, [r3, #0]
   d49ae:	b12b      	cbz	r3, d49bc <loop+0x34>
   d49b0:	4b73      	ldr	r3, [pc, #460]	; (d4b80 <loop+0x1f8>)
   d49b2:	781b      	ldrb	r3, [r3, #0]
   d49b4:	2b02      	cmp	r3, #2
   d49b6:	d001      	beq.n	d49bc <loop+0x34>
   d49b8:	f7ff ffa6 	bl	d4908 <_Z22publishStateTransitionv>
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 30) {
   d49bc:	f001 ffe0 	bl	d6980 <_ZN9TimeClass4hourEv>
   d49c0:	4b70      	ldr	r3, [pc, #448]	; (d4b84 <loop+0x1fc>)
   d49c2:	4d71      	ldr	r5, [pc, #452]	; (d4b88 <loop+0x200>)
   d49c4:	781b      	ldrb	r3, [r3, #0]
   d49c6:	4298      	cmp	r0, r3
   d49c8:	d007      	beq.n	d49da <loop+0x52>
      TimePassed = Time.minute();
   d49ca:	f001 ffe5 	bl	d6998 <_ZN9TimeClass6minuteEv>
      state = MEASURING_STATE;                                                     
   d49ce:	2303      	movs	r3, #3
      TimePassed = Time.minute();
   d49d0:	6028      	str	r0, [r5, #0]
      state = THRESHOLD_CROSSED;
   d49d2:	7023      	strb	r3, [r4, #0]
}
   d49d4:	b01c      	add	sp, #112	; 0x70
   d49d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Time.hour() != currentHourlyPeriod || Time.minute() - TimePassed >= 30) {
   d49da:	f001 ffdd 	bl	d6998 <_ZN9TimeClass6minuteEv>
   d49de:	682b      	ldr	r3, [r5, #0]
   d49e0:	1ac0      	subs	r0, r0, r3
   d49e2:	281d      	cmp	r0, #29
   d49e4:	dcf1      	bgt.n	d49ca <loop+0x42>
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 4))                 // Send threshold message after every 10 minutes.
   d49e6:	4b69      	ldr	r3, [pc, #420]	; (d4b8c <loop+0x204>)
   d49e8:	781b      	ldrb	r3, [r3, #0]
   d49ea:	b94b      	cbnz	r3, d4a00 <loop+0x78>
    || lowerTemperatureThresholdCrossed \
   d49ec:	4b68      	ldr	r3, [pc, #416]	; (d4b90 <loop+0x208>)
   d49ee:	781b      	ldrb	r3, [r3, #0]
   d49f0:	b933      	cbnz	r3, d4a00 <loop+0x78>
    || upperHumidityThresholdCrossed \
   d49f2:	4b68      	ldr	r3, [pc, #416]	; (d4b94 <loop+0x20c>)
   d49f4:	781b      	ldrb	r3, [r3, #0]
   d49f6:	b91b      	cbnz	r3, d4a00 <loop+0x78>
    || lowerHumidityThresholdCrossed)!= 0 && (Time.minute() - thresholdTimeStamp > 4))                 // Send threshold message after every 10 minutes.
   d49f8:	4b67      	ldr	r3, [pc, #412]	; (d4b98 <loop+0x210>)
   d49fa:	781b      	ldrb	r3, [r3, #0]
   d49fc:	2b00      	cmp	r3, #0
   d49fe:	d0e9      	beq.n	d49d4 <loop+0x4c>
   d4a00:	f001 ffca 	bl	d6998 <_ZN9TimeClass6minuteEv>
   d4a04:	2804      	cmp	r0, #4
   d4a06:	dde5      	ble.n	d49d4 <loop+0x4c>
      state = THRESHOLD_CROSSED;
   d4a08:	2304      	movs	r3, #4
   d4a0a:	e7e2      	b.n	d49d2 <loop+0x4a>
    if (verboseMode && state != oldState) publishStateTransition();
   d4a0c:	4b5b      	ldr	r3, [pc, #364]	; (d4b7c <loop+0x1f4>)
   d4a0e:	781b      	ldrb	r3, [r3, #0]
   d4a10:	b12b      	cbz	r3, d4a1e <loop+0x96>
   d4a12:	4b5b      	ldr	r3, [pc, #364]	; (d4b80 <loop+0x1f8>)
   d4a14:	781b      	ldrb	r3, [r3, #0]
   d4a16:	2b04      	cmp	r3, #4
   d4a18:	d001      	beq.n	d4a1e <loop+0x96>
   d4a1a:	f7ff ff75 	bl	d4908 <_Z22publishStateTransitionv>
    if(takeMeasurements()!=0){                                                                          // Take measurements again before reporting.       
   d4a1e:	f7ff fd07 	bl	d4430 <_Z16takeMeasurementsv>
   d4a22:	b108      	cbz	r0, d4a28 <loop+0xa0>
      state = IDLE_STATE;
   d4a24:	2302      	movs	r3, #2
   d4a26:	e7d4      	b.n	d49d2 <loop+0x4a>
      state= ERROR_STATE;
   d4a28:	2301      	movs	r3, #1
   d4a2a:	e7d2      	b.n	d49d2 <loop+0x4a>
    if (verboseMode && state != oldState) publishStateTransition();
   d4a2c:	4e53      	ldr	r6, [pc, #332]	; (d4b7c <loop+0x1f4>)
   d4a2e:	7832      	ldrb	r2, [r6, #0]
   d4a30:	b12a      	cbz	r2, d4a3e <loop+0xb6>
   d4a32:	4b53      	ldr	r3, [pc, #332]	; (d4b80 <loop+0x1f8>)
   d4a34:	781b      	ldrb	r3, [r3, #0]
   d4a36:	2b03      	cmp	r3, #3
   d4a38:	d001      	beq.n	d4a3e <loop+0xb6>
   d4a3a:	f7ff ff65 	bl	d4908 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
   d4a3e:	f7ff fcf7 	bl	d4430 <_Z16takeMeasurementsv>
   d4a42:	4605      	mov	r5, r0
   d4a44:	b9d8      	cbnz	r0, d4a7e <loop+0xf6>
      state = ERROR_STATE;
   d4a46:	2301      	movs	r3, #1
   d4a48:	7023      	strb	r3, [r4, #0]
   d4a4a:	f000 fd35 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4a4e:	4b53      	ldr	r3, [pc, #332]	; (d4b9c <loop+0x214>)
   d4a50:	6018      	str	r0, [r3, #0]
      if (verboseMode) {
   d4a52:	7833      	ldrb	r3, [r6, #0]
   d4a54:	2b00      	cmp	r3, #0
   d4a56:	d0bd      	beq.n	d49d4 <loop+0x4c>
   d4a58:	f7ff fbd0 	bl	d41fc <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
        Particle.publish("State","Error taking Measurements",PRIVATE);
   d4a5c:	4b50      	ldr	r3, [pc, #320]	; (d4ba0 <loop+0x218>)
   d4a5e:	f88d 5000 	strb.w	r5, [sp]
   d4a62:	781b      	ldrb	r3, [r3, #0]
   d4a64:	4a4f      	ldr	r2, [pc, #316]	; (d4ba4 <loop+0x21c>)
   d4a66:	4950      	ldr	r1, [pc, #320]	; (d4ba8 <loop+0x220>)
   d4a68:	a80c      	add	r0, sp, #48	; 0x30
   d4a6a:	f7ff fb35 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4a6e:	a80d      	add	r0, sp, #52	; 0x34
   d4a70:	f7ff fc18 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a74:	f000 fd20 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
   d4a78:	4b4c      	ldr	r3, [pc, #304]	; (d4bac <loop+0x224>)
      resetTimeStamp = millis();
   d4a7a:	6018      	str	r0, [r3, #0]
   d4a7c:	e7aa      	b.n	d49d4 <loop+0x4c>
    else state = REPORTING_STATE;
   d4a7e:	2305      	movs	r3, #5
   d4a80:	e7a7      	b.n	d49d2 <loop+0x4a>
    if (verboseMode && state != oldState) publishStateTransition();                         // Reporting - hourly or on command
   d4a82:	4b3e      	ldr	r3, [pc, #248]	; (d4b7c <loop+0x1f4>)
   d4a84:	781b      	ldrb	r3, [r3, #0]
   d4a86:	b12b      	cbz	r3, d4a94 <loop+0x10c>
   d4a88:	4b3d      	ldr	r3, [pc, #244]	; (d4b80 <loop+0x1f8>)
   d4a8a:	781b      	ldrb	r3, [r3, #0]
   d4a8c:	2b05      	cmp	r3, #5
   d4a8e:	d001      	beq.n	d4a94 <loop+0x10c>
   d4a90:	f7ff ff3a 	bl	d4908 <_Z22publishStateTransitionv>
   d4a94:	f000 feea 	bl	d586c <spark_cloud_flag_connected>
    if (Particle.connected()) {
   d4a98:	b168      	cbz	r0, d4ab6 <loop+0x12e>
      if (Time.hour() == 12) Particle.syncTime();                                           // Set the clock each day at noon
   d4a9a:	f001 ff71 	bl	d6980 <_ZN9TimeClass4hourEv>
   d4a9e:	280c      	cmp	r0, #12
   d4aa0:	d105      	bne.n	d4aae <loop+0x126>
   d4aa2:	f000 fee3 	bl	d586c <spark_cloud_flag_connected>
        if (!connected()) {
   d4aa6:	b110      	cbz	r0, d4aae <loop+0x126>
        return spark_sync_time(NULL);
   d4aa8:	2000      	movs	r0, #0
   d4aaa:	f000 feff 	bl	d58ac <spark_sync_time>
      sendEvent();                                                                          // Send data to Ubidots
   d4aae:	f7ff fc0f 	bl	d42d0 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                                              // Wait for Response
   d4ab2:	2306      	movs	r3, #6
   d4ab4:	e78d      	b.n	d49d2 <loop+0x4a>
      state = ERROR_STATE;
   d4ab6:	2301      	movs	r3, #1
   d4ab8:	7023      	strb	r3, [r4, #0]
   d4aba:	f000 fcfd 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4abe:	4b37      	ldr	r3, [pc, #220]	; (d4b9c <loop+0x214>)
   d4ac0:	e7db      	b.n	d4a7a <loop+0xf2>
    if (verboseMode && state != oldState) publishStateTransition();
   d4ac2:	4b2e      	ldr	r3, [pc, #184]	; (d4b7c <loop+0x1f4>)
   d4ac4:	781b      	ldrb	r3, [r3, #0]
   d4ac6:	b12b      	cbz	r3, d4ad4 <loop+0x14c>
   d4ac8:	4b2d      	ldr	r3, [pc, #180]	; (d4b80 <loop+0x1f8>)
   d4aca:	781b      	ldrb	r3, [r3, #0]
   d4acc:	2b06      	cmp	r3, #6
   d4ace:	d001      	beq.n	d4ad4 <loop+0x14c>
   d4ad0:	f7ff ff1a 	bl	d4908 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
   d4ad4:	4b36      	ldr	r3, [pc, #216]	; (d4bb0 <loop+0x228>)
   d4ad6:	781b      	ldrb	r3, [r3, #0]
   d4ad8:	b90b      	cbnz	r3, d4ade <loop+0x156>
     state = NAPPING_STATE;
   d4ada:	2307      	movs	r3, #7
   d4adc:	e779      	b.n	d49d2 <loop+0x4a>
   d4ade:	f000 fceb 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
   d4ae2:	4b34      	ldr	r3, [pc, #208]	; (d4bb4 <loop+0x22c>)
   d4ae4:	681b      	ldr	r3, [r3, #0]
   d4ae6:	1ac0      	subs	r0, r0, r3
   d4ae8:	f64a 73c8 	movw	r3, #45000	; 0xafc8
   d4aec:	4298      	cmp	r0, r3
   d4aee:	f67f af71 	bls.w	d49d4 <loop+0x4c>
   d4af2:	f000 fce1 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4af6:	4d29      	ldr	r5, [pc, #164]	; (d4b9c <loop+0x214>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4af8:	4a2f      	ldr	r2, [pc, #188]	; (d4bb8 <loop+0x230>)
      resetTimeStamp = millis();
   d4afa:	6028      	str	r0, [r5, #0]
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
   d4afc:	2300      	movs	r3, #0
   d4afe:	f88d 3000 	strb.w	r3, [sp]
   d4b02:	4b27      	ldr	r3, [pc, #156]	; (d4ba0 <loop+0x218>)
   d4b04:	492d      	ldr	r1, [pc, #180]	; (d4bbc <loop+0x234>)
   d4b06:	781b      	ldrb	r3, [r3, #0]
   d4b08:	a80c      	add	r0, sp, #48	; 0x30
   d4b0a:	f7ff fae5 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4b0e:	a80d      	add	r0, sp, #52	; 0x34
   d4b10:	f7ff fbc8 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
   d4b14:	2301      	movs	r3, #1
   d4b16:	7023      	strb	r3, [r4, #0]
   d4b18:	f000 fcce 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
   d4b1c:	6028      	str	r0, [r5, #0]
   d4b1e:	e759      	b.n	d49d4 <loop+0x4c>
    if (verboseMode && state != oldState) publishStateTransition();
   d4b20:	4b16      	ldr	r3, [pc, #88]	; (d4b7c <loop+0x1f4>)
   d4b22:	781b      	ldrb	r3, [r3, #0]
   d4b24:	b12b      	cbz	r3, d4b32 <loop+0x1aa>
   d4b26:	4b16      	ldr	r3, [pc, #88]	; (d4b80 <loop+0x1f8>)
   d4b28:	781b      	ldrb	r3, [r3, #0]
   d4b2a:	2b01      	cmp	r3, #1
   d4b2c:	d001      	beq.n	d4b32 <loop+0x1aa>
   d4b2e:	f7ff feeb 	bl	d4908 <_Z22publishStateTransitionv>
   d4b32:	f000 fcc1 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
   d4b36:	4b19      	ldr	r3, [pc, #100]	; (d4b9c <loop+0x214>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	f503 2392 	add.w	r3, r3, #299008	; 0x49000
   d4b3e:	f503 7378 	add.w	r3, r3, #992	; 0x3e0
   d4b42:	4283      	cmp	r3, r0
   d4b44:	f4bf af46 	bcs.w	d49d4 <loop+0x4c>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d4b48:	f000 fe90 	bl	d586c <spark_cloud_flag_connected>
      if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
   d4b4c:	b160      	cbz	r0, d4b68 <loop+0x1e0>
   d4b4e:	2300      	movs	r3, #0
   d4b50:	f88d 3000 	strb.w	r3, [sp]
   d4b54:	4b12      	ldr	r3, [pc, #72]	; (d4ba0 <loop+0x218>)
   d4b56:	4a1a      	ldr	r2, [pc, #104]	; (d4bc0 <loop+0x238>)
   d4b58:	781b      	ldrb	r3, [r3, #0]
   d4b5a:	4913      	ldr	r1, [pc, #76]	; (d4ba8 <loop+0x220>)
   d4b5c:	a80c      	add	r0, sp, #48	; 0x30
   d4b5e:	f7ff fabb 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4b62:	a80d      	add	r0, sp, #52	; 0x34
   d4b64:	f7ff fb9e 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      delay(2000);
   d4b68:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4b6c:	f000 ff46 	bl	d59fc <delay>
      System.reset();
   d4b70:	f001 fe10 	bl	d6794 <_ZN11SystemClass5resetEv>
   d4b74:	e72e      	b.n	d49d4 <loop+0x4c>
   d4b76:	bf00      	nop
   d4b78:	2003e574 	.word	0x2003e574
   d4b7c:	2003e424 	.word	0x2003e424
   d4b80:	2003e52a 	.word	0x2003e52a
   d4b84:	2003e500 	.word	0x2003e500
   d4b88:	2003e4d4 	.word	0x2003e4d4
   d4b8c:	2003e586 	.word	0x2003e586
   d4b90:	2003e519 	.word	0x2003e519
   d4b94:	2003e585 	.word	0x2003e585
   d4b98:	2003e518 	.word	0x2003e518
   d4b9c:	2003e52c 	.word	0x2003e52c
   d4ba0:	2003e4d1 	.word	0x2003e4d1
   d4ba4:	000d7c4b 	.word	0x000d7c4b
   d4ba8:	000d7a85 	.word	0x000d7a85
   d4bac:	2003e514 	.word	0x2003e514
   d4bb0:	2003e34c 	.word	0x2003e34c
   d4bb4:	2003e5c4 	.word	0x2003e5c4
   d4bb8:	000d7aff 	.word	0x000d7aff
   d4bbc:	000d7c65 	.word	0x000d7c65
   d4bc0:	000d7c7e 	.word	0x000d7c7e
      if (verboseMode && oldState != state) publishStateTransition();                    // If verboseMode is on and state is changed, Then publish the state transition.
   d4bc4:	4b3b      	ldr	r3, [pc, #236]	; (d4cb4 <loop+0x32c>)
   d4bc6:	781b      	ldrb	r3, [r3, #0]
   d4bc8:	b12b      	cbz	r3, d4bd6 <loop+0x24e>
   d4bca:	4b3b      	ldr	r3, [pc, #236]	; (d4cb8 <loop+0x330>)
   d4bcc:	781b      	ldrb	r3, [r3, #0]
   d4bce:	2b07      	cmp	r3, #7
   d4bd0:	d001      	beq.n	d4bd6 <loop+0x24e>
   d4bd2:	f7ff fe99 	bl	d4908 <_Z22publishStateTransitionv>
   d4bd6:	f000 fe49 	bl	d586c <spark_cloud_flag_connected>
   d4bda:	f8df 80fc 	ldr.w	r8, [pc, #252]	; d4cd8 <loop+0x350>
   d4bde:	ad07      	add	r5, sp, #28
       if (Particle.connected()) {
   d4be0:	b190      	cbz	r0, d4c08 <loop+0x280>
        snprintf(data,sizeof(data),"Going to take a 9 minutes nap");
   d4be2:	4936      	ldr	r1, [pc, #216]	; (d4cbc <loop+0x334>)
   d4be4:	a80c      	add	r0, sp, #48	; 0x30
   d4be6:	f002 fe17 	bl	d7818 <strcpy>
   d4bea:	f7ff fb07 	bl	d41fc <_ZN11SystemClass18waitConditionWhileIZ14UbidotsHandlerPKcS2_EUlvE0_ZNS_13waitConditionIS3_EEbT_EUlvE_EEbS5_T0_.isra.0>
   d4bee:	2300      	movs	r3, #0
        Particle.publish("Napping", data, PRIVATE);
   d4bf0:	f88d 3000 	strb.w	r3, [sp]
   d4bf4:	a806      	add	r0, sp, #24
   d4bf6:	f898 3000 	ldrb.w	r3, [r8]
   d4bfa:	4931      	ldr	r1, [pc, #196]	; (d4cc0 <loop+0x338>)
   d4bfc:	aa0c      	add	r2, sp, #48	; 0x30
   d4bfe:	f7ff fa6b 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4c02:	4628      	mov	r0, r5
   d4c04:	f7ff fb4e 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      pinMode(D7,OUTPUT);
   d4c08:	2101      	movs	r1, #1
   d4c0a:	2007      	movs	r0, #7
   d4c0c:	f002 f91a 	bl	d6e44 <pinMode>
              valid_(true) {
   d4c10:	2301      	movs	r3, #1
   d4c12:	2600      	movs	r6, #0
   d4c14:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
        config_.size = sizeof(hal_sleep_config_t);
   d4c18:	4f2a      	ldr	r7, [pc, #168]	; (d4cc4 <loop+0x33c>)
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4c1a:	492b      	ldr	r1, [pc, #172]	; (d4cc8 <loop+0x340>)
        : config_(config) {
   d4c1c:	9506      	str	r5, [sp, #24]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4c1e:	2302      	movs	r3, #2
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4c20:	2010      	movs	r0, #16
        config_.wakeup_sources = nullptr;
   d4c22:	e9cd 6609 	strd	r6, r6, [sp, #36]	; 0x24
              valid_(true) {
   d4c26:	f8ad 6021 	strh.w	r6, [sp, #33]	; 0x21
   d4c2a:	f88d 6023 	strb.w	r6, [sp, #35]	; 0x23
        config_.size = sizeof(hal_sleep_config_t);
   d4c2e:	9707      	str	r7, [sp, #28]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4c30:	f88d 3020 	strb.w	r3, [sp, #32]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d4c34:	f002 f975 	bl	d6f22 <_ZnwjRKSt9nothrow_t>
   d4c38:	4605      	mov	r5, r0
   d4c3a:	2800      	cmp	r0, #0
   d4c3c:	d036      	beq.n	d4cac <loop+0x324>
   d4c3e:	2210      	movs	r2, #16
   d4c40:	4631      	mov	r1, r6
   d4c42:	f002 fdb3 	bl	d77ac <memset>
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d4c46:	2304      	movs	r3, #4
   d4c48:	80ab      	strh	r3, [r5, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d4c4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4c4c:	60ab      	str	r3, [r5, #8]
            wakeupSource->ms = ms;
   d4c4e:	4b1f      	ldr	r3, [pc, #124]	; (d4ccc <loop+0x344>)
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d4c50:	602f      	str	r7, [r5, #0]
            wakeupSource->ms = ms;
   d4c52:	60eb      	str	r3, [r5, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d4c54:	950a      	str	r5, [sp, #40]	; 0x28
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d4c56:	2301      	movs	r3, #1
      .network(NETWORK_INTERFACE_CELLULAR, SystemSleepNetworkFlag::INACTIVE_STANDBY);
   d4c58:	aa03      	add	r2, sp, #12
   d4c5a:	2104      	movs	r1, #4
   d4c5c:	a806      	add	r0, sp, #24
   d4c5e:	f8ad 300c 	strh.w	r3, [sp, #12]
   d4c62:	f7ff fa4f 	bl	d4104 <_ZN8particle24SystemSleepConfiguration7networkEmNS_9EnumFlagsINS_22SystemSleepNetworkFlagEvEE>
      System.sleep(config);
   d4c66:	a803      	add	r0, sp, #12
   d4c68:	a906      	add	r1, sp, #24
   d4c6a:	f001 fd97 	bl	d679c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d4c6e:	9803      	ldr	r0, [sp, #12]
   d4c70:	b108      	cbz	r0, d4c76 <loop+0x2ee>
            free(wakeupSource_);
   d4c72:	f000 fe8b 	bl	d598c <free>
        spark_cloud_flag_connect();
   d4c76:	f000 fdf1 	bl	d585c <spark_cloud_flag_connect>
   d4c7a:	2300      	movs	r3, #0
      Particle.publish("WokeUp","From Sleep",PRIVATE);
   d4c7c:	4a14      	ldr	r2, [pc, #80]	; (d4cd0 <loop+0x348>)
   d4c7e:	4915      	ldr	r1, [pc, #84]	; (d4cd4 <loop+0x34c>)
   d4c80:	f88d 3000 	strb.w	r3, [sp]
   d4c84:	a803      	add	r0, sp, #12
   d4c86:	f898 3000 	ldrb.w	r3, [r8]
   d4c8a:	f7ff fa25 	bl	d40d8 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.0.constprop.0>
   d4c8e:	a804      	add	r0, sp, #16
   d4c90:	f7ff fb08 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = IDLE_STATE;
   d4c94:	2302      	movs	r3, #2
        auto wakeupSource = config_.wakeup_sources;
   d4c96:	980a      	ldr	r0, [sp, #40]	; 0x28
   d4c98:	7023      	strb	r3, [r4, #0]
        while (wakeupSource) {
   d4c9a:	2800      	cmp	r0, #0
   d4c9c:	f43f ae9a 	beq.w	d49d4 <loop+0x4c>
            auto next = wakeupSource->next;
   d4ca0:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   d4ca2:	210c      	movs	r1, #12
   d4ca4:	f002 f93b 	bl	d6f1e <_ZdlPvj>
            wakeupSource = next;
   d4ca8:	4620      	mov	r0, r4
        while (wakeupSource) {
   d4caa:	e7f6      	b.n	d4c9a <loop+0x312>
                valid_ = false;
   d4cac:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                return *this;
   d4cb0:	e7d1      	b.n	d4c56 <loop+0x2ce>
   d4cb2:	bf00      	nop
   d4cb4:	2003e424 	.word	0x2003e424
   d4cb8:	2003e52a 	.word	0x2003e52a
   d4cbc:	000d7c92 	.word	0x000d7c92
   d4cc0:	000d7cb0 	.word	0x000d7cb0
   d4cc4:	00030010 	.word	0x00030010
   d4cc8:	000d7ecc 	.word	0x000d7ecc
   d4ccc:	001a8ce0 	.word	0x001a8ce0
   d4cd0:	000d7cb8 	.word	0x000d7cb8
   d4cd4:	000d7cc3 	.word	0x000d7cc3
   d4cd8:	2003e4d1 	.word	0x2003e4d1

000d4cdc <_GLOBAL__sub_I___appProductID>:
        val_(val) {
   d4cdc:	4b19      	ldr	r3, [pc, #100]	; (d4d44 <_GLOBAL__sub_I___appProductID+0x68>)
}
   d4cde:	b570      	push	{r4, r5, r6, lr}
   d4ce0:	2400      	movs	r4, #0
   d4ce2:	701c      	strb	r4, [r3, #0]
   d4ce4:	4b18      	ldr	r3, [pc, #96]	; (d4d48 <_GLOBAL__sub_I___appProductID+0x6c>)
              error_(SYSTEM_ERROR_NONE) {
   d4ce6:	4d19      	ldr	r5, [pc, #100]	; (d4d4c <_GLOBAL__sub_I___appProductID+0x70>)
   d4ce8:	2601      	movs	r6, #1
   d4cea:	701e      	strb	r6, [r3, #0]
#include "spark_protocol_functions.h"


struct __ApplicationProductID {
    __ApplicationProductID(product_id_t id) {
        spark_protocol_set_product_id(spark_protocol_instance(), id);
   d4cec:	f002 f854 	bl	d6d98 <spark_protocol_instance>
   d4cf0:	4623      	mov	r3, r4
   d4cf2:	4622      	mov	r2, r4
   d4cf4:	f642 7198 	movw	r1, #12184	; 0x2f98
   d4cf8:	f002 f856 	bl	d6da8 <spark_protocol_set_product_id>
    }
};

struct __ApplicationProductVersion {
    __ApplicationProductVersion(product_firmware_version_t version) {
        spark_protocol_set_product_firmware_version(spark_protocol_instance(), version);
   d4cfc:	f002 f84c 	bl	d6d98 <spark_protocol_instance>
   d4d00:	4622      	mov	r2, r4
   d4d02:	4623      	mov	r3, r4
   d4d04:	2106      	movs	r1, #6
   d4d06:	f002 f857 	bl	d6db8 <spark_protocol_set_product_firmware_version>
Adafruit_VEML7700 veml;
   d4d0a:	4811      	ldr	r0, [pc, #68]	; (d4d50 <_GLOBAL__sub_I___appProductID+0x74>)
   d4d0c:	f000 f93f 	bl	d4f8e <_ZN17Adafruit_VEML7700C1Ev>
Adafruit_SHT31 sht31 = Adafruit_SHT31();
   d4d10:	4810      	ldr	r0, [pc, #64]	; (d4d54 <_GLOBAL__sub_I___appProductID+0x78>)
   d4d12:	f000 fad5 	bl	d52c0 <_ZN14Adafruit_SHT31C1Ev>
    SleepResult() {}
   d4d16:	4b10      	ldr	r3, [pc, #64]	; (d4d58 <_GLOBAL__sub_I___appProductID+0x7c>)
   d4d18:	60ab      	str	r3, [r5, #8]
        set_system_mode(mode);
   d4d1a:	2002      	movs	r0, #2
              error_(SYSTEM_ERROR_NONE) {
   d4d1c:	602c      	str	r4, [r5, #0]
   d4d1e:	80ac      	strh	r4, [r5, #4]
    SleepResult() {}
   d4d20:	71ac      	strb	r4, [r5, #6]
        set_system_mode(mode);
   d4d22:	f000 fd2b 	bl	d577c <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);                                                               // This will enable user code to start executing automatically.
   d4d26:	4a0d      	ldr	r2, [pc, #52]	; (d4d5c <_GLOBAL__sub_I___appProductID+0x80>)
   d4d28:	490d      	ldr	r1, [pc, #52]	; (d4d60 <_GLOBAL__sub_I___appProductID+0x84>)
   d4d2a:	4628      	mov	r0, r5
   d4d2c:	f002 f8f2 	bl	d6f14 <__aeabi_atexit>
SYSTEM_THREAD(ENABLED);                                                                    // Means my code will not be held up by Particle processes.
   d4d30:	4621      	mov	r1, r4
   d4d32:	4630      	mov	r0, r6
   d4d34:	f000 fd32 	bl	d579c <system_thread_set_state>
        return HAL_Feature_Set(feature, true);
   d4d38:	4631      	mov	r1, r6
   d4d3a:	2004      	movs	r0, #4
}
   d4d3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d4d40:	f000 bba2 	b.w	d5488 <HAL_Feature_Set>
   d4d44:	2003e4d0 	.word	0x2003e4d0
   d4d48:	2003e4d1 	.word	0x2003e4d1
   d4d4c:	2003e4c4 	.word	0x2003e4c4
   d4d50:	2003e588 	.word	0x2003e588
   d4d54:	2003e568 	.word	0x2003e568
   d4d58:	ffff0000 	.word	0xffff0000
   d4d5c:	2003e490 	.word	0x2003e490
   d4d60:	000d40f3 	.word	0x000d40f3

000d4d64 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>:

//#define DEBUG_SERIAL Serial

Adafruit_I2CDevice::Adafruit_I2CDevice(uint8_t addr, TwoWire *theWire) {
  _addr = addr;
  _wire = theWire;
   d4d64:	6042      	str	r2, [r0, #4]
  _begun = false;
   d4d66:	2200      	movs	r2, #0
  _addr = addr;
   d4d68:	7001      	strb	r1, [r0, #0]
  _begun = false;
   d4d6a:	7202      	strb	r2, [r0, #8]
}
   d4d6c:	4770      	bx	lr

000d4d6e <_ZN18Adafruit_I2CDevice8detectedEv>:
  _begun = true;

  return detected();
}

bool Adafruit_I2CDevice::detected(void) {
   d4d6e:	b510      	push	{r4, lr}
  // Init I2C if not done yet
  if (!_begun && !begin()) {
   d4d70:	7a03      	ldrb	r3, [r0, #8]
bool Adafruit_I2CDevice::detected(void) {
   d4d72:	4604      	mov	r4, r0
  if (!_begun && !begin()) {
   d4d74:	b153      	cbz	r3, d4d8c <_ZN18Adafruit_I2CDevice8detectedEv+0x1e>
    return false;
  }

  // A basic scanner, see if it ACK's
  _wire->beginTransmission(_addr);
   d4d76:	7821      	ldrb	r1, [r4, #0]
   d4d78:	6860      	ldr	r0, [r4, #4]
   d4d7a:	f001 fa51 	bl	d6220 <_ZN7TwoWire17beginTransmissionEh>
  if (_wire->endTransmission () == 0) {
   d4d7e:	6860      	ldr	r0, [r4, #4]
   d4d80:	f001 fa56 	bl	d6230 <_ZN7TwoWire15endTransmissionEv>
   d4d84:	fab0 f080 	clz	r0, r0
   d4d88:	0940      	lsrs	r0, r0, #5
    return true;
  }
  return false;
}
   d4d8a:	bd10      	pop	{r4, pc}
  if (!_begun && !begin()) {
   d4d8c:	f000 f803 	bl	d4d96 <_ZN18Adafruit_I2CDevice5beginEv>
   d4d90:	2800      	cmp	r0, #0
   d4d92:	d1f0      	bne.n	d4d76 <_ZN18Adafruit_I2CDevice8detectedEv+0x8>
   d4d94:	e7f9      	b.n	d4d8a <_ZN18Adafruit_I2CDevice8detectedEv+0x1c>

000d4d96 <_ZN18Adafruit_I2CDevice5beginEv>:
bool Adafruit_I2CDevice::begin(void) {
   d4d96:	b510      	push	{r4, lr}
   d4d98:	4604      	mov	r4, r0
  _wire->begin();
   d4d9a:	6840      	ldr	r0, [r0, #4]
   d4d9c:	f001 fa0e 	bl	d61bc <_ZN7TwoWire5beginEv>
  _begun = true;
   d4da0:	2301      	movs	r3, #1
   d4da2:	7223      	strb	r3, [r4, #8]
  return detected();
   d4da4:	4620      	mov	r0, r4
}
   d4da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return detected();
   d4daa:	f7ff bfe0 	b.w	d4d6e <_ZN18Adafruit_I2CDevice8detectedEv>

000d4dae <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>:

bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   d4dae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4db2:	e9dd 9608 	ldrd	r9, r6, [sp, #32]
   d4db6:	461f      	mov	r7, r3
  if ((len+prefix_len) > 32) {
   d4db8:	1993      	adds	r3, r2, r6
   d4dba:	2b20      	cmp	r3, #32
bool Adafruit_I2CDevice::write(uint8_t *buffer, size_t len, bool stop, uint8_t *prefix_buffer, size_t prefix_len) {
   d4dbc:	4604      	mov	r4, r0
   d4dbe:	4688      	mov	r8, r1
   d4dc0:	4615      	mov	r5, r2
  if ((len+prefix_len) > 32) {
   d4dc2:	d902      	bls.n	d4dca <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x1c>
    // we will need to find out if some platforms have larger
    // I2C buffer sizes :/
#ifdef DEBUG_SERIAL
    DEBUG_SERIAL.println(F("\tI2CDevice could not write such a large buffer"));
#endif
    return false;
   d4dc4:	2000      	movs	r0, #0
  DEBUG_SERIAL.println();
#endif


  return (_wire -> endTransmission(stop) == 0);
}
   d4dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  _wire->beginTransmission(_addr);
   d4dca:	7801      	ldrb	r1, [r0, #0]
   d4dcc:	6840      	ldr	r0, [r0, #4]
   d4dce:	f001 fa27 	bl	d6220 <_ZN7TwoWire17beginTransmissionEh>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d4dd2:	b97e      	cbnz	r6, d4df4 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x46>
  if (_wire->write(buffer, len) != len) {
   d4dd4:	6860      	ldr	r0, [r4, #4]
   d4dd6:	6803      	ldr	r3, [r0, #0]
   d4dd8:	462a      	mov	r2, r5
   d4dda:	68db      	ldr	r3, [r3, #12]
   d4ddc:	4641      	mov	r1, r8
   d4dde:	4798      	blx	r3
   d4de0:	4285      	cmp	r5, r0
   d4de2:	d1ef      	bne.n	d4dc4 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
  return (_wire -> endTransmission(stop) == 0);
   d4de4:	6860      	ldr	r0, [r4, #4]
   d4de6:	4639      	mov	r1, r7
   d4de8:	f001 fa1e 	bl	d6228 <_ZN7TwoWire15endTransmissionEh>
   d4dec:	fab0 f080 	clz	r0, r0
   d4df0:	0940      	lsrs	r0, r0, #5
   d4df2:	e7e8      	b.n	d4dc6 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x18>
  if ((prefix_len != 0) && (prefix_buffer != NULL)) {
   d4df4:	f1b9 0f00 	cmp.w	r9, #0
   d4df8:	d0ec      	beq.n	d4dd4 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>
   d4dfa:	6860      	ldr	r0, [r4, #4]
    if (_wire->write(prefix_buffer, prefix_len) != prefix_len) {
   d4dfc:	6803      	ldr	r3, [r0, #0]
   d4dfe:	4632      	mov	r2, r6
   d4e00:	68db      	ldr	r3, [r3, #12]
   d4e02:	4649      	mov	r1, r9
   d4e04:	4798      	blx	r3
   d4e06:	42b0      	cmp	r0, r6
   d4e08:	d1dc      	bne.n	d4dc4 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x16>
   d4e0a:	e7e3      	b.n	d4dd4 <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j+0x26>

000d4e0c <_ZN18Adafruit_I2CDevice4readEPhjb>:

bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
  if (len > 32) {
   d4e0c:	2a20      	cmp	r2, #32
bool Adafruit_I2CDevice::read(uint8_t *buffer, size_t len, bool stop) {
   d4e0e:	b570      	push	{r4, r5, r6, lr}
   d4e10:	4606      	mov	r6, r0
   d4e12:	460c      	mov	r4, r1
   d4e14:	4615      	mov	r5, r2
  if (len > 32) {
   d4e16:	d80f      	bhi.n	d4e38 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
    DEBUG_SERIAL.println(F("\tI2CDevice could not read such a large buffer"));
#endif
    return false;
  }

  if (_wire->requestFrom((uint8_t)_addr, (uint8_t)len, (uint8_t)stop) != len) {
   d4e18:	7801      	ldrb	r1, [r0, #0]
   d4e1a:	6840      	ldr	r0, [r0, #4]
   d4e1c:	f001 f9eb 	bl	d61f6 <_ZN7TwoWire11requestFromEhjh>
   d4e20:	42a8      	cmp	r0, r5
   d4e22:	d109      	bne.n	d4e38 <_ZN18Adafruit_I2CDevice4readEPhjb+0x2c>
   d4e24:	1825      	adds	r5, r4, r0
    DEBUG_SERIAL.println(F("\tI2CDevice did not receive enough data"));
#endif
    return false;
  }

  for (uint16_t i=0; i<len; i++) {
   d4e26:	42a5      	cmp	r5, r4
   d4e28:	d008      	beq.n	d4e3c <_ZN18Adafruit_I2CDevice4readEPhjb+0x30>
    buffer[i] = _wire->read();
   d4e2a:	6870      	ldr	r0, [r6, #4]
   d4e2c:	6803      	ldr	r3, [r0, #0]
   d4e2e:	695b      	ldr	r3, [r3, #20]
   d4e30:	4798      	blx	r3
   d4e32:	f804 0b01 	strb.w	r0, [r4], #1
  for (uint16_t i=0; i<len; i++) {
   d4e36:	e7f6      	b.n	d4e26 <_ZN18Adafruit_I2CDevice4readEPhjb+0x1a>
    return false;
   d4e38:	2000      	movs	r0, #0
  }
  DEBUG_SERIAL.println();
#endif

  return true;
}
   d4e3a:	bd70      	pop	{r4, r5, r6, pc}
   d4e3c:	2001      	movs	r0, #1
   d4e3e:	e7fc      	b.n	d4e3a <_ZN18Adafruit_I2CDevice4readEPhjb+0x2e>

000d4e40 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>:


bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   d4e40:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4e42:	461d      	mov	r5, r3
  if (! write(write_buffer, write_len, stop)) {
   d4e44:	2300      	movs	r3, #0
   d4e46:	e9cd 3300 	strd	r3, r3, [sp]
   d4e4a:	f89d 301c 	ldrb.w	r3, [sp, #28]
bool Adafruit_I2CDevice::write_then_read(uint8_t *write_buffer, size_t write_len, uint8_t *read_buffer, size_t read_len, bool stop) {
   d4e4e:	9e06      	ldr	r6, [sp, #24]
   d4e50:	4604      	mov	r4, r0
  if (! write(write_buffer, write_len, stop)) {
   d4e52:	f7ff ffac 	bl	d4dae <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
   d4e56:	b140      	cbz	r0, d4e6a <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb+0x2a>
    return false;
  }
  
  return read(read_buffer, read_len);
   d4e58:	2301      	movs	r3, #1
   d4e5a:	4632      	mov	r2, r6
   d4e5c:	4629      	mov	r1, r5
   d4e5e:	4620      	mov	r0, r4
}
   d4e60:	b002      	add	sp, #8
   d4e62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  return read(read_buffer, read_len);
   d4e66:	f7ff bfd1 	b.w	d4e0c <_ZN18Adafruit_I2CDevice4readEPhjb>
}
   d4e6a:	b002      	add	sp, #8
   d4e6c:	bd70      	pop	{r4, r5, r6, pc}

000d4e6e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>:
#include "Adafruit_I2CRegister.h"

Adafruit_I2CRegister::Adafruit_I2CRegister(Adafruit_I2CDevice *device, uint16_t reg_addr, uint8_t width, uint8_t bitorder, uint8_t address_width) {
   d4e6e:	b510      	push	{r4, lr}
  _device = device;
   d4e70:	6001      	str	r1, [r0, #0]
  _addrwidth = address_width;
  _address = reg_addr;
   d4e72:	8082      	strh	r2, [r0, #4]
  _addrwidth = address_width;
   d4e74:	f89d 100c 	ldrb.w	r1, [sp, #12]
  _bitorder = bitorder;
   d4e78:	f89d 2008 	ldrb.w	r2, [sp, #8]
  _addrwidth = address_width;
   d4e7c:	71c1      	strb	r1, [r0, #7]
  _bitorder = bitorder;
   d4e7e:	7202      	strb	r2, [r0, #8]
  _width = width;
   d4e80:	7183      	strb	r3, [r0, #6]
}
   d4e82:	bd10      	pop	{r4, pc}

000d4e84 <_ZN20Adafruit_I2CRegister5writeEPhh>:


bool Adafruit_I2CRegister::write(uint8_t *buffer, uint8_t len) {
   d4e84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  uint8_t addrbuffer[2] = {(uint8_t)(_address & 0xFF), (uint8_t)(_address>>8)};
   d4e86:	8883      	ldrh	r3, [r0, #4]
   d4e88:	f8ad 300c 	strh.w	r3, [sp, #12]
  if (! _device->write(buffer, len, true, addrbuffer, _addrwidth)) {
   d4e8c:	79c3      	ldrb	r3, [r0, #7]
   d4e8e:	9301      	str	r3, [sp, #4]
   d4e90:	ab03      	add	r3, sp, #12
   d4e92:	9300      	str	r3, [sp, #0]
   d4e94:	6800      	ldr	r0, [r0, #0]
   d4e96:	2301      	movs	r3, #1
   d4e98:	f7ff ff89 	bl	d4dae <_ZN18Adafruit_I2CDevice5writeEPhjbS0_j>
    return false;
  }
  return true;
}
   d4e9c:	b005      	add	sp, #20
   d4e9e:	f85d fb04 	ldr.w	pc, [sp], #4

000d4ea2 <_ZN20Adafruit_I2CRegister5writeEmh>:

bool Adafruit_I2CRegister::write(uint32_t value, uint8_t numbytes) {
   d4ea2:	b4f0      	push	{r4, r5, r6, r7}
   d4ea4:	460c      	mov	r4, r1
  if (numbytes == 0) {
   d4ea6:	b902      	cbnz	r2, d4eaa <_ZN20Adafruit_I2CRegister5writeEmh+0x8>
    numbytes = _width;
   d4ea8:	7982      	ldrb	r2, [r0, #6]
  }
  if (numbytes > 4) {
   d4eaa:	2a04      	cmp	r2, #4
   d4eac:	d813      	bhi.n	d4ed6 <_ZN20Adafruit_I2CRegister5writeEmh+0x34>
   d4eae:	f100 0509 	add.w	r5, r0, #9
   d4eb2:	1883      	adds	r3, r0, r2
   d4eb4:	4629      	mov	r1, r5
    return false;
  }

  for (int i=0; i<numbytes; i++) {
   d4eb6:	4283      	cmp	r3, r0
   d4eb8:	d009      	beq.n	d4ece <_ZN20Adafruit_I2CRegister5writeEmh+0x2c>
    if (_bitorder == LSBFIRST) {
   d4eba:	7a07      	ldrb	r7, [r0, #8]
   d4ebc:	b2e6      	uxtb	r6, r4
   d4ebe:	b927      	cbnz	r7, d4eca <_ZN20Adafruit_I2CRegister5writeEmh+0x28>
      _buffer[i] = value & 0xFF;
   d4ec0:	702e      	strb	r6, [r5, #0]
    } else {
      _buffer[numbytes-i-1] = value & 0xFF;
    }
    value >>= 8;
   d4ec2:	0a24      	lsrs	r4, r4, #8
  for (int i=0; i<numbytes; i++) {
   d4ec4:	3501      	adds	r5, #1
   d4ec6:	3b01      	subs	r3, #1
   d4ec8:	e7f5      	b.n	d4eb6 <_ZN20Adafruit_I2CRegister5writeEmh+0x14>
      _buffer[numbytes-i-1] = value & 0xFF;
   d4eca:	721e      	strb	r6, [r3, #8]
   d4ecc:	e7f9      	b.n	d4ec2 <_ZN20Adafruit_I2CRegister5writeEmh+0x20>
  }
  return write(_buffer, numbytes);
}
   d4ece:	bcf0      	pop	{r4, r5, r6, r7}
  return write(_buffer, numbytes);
   d4ed0:	4618      	mov	r0, r3
   d4ed2:	f7ff bfd7 	b.w	d4e84 <_ZN20Adafruit_I2CRegister5writeEPhh>
}
   d4ed6:	2000      	movs	r0, #0
   d4ed8:	bcf0      	pop	{r4, r5, r6, r7}
   d4eda:	4770      	bx	lr

000d4edc <_ZN20Adafruit_I2CRegister4readEPhh>:

   return value;
}


bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   d4edc:	b513      	push	{r0, r1, r4, lr}
  _buffer[0] = _address;
   d4ede:	4604      	mov	r4, r0
bool Adafruit_I2CRegister::read(uint8_t *buffer, uint8_t len) {
   d4ee0:	460b      	mov	r3, r1
  _buffer[0] = _address;
   d4ee2:	8881      	ldrh	r1, [r0, #4]
   d4ee4:	f804 1f09 	strb.w	r1, [r4, #9]!
  if (! _device->write_then_read(_buffer, 1, buffer, len)) {
   d4ee8:	2100      	movs	r1, #0
   d4eea:	e9cd 2100 	strd	r2, r1, [sp]
   d4eee:	2201      	movs	r2, #1
   d4ef0:	4621      	mov	r1, r4
   d4ef2:	6800      	ldr	r0, [r0, #0]
   d4ef4:	f7ff ffa4 	bl	d4e40 <_ZN18Adafruit_I2CDevice15write_then_readEPhjS0_jb>
    return false;
  }
  return true;
}
   d4ef8:	b002      	add	sp, #8
   d4efa:	bd10      	pop	{r4, pc}

000d4efc <_ZN20Adafruit_I2CRegister4readEv>:
uint32_t Adafruit_I2CRegister::read(void) {
   d4efc:	b538      	push	{r3, r4, r5, lr}
  if (! read(_buffer, _width)) {
   d4efe:	f100 0509 	add.w	r5, r0, #9
   d4f02:	7982      	ldrb	r2, [r0, #6]
   d4f04:	4629      	mov	r1, r5
uint32_t Adafruit_I2CRegister::read(void) {
   d4f06:	4604      	mov	r4, r0
  if (! read(_buffer, _width)) {
   d4f08:	f7ff ffe8 	bl	d4edc <_ZN20Adafruit_I2CRegister4readEPhh>
   d4f0c:	b178      	cbz	r0, d4f2e <_ZN20Adafruit_I2CRegister4readEv+0x32>
   d4f0e:	79a2      	ldrb	r2, [r4, #6]
   d4f10:	4629      	mov	r1, r5
   d4f12:	4422      	add	r2, r4
  uint32_t value = 0;
   d4f14:	2000      	movs	r0, #0
   for (int i=0; i < _width; i++) {
   d4f16:	42a2      	cmp	r2, r4
   d4f18:	d00b      	beq.n	d4f32 <_ZN20Adafruit_I2CRegister4readEv+0x36>
     value <<= 8;
   d4f1a:	0203      	lsls	r3, r0, #8
     if (_bitorder == LSBFIRST) {
   d4f1c:	7a20      	ldrb	r0, [r4, #8]
   d4f1e:	b920      	cbnz	r0, d4f2a <_ZN20Adafruit_I2CRegister4readEv+0x2e>
       value |= _buffer[_width-i-1];
   d4f20:	7a10      	ldrb	r0, [r2, #8]
       value |= _buffer[i];
   d4f22:	4318      	orrs	r0, r3
   for (int i=0; i < _width; i++) {
   d4f24:	3a01      	subs	r2, #1
   d4f26:	3101      	adds	r1, #1
   d4f28:	e7f5      	b.n	d4f16 <_ZN20Adafruit_I2CRegister4readEv+0x1a>
       value |= _buffer[i];
   d4f2a:	7808      	ldrb	r0, [r1, #0]
   d4f2c:	e7f9      	b.n	d4f22 <_ZN20Adafruit_I2CRegister4readEv+0x26>
    return -1;
   d4f2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d4f32:	bd38      	pop	{r3, r4, r5, pc}

000d4f34 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>:
  print(s);
  s->println();
}


Adafruit_I2CRegisterBits::Adafruit_I2CRegisterBits(Adafruit_I2CRegister *reg, uint8_t bits, uint8_t shift) {
   d4f34:	b510      	push	{r4, lr}
  _register = reg;
   d4f36:	6001      	str	r1, [r0, #0]
  _bits = bits;
   d4f38:	7102      	strb	r2, [r0, #4]
  _shift = shift;
   d4f3a:	7143      	strb	r3, [r0, #5]
}
   d4f3c:	bd10      	pop	{r4, pc}

000d4f3e <_ZN24Adafruit_I2CRegisterBits4readEv>:

uint32_t Adafruit_I2CRegisterBits::read(void) {
   d4f3e:	b510      	push	{r4, lr}
   d4f40:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d4f42:	6800      	ldr	r0, [r0, #0]
   d4f44:	f7ff ffda 	bl	d4efc <_ZN20Adafruit_I2CRegister4readEv>
  val >>= _shift;
  return val & ((1 << (_bits+1)) - 1);
   d4f48:	7923      	ldrb	r3, [r4, #4]
   d4f4a:	1c5a      	adds	r2, r3, #1
   d4f4c:	2301      	movs	r3, #1
   d4f4e:	4093      	lsls	r3, r2
  val >>= _shift;
   d4f50:	7962      	ldrb	r2, [r4, #5]
  return val & ((1 << (_bits+1)) - 1);
   d4f52:	3b01      	subs	r3, #1
  val >>= _shift;
   d4f54:	40d0      	lsrs	r0, r2
}
   d4f56:	4018      	ands	r0, r3
   d4f58:	bd10      	pop	{r4, pc}

000d4f5a <_ZN24Adafruit_I2CRegisterBits5writeEm>:

void Adafruit_I2CRegisterBits::write(uint32_t data) {
   d4f5a:	b570      	push	{r4, r5, r6, lr}
   d4f5c:	4604      	mov	r4, r0
  uint32_t val = _register->read();
   d4f5e:	6800      	ldr	r0, [r0, #0]
void Adafruit_I2CRegisterBits::write(uint32_t data) {
   d4f60:	460e      	mov	r6, r1
  uint32_t val = _register->read();
   d4f62:	f7ff ffcb 	bl	d4efc <_ZN20Adafruit_I2CRegister4readEv>

  // mask off the data before writing
  uint32_t mask = (1 << (_bits+1)) - 1;
   d4f66:	7923      	ldrb	r3, [r4, #4]
   d4f68:	2201      	movs	r2, #1
   d4f6a:	3301      	adds	r3, #1
   d4f6c:	409a      	lsls	r2, r3
   d4f6e:	1e53      	subs	r3, r2, #1
  data &= mask;

  mask <<= _shift;
   d4f70:	7962      	ldrb	r2, [r4, #5]
   d4f72:	fa03 f502 	lsl.w	r5, r3, r2
  val &= ~mask;      // remove the current data at that spot
   d4f76:	ea20 0505 	bic.w	r5, r0, r5
  data &= mask;
   d4f7a:	ea03 0106 	and.w	r1, r3, r6
  val |= data << _shift; // and add in the new data
  
  _register->write(val, _register->width());
   d4f7e:	6820      	ldr	r0, [r4, #0]
  val |= data << _shift; // and add in the new data
   d4f80:	4091      	lsls	r1, r2
  _register->write(val, _register->width());
   d4f82:	4329      	orrs	r1, r5
   d4f84:	7982      	ldrb	r2, [r0, #6]
   d4f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  _register->write(val, _register->width());
   d4f8a:	f7ff bf8a 	b.w	d4ea2 <_ZN20Adafruit_I2CRegister5writeEmh>

000d4f8e <_ZN17Adafruit_VEML7700C1Ev>:
#include "Adafruit_VEML7700.h"

/*!
 *    @brief  Instantiates a new VEML7700 class
 */
Adafruit_VEML7700::Adafruit_VEML7700(void) {}
   d4f8e:	4770      	bx	lr

000d4f90 <_ZN17Adafruit_VEML77007readALSEv>:
/*!
 *    @brief Read the raw ALS data
 *    @returns 16-bit data value from the ALS register
 */
uint16_t Adafruit_VEML7700::readALS()
{
   d4f90:	b508      	push	{r3, lr}
  return ALS_Data->read();
   d4f92:	6840      	ldr	r0, [r0, #4]
   d4f94:	f7ff ffb2 	bl	d4efc <_ZN20Adafruit_I2CRegister4readEv>
}
   d4f98:	b280      	uxth	r0, r0
   d4f9a:	bd08      	pop	{r3, pc}

000d4f9c <_ZN17Adafruit_VEML77006enableEb>:
 *    @brief Enable or disable the sensor
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::enable(bool enable)
{
  ALS_Shutdown->write(!enable);
   d4f9c:	69c0      	ldr	r0, [r0, #28]
   d4f9e:	f081 0101 	eor.w	r1, r1, #1
   d4fa2:	f7ff bfda 	b.w	d4f5a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d4fa6 <_ZN17Adafruit_VEML770015interruptEnableEb>:
 *    @brief Enable or disable the interrupt
 *    @param enable The flag to enable/disable
 */
void Adafruit_VEML7700::interruptEnable(bool enable)
{
  ALS_Interrupt_Enable->write(enable);
   d4fa6:	6a00      	ldr	r0, [r0, #32]
   d4fa8:	f7ff bfd7 	b.w	d4f5a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d4fac <_ZN17Adafruit_VEML770014setPersistenceEh>:
 *    @param pers Persistance constant, can be VEML7700_PERS_1, VEML7700_PERS_2,
 *    VEML7700_PERS_4 or VEML7700_PERS_8   
 */
void Adafruit_VEML7700::setPersistence(uint8_t pers)
{
  ALS_Persistence->write(pers);
   d4fac:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d4fae:	f7ff bfd4 	b.w	d4f5a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d4fb2 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>:
 *    @param it Can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
void Adafruit_VEML7700::setIntegrationTime(uint8_t it)
{
  ALS_Integration_Time->write(it);
   d4fb2:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d4fb4:	f7ff bfd1 	b.w	d4f5a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d4fb8 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>:
 *    @brief Get ALS integration time
 *    @returns IT index, can be VEML7700_IT_100MS, VEML7700_IT_200MS, VEML7700_IT_400MS, 
 *    VEML7700_IT_800MS, VEML7700_IT_50MS or VEML7700_IT_25MS    
 */
uint8_t Adafruit_VEML7700::getIntegrationTime(void)
{
   d4fb8:	b508      	push	{r3, lr}
  return ALS_Integration_Time->read();
   d4fba:	6a80      	ldr	r0, [r0, #40]	; 0x28
   d4fbc:	f7ff ffbf 	bl	d4f3e <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   d4fc0:	b2c0      	uxtb	r0, r0
   d4fc2:	bd08      	pop	{r3, pc}

000d4fc4 <_ZN17Adafruit_VEML77007setGainEh>:
 *    @brief Set ALS gain
 *    @param gain Can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
void Adafruit_VEML7700::setGain(uint8_t gain)
{
  ALS_Gain->write(gain);
   d4fc4:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4fc6:	f7ff bfc8 	b.w	d4f5a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d4fca <_ZN17Adafruit_VEML77007getGainEv>:
/*!
 *    @brief Get ALS gain
 *    @returns Gain index, can be VEML7700_GAIN_1, VEML7700_GAIN_2, VEML7700_GAIN_1_8 or VEML7700_GAIN_1_4
 */
uint8_t Adafruit_VEML7700::getGain(void)
{
   d4fca:	b508      	push	{r3, lr}
  return ALS_Gain->read();
   d4fcc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   d4fce:	f7ff ffb6 	bl	d4f3e <_ZN24Adafruit_I2CRegisterBits4readEv>
}
   d4fd2:	b2c0      	uxtb	r0, r0
   d4fd4:	bd08      	pop	{r3, pc}

000d4fd6 <_ZN17Adafruit_VEML77009normalizeEf>:
{
   d4fd6:	b510      	push	{r4, lr}
   d4fd8:	ed2d 8b02 	vpush	{d8}
   d4fdc:	4604      	mov	r4, r0
   d4fde:	eeb0 8a40 	vmov.f32	s16, s0
  switch (getGain())
   d4fe2:	f7ff fff2 	bl	d4fca <_ZN17Adafruit_VEML77007getGainEv>
   d4fe6:	2802      	cmp	r0, #2
   d4fe8:	d018      	beq.n	d501c <_ZN17Adafruit_VEML77009normalizeEf+0x46>
   d4fea:	2803      	cmp	r0, #3
   d4fec:	d013      	beq.n	d5016 <_ZN17Adafruit_VEML77009normalizeEf+0x40>
   d4fee:	2801      	cmp	r0, #1
   d4ff0:	d103      	bne.n	d4ffa <_ZN17Adafruit_VEML77009normalizeEf+0x24>
    value /= 2.0;
   d4ff2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
    value *= 8;
   d4ff6:	ee28 8a27 	vmul.f32	s16, s16, s15
  switch (getIntegrationTime())
   d4ffa:	4620      	mov	r0, r4
   d4ffc:	f7ff ffdc 	bl	d4fb8 <_ZN17Adafruit_VEML770018getIntegrationTimeEv>
   d5000:	3801      	subs	r0, #1
   d5002:	280b      	cmp	r0, #11
   d5004:	d814      	bhi.n	d5030 <_ZN17Adafruit_VEML77009normalizeEf+0x5a>
   d5006:	e8df f000 	tbb	[pc, r0]
   d500a:	1b18      	.short	0x1b18
   d500c:	1313131e 	.word	0x1313131e
   d5010:	13131113 	.word	0x13131113
   d5014:	0c13      	.short	0x0c13
    value *= 4;
   d5016:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
   d501a:	e7ec      	b.n	d4ff6 <_ZN17Adafruit_VEML77009normalizeEf+0x20>
    value *= 8;
   d501c:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
   d5020:	e7e9      	b.n	d4ff6 <_ZN17Adafruit_VEML77009normalizeEf+0x20>
    value *= 4;
   d5022:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
    value /= 8.0;
   d5026:	ee28 8a27 	vmul.f32	s16, s16, s15
    break;
   d502a:	e001      	b.n	d5030 <_ZN17Adafruit_VEML77009normalizeEf+0x5a>
    value *= 2;
   d502c:	ee38 8a08 	vadd.f32	s16, s16, s16
}
   d5030:	eeb0 0a48 	vmov.f32	s0, s16
   d5034:	ecbd 8b02 	vpop	{d8}
   d5038:	bd10      	pop	{r4, pc}
    value /= 2.0;
   d503a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
   d503e:	e7f2      	b.n	d5026 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
    value /= 4.0;
   d5040:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
   d5044:	e7ef      	b.n	d5026 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
    value /= 8.0;
   d5046:	eef4 7a00 	vmov.f32	s15, #64	; 0x3e000000  0.125
   d504a:	e7ec      	b.n	d5026 <_ZN17Adafruit_VEML77009normalizeEf+0x50>
   d504c:	0000      	movs	r0, r0
	...

000d5050 <_ZN17Adafruit_VEML77007readLuxEv>:
{
   d5050:	b510      	push	{r4, lr}
   d5052:	4604      	mov	r4, r0
  return normalize(ALS_Data->read()) * 0.0576; // see app note lux table on page 5
   d5054:	6840      	ldr	r0, [r0, #4]
   d5056:	f7ff ff51 	bl	d4efc <_ZN20Adafruit_I2CRegister4readEv>
   d505a:	ee07 0a90 	vmov	s15, r0
   d505e:	4620      	mov	r0, r4
   d5060:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d5064:	f7ff ffb7 	bl	d4fd6 <_ZN17Adafruit_VEML77009normalizeEf>
   d5068:	ee10 0a10 	vmov	r0, s0
   d506c:	f002 f8c4 	bl	d71f8 <__aeabi_f2d>
   d5070:	a305      	add	r3, pc, #20	; (adr r3, d5088 <_ZN17Adafruit_VEML77007readLuxEv+0x38>)
   d5072:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5076:	f002 f917 	bl	d72a8 <__aeabi_dmul>
   d507a:	f002 fb27 	bl	d76cc <__aeabi_d2f>
}
   d507e:	ee00 0a10 	vmov	s0, r0
   d5082:	bd10      	pop	{r4, pc}
   d5084:	f3af 8000 	nop.w
   d5088:	487fcb92 	.word	0x487fcb92
   d508c:	3fad7dbf 	.word	0x3fad7dbf

000d5090 <_ZN17Adafruit_VEML77009readWhiteEv>:
{
   d5090:	b510      	push	{r4, lr}
   d5092:	4604      	mov	r4, r0
  return normalize(White_Data->read()) * 0.0576; // Unclear if this is the right multiplier
   d5094:	6880      	ldr	r0, [r0, #8]
   d5096:	f7ff ff31 	bl	d4efc <_ZN20Adafruit_I2CRegister4readEv>
   d509a:	ee07 0a90 	vmov	s15, r0
   d509e:	4620      	mov	r0, r4
   d50a0:	eeb8 0a67 	vcvt.f32.u32	s0, s15
   d50a4:	f7ff ff97 	bl	d4fd6 <_ZN17Adafruit_VEML77009normalizeEf>
   d50a8:	ee10 0a10 	vmov	r0, s0
   d50ac:	f002 f8a4 	bl	d71f8 <__aeabi_f2d>
   d50b0:	a305      	add	r3, pc, #20	; (adr r3, d50c8 <_ZN17Adafruit_VEML77009readWhiteEv+0x38>)
   d50b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d50b6:	f002 f8f7 	bl	d72a8 <__aeabi_dmul>
   d50ba:	f002 fb07 	bl	d76cc <__aeabi_d2f>
}
   d50be:	ee00 0a10 	vmov	s0, r0
   d50c2:	bd10      	pop	{r4, pc}
   d50c4:	f3af 8000 	nop.w
   d50c8:	487fcb92 	.word	0x487fcb92
   d50cc:	3fad7dbf 	.word	0x3fad7dbf

000d50d0 <_ZN17Adafruit_VEML770015powerSaveEnableEb>:
 *    @brief Enable power save mode
 *    @param enable True if power save should be enabled
 */
void Adafruit_VEML7700::powerSaveEnable(bool enable)
{
  PowerSave_Enable->write(enable);
   d50d0:	6b00      	ldr	r0, [r0, #48]	; 0x30
   d50d2:	f7ff bf42 	b.w	d4f5a <_ZN24Adafruit_I2CRegisterBits5writeEm>

000d50d6 <_ZN17Adafruit_VEML77005beginEP7TwoWire>:
{
   d50d6:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d50d8:	4604      	mov	r4, r0
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   d50da:	200c      	movs	r0, #12
{
   d50dc:	9103      	str	r1, [sp, #12]
  i2c_dev = new Adafruit_I2CDevice(VEML7700_I2CADDR_DEFAULT, theWire);
   d50de:	f7fe ffda 	bl	d4096 <_Znwj>
   d50e2:	4605      	mov	r5, r0
   d50e4:	b118      	cbz	r0, d50ee <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x18>
   d50e6:	9a03      	ldr	r2, [sp, #12]
   d50e8:	2110      	movs	r1, #16
   d50ea:	f7ff fe3b 	bl	d4d64 <_ZN18Adafruit_I2CDeviceC1EhP7TwoWire>
   d50ee:	63a5      	str	r5, [r4, #56]	; 0x38
  if (!i2c_dev->begin())
   d50f0:	4628      	mov	r0, r5
   d50f2:	f7ff fe50 	bl	d4d96 <_ZN18Adafruit_I2CDevice5beginEv>
   d50f6:	4605      	mov	r5, r0
   d50f8:	2800      	cmp	r0, #0
   d50fa:	f000 80d2 	beq.w	d52a2 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x1cc>
  ALS_Config = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_CONFIG, 2, LSBFIRST);
   d50fe:	2010      	movs	r0, #16
   d5100:	f7fe ffc9 	bl	d4096 <_Znwj>
   d5104:	4606      	mov	r6, r0
   d5106:	b138      	cbz	r0, d5118 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x42>
   d5108:	2301      	movs	r3, #1
   d510a:	2200      	movs	r2, #0
   d510c:	e9cd 2300 	strd	r2, r3, [sp]
   d5110:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5112:	2302      	movs	r3, #2
   d5114:	f7ff feab 	bl	d4e6e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5118:	6026      	str	r6, [r4, #0]
  ALS_HighThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_HIGH, 2, LSBFIRST);
   d511a:	2010      	movs	r0, #16
   d511c:	f7fe ffbb 	bl	d4096 <_Znwj>
   d5120:	4606      	mov	r6, r0
   d5122:	b138      	cbz	r0, d5134 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x5e>
   d5124:	2300      	movs	r3, #0
   d5126:	2201      	movs	r2, #1
   d5128:	e9cd 3200 	strd	r3, r2, [sp]
   d512c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d512e:	2302      	movs	r3, #2
   d5130:	f7ff fe9d 	bl	d4e6e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5134:	60e6      	str	r6, [r4, #12]
  ALS_LowThreshold = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_THREHOLD_LOW, 2, LSBFIRST);
   d5136:	2010      	movs	r0, #16
   d5138:	f7fe ffad 	bl	d4096 <_Znwj>
   d513c:	4606      	mov	r6, r0
   d513e:	b140      	cbz	r0, d5152 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x7c>
   d5140:	2300      	movs	r3, #0
   d5142:	2201      	movs	r2, #1
   d5144:	e9cd 3200 	strd	r3, r2, [sp]
   d5148:	2302      	movs	r3, #2
   d514a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d514c:	461a      	mov	r2, r3
   d514e:	f7ff fe8e 	bl	d4e6e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5152:	6126      	str	r6, [r4, #16]
  Power_Saving = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_POWER_SAVE, 2, LSBFIRST);
   d5154:	2010      	movs	r0, #16
   d5156:	f7fe ff9e 	bl	d4096 <_Znwj>
   d515a:	4606      	mov	r6, r0
   d515c:	b148      	cbz	r0, d5172 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x9c>
   d515e:	2300      	movs	r3, #0
   d5160:	f04f 0e01 	mov.w	lr, #1
   d5164:	e9cd 3e00 	strd	r3, lr, [sp]
   d5168:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d516a:	2302      	movs	r3, #2
   d516c:	2203      	movs	r2, #3
   d516e:	f7ff fe7e 	bl	d4e6e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5172:	6166      	str	r6, [r4, #20]
  ALS_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_ALS_DATA, 2, LSBFIRST);
   d5174:	2010      	movs	r0, #16
   d5176:	f7fe ff8e 	bl	d4096 <_Znwj>
   d517a:	4606      	mov	r6, r0
   d517c:	b148      	cbz	r0, d5192 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xbc>
   d517e:	2300      	movs	r3, #0
   d5180:	f04f 0c01 	mov.w	ip, #1
   d5184:	e9cd 3c00 	strd	r3, ip, [sp]
   d5188:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d518a:	2302      	movs	r3, #2
   d518c:	2204      	movs	r2, #4
   d518e:	f7ff fe6e 	bl	d4e6e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d5192:	6066      	str	r6, [r4, #4]
  White_Data = new Adafruit_I2CRegister(i2c_dev, VEML7700_WHITE_DATA, 2, LSBFIRST);
   d5194:	2010      	movs	r0, #16
   d5196:	f7fe ff7e 	bl	d4096 <_Znwj>
   d519a:	4606      	mov	r6, r0
   d519c:	b140      	cbz	r0, d51b0 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xda>
   d519e:	2300      	movs	r3, #0
   d51a0:	2101      	movs	r1, #1
   d51a2:	e9cd 3100 	strd	r3, r1, [sp]
   d51a6:	2205      	movs	r2, #5
   d51a8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d51aa:	2302      	movs	r3, #2
   d51ac:	f7ff fe5f 	bl	d4e6e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d51b0:	60a6      	str	r6, [r4, #8]
  Interrupt_Status = new Adafruit_I2CRegister(i2c_dev, VEML7700_INTERRUPTSTATUS, 2, LSBFIRST);
   d51b2:	2010      	movs	r0, #16
   d51b4:	f7fe ff6f 	bl	d4096 <_Znwj>
   d51b8:	4606      	mov	r6, r0
   d51ba:	b140      	cbz	r0, d51ce <_ZN17Adafruit_VEML77005beginEP7TwoWire+0xf8>
   d51bc:	2300      	movs	r3, #0
   d51be:	2201      	movs	r2, #1
   d51c0:	e9cd 3200 	strd	r3, r2, [sp]
   d51c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d51c6:	2302      	movs	r3, #2
   d51c8:	2206      	movs	r2, #6
   d51ca:	f7ff fe50 	bl	d4e6e <_ZN20Adafruit_I2CRegisterC1EP18Adafruit_I2CDevicethhh>
   d51ce:	61a6      	str	r6, [r4, #24]
  ALS_Shutdown = new Adafruit_I2CRegisterBits(ALS_Config, 1, 0); // # bits, bit_shift
   d51d0:	2008      	movs	r0, #8
   d51d2:	f7fe ff60 	bl	d4096 <_Znwj>
   d51d6:	4606      	mov	r6, r0
   d51d8:	b120      	cbz	r0, d51e4 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x10e>
   d51da:	6821      	ldr	r1, [r4, #0]
   d51dc:	2300      	movs	r3, #0
   d51de:	2201      	movs	r2, #1
   d51e0:	f7ff fea8 	bl	d4f34 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d51e4:	61e6      	str	r6, [r4, #28]
  ALS_Interrupt_Enable = new Adafruit_I2CRegisterBits(ALS_Config, 1, 1);
   d51e6:	2008      	movs	r0, #8
   d51e8:	f7fe ff55 	bl	d4096 <_Znwj>
   d51ec:	4606      	mov	r6, r0
   d51ee:	b120      	cbz	r0, d51fa <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x124>
   d51f0:	2301      	movs	r3, #1
   d51f2:	6821      	ldr	r1, [r4, #0]
   d51f4:	461a      	mov	r2, r3
   d51f6:	f7ff fe9d 	bl	d4f34 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d51fa:	6226      	str	r6, [r4, #32]
  ALS_Persistence = new Adafruit_I2CRegisterBits(ALS_Config, 2, 4);
   d51fc:	2008      	movs	r0, #8
   d51fe:	f7fe ff4a 	bl	d4096 <_Znwj>
   d5202:	4606      	mov	r6, r0
   d5204:	b120      	cbz	r0, d5210 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x13a>
   d5206:	6821      	ldr	r1, [r4, #0]
   d5208:	2304      	movs	r3, #4
   d520a:	2202      	movs	r2, #2
   d520c:	f7ff fe92 	bl	d4f34 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d5210:	6266      	str	r6, [r4, #36]	; 0x24
  ALS_Integration_Time = new Adafruit_I2CRegisterBits(ALS_Config, 4, 6);
   d5212:	2008      	movs	r0, #8
   d5214:	f7fe ff3f 	bl	d4096 <_Znwj>
   d5218:	4606      	mov	r6, r0
   d521a:	b120      	cbz	r0, d5226 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x150>
   d521c:	6821      	ldr	r1, [r4, #0]
   d521e:	2306      	movs	r3, #6
   d5220:	2204      	movs	r2, #4
   d5222:	f7ff fe87 	bl	d4f34 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d5226:	62a6      	str	r6, [r4, #40]	; 0x28
  ALS_Gain = new Adafruit_I2CRegisterBits(ALS_Config, 2, 11);
   d5228:	2008      	movs	r0, #8
   d522a:	f7fe ff34 	bl	d4096 <_Znwj>
   d522e:	4606      	mov	r6, r0
   d5230:	b120      	cbz	r0, d523c <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x166>
   d5232:	6821      	ldr	r1, [r4, #0]
   d5234:	230b      	movs	r3, #11
   d5236:	2202      	movs	r2, #2
   d5238:	f7ff fe7c 	bl	d4f34 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d523c:	62e6      	str	r6, [r4, #44]	; 0x2c
  PowerSave_Enable = new Adafruit_I2CRegisterBits(Power_Saving, 1, 0);
   d523e:	2008      	movs	r0, #8
   d5240:	f7fe ff29 	bl	d4096 <_Znwj>
   d5244:	4606      	mov	r6, r0
   d5246:	b120      	cbz	r0, d5252 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x17c>
   d5248:	6961      	ldr	r1, [r4, #20]
   d524a:	2300      	movs	r3, #0
   d524c:	2201      	movs	r2, #1
   d524e:	f7ff fe71 	bl	d4f34 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
   d5252:	6326      	str	r6, [r4, #48]	; 0x30
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   d5254:	2008      	movs	r0, #8
   d5256:	f7fe ff1e 	bl	d4096 <_Znwj>
   d525a:	4606      	mov	r6, r0
   d525c:	b120      	cbz	r0, d5268 <_ZN17Adafruit_VEML77005beginEP7TwoWire+0x192>
   d525e:	6961      	ldr	r1, [r4, #20]
   d5260:	2301      	movs	r3, #1
   d5262:	2202      	movs	r2, #2
   d5264:	f7ff fe66 	bl	d4f34 <_ZN24Adafruit_I2CRegisterBitsC1EP20Adafruit_I2CRegisterhh>
  enable(false);
   d5268:	2100      	movs	r1, #0
   d526a:	4620      	mov	r0, r4
  PowerSave_Mode = new Adafruit_I2CRegisterBits(Power_Saving, 2, 1);
   d526c:	6366      	str	r6, [r4, #52]	; 0x34
  enable(false);
   d526e:	f7ff fe95 	bl	d4f9c <_ZN17Adafruit_VEML77006enableEb>
  interruptEnable(false);
   d5272:	2100      	movs	r1, #0
   d5274:	4620      	mov	r0, r4
   d5276:	f7ff fe96 	bl	d4fa6 <_ZN17Adafruit_VEML770015interruptEnableEb>
  setPersistence(VEML7700_PERS_1);
   d527a:	2100      	movs	r1, #0
   d527c:	4620      	mov	r0, r4
   d527e:	f7ff fe95 	bl	d4fac <_ZN17Adafruit_VEML770014setPersistenceEh>
  setGain(VEML7700_GAIN_1);
   d5282:	2100      	movs	r1, #0
   d5284:	4620      	mov	r0, r4
   d5286:	f7ff fe9d 	bl	d4fc4 <_ZN17Adafruit_VEML77007setGainEh>
  setIntegrationTime(VEML7700_IT_100MS);
   d528a:	2100      	movs	r1, #0
   d528c:	4620      	mov	r0, r4
   d528e:	f7ff fe90 	bl	d4fb2 <_ZN17Adafruit_VEML770018setIntegrationTimeEh>
  powerSaveEnable(false);
   d5292:	2100      	movs	r1, #0
   d5294:	4620      	mov	r0, r4
   d5296:	f7ff ff1b 	bl	d50d0 <_ZN17Adafruit_VEML770015powerSaveEnableEb>
  enable(true);
   d529a:	2101      	movs	r1, #1
   d529c:	4620      	mov	r0, r4
   d529e:	f7ff fe7d 	bl	d4f9c <_ZN17Adafruit_VEML77006enableEb>
}
   d52a2:	4628      	mov	r0, r5
   d52a4:	b004      	add	sp, #16
   d52a6:	bd70      	pop	{r4, r5, r6, pc}

000d52a8 <_ZN17Adafruit_VEML770015setLowThresholdEt>:
 *    @brief Assign the low threshold register data
 *    @param value The 16-bit data to write to VEML7700_ALS_THREHOLD_LOW
 */
void Adafruit_VEML7700::setLowThreshold(uint16_t value)
{
  ALS_LowThreshold->write(value);
   d52a8:	6900      	ldr	r0, [r0, #16]
   d52aa:	2200      	movs	r2, #0
   d52ac:	f7ff bdf9 	b.w	d4ea2 <_ZN20Adafruit_I2CRegister5writeEmh>

000d52b0 <_ZN17Adafruit_VEML770016setHighThresholdEt>:
 *    @brief Assign the high threshold register data
 *    @param value The 16-bit data to write to VEML7700_ALS_THREHOLD_HIGH
 */
void Adafruit_VEML7700::setHighThreshold(uint16_t value)
{
  ALS_HighThreshold->write(value);
   d52b0:	68c0      	ldr	r0, [r0, #12]
   d52b2:	2200      	movs	r2, #0
   d52b4:	f7ff bdf5 	b.w	d4ea2 <_ZN20Adafruit_I2CRegister5writeEmh>

000d52b8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d52b8:	6803      	ldr	r3, [r0, #0]
   d52ba:	b2c9      	uxtb	r1, r1
   d52bc:	689b      	ldr	r3, [r3, #8]
   d52be:	4718      	bx	r3

000d52c0 <_ZN14Adafruit_SHT31C1Ev>:
#include "application.h"
#include "math.h"
#include "adafruit-sht31.h"

Adafruit_SHT31::Adafruit_SHT31() {
}
   d52c0:	4770      	bx	lr

000d52c2 <_ZN14Adafruit_SHT3112writeCommandEt>:
  humidity = shum;
  
  return true;
}

void Adafruit_SHT31::writeCommand(uint16_t cmd) {
   d52c2:	b538      	push	{r3, r4, r5, lr}
   d52c4:	4605      	mov	r5, r0
   d52c6:	460c      	mov	r4, r1
  Wire.beginTransmission(_i2caddr);
   d52c8:	f001 fdfc 	bl	d6ec4 <_Z19__fetch_global_Wirev>
   d52cc:	7829      	ldrb	r1, [r5, #0]
   d52ce:	f000 ffa7 	bl	d6220 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write(cmd >> 8);
   d52d2:	f001 fdf7 	bl	d6ec4 <_Z19__fetch_global_Wirev>
   d52d6:	0a21      	lsrs	r1, r4, #8
   d52d8:	f7ff ffee 	bl	d52b8 <_ZN7TwoWire5writeEi>
  Wire.write(cmd & 0xFF);
   d52dc:	f001 fdf2 	bl	d6ec4 <_Z19__fetch_global_Wirev>
   d52e0:	b2e1      	uxtb	r1, r4
   d52e2:	f7ff ffe9 	bl	d52b8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission();  
   d52e6:	f001 fded 	bl	d6ec4 <_Z19__fetch_global_Wirev>
}
   d52ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  Wire.endTransmission();  
   d52ee:	f000 bf9f 	b.w	d6230 <_ZN7TwoWire15endTransmissionEv>

000d52f2 <_ZN14Adafruit_SHT315resetEv>:
void Adafruit_SHT31::reset(void) {
   d52f2:	b508      	push	{r3, lr}
  writeCommand(SHT31_SOFTRESET);
   d52f4:	f243 01a2 	movw	r1, #12450	; 0x30a2
   d52f8:	f7ff ffe3 	bl	d52c2 <_ZN14Adafruit_SHT3112writeCommandEt>
}
   d52fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  delay(10);
   d5300:	200a      	movs	r0, #10
   d5302:	f000 bb7b 	b.w	d59fc <delay>

000d5306 <_ZN14Adafruit_SHT315beginEh>:
boolean Adafruit_SHT31::begin(uint8_t i2caddr) {
   d5306:	b538      	push	{r3, r4, r5, lr}
   d5308:	4604      	mov	r4, r0
   d530a:	460d      	mov	r5, r1
  Wire.begin();
   d530c:	f001 fdda 	bl	d6ec4 <_Z19__fetch_global_Wirev>
   d5310:	f000 ff54 	bl	d61bc <_ZN7TwoWire5beginEv>
  reset();
   d5314:	4620      	mov	r0, r4
  _i2caddr = i2caddr;
   d5316:	7025      	strb	r5, [r4, #0]
  reset();
   d5318:	f7ff ffeb 	bl	d52f2 <_ZN14Adafruit_SHT315resetEv>
}
   d531c:	2001      	movs	r0, #1
   d531e:	bd38      	pop	{r3, r4, r5, pc}

000d5320 <_ZN14Adafruit_SHT314crc8EPKhi>:
 */

  const uint8_t POLYNOMIAL(0x31);
  uint8_t crc(0xFF);
  
  for ( int j = len; j; --j ) {
   d5320:	440a      	add	r2, r1
  uint8_t crc(0xFF);
   d5322:	20ff      	movs	r0, #255	; 0xff
  for ( int j = len; j; --j ) {
   d5324:	4291      	cmp	r1, r2
   d5326:	d00e      	beq.n	d5346 <_ZN14Adafruit_SHT314crc8EPKhi+0x26>
      crc ^= *data++;
   d5328:	f811 3b01 	ldrb.w	r3, [r1], #1
   d532c:	4058      	eors	r0, r3
   d532e:	2308      	movs	r3, #8

      for ( int i = 8; i; --i ) {
	crc = ( crc & 0x80 )
   d5330:	f010 0f80 	tst.w	r0, #128	; 0x80
   d5334:	ea4f 0040 	mov.w	r0, r0, lsl #1
	  ? (crc << 1) ^ POLYNOMIAL
   d5338:	bf18      	it	ne
   d533a:	f080 0031 	eorne.w	r0, r0, #49	; 0x31
      for ( int i = 8; i; --i ) {
   d533e:	3b01      	subs	r3, #1
	crc = ( crc & 0x80 )
   d5340:	b2c0      	uxtb	r0, r0
      for ( int i = 8; i; --i ) {
   d5342:	d1f5      	bne.n	d5330 <_ZN14Adafruit_SHT314crc8EPKhi+0x10>
   d5344:	e7ee      	b.n	d5324 <_ZN14Adafruit_SHT314crc8EPKhi+0x4>
	  : (crc << 1);
      }
  }
  return crc;
}
   d5346:	4770      	bx	lr

000d5348 <_ZN14Adafruit_SHT3111readTempHumEv>:
boolean Adafruit_SHT31::readTempHum(void) {
   d5348:	b573      	push	{r0, r1, r4, r5, r6, lr}
  writeCommand(SHT31_MEAS_HIGHREP);
   d534a:	f44f 5110 	mov.w	r1, #9216	; 0x2400
boolean Adafruit_SHT31::readTempHum(void) {
   d534e:	4605      	mov	r5, r0
  writeCommand(SHT31_MEAS_HIGHREP);
   d5350:	f7ff ffb7 	bl	d52c2 <_ZN14Adafruit_SHT3112writeCommandEt>
  delay(500);
   d5354:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d5358:	f000 fb50 	bl	d59fc <delay>
  Wire.requestFrom(_i2caddr, (uint8_t)6);
   d535c:	f001 fdb2 	bl	d6ec4 <_Z19__fetch_global_Wirev>
   d5360:	7829      	ldrb	r1, [r5, #0]
   d5362:	2206      	movs	r2, #6
   d5364:	f000 ff59 	bl	d621a <_ZN7TwoWire11requestFromEhj>
  if (Wire.available() != 6) 
   d5368:	f001 fdac 	bl	d6ec4 <_Z19__fetch_global_Wirev>
   d536c:	6803      	ldr	r3, [r0, #0]
   d536e:	691b      	ldr	r3, [r3, #16]
   d5370:	4798      	blx	r3
   d5372:	2806      	cmp	r0, #6
   d5374:	d14b      	bne.n	d540e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
   d5376:	466e      	mov	r6, sp
   d5378:	4604      	mov	r4, r0
    readbuffer[i] = Wire.read();
   d537a:	f001 fda3 	bl	d6ec4 <_Z19__fetch_global_Wirev>
   d537e:	6803      	ldr	r3, [r0, #0]
   d5380:	695b      	ldr	r3, [r3, #20]
   d5382:	4798      	blx	r3
   d5384:	3c01      	subs	r4, #1
  for (uint8_t i=0; i<6; i++) {
   d5386:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    readbuffer[i] = Wire.read();
   d538a:	f806 0b01 	strb.w	r0, [r6], #1
  for (uint8_t i=0; i<6; i++) {
   d538e:	4669      	mov	r1, sp
   d5390:	d1f3      	bne.n	d537a <_ZN14Adafruit_SHT3111readTempHumEv+0x32>
  if (readbuffer[2] != crc8(readbuffer, 2)) return false;
   d5392:	2202      	movs	r2, #2
   d5394:	4628      	mov	r0, r5
   d5396:	f7ff ffc3 	bl	d5320 <_ZN14Adafruit_SHT314crc8EPKhi>
   d539a:	f89d 6002 	ldrb.w	r6, [sp, #2]
   d539e:	4286      	cmp	r6, r0
   d53a0:	d135      	bne.n	d540e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  if (readbuffer[5] != crc8(readbuffer+3, 2)) return false;
   d53a2:	2202      	movs	r2, #2
   d53a4:	f10d 0103 	add.w	r1, sp, #3
   d53a8:	4628      	mov	r0, r5
   d53aa:	f7ff ffb9 	bl	d5320 <_ZN14Adafruit_SHT314crc8EPKhi>
   d53ae:	f89d 6005 	ldrb.w	r6, [sp, #5]
   d53b2:	4286      	cmp	r6, r0
   d53b4:	d12b      	bne.n	d540e <_ZN14Adafruit_SHT3111readTempHumEv+0xc6>
  double stemp = ST;
   d53b6:	f8bd 0000 	ldrh.w	r0, [sp]
   d53ba:	f8bd 4003 	ldrh.w	r4, [sp, #3]
   d53be:	ba40      	rev16	r0, r0
   d53c0:	b280      	uxth	r0, r0
   d53c2:	f001 fef7 	bl	d71b4 <__aeabi_ui2d>
  stemp *= 175;
   d53c6:	a318      	add	r3, pc, #96	; (adr r3, d5428 <_ZN14Adafruit_SHT3111readTempHumEv+0xe0>)
   d53c8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53cc:	f001 ff6c 	bl	d72a8 <__aeabi_dmul>
  stemp /= 0xffff;
   d53d0:	a311      	add	r3, pc, #68	; (adr r3, d5418 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d53d2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53d6:	f002 f891 	bl	d74fc <__aeabi_ddiv>
  stemp = -45 + stemp;
   d53da:	4b11      	ldr	r3, [pc, #68]	; (d5420 <_ZN14Adafruit_SHT3111readTempHumEv+0xd8>)
   d53dc:	2200      	movs	r2, #0
   d53de:	f001 fdab 	bl	d6f38 <__aeabi_dsub>
  temp = stemp;
   d53e2:	f002 f973 	bl	d76cc <__aeabi_d2f>
   d53e6:	60a8      	str	r0, [r5, #8]
  double shum = SRH;
   d53e8:	ba60      	rev16	r0, r4
   d53ea:	b280      	uxth	r0, r0
   d53ec:	f001 fee2 	bl	d71b4 <__aeabi_ui2d>
  shum *= 100;
   d53f0:	4b0c      	ldr	r3, [pc, #48]	; (d5424 <_ZN14Adafruit_SHT3111readTempHumEv+0xdc>)
   d53f2:	2200      	movs	r2, #0
   d53f4:	f001 ff58 	bl	d72a8 <__aeabi_dmul>
  shum /= 0xFFFF;
   d53f8:	a307      	add	r3, pc, #28	; (adr r3, d5418 <_ZN14Adafruit_SHT3111readTempHumEv+0xd0>)
   d53fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53fe:	f002 f87d 	bl	d74fc <__aeabi_ddiv>
  humidity = shum;
   d5402:	f002 f963 	bl	d76cc <__aeabi_d2f>
   d5406:	6068      	str	r0, [r5, #4]
  return true;
   d5408:	2001      	movs	r0, #1
}
   d540a:	b002      	add	sp, #8
   d540c:	bd70      	pop	{r4, r5, r6, pc}
    return false;
   d540e:	2000      	movs	r0, #0
   d5410:	e7fb      	b.n	d540a <_ZN14Adafruit_SHT3111readTempHumEv+0xc2>
   d5412:	bf00      	nop
   d5414:	f3af 8000 	nop.w
   d5418:	00000000 	.word	0x00000000
   d541c:	40efffe0 	.word	0x40efffe0
   d5420:	40468000 	.word	0x40468000
   d5424:	40590000 	.word	0x40590000
   d5428:	00000000 	.word	0x00000000
   d542c:	4065e000 	.word	0x4065e000

000d5430 <_ZN14Adafruit_SHT3115readTemperatureEv>:
float Adafruit_SHT31::readTemperature(void) {
   d5430:	b510      	push	{r4, lr}
   d5432:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5434:	f7ff ff88 	bl	d5348 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5438:	b110      	cbz	r0, d5440 <_ZN14Adafruit_SHT3115readTemperatureEv+0x10>
  return temp;
   d543a:	ed94 0a02 	vldr	s0, [r4, #8]
}
   d543e:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d5440:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5448 <_ZN14Adafruit_SHT3115readTemperatureEv+0x18>
   d5444:	e7fb      	b.n	d543e <_ZN14Adafruit_SHT3115readTemperatureEv+0xe>
   d5446:	bf00      	nop
   d5448:	7fc00000 	.word	0x7fc00000

000d544c <_ZN14Adafruit_SHT3112readHumidityEv>:
float Adafruit_SHT31::readHumidity(void) {
   d544c:	b510      	push	{r4, lr}
   d544e:	4604      	mov	r4, r0
  if (! readTempHum()) return NAN;
   d5450:	f7ff ff7a 	bl	d5348 <_ZN14Adafruit_SHT3111readTempHumEv>
   d5454:	b110      	cbz	r0, d545c <_ZN14Adafruit_SHT3112readHumidityEv+0x10>
  return humidity;
   d5456:	ed94 0a01 	vldr	s0, [r4, #4]
}
   d545a:	bd10      	pop	{r4, pc}
  if (! readTempHum()) return NAN;
   d545c:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5464 <_ZN14Adafruit_SHT3112readHumidityEv+0x18>
   d5460:	e7fb      	b.n	d545a <_ZN14Adafruit_SHT3112readHumidityEv+0xe>
   d5462:	bf00      	nop
   d5464:	7fc00000 	.word	0x7fc00000

000d5468 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5468:	b508      	push	{r3, lr}
   d546a:	4b02      	ldr	r3, [pc, #8]	; (d5474 <os_mutex_recursive_create+0xc>)
   d546c:	681b      	ldr	r3, [r3, #0]
   d546e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5470:	9301      	str	r3, [sp, #4]
   d5472:	bd08      	pop	{r3, pc}
   d5474:	00030248 	.word	0x00030248

000d5478 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d5478:	b508      	push	{r3, lr}
   d547a:	4b02      	ldr	r3, [pc, #8]	; (d5484 <os_mutex_recursive_destroy+0xc>)
   d547c:	681b      	ldr	r3, [r3, #0]
   d547e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5480:	9301      	str	r3, [sp, #4]
   d5482:	bd08      	pop	{r3, pc}
   d5484:	00030248 	.word	0x00030248

000d5488 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d5488:	b508      	push	{r3, lr}
   d548a:	4b02      	ldr	r3, [pc, #8]	; (d5494 <HAL_Feature_Set+0xc>)
   d548c:	681b      	ldr	r3, [r3, #0]
   d548e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5490:	9301      	str	r3, [sp, #4]
   d5492:	bd08      	pop	{r3, pc}
   d5494:	00030234 	.word	0x00030234

000d5498 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5498:	b508      	push	{r3, lr}
   d549a:	4b02      	ldr	r3, [pc, #8]	; (d54a4 <HAL_RNG_GetRandomNumber+0xc>)
   d549c:	681b      	ldr	r3, [r3, #0]
   d549e:	685b      	ldr	r3, [r3, #4]
   d54a0:	9301      	str	r3, [sp, #4]
   d54a2:	bd08      	pop	{r3, pc}
   d54a4:	00030218 	.word	0x00030218

000d54a8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d54a8:	b508      	push	{r3, lr}
   d54aa:	4b02      	ldr	r3, [pc, #8]	; (d54b4 <HAL_Delay_Microseconds+0xc>)
   d54ac:	681b      	ldr	r3, [r3, #0]
   d54ae:	68db      	ldr	r3, [r3, #12]
   d54b0:	9301      	str	r3, [sp, #4]
   d54b2:	bd08      	pop	{r3, pc}
   d54b4:	00030218 	.word	0x00030218

000d54b8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d54b8:	b508      	push	{r3, lr}
   d54ba:	4b02      	ldr	r3, [pc, #8]	; (d54c4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d54bc:	681b      	ldr	r3, [r3, #0]
   d54be:	695b      	ldr	r3, [r3, #20]
   d54c0:	9301      	str	r3, [sp, #4]
   d54c2:	bd08      	pop	{r3, pc}
   d54c4:	00030218 	.word	0x00030218

000d54c8 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 5, hal, hal_rtc_get_unixtime_deprecated, time32_t(void))
DYNALIB_FN(BASE_IDX + 6, hal, hal_rtc_set_unixtime_deprecated, void(time32_t))

DYNALIB_FN(BASE_IDX + 7, hal, hal_rtc_set_alarm, int(const struct timeval*, uint32_t, hal_rtc_alarm_handler, void*, void*))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
   d54c8:	b508      	push	{r3, lr}
   d54ca:	4b02      	ldr	r3, [pc, #8]	; (d54d4 <HAL_EEPROM_Init+0xc>)
   d54cc:	681b      	ldr	r3, [r3, #0]
   d54ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d54d0:	9301      	str	r3, [sp, #4]
   d54d2:	bd08      	pop	{r3, pc}
   d54d4:	00030218 	.word	0x00030218

000d54d8 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
   d54d8:	b508      	push	{r3, lr}
   d54da:	4b02      	ldr	r3, [pc, #8]	; (d54e4 <HAL_EEPROM_Write+0xc>)
   d54dc:	681b      	ldr	r3, [r3, #0]
   d54de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d54e0:	9301      	str	r3, [sp, #4]
   d54e2:	bd08      	pop	{r3, pc}
   d54e4:	00030218 	.word	0x00030218

000d54e8 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, hal_rtc_cancel_alarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
   d54e8:	b508      	push	{r3, lr}
   d54ea:	4b02      	ldr	r3, [pc, #8]	; (d54f4 <HAL_EEPROM_Get+0xc>)
   d54ec:	681b      	ldr	r3, [r3, #0]
   d54ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d54f0:	9301      	str	r3, [sp, #4]
   d54f2:	bd08      	pop	{r3, pc}
   d54f4:	00030218 	.word	0x00030218

000d54f8 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
   d54f8:	b508      	push	{r3, lr}
   d54fa:	4b02      	ldr	r3, [pc, #8]	; (d5504 <HAL_EEPROM_Put+0xc>)
   d54fc:	681b      	ldr	r3, [r3, #0]
   d54fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5500:	9301      	str	r3, [sp, #4]
   d5502:	bd08      	pop	{r3, pc}
   d5504:	00030218 	.word	0x00030218

000d5508 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d5508:	b508      	push	{r3, lr}
   d550a:	4b02      	ldr	r3, [pc, #8]	; (d5514 <hal_rtc_time_is_valid+0xc>)
   d550c:	681b      	ldr	r3, [r3, #0]
   d550e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5510:	9301      	str	r3, [sp, #4]
   d5512:	bd08      	pop	{r3, pc}
   d5514:	00030218 	.word	0x00030218

000d5518 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
   d5518:	b508      	push	{r3, lr}
   d551a:	4b02      	ldr	r3, [pc, #8]	; (d5524 <hal_timer_millis+0xc>)
   d551c:	681b      	ldr	r3, [r3, #0]
   d551e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5520:	9301      	str	r3, [sp, #4]
   d5522:	bd08      	pop	{r3, pc}
   d5524:	00030218 	.word	0x00030218

000d5528 <hal_rtc_get_time>:
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d5528:	b508      	push	{r3, lr}
   d552a:	4b02      	ldr	r3, [pc, #8]	; (d5534 <hal_rtc_get_time+0xc>)
   d552c:	681b      	ldr	r3, [r3, #0]
   d552e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5530:	9301      	str	r3, [sp, #4]
   d5532:	bd08      	pop	{r3, pc}
   d5534:	00030218 	.word	0x00030218

000d5538 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5538:	b508      	push	{r3, lr}
   d553a:	4b02      	ldr	r3, [pc, #8]	; (d5544 <HAL_Pin_Mode+0xc>)
   d553c:	681b      	ldr	r3, [r3, #0]
   d553e:	689b      	ldr	r3, [r3, #8]
   d5540:	9301      	str	r3, [sp, #4]
   d5542:	bd08      	pop	{r3, pc}
   d5544:	0003022c 	.word	0x0003022c

000d5548 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b02      	ldr	r3, [pc, #8]	; (d5554 <hal_i2c_begin+0xc>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	68db      	ldr	r3, [r3, #12]
   d5550:	9301      	str	r3, [sp, #4]
   d5552:	bd08      	pop	{r3, pc}
   d5554:	00030228 	.word	0x00030228

000d5558 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d5558:	b508      	push	{r3, lr}
   d555a:	4b02      	ldr	r3, [pc, #8]	; (d5564 <hal_i2c_begin_transmission+0xc>)
   d555c:	681b      	ldr	r3, [r3, #0]
   d555e:	699b      	ldr	r3, [r3, #24]
   d5560:	9301      	str	r3, [sp, #4]
   d5562:	bd08      	pop	{r3, pc}
   d5564:	00030228 	.word	0x00030228

000d5568 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d5568:	b508      	push	{r3, lr}
   d556a:	4b02      	ldr	r3, [pc, #8]	; (d5574 <hal_i2c_end_transmission+0xc>)
   d556c:	681b      	ldr	r3, [r3, #0]
   d556e:	69db      	ldr	r3, [r3, #28]
   d5570:	9301      	str	r3, [sp, #4]
   d5572:	bd08      	pop	{r3, pc}
   d5574:	00030228 	.word	0x00030228

000d5578 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d5578:	b508      	push	{r3, lr}
   d557a:	4b02      	ldr	r3, [pc, #8]	; (d5584 <hal_i2c_write+0xc>)
   d557c:	681b      	ldr	r3, [r3, #0]
   d557e:	6a1b      	ldr	r3, [r3, #32]
   d5580:	9301      	str	r3, [sp, #4]
   d5582:	bd08      	pop	{r3, pc}
   d5584:	00030228 	.word	0x00030228

000d5588 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d5588:	b508      	push	{r3, lr}
   d558a:	4b02      	ldr	r3, [pc, #8]	; (d5594 <hal_i2c_available+0xc>)
   d558c:	681b      	ldr	r3, [r3, #0]
   d558e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5590:	9301      	str	r3, [sp, #4]
   d5592:	bd08      	pop	{r3, pc}
   d5594:	00030228 	.word	0x00030228

000d5598 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d5598:	b508      	push	{r3, lr}
   d559a:	4b02      	ldr	r3, [pc, #8]	; (d55a4 <hal_i2c_read+0xc>)
   d559c:	681b      	ldr	r3, [r3, #0]
   d559e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d55a0:	9301      	str	r3, [sp, #4]
   d55a2:	bd08      	pop	{r3, pc}
   d55a4:	00030228 	.word	0x00030228

000d55a8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d55a8:	b508      	push	{r3, lr}
   d55aa:	4b02      	ldr	r3, [pc, #8]	; (d55b4 <hal_i2c_peek+0xc>)
   d55ac:	681b      	ldr	r3, [r3, #0]
   d55ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d55b0:	9301      	str	r3, [sp, #4]
   d55b2:	bd08      	pop	{r3, pc}
   d55b4:	00030228 	.word	0x00030228

000d55b8 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d55b8:	b508      	push	{r3, lr}
   d55ba:	4b02      	ldr	r3, [pc, #8]	; (d55c4 <hal_i2c_flush+0xc>)
   d55bc:	681b      	ldr	r3, [r3, #0]
   d55be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d55c0:	9301      	str	r3, [sp, #4]
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	00030228 	.word	0x00030228

000d55c8 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d55c8:	b508      	push	{r3, lr}
   d55ca:	4b02      	ldr	r3, [pc, #8]	; (d55d4 <hal_i2c_is_enabled+0xc>)
   d55cc:	681b      	ldr	r3, [r3, #0]
   d55ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d55d0:	9301      	str	r3, [sp, #4]
   d55d2:	bd08      	pop	{r3, pc}
   d55d4:	00030228 	.word	0x00030228

000d55d8 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d55d8:	b508      	push	{r3, lr}
   d55da:	4b02      	ldr	r3, [pc, #8]	; (d55e4 <hal_i2c_init+0xc>)
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	bd08      	pop	{r3, pc}
   d55e4:	00030228 	.word	0x00030228

000d55e8 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b02      	ldr	r3, [pc, #8]	; (d55f4 <hal_i2c_request_ex+0xc>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d55f0:	9301      	str	r3, [sp, #4]
   d55f2:	bd08      	pop	{r3, pc}
   d55f4:	00030228 	.word	0x00030228

000d55f8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b02      	ldr	r3, [pc, #8]	; (d5604 <inet_inet_ntop+0xc>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	695b      	ldr	r3, [r3, #20]
   d5600:	9301      	str	r3, [sp, #4]
   d5602:	bd08      	pop	{r3, pc}
   d5604:	00030264 	.word	0x00030264

000d5608 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <netdb_freeaddrinfo+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	689b      	ldr	r3, [r3, #8]
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	00030268 	.word	0x00030268

000d5618 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <netdb_getaddrinfo+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	68db      	ldr	r3, [r3, #12]
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	00030268 	.word	0x00030268

000d5628 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <hal_spi_init+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	69db      	ldr	r3, [r3, #28]
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	00030230 	.word	0x00030230

000d5638 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <hal_spi_is_enabled+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	6a1b      	ldr	r3, [r3, #32]
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	00030230 	.word	0x00030230

000d5648 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <hal_usart_init+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	681b      	ldr	r3, [r3, #0]
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	0003023c 	.word	0x0003023c

000d5658 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <hal_usart_write+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	68db      	ldr	r3, [r3, #12]
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	0003023c 	.word	0x0003023c

000d5668 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <hal_usart_available+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	691b      	ldr	r3, [r3, #16]
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	0003023c 	.word	0x0003023c

000d5678 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <hal_usart_read+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	695b      	ldr	r3, [r3, #20]
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	0003023c 	.word	0x0003023c

000d5688 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <hal_usart_peek+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	699b      	ldr	r3, [r3, #24]
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	0003023c 	.word	0x0003023c

000d5698 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <hal_usart_flush+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	69db      	ldr	r3, [r3, #28]
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	0003023c 	.word	0x0003023c

000d56a8 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <hal_usart_is_enabled+0xc>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	6a1b      	ldr	r3, [r3, #32]
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	bd08      	pop	{r3, pc}
   d56b4:	0003023c 	.word	0x0003023c

000d56b8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d56b8:	b508      	push	{r3, lr}
   d56ba:	4b02      	ldr	r3, [pc, #8]	; (d56c4 <hal_usart_available_data_for_write+0xc>)
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56c0:	9301      	str	r3, [sp, #4]
   d56c2:	bd08      	pop	{r3, pc}
   d56c4:	0003023c 	.word	0x0003023c

000d56c8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <HAL_USB_USART_Init+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	681b      	ldr	r3, [r3, #0]
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	0003024c 	.word	0x0003024c

000d56d8 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <HAL_USB_USART_Begin+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	685b      	ldr	r3, [r3, #4]
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	0003024c 	.word	0x0003024c

000d56e8 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <HAL_USB_USART_Available_Data+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	691b      	ldr	r3, [r3, #16]
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	0003024c 	.word	0x0003024c

000d56f8 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	695b      	ldr	r3, [r3, #20]
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	0003024c 	.word	0x0003024c

000d5708 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <HAL_USB_USART_Receive_Data+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	699b      	ldr	r3, [r3, #24]
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	0003024c 	.word	0x0003024c

000d5718 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <HAL_USB_USART_Send_Data+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	69db      	ldr	r3, [r3, #28]
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	0003024c 	.word	0x0003024c

000d5728 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b02      	ldr	r3, [pc, #8]	; (d5734 <HAL_USB_USART_Flush_Data+0xc>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	6a1b      	ldr	r3, [r3, #32]
   d5730:	9301      	str	r3, [sp, #4]
   d5732:	bd08      	pop	{r3, pc}
   d5734:	0003024c 	.word	0x0003024c

000d5738 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5738:	b508      	push	{r3, lr}
   d573a:	4b02      	ldr	r3, [pc, #8]	; (d5744 <panic_+0xc>)
   d573c:	681b      	ldr	r3, [r3, #0]
   d573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5740:	9301      	str	r3, [sp, #4]
   d5742:	bd08      	pop	{r3, pc}
   d5744:	00030260 	.word	0x00030260

000d5748 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <log_message+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	00030260 	.word	0x00030260

000d5758 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b03      	ldr	r3, [pc, #12]	; (d5768 <diag_get_source+0x10>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d5762:	9301      	str	r3, [sp, #4]
   d5764:	bd08      	pop	{r3, pc}
   d5766:	0000      	.short	0x0000
   d5768:	00030260 	.word	0x00030260

000d576c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d576c:	b508      	push	{r3, lr}
   d576e:	4b02      	ldr	r3, [pc, #8]	; (d5778 <system_mode+0xc>)
   d5770:	681b      	ldr	r3, [r3, #0]
   d5772:	681b      	ldr	r3, [r3, #0]
   d5774:	9301      	str	r3, [sp, #4]
   d5776:	bd08      	pop	{r3, pc}
   d5778:	00030220 	.word	0x00030220

000d577c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d577c:	b508      	push	{r3, lr}
   d577e:	4b02      	ldr	r3, [pc, #8]	; (d5788 <set_system_mode+0xc>)
   d5780:	681b      	ldr	r3, [r3, #0]
   d5782:	685b      	ldr	r3, [r3, #4]
   d5784:	9301      	str	r3, [sp, #4]
   d5786:	bd08      	pop	{r3, pc}
   d5788:	00030220 	.word	0x00030220

000d578c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d578c:	b508      	push	{r3, lr}
   d578e:	4b02      	ldr	r3, [pc, #8]	; (d5798 <system_delay_ms+0xc>)
   d5790:	681b      	ldr	r3, [r3, #0]
   d5792:	695b      	ldr	r3, [r3, #20]
   d5794:	9301      	str	r3, [sp, #4]
   d5796:	bd08      	pop	{r3, pc}
   d5798:	00030220 	.word	0x00030220

000d579c <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d579c:	b508      	push	{r3, lr}
   d579e:	4b02      	ldr	r3, [pc, #8]	; (d57a8 <system_thread_set_state+0xc>)
   d57a0:	681b      	ldr	r3, [r3, #0]
   d57a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d57a4:	9301      	str	r3, [sp, #4]
   d57a6:	bd08      	pop	{r3, pc}
   d57a8:	00030220 	.word	0x00030220

000d57ac <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d57ac:	b508      	push	{r3, lr}
   d57ae:	4b02      	ldr	r3, [pc, #8]	; (d57b8 <application_thread_current+0xc>)
   d57b0:	681b      	ldr	r3, [r3, #0]
   d57b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d57b4:	9301      	str	r3, [sp, #4]
   d57b6:	bd08      	pop	{r3, pc}
   d57b8:	00030220 	.word	0x00030220

000d57bc <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d57bc:	b508      	push	{r3, lr}
   d57be:	4b02      	ldr	r3, [pc, #8]	; (d57c8 <application_thread_invoke+0xc>)
   d57c0:	681b      	ldr	r3, [r3, #0]
   d57c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d57c4:	9301      	str	r3, [sp, #4]
   d57c6:	bd08      	pop	{r3, pc}
   d57c8:	00030220 	.word	0x00030220

000d57cc <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d57cc:	b508      	push	{r3, lr}
   d57ce:	4b02      	ldr	r3, [pc, #8]	; (d57d8 <system_thread_get_state+0xc>)
   d57d0:	681b      	ldr	r3, [r3, #0]
   d57d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d57d4:	9301      	str	r3, [sp, #4]
   d57d6:	bd08      	pop	{r3, pc}
   d57d8:	00030220 	.word	0x00030220

000d57dc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d57dc:	b508      	push	{r3, lr}
   d57de:	4b03      	ldr	r3, [pc, #12]	; (d57ec <system_ctrl_set_app_request_handler+0x10>)
   d57e0:	681b      	ldr	r3, [r3, #0]
   d57e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d57e6:	9301      	str	r3, [sp, #4]
   d57e8:	bd08      	pop	{r3, pc}
   d57ea:	0000      	.short	0x0000
   d57ec:	00030220 	.word	0x00030220

000d57f0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d57f0:	b508      	push	{r3, lr}
   d57f2:	4b03      	ldr	r3, [pc, #12]	; (d5800 <system_ctrl_set_result+0x10>)
   d57f4:	681b      	ldr	r3, [r3, #0]
   d57f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d57fa:	9301      	str	r3, [sp, #4]
   d57fc:	bd08      	pop	{r3, pc}
   d57fe:	0000      	.short	0x0000
   d5800:	00030220 	.word	0x00030220

000d5804 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d5804:	b508      	push	{r3, lr}
   d5806:	4b03      	ldr	r3, [pc, #12]	; (d5814 <system_sleep_ext+0x10>)
   d5808:	681b      	ldr	r3, [r3, #0]
   d580a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
   d580e:	9301      	str	r3, [sp, #4]
   d5810:	bd08      	pop	{r3, pc}
   d5812:	0000      	.short	0x0000
   d5814:	00030220 	.word	0x00030220

000d5818 <system_reset>:
DYNALIB_FN(BASE_IDX1 + 1, system, system_reset, int(unsigned, unsigned, unsigned, unsigned, void*))
   d5818:	b508      	push	{r3, lr}
   d581a:	4b03      	ldr	r3, [pc, #12]	; (d5828 <system_reset+0x10>)
   d581c:	681b      	ldr	r3, [r3, #0]
   d581e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
   d5822:	9301      	str	r3, [sp, #4]
   d5824:	bd08      	pop	{r3, pc}
   d5826:	0000      	.short	0x0000
   d5828:	00030220 	.word	0x00030220

000d582c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
   d582c:	b508      	push	{r3, lr}
   d582e:	4b02      	ldr	r3, [pc, #8]	; (d5838 <spark_variable+0xc>)
   d5830:	681b      	ldr	r3, [r3, #0]
   d5832:	681b      	ldr	r3, [r3, #0]
   d5834:	9301      	str	r3, [sp, #4]
   d5836:	bd08      	pop	{r3, pc}
   d5838:	00030244 	.word	0x00030244

000d583c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
   d583c:	b508      	push	{r3, lr}
   d583e:	4b02      	ldr	r3, [pc, #8]	; (d5848 <spark_function+0xc>)
   d5840:	681b      	ldr	r3, [r3, #0]
   d5842:	685b      	ldr	r3, [r3, #4]
   d5844:	9301      	str	r3, [sp, #4]
   d5846:	bd08      	pop	{r3, pc}
   d5848:	00030244 	.word	0x00030244

000d584c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d584c:	b508      	push	{r3, lr}
   d584e:	4b02      	ldr	r3, [pc, #8]	; (d5858 <spark_process+0xc>)
   d5850:	681b      	ldr	r3, [r3, #0]
   d5852:	689b      	ldr	r3, [r3, #8]
   d5854:	9301      	str	r3, [sp, #4]
   d5856:	bd08      	pop	{r3, pc}
   d5858:	00030244 	.word	0x00030244

000d585c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d585c:	b508      	push	{r3, lr}
   d585e:	4b02      	ldr	r3, [pc, #8]	; (d5868 <spark_cloud_flag_connect+0xc>)
   d5860:	681b      	ldr	r3, [r3, #0]
   d5862:	68db      	ldr	r3, [r3, #12]
   d5864:	9301      	str	r3, [sp, #4]
   d5866:	bd08      	pop	{r3, pc}
   d5868:	00030244 	.word	0x00030244

000d586c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d586c:	b508      	push	{r3, lr}
   d586e:	4b02      	ldr	r3, [pc, #8]	; (d5878 <spark_cloud_flag_connected+0xc>)
   d5870:	681b      	ldr	r3, [r3, #0]
   d5872:	695b      	ldr	r3, [r3, #20]
   d5874:	9301      	str	r3, [sp, #4]
   d5876:	bd08      	pop	{r3, pc}
   d5878:	00030244 	.word	0x00030244

000d587c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
   d587c:	b508      	push	{r3, lr}
   d587e:	4b02      	ldr	r3, [pc, #8]	; (d5888 <spark_deviceID+0xc>)
   d5880:	681b      	ldr	r3, [r3, #0]
   d5882:	69db      	ldr	r3, [r3, #28]
   d5884:	9301      	str	r3, [sp, #4]
   d5886:	bd08      	pop	{r3, pc}
   d5888:	00030244 	.word	0x00030244

000d588c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d588c:	b508      	push	{r3, lr}
   d588e:	4b02      	ldr	r3, [pc, #8]	; (d5898 <spark_send_event+0xc>)
   d5890:	681b      	ldr	r3, [r3, #0]
   d5892:	6a1b      	ldr	r3, [r3, #32]
   d5894:	9301      	str	r3, [sp, #4]
   d5896:	bd08      	pop	{r3, pc}
   d5898:	00030244 	.word	0x00030244

000d589c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d589c:	b508      	push	{r3, lr}
   d589e:	4b02      	ldr	r3, [pc, #8]	; (d58a8 <spark_subscribe+0xc>)
   d58a0:	681b      	ldr	r3, [r3, #0]
   d58a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d58a4:	9301      	str	r3, [sp, #4]
   d58a6:	bd08      	pop	{r3, pc}
   d58a8:	00030244 	.word	0x00030244

000d58ac <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
   d58ac:	b508      	push	{r3, lr}
   d58ae:	4b02      	ldr	r3, [pc, #8]	; (d58b8 <spark_sync_time+0xc>)
   d58b0:	681b      	ldr	r3, [r3, #0]
   d58b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d58b4:	9301      	str	r3, [sp, #4]
   d58b6:	bd08      	pop	{r3, pc}
   d58b8:	00030244 	.word	0x00030244

000d58bc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d58bc:	b508      	push	{r3, lr}
   d58be:	4b02      	ldr	r3, [pc, #8]	; (d58c8 <spark_sync_time_pending+0xc>)
   d58c0:	681b      	ldr	r3, [r3, #0]
   d58c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d58c4:	9301      	str	r3, [sp, #4]
   d58c6:	bd08      	pop	{r3, pc}
   d58c8:	00030244 	.word	0x00030244

000d58cc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d58cc:	b508      	push	{r3, lr}
   d58ce:	4b02      	ldr	r3, [pc, #8]	; (d58d8 <spark_set_random_seed_from_cloud_handler+0xc>)
   d58d0:	681b      	ldr	r3, [r3, #0]
   d58d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d58d4:	9301      	str	r3, [sp, #4]
   d58d6:	bd08      	pop	{r3, pc}
   d58d8:	00030244 	.word	0x00030244

000d58dc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d58dc:	b508      	push	{r3, lr}
   d58de:	4b02      	ldr	r3, [pc, #8]	; (d58e8 <network_connect+0xc>)
   d58e0:	681b      	ldr	r3, [r3, #0]
   d58e2:	685b      	ldr	r3, [r3, #4]
   d58e4:	9301      	str	r3, [sp, #4]
   d58e6:	bd08      	pop	{r3, pc}
   d58e8:	00030240 	.word	0x00030240

000d58ec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d58ec:	b508      	push	{r3, lr}
   d58ee:	4b02      	ldr	r3, [pc, #8]	; (d58f8 <network_connecting+0xc>)
   d58f0:	681b      	ldr	r3, [r3, #0]
   d58f2:	689b      	ldr	r3, [r3, #8]
   d58f4:	9301      	str	r3, [sp, #4]
   d58f6:	bd08      	pop	{r3, pc}
   d58f8:	00030240 	.word	0x00030240

000d58fc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d58fc:	b508      	push	{r3, lr}
   d58fe:	4b02      	ldr	r3, [pc, #8]	; (d5908 <network_disconnect+0xc>)
   d5900:	681b      	ldr	r3, [r3, #0]
   d5902:	68db      	ldr	r3, [r3, #12]
   d5904:	9301      	str	r3, [sp, #4]
   d5906:	bd08      	pop	{r3, pc}
   d5908:	00030240 	.word	0x00030240

000d590c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d590c:	b508      	push	{r3, lr}
   d590e:	4b02      	ldr	r3, [pc, #8]	; (d5918 <network_ready+0xc>)
   d5910:	681b      	ldr	r3, [r3, #0]
   d5912:	691b      	ldr	r3, [r3, #16]
   d5914:	9301      	str	r3, [sp, #4]
   d5916:	bd08      	pop	{r3, pc}
   d5918:	00030240 	.word	0x00030240

000d591c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d591c:	b508      	push	{r3, lr}
   d591e:	4b02      	ldr	r3, [pc, #8]	; (d5928 <network_on+0xc>)
   d5920:	681b      	ldr	r3, [r3, #0]
   d5922:	695b      	ldr	r3, [r3, #20]
   d5924:	9301      	str	r3, [sp, #4]
   d5926:	bd08      	pop	{r3, pc}
   d5928:	00030240 	.word	0x00030240

000d592c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d592c:	b508      	push	{r3, lr}
   d592e:	4b02      	ldr	r3, [pc, #8]	; (d5938 <network_off+0xc>)
   d5930:	681b      	ldr	r3, [r3, #0]
   d5932:	699b      	ldr	r3, [r3, #24]
   d5934:	9301      	str	r3, [sp, #4]
   d5936:	bd08      	pop	{r3, pc}
   d5938:	00030240 	.word	0x00030240

000d593c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d593c:	b508      	push	{r3, lr}
   d593e:	4b02      	ldr	r3, [pc, #8]	; (d5948 <network_listen+0xc>)
   d5940:	681b      	ldr	r3, [r3, #0]
   d5942:	69db      	ldr	r3, [r3, #28]
   d5944:	9301      	str	r3, [sp, #4]
   d5946:	bd08      	pop	{r3, pc}
   d5948:	00030240 	.word	0x00030240

000d594c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d594c:	b508      	push	{r3, lr}
   d594e:	4b02      	ldr	r3, [pc, #8]	; (d5958 <network_listening+0xc>)
   d5950:	681b      	ldr	r3, [r3, #0]
   d5952:	6a1b      	ldr	r3, [r3, #32]
   d5954:	9301      	str	r3, [sp, #4]
   d5956:	bd08      	pop	{r3, pc}
   d5958:	00030240 	.word	0x00030240

000d595c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d595c:	b508      	push	{r3, lr}
   d595e:	4b02      	ldr	r3, [pc, #8]	; (d5968 <network_set_listen_timeout+0xc>)
   d5960:	681b      	ldr	r3, [r3, #0]
   d5962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5964:	9301      	str	r3, [sp, #4]
   d5966:	bd08      	pop	{r3, pc}
   d5968:	00030240 	.word	0x00030240

000d596c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d596c:	b508      	push	{r3, lr}
   d596e:	4b02      	ldr	r3, [pc, #8]	; (d5978 <network_get_listen_timeout+0xc>)
   d5970:	681b      	ldr	r3, [r3, #0]
   d5972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5974:	9301      	str	r3, [sp, #4]
   d5976:	bd08      	pop	{r3, pc}
   d5978:	00030240 	.word	0x00030240

000d597c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d597c:	b508      	push	{r3, lr}
   d597e:	4b02      	ldr	r3, [pc, #8]	; (d5988 <malloc+0xc>)
   d5980:	681b      	ldr	r3, [r3, #0]
   d5982:	681b      	ldr	r3, [r3, #0]
   d5984:	9301      	str	r3, [sp, #4]
   d5986:	bd08      	pop	{r3, pc}
   d5988:	0003021c 	.word	0x0003021c

000d598c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d598c:	b508      	push	{r3, lr}
   d598e:	4b02      	ldr	r3, [pc, #8]	; (d5998 <free+0xc>)
   d5990:	681b      	ldr	r3, [r3, #0]
   d5992:	685b      	ldr	r3, [r3, #4]
   d5994:	9301      	str	r3, [sp, #4]
   d5996:	bd08      	pop	{r3, pc}
   d5998:	0003021c 	.word	0x0003021c

000d599c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d599c:	b508      	push	{r3, lr}
   d599e:	4b02      	ldr	r3, [pc, #8]	; (d59a8 <realloc+0xc>)
   d59a0:	681b      	ldr	r3, [r3, #0]
   d59a2:	689b      	ldr	r3, [r3, #8]
   d59a4:	9301      	str	r3, [sp, #4]
   d59a6:	bd08      	pop	{r3, pc}
   d59a8:	0003021c 	.word	0x0003021c

000d59ac <snprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d59ac:	b508      	push	{r3, lr}
   d59ae:	4b02      	ldr	r3, [pc, #8]	; (d59b8 <snprintf+0xc>)
   d59b0:	681b      	ldr	r3, [r3, #0]
   d59b2:	69db      	ldr	r3, [r3, #28]
   d59b4:	9301      	str	r3, [sp, #4]
   d59b6:	bd08      	pop	{r3, pc}
   d59b8:	0003021c 	.word	0x0003021c

000d59bc <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d59bc:	b508      	push	{r3, lr}
   d59be:	4b02      	ldr	r3, [pc, #8]	; (d59c8 <abort+0xc>)
   d59c0:	681b      	ldr	r3, [r3, #0]
   d59c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d59c4:	9301      	str	r3, [sp, #4]
   d59c6:	bd08      	pop	{r3, pc}
   d59c8:	0003021c 	.word	0x0003021c

000d59cc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d59cc:	b508      	push	{r3, lr}
   d59ce:	4b02      	ldr	r3, [pc, #8]	; (d59d8 <_malloc_r+0xc>)
   d59d0:	681b      	ldr	r3, [r3, #0]
   d59d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59d4:	9301      	str	r3, [sp, #4]
   d59d6:	bd08      	pop	{r3, pc}
   d59d8:	0003021c 	.word	0x0003021c

000d59dc <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d59dc:	b508      	push	{r3, lr}
   d59de:	4b02      	ldr	r3, [pc, #8]	; (d59e8 <newlib_impure_ptr_callback+0xc>)
   d59e0:	681b      	ldr	r3, [r3, #0]
   d59e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d59e4:	9301      	str	r3, [sp, #4]
   d59e6:	bd08      	pop	{r3, pc}
   d59e8:	0003021c 	.word	0x0003021c

000d59ec <localtime_r>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d59ec:	b508      	push	{r3, lr}
   d59ee:	4b02      	ldr	r3, [pc, #8]	; (d59f8 <localtime_r+0xc>)
   d59f0:	681b      	ldr	r3, [r3, #0]
   d59f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d59f4:	9301      	str	r3, [sp, #4]
   d59f6:	bd08      	pop	{r3, pc}
   d59f8:	0003021c 	.word	0x0003021c

000d59fc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d59fc:	2100      	movs	r1, #0
   d59fe:	f7ff bec5 	b.w	d578c <system_delay_ms>

000d5a02 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d5a02:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5a04:	6883      	ldr	r3, [r0, #8]
   d5a06:	4604      	mov	r4, r0
   d5a08:	b90b      	cbnz	r3, d5a0e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d5a0a:	f001 fa8e 	bl	d6f2a <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5a0e:	68c3      	ldr	r3, [r0, #12]
   d5a10:	4798      	blx	r3
      if (_M_manager)
   d5a12:	68a3      	ldr	r3, [r4, #8]
   d5a14:	b11b      	cbz	r3, d5a1e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5a16:	2203      	movs	r2, #3
   d5a18:	4621      	mov	r1, r4
   d5a1a:	4620      	mov	r0, r4
   d5a1c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5a1e:	4620      	mov	r0, r4
   d5a20:	2110      	movs	r1, #16
}
   d5a22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   d5a26:	f001 ba7a 	b.w	d6f1e <_ZdlPvj>

000d5a2a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5a2a:	b510      	push	{r4, lr}
   d5a2c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5a2e:	6800      	ldr	r0, [r0, #0]
   d5a30:	b108      	cbz	r0, d5a36 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d5a32:	f7ff fd21 	bl	d5478 <os_mutex_recursive_destroy>
    }
   d5a36:	4620      	mov	r0, r4
   d5a38:	bd10      	pop	{r4, pc}

000d5a3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d5a3a:	680b      	ldr	r3, [r1, #0]
   d5a3c:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d5a3e:	b113      	cbz	r3, d5a46 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5a40:	685a      	ldr	r2, [r3, #4]
   d5a42:	3201      	adds	r2, #1
   d5a44:	605a      	str	r2, [r3, #4]
      }
   d5a46:	4770      	bx	lr

000d5a48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d5a48:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d5a4a:	4c06      	ldr	r4, [pc, #24]	; (d5a64 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d5a4c:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d5a4e:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d5a50:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d5a52:	f7ff fd09 	bl	d5468 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d5a56:	4620      	mov	r0, r4
   d5a58:	4a03      	ldr	r2, [pc, #12]	; (d5a68 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d5a5a:	4904      	ldr	r1, [pc, #16]	; (d5a6c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d5a5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d5a60:	f001 ba58 	b.w	d6f14 <__aeabi_atexit>
   d5a64:	2003e5d8 	.word	0x2003e5d8
   d5a68:	2003e490 	.word	0x2003e490
   d5a6c:	000d5a2b 	.word	0x000d5a2b

000d5a70 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5a70:	2200      	movs	r2, #0
   d5a72:	6840      	ldr	r0, [r0, #4]
   d5a74:	4611      	mov	r1, r2
   d5a76:	f7ff bf49 	b.w	d590c <network_ready>

000d5a7a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d5a7a:	2200      	movs	r2, #0
   d5a7c:	6840      	ldr	r0, [r0, #4]
   d5a7e:	4611      	mov	r1, r2
   d5a80:	f7ff bf64 	b.w	d594c <network_listening>

000d5a84 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5a84:	2200      	movs	r2, #0
   d5a86:	6840      	ldr	r0, [r0, #4]
   d5a88:	4611      	mov	r1, r2
   d5a8a:	f7ff bf6f 	b.w	d596c <network_get_listen_timeout>

000d5a8e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5a8e:	6840      	ldr	r0, [r0, #4]
   d5a90:	2200      	movs	r2, #0
   d5a92:	f7ff bf63 	b.w	d595c <network_set_listen_timeout>

000d5a96 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5a96:	6840      	ldr	r0, [r0, #4]
   d5a98:	2200      	movs	r2, #0
   d5a9a:	f081 0101 	eor.w	r1, r1, #1
   d5a9e:	f7ff bf4d 	b.w	d593c <network_listen>

000d5aa2 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5aa2:	2300      	movs	r3, #0
   d5aa4:	6840      	ldr	r0, [r0, #4]
   d5aa6:	461a      	mov	r2, r3
   d5aa8:	4619      	mov	r1, r3
   d5aaa:	f7ff bf3f 	b.w	d592c <network_off>

000d5aae <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5aae:	2300      	movs	r3, #0
   d5ab0:	6840      	ldr	r0, [r0, #4]
   d5ab2:	461a      	mov	r2, r3
   d5ab4:	4619      	mov	r1, r3
   d5ab6:	f7ff bf31 	b.w	d591c <network_on>

000d5aba <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5aba:	2200      	movs	r2, #0
   d5abc:	6840      	ldr	r0, [r0, #4]
   d5abe:	4611      	mov	r1, r2
   d5ac0:	f7ff bf14 	b.w	d58ec <network_connecting>

000d5ac4 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5ac4:	6840      	ldr	r0, [r0, #4]
   d5ac6:	2200      	movs	r2, #0
   d5ac8:	2102      	movs	r1, #2
   d5aca:	f7ff bf17 	b.w	d58fc <network_disconnect>

000d5ace <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5ace:	2300      	movs	r3, #0
   d5ad0:	6840      	ldr	r0, [r0, #4]
   d5ad2:	461a      	mov	r2, r3
   d5ad4:	f7ff bf02 	b.w	d58dc <network_connect>

000d5ad8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5ad8:	4b08      	ldr	r3, [pc, #32]	; (d5afc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5ada:	b510      	push	{r4, lr}
   d5adc:	2428      	movs	r4, #40	; 0x28
   d5ade:	4622      	mov	r2, r4
   d5ae0:	4618      	mov	r0, r3
   d5ae2:	2100      	movs	r1, #0
   d5ae4:	f001 fe62 	bl	d77ac <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5ae8:	4b05      	ldr	r3, [pc, #20]	; (d5b00 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d5aea:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d5aec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5af0:	6042      	str	r2, [r0, #4]
   d5af2:	2204      	movs	r2, #4
   d5af4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5af6:	4a03      	ldr	r2, [pc, #12]	; (d5b04 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5af8:	601a      	str	r2, [r3, #0]
   d5afa:	bd10      	pop	{r4, pc}
   d5afc:	2003e5e4 	.word	0x2003e5e4
   d5b00:	2003e5dc 	.word	0x2003e5dc
   d5b04:	000d7d30 	.word	0x000d7d30

000d5b08 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5b08:	4770      	bx	lr

000d5b0a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   d5b0a:	2000      	movs	r0, #0
   d5b0c:	4770      	bx	lr

000d5b0e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5b0e:	b510      	push	{r4, lr}
   d5b10:	2110      	movs	r1, #16
   d5b12:	4604      	mov	r4, r0
   d5b14:	f001 fa03 	bl	d6f1e <_ZdlPvj>
   d5b18:	4620      	mov	r0, r4
   d5b1a:	bd10      	pop	{r4, pc}

000d5b1c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   d5b1c:	b508      	push	{r3, lr}
      { delete this; }
   d5b1e:	f7ff fff6 	bl	d5b0e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5b22:	bd08      	pop	{r3, pc}

000d5b24 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d5b24:	b510      	push	{r4, lr}
      if (_M_manager)
   d5b26:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d5b28:	4604      	mov	r4, r0
      if (_M_manager)
   d5b2a:	b113      	cbz	r3, d5b32 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5b2c:	2203      	movs	r2, #3
   d5b2e:	4601      	mov	r1, r0
   d5b30:	4798      	blx	r3
    }
   d5b32:	4620      	mov	r0, r4
   d5b34:	bd10      	pop	{r4, pc}

000d5b36 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d5b36:	b530      	push	{r4, r5, lr}
        type_(type) {
   d5b38:	2200      	movs	r2, #0
   d5b3a:	f64f 749c 	movw	r4, #65436	; 0xff9c
   d5b3e:	6002      	str	r2, [r0, #0]
   d5b40:	8084      	strh	r4, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5b42:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b44:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d5b46:	680c      	ldr	r4, [r1, #0]
   d5b48:	8085      	strh	r5, [r0, #4]
   d5b4a:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5b4c:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   d5b4e:	bd30      	pop	{r4, r5, pc}

000d5b50 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d5b50:	b510      	push	{r4, lr}
   d5b52:	4604      	mov	r4, r0
    free((void*)msg_);
   d5b54:	6800      	ldr	r0, [r0, #0]
   d5b56:	f7ff ff19 	bl	d598c <free>
}
   d5b5a:	4620      	mov	r0, r4
   d5b5c:	bd10      	pop	{r4, pc}

000d5b5e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d5b5e:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d5b60:	68c4      	ldr	r4, [r0, #12]
   d5b62:	b1f4      	cbz	r4, d5ba2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   d5b64:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5b66:	2b02      	cmp	r3, #2
   d5b68:	d103      	bne.n	d5b72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d5b6a:	f104 000c 	add.w	r0, r4, #12
   d5b6e:	f7ff ffef 	bl	d5b50 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   d5b72:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   d5b74:	b135      	cbz	r5, d5b84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   d5b76:	4628      	mov	r0, r5
   d5b78:	f7ff ffd4 	bl	d5b24 <_ZNSt14_Function_baseD1Ev>
   d5b7c:	2110      	movs	r1, #16
   d5b7e:	4628      	mov	r0, r5
   d5b80:	f001 f9cd 	bl	d6f1e <_ZdlPvj>
   d5b84:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d5b86:	b135      	cbz	r5, d5b96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d5b88:	4628      	mov	r0, r5
   d5b8a:	f7ff ffcb 	bl	d5b24 <_ZNSt14_Function_baseD1Ev>
   d5b8e:	2110      	movs	r1, #16
   d5b90:	4628      	mov	r0, r5
   d5b92:	f001 f9c4 	bl	d6f1e <_ZdlPvj>
   d5b96:	4620      	mov	r0, r4
   d5b98:	2114      	movs	r1, #20
   d5b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5b9e:	f001 b9be 	b.w	d6f1e <_ZdlPvj>
   d5ba2:	bd38      	pop	{r3, r4, r5, pc}

000d5ba4 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
{
    return CloudDisconnectOptions(options->flags, options->timeout, options->graceful);
}

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
   d5ba4:	b510      	push	{r4, lr}
   d5ba6:	b088      	sub	sp, #32
   d5ba8:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
   d5baa:	4668      	mov	r0, sp
   d5bac:	f000 fd2f 	bl	d660e <_ZN6StringC1EPKc>
    return (*fn)(p);
   d5bb0:	4669      	mov	r1, sp
   d5bb2:	a804      	add	r0, sp, #16
   d5bb4:	f000 fd4e 	bl	d6654 <_ZN6StringC1ERKS_>
   d5bb8:	a804      	add	r0, sp, #16
   d5bba:	47a0      	blx	r4
   d5bbc:	4604      	mov	r4, r0
   d5bbe:	a804      	add	r0, sp, #16
   d5bc0:	f000 fcda 	bl	d6578 <_ZN6StringD1Ev>
    String p(param);
   d5bc4:	4668      	mov	r0, sp
   d5bc6:	f000 fcd7 	bl	d6578 <_ZN6StringD1Ev>
}
   d5bca:	4620      	mov	r0, r4
   d5bcc:	b008      	add	sp, #32
   d5bce:	bd10      	pop	{r4, pc}

000d5bd0 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
   d5bd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
   d5bd2:	2300      	movs	r3, #0
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
   d5bd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
    desc.funcKey = funcKey;
   d5bd8:	9201      	str	r2, [sp, #4]
         size = sizeof(*this);
   d5bda:	2410      	movs	r4, #16
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
   d5bdc:	461a      	mov	r2, r3
   d5bde:	4669      	mov	r1, sp
   d5be0:	4618      	mov	r0, r3
         memset(this, 0, sizeof(*this));
   d5be2:	f8ad 3002 	strh.w	r3, [sp, #2]
         size = sizeof(*this);
   d5be6:	f8ad 4000 	strh.w	r4, [sp]
   d5bea:	f7ff fe27 	bl	d583c <spark_function>
}
   d5bee:	b004      	add	sp, #16
   d5bf0:	bd10      	pop	{r4, pc}

000d5bf2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d5bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5bf4:	460e      	mov	r6, r1
   d5bf6:	4604      	mov	r4, r0
   d5bf8:	f856 3b04 	ldr.w	r3, [r6], #4
   d5bfc:	9300      	str	r3, [sp, #0]
   d5bfe:	460d      	mov	r5, r1
   d5c00:	a801      	add	r0, sp, #4
   d5c02:	4631      	mov	r1, r6
   d5c04:	f7ff ff19 	bl	d5a3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5c08:	9a01      	ldr	r2, [sp, #4]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5c0a:	9b00      	ldr	r3, [sp, #0]
	_M_pi = __tmp;
   d5c0c:	6062      	str	r2, [r4, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5c0e:	6023      	str	r3, [r4, #0]
      ~__shared_ptr() = default;
   d5c10:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   d5c12:	2300      	movs	r3, #0
   d5c14:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d5c16:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   d5c18:	f7fe fb44 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5c1c:	4630      	mov	r0, r6
   d5c1e:	f7fe fb41 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   d5c22:	4628      	mov	r0, r5
   d5c24:	2108      	movs	r1, #8
   d5c26:	f001 f97a 	bl	d6f1e <_ZdlPvj>
        return p;
    }
   d5c2a:	4620      	mov	r0, r4
   d5c2c:	b002      	add	sp, #8
   d5c2e:	bd70      	pop	{r4, r5, r6, pc}

000d5c30 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d5c30:	b513      	push	{r0, r1, r4, lr}
   d5c32:	460b      	mov	r3, r1
   d5c34:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5c36:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5c3a:	466c      	mov	r4, sp
   d5c3c:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5c40:	e893 0003 	ldmia.w	r3, {r0, r1}
   d5c44:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5c48:	e894 0003 	ldmia.w	r4, {r0, r1}
   d5c4c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5c50:	b002      	add	sp, #8
   d5c52:	bd10      	pop	{r4, pc}

000d5c54 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   d5c54:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5c56:	b510      	push	{r4, lr}
      if (_M_empty())
   d5c58:	b90a      	cbnz	r2, d5c5e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5c5a:	f001 f966 	bl	d6f2a <_ZSt25__throw_bad_function_callv>
    }
   d5c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5c62:	68c3      	ldr	r3, [r0, #12]
   d5c64:	4718      	bx	r3

000d5c66 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5c66:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5c68:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d5c6a:	f100 0110 	add.w	r1, r0, #16
   d5c6e:	f7ff fff1 	bl	d5c54 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   d5c72:	bd08      	pop	{r3, pc}

000d5c74 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   d5c74:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d5c76:	b510      	push	{r4, lr}
      if (_M_empty())
   d5c78:	b90a      	cbnz	r2, d5c7e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5c7a:	f001 f956 	bl	d6f2a <_ZSt25__throw_bad_function_callv>
    }
   d5c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5c82:	68c3      	ldr	r3, [r0, #12]
   d5c84:	4718      	bx	r3

000d5c86 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d5c86:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   d5c88:	6800      	ldr	r0, [r0, #0]
   d5c8a:	f100 0110 	add.w	r1, r0, #16
   d5c8e:	f7ff fff1 	bl	d5c74 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   d5c92:	bd08      	pop	{r3, pc}

000d5c94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   d5c94:	b538      	push	{r3, r4, r5, lr}
   d5c96:	2300      	movs	r3, #0
   d5c98:	4604      	mov	r4, r0
   d5c9a:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5c9c:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   d5c9e:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5ca0:	f7fe f9f9 	bl	d4096 <_Znwj>
   d5ca4:	b128      	cbz	r0, d5cb2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   d5ca6:	2301      	movs	r3, #1
   d5ca8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   d5cac:	4b02      	ldr	r3, [pc, #8]	; (d5cb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d5cae:	6003      	str	r3, [r0, #0]
   d5cb0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d5cb2:	6020      	str	r0, [r4, #0]
	}
   d5cb4:	4620      	mov	r0, r4
   d5cb6:	bd38      	pop	{r3, r4, r5, pc}
   d5cb8:	000d7d64 	.word	0x000d7d64

000d5cbc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   d5cbc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5cbe:	2300      	movs	r3, #0
   d5cc0:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5cc2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5cc4:	4604      	mov	r4, r0
   d5cc6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5cc8:	b12b      	cbz	r3, d5cd6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5cca:	2202      	movs	r2, #2
   d5ccc:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5cce:	68eb      	ldr	r3, [r5, #12]
   d5cd0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5cd2:	68ab      	ldr	r3, [r5, #8]
   d5cd4:	60a3      	str	r3, [r4, #8]
    }
   d5cd6:	4620      	mov	r0, r4
   d5cd8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5cdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   d5cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5cde:	b089      	sub	sp, #36	; 0x24
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5ce0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d5ce2:	4668      	mov	r0, sp
   d5ce4:	f7ff ff27 	bl	d5b36 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5ce8:	f04f 0302 	mov.w	r3, #2
   d5cec:	e8d4 2f4f 	ldrexb	r2, [r4]
   d5cf0:	2a00      	cmp	r2, #0
   d5cf2:	d103      	bne.n	d5cfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d5cf4:	e8c4 3f41 	strexb	r1, r3, [r4]
   d5cf8:	2900      	cmp	r1, #0
   d5cfa:	d1f7      	bne.n	d5cec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   d5cfc:	d125      	bne.n	d5d4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   d5cfe:	f104 050c 	add.w	r5, r4, #12
   d5d02:	4669      	mov	r1, sp
   d5d04:	4628      	mov	r0, r5
   d5d06:	f7ff ff16 	bl	d5b36 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   d5d0a:	f3bf 8f5b 	dmb	ish
   d5d0e:	2301      	movs	r3, #1
   d5d10:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d5d12:	2000      	movs	r0, #0
   d5d14:	f104 0308 	add.w	r3, r4, #8
   d5d18:	f3bf 8f5b 	dmb	ish
   d5d1c:	e853 6f00 	ldrex	r6, [r3]
   d5d20:	e843 0200 	strex	r2, r0, [r3]
   d5d24:	2a00      	cmp	r2, #0
   d5d26:	d1f9      	bne.n	d5d1c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   d5d28:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d5d2c:	b16e      	cbz	r6, d5d4a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   d5d2e:	f7ff fd3d 	bl	d57ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d5d32:	b178      	cbz	r0, d5d54 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d5d34:	4629      	mov	r1, r5
   d5d36:	4630      	mov	r0, r6
   d5d38:	f7ff ff8c 	bl	d5c54 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   d5d3c:	4630      	mov	r0, r6
   d5d3e:	f7ff fef1 	bl	d5b24 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d5d42:	2110      	movs	r1, #16
   d5d44:	4630      	mov	r0, r6
   d5d46:	f001 f8ea 	bl	d6f1e <_ZdlPvj>
        p_->setError(std::move(error));
   d5d4a:	4668      	mov	r0, sp
   d5d4c:	f7ff ff00 	bl	d5b50 <_ZN8particle5ErrorD1Ev>
    }
   d5d50:	b009      	add	sp, #36	; 0x24
   d5d52:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  typename __cv_quals<_Bound_args>::type...>;

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5d54:	4631      	mov	r1, r6
   d5d56:	a802      	add	r0, sp, #8
   d5d58:	f7ff ffb0 	bl	d5cbc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5d5c:	68e0      	ldr	r0, [r4, #12]
   d5d5e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5d62:	b108      	cbz	r0, d5d68 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   d5d64:	f001 fd60 	bl	d7828 <strdup>
        type_(type) {
   d5d68:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5d6a:	2010      	movs	r0, #16
   d5d6c:	f8ad 501c 	strh.w	r5, [sp, #28]
   d5d70:	f7fe f991 	bl	d4096 <_Znwj>
   d5d74:	4605      	mov	r5, r0
   d5d76:	b1e8      	cbz	r0, d5db4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   d5d78:	2700      	movs	r7, #0
   d5d7a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5d7c:	2018      	movs	r0, #24
   d5d7e:	f7fe f98a 	bl	d4096 <_Znwj>
   d5d82:	4604      	mov	r4, r0
   d5d84:	b188      	cbz	r0, d5daa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   d5d86:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   d5d88:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d5d8a:	a802      	add	r0, sp, #8
   d5d8c:	f7ff ff50 	bl	d5c30 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d90:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d5d92:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d94:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5d96:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d5d98:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5d9a:	a906      	add	r1, sp, #24
   d5d9c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5d9e:	60e3      	str	r3, [r4, #12]
   d5da0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   d5da4:	9205      	str	r2, [sp, #20]
   d5da6:	f7ff fec6 	bl	d5b36 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   d5daa:	4b08      	ldr	r3, [pc, #32]	; (d5dcc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   d5dac:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5dae:	4b08      	ldr	r3, [pc, #32]	; (d5dd0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5db0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d5db2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   d5db4:	a806      	add	r0, sp, #24
   d5db6:	f7ff fecb 	bl	d5b50 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5dba:	a802      	add	r0, sp, #8
   d5dbc:	f7ff feb2 	bl	d5b24 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5dc0:	2200      	movs	r2, #0
   d5dc2:	4629      	mov	r1, r5
   d5dc4:	4803      	ldr	r0, [pc, #12]	; (d5dd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   d5dc6:	f7ff fcf9 	bl	d57bc <application_thread_invoke>
   d5dca:	e7b7      	b.n	d5d3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   d5dcc:	000d5c67 	.word	0x000d5c67
   d5dd0:	000d5efd 	.word	0x000d5efd
   d5dd4:	000d5a03 	.word	0x000d5a03

000d5dd8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d5dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5ddc:	b08a      	sub	sp, #40	; 0x28
   d5dde:	4605      	mov	r5, r0
   d5de0:	f89d 9048 	ldrb.w	r9, [sp, #72]	; 0x48
   d5de4:	460c      	mov	r4, r1
   d5de6:	4617      	mov	r7, r2
   d5de8:	4698      	mov	r8, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d5dea:	f7ff fd3f 	bl	d586c <spark_cloud_flag_connected>
   d5dee:	ae07      	add	r6, sp, #28
    if (!connected()) {
   d5df0:	4682      	mov	sl, r0
   d5df2:	bb38      	cbnz	r0, d5e44 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   d5df4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d5df8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5dfa:	a905      	add	r1, sp, #20
   d5dfc:	4630      	mov	r0, r6
   d5dfe:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5e02:	f7ff fe98 	bl	d5b36 <_ZN8particle5ErrorC1EOS0_>
   d5e06:	2014      	movs	r0, #20
   d5e08:	f7fe f945 	bl	d4096 <_Znwj>
   d5e0c:	4604      	mov	r4, r0
   d5e0e:	b148      	cbz	r0, d5e24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d5e10:	2302      	movs	r3, #2
   d5e12:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5e14:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5e16:	e9c0 aa01 	strd	sl, sl, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5e1a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   d5e1c:	4631      	mov	r1, r6
   d5e1e:	300c      	adds	r0, #12
   d5e20:	f7ff fe89 	bl	d5b36 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5e24:	4628      	mov	r0, r5
	: __shared_count(__p)
   d5e26:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5e28:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   d5e2c:	f7ff ff32 	bl	d5c94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d5e30:	4630      	mov	r0, r6
   d5e32:	f7ff fe8d 	bl	d5b50 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d5e36:	a805      	add	r0, sp, #20
   d5e38:	f7ff fe8a 	bl	d5b50 <_ZN8particle5ErrorD1Ev>
        p.setError(Error::UNKNOWN);
        p.fromDataPtr(d.handler_data); // Free wrapper object
    }

    return p.future();
}
   d5e3c:	4628      	mov	r0, r5
   d5e3e:	b00a      	add	sp, #40	; 0x28
   d5e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d5e44:	230c      	movs	r3, #12
   d5e46:	f04f 0a00 	mov.w	sl, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d5e4a:	2014      	movs	r0, #20
   d5e4c:	e9cd aa08 	strd	sl, sl, [sp, #32]
   d5e50:	9307      	str	r3, [sp, #28]
   d5e52:	f7fe f920 	bl	d4096 <_Znwj>
   d5e56:	4601      	mov	r1, r0
   d5e58:	b128      	cbz	r0, d5e66 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x8e>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d5e5a:	e9c0 aa01 	strd	sl, sl, [r0, #4]
   d5e5e:	f880 a000 	strb.w	sl, [r0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d5e62:	f880 a001 	strb.w	sl, [r0, #1]
   d5e66:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   d5e68:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   d5e6a:	f7ff ff13 	bl	d5c94 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   d5e6e:	4b22      	ldr	r3, [pc, #136]	; (d5ef8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x120>)
   d5e70:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5e72:	2008      	movs	r0, #8
   d5e74:	f7fe f90f 	bl	d4096 <_Znwj>
   d5e78:	4682      	mov	sl, r0
   d5e7a:	b128      	cbz	r0, d5e88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb0>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5e7c:	9b03      	ldr	r3, [sp, #12]
   d5e7e:	f840 3b04 	str.w	r3, [r0], #4
   d5e82:	a904      	add	r1, sp, #16
   d5e84:	f7ff fdd9 	bl	d5a3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5e88:	9600      	str	r6, [sp, #0]
   d5e8a:	fa5f f389 	uxtb.w	r3, r9
   d5e8e:	4642      	mov	r2, r8
   d5e90:	4639      	mov	r1, r7
   d5e92:	4620      	mov	r0, r4
    d.handler_data = p.dataPtr();
   d5e94:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5e98:	f7ff fcf8 	bl	d588c <spark_send_event>
   d5e9c:	b9b8      	cbnz	r0, d5ece <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
	return __atomic_load_n(&_M_i, int(__m));
   d5e9e:	9b03      	ldr	r3, [sp, #12]
   d5ea0:	785b      	ldrb	r3, [r3, #1]
   d5ea2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5ea6:	b993      	cbnz	r3, d5ece <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xf6>
   d5ea8:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   d5eac:	a905      	add	r1, sp, #20
   d5eae:	a803      	add	r0, sp, #12
   d5eb0:	9205      	str	r2, [sp, #20]
   d5eb2:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5eb6:	f7ff ff11 	bl	d5cdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5eba:	a805      	add	r0, sp, #20
   d5ebc:	f7ff fe48 	bl	d5b50 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d5ec0:	a805      	add	r0, sp, #20
   d5ec2:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5ec4:	f7ff fe95 	bl	d5bf2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   d5ec8:	a806      	add	r0, sp, #24
   d5eca:	f7fe f9eb 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5ece:	9b03      	ldr	r3, [sp, #12]
   d5ed0:	9305      	str	r3, [sp, #20]
   d5ed2:	a904      	add	r1, sp, #16
   d5ed4:	a806      	add	r0, sp, #24
   d5ed6:	f7ff fdb0 	bl	d5a3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5eda:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d5edc:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   d5ede:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   d5ee0:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   d5ee2:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   d5ee4:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   d5ee6:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   d5ee8:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   d5eea:	f7fe f9db 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5eee:	a804      	add	r0, sp, #16
   d5ef0:	f7fe f9d8 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   d5ef4:	e7a2      	b.n	d5e3c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   d5ef6:	bf00      	nop
   d5ef8:	000d5fc1 	.word	0x000d5fc1

000d5efc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	  switch (__op)
   d5efc:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5efe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5f00:	4605      	mov	r5, r0
	  switch (__op)
   d5f02:	d007      	beq.n	d5f14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x18>
   d5f04:	2a03      	cmp	r2, #3
   d5f06:	d018      	beq.n	d5f3a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3e>
   d5f08:	2a01      	cmp	r2, #1
   d5f0a:	d101      	bne.n	d5f10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5f0c:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5f0e:	6003      	str	r3, [r0, #0]
	}
   d5f10:	2000      	movs	r0, #0
   d5f12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5f14:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   d5f16:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5f18:	f7fe f8bd 	bl	d4096 <_Znwj>
   d5f1c:	4604      	mov	r4, r0
   d5f1e:	b150      	cbz	r0, d5f36 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3a>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5f20:	4631      	mov	r1, r6
   d5f22:	f7ff fecb 	bl	d5cbc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   d5f26:	6930      	ldr	r0, [r6, #16]
   d5f28:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5f2c:	b108      	cbz	r0, d5f32 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   d5f2e:	f001 fc7b 	bl	d7828 <strdup>
        type_(type) {
   d5f32:	6120      	str	r0, [r4, #16]
   d5f34:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   d5f36:	602c      	str	r4, [r5, #0]
	}
   d5f38:	e7ea      	b.n	d5f10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5f3a:	6804      	ldr	r4, [r0, #0]
   d5f3c:	2c00      	cmp	r4, #0
   d5f3e:	d0e7      	beq.n	d5f10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>
   d5f40:	f104 0010 	add.w	r0, r4, #16
   d5f44:	f7ff fe04 	bl	d5b50 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   d5f48:	4620      	mov	r0, r4
   d5f4a:	f7ff fdeb 	bl	d5b24 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5f4e:	2118      	movs	r1, #24
   d5f50:	4620      	mov	r0, r4
   d5f52:	f000 ffe4 	bl	d6f1e <_ZdlPvj>
   d5f56:	e7db      	b.n	d5f10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x14>

000d5f58 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   d5f58:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d5f5a:	2300      	movs	r3, #0
   d5f5c:	6083      	str	r3, [r0, #8]
      { return !_M_empty(); }
   d5f5e:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   d5f60:	4604      	mov	r4, r0
   d5f62:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   d5f64:	b12b      	cbz	r3, d5f72 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5f66:	2202      	movs	r2, #2
   d5f68:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5f6a:	68eb      	ldr	r3, [r5, #12]
   d5f6c:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5f6e:	68ab      	ldr	r3, [r5, #8]
   d5f70:	60a3      	str	r3, [r4, #8]
    }
   d5f72:	4620      	mov	r0, r4
   d5f74:	bd38      	pop	{r3, r4, r5, pc}

000d5f76 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	  switch (__op)
   d5f76:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5f78:	b570      	push	{r4, r5, r6, lr}
   d5f7a:	4604      	mov	r4, r0
	  switch (__op)
   d5f7c:	d007      	beq.n	d5f8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x18>
   d5f7e:	2a03      	cmp	r2, #3
   d5f80:	d012      	beq.n	d5fa8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x32>
   d5f82:	2a01      	cmp	r2, #1
   d5f84:	d101      	bne.n	d5f8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d5f86:	680b      	ldr	r3, [r1, #0]
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5f88:	6003      	str	r3, [r0, #0]
	}
   d5f8a:	2000      	movs	r0, #0
   d5f8c:	bd70      	pop	{r4, r5, r6, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d5f8e:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   d5f90:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d5f92:	f7fe f880 	bl	d4096 <_Znwj>
   d5f96:	4605      	mov	r5, r0
   d5f98:	b120      	cbz	r0, d5fa4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   d5f9a:	4631      	mov	r1, r6
   d5f9c:	f7ff ffdc 	bl	d5f58 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5fa0:	7c33      	ldrb	r3, [r6, #16]
   d5fa2:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   d5fa4:	6025      	str	r5, [r4, #0]
	}
   d5fa6:	e7f0      	b.n	d5f8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	  delete __victim._M_access<_Functor*>();
   d5fa8:	6804      	ldr	r4, [r0, #0]
   d5faa:	2c00      	cmp	r4, #0
   d5fac:	d0ed      	beq.n	d5f8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
    class function<_Res(_ArgTypes...)>
   d5fae:	4620      	mov	r0, r4
   d5fb0:	f7ff fdb8 	bl	d5b24 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   d5fb4:	2114      	movs	r1, #20
   d5fb6:	4620      	mov	r0, r4
   d5fb8:	f000 ffb1 	bl	d6f1e <_ZdlPvj>
   d5fbc:	e7e5      	b.n	d5f8a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x14>
	...

000d5fc0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5fc0:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5fc2:	b089      	sub	sp, #36	; 0x24
   d5fc4:	4604      	mov	r4, r0
   d5fc6:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d5fc8:	a801      	add	r0, sp, #4
   d5fca:	4611      	mov	r1, r2
   d5fcc:	f7ff fe11 	bl	d5bf2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5fd0:	b1a4      	cbz	r4, d5ffc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5fd2:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   d5fd4:	b11d      	cbz	r5, d5fde <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   d5fd6:	4628      	mov	r0, r5
   d5fd8:	f001 fc26 	bl	d7828 <strdup>
   d5fdc:	4605      	mov	r5, r0
   d5fde:	a801      	add	r0, sp, #4
   d5fe0:	a903      	add	r1, sp, #12
        type_(type) {
   d5fe2:	9503      	str	r5, [sp, #12]
   d5fe4:	f8ad 4010 	strh.w	r4, [sp, #16]
   d5fe8:	f7ff fe78 	bl	d5cdc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d5fec:	a803      	add	r0, sp, #12
   d5fee:	f7ff fdaf 	bl	d5b50 <_ZN8particle5ErrorD1Ev>
   d5ff2:	a802      	add	r0, sp, #8
   d5ff4:	f7fe f956 	bl	d42a4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5ff8:	b009      	add	sp, #36	; 0x24
   d5ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d5ffc:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   d5ffe:	2301      	movs	r3, #1
   d6000:	e8d5 2f4f 	ldrexb	r2, [r5]
   d6004:	2a00      	cmp	r2, #0
   d6006:	d103      	bne.n	d6010 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   d6008:	e8c5 3f41 	strexb	r1, r3, [r5]
   d600c:	2900      	cmp	r1, #0
   d600e:	d1f7      	bne.n	d6000 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   d6010:	d1ef      	bne.n	d5ff2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   d6012:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   d6014:	f3bf 8f5b 	dmb	ish
   d6018:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   d601a:	1d2b      	adds	r3, r5, #4
   d601c:	f3bf 8f5b 	dmb	ish
   d6020:	e853 6f00 	ldrex	r6, [r3]
   d6024:	e843 4200 	strex	r2, r4, [r3]
   d6028:	2a00      	cmp	r2, #0
   d602a:	d1f9      	bne.n	d6020 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   d602c:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   d6030:	2e00      	cmp	r6, #0
   d6032:	d0de      	beq.n	d5ff2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   d6034:	4620      	mov	r0, r4
   d6036:	f7ff fbb9 	bl	d57ac <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   d603a:	4607      	mov	r7, r0
   d603c:	b160      	cbz	r0, d6058 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d603e:	f105 010c 	add.w	r1, r5, #12
   d6042:	4630      	mov	r0, r6
   d6044:	f7ff fe16 	bl	d5c74 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   d6048:	4630      	mov	r0, r6
   d604a:	f7ff fd6b 	bl	d5b24 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   d604e:	2110      	movs	r1, #16
   d6050:	4630      	mov	r0, r6
   d6052:	f000 ff64 	bl	d6f1e <_ZdlPvj>
   d6056:	e7cc      	b.n	d5ff2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6058:	4631      	mov	r1, r6
   d605a:	a803      	add	r0, sp, #12
   d605c:	f7ff ff7c 	bl	d5f58 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6060:	7b2b      	ldrb	r3, [r5, #12]
   d6062:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6066:	2010      	movs	r0, #16
   d6068:	f7fe f815 	bl	d4096 <_Znwj>
   d606c:	4605      	mov	r5, r0
   d606e:	b1d0      	cbz	r0, d60a6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   d6070:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6072:	2014      	movs	r0, #20
   d6074:	f7fe f80f 	bl	d4096 <_Znwj>
   d6078:	4604      	mov	r4, r0
   d607a:	b178      	cbz	r0, d609c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   d607c:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   d607e:	4601      	mov	r1, r0
   d6080:	a803      	add	r0, sp, #12
   d6082:	f7ff fdd5 	bl	d5c30 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6086:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6088:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d608a:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d608c:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   d608e:	9205      	str	r2, [sp, #20]
   d6090:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6092:	60e3      	str	r3, [r4, #12]
   d6094:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   d6098:	9206      	str	r2, [sp, #24]
   d609a:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   d609c:	4b06      	ldr	r3, [pc, #24]	; (d60b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   d609e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d60a0:	4b06      	ldr	r3, [pc, #24]	; (d60bc <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d60a2:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   d60a4:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   d60a6:	a803      	add	r0, sp, #12
   d60a8:	f7ff fd3c 	bl	d5b24 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d60ac:	2200      	movs	r2, #0
   d60ae:	4629      	mov	r1, r5
   d60b0:	4803      	ldr	r0, [pc, #12]	; (d60c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   d60b2:	f7ff fb83 	bl	d57bc <application_thread_invoke>
   d60b6:	e7c7      	b.n	d6048 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   d60b8:	000d5c87 	.word	0x000d5c87
   d60bc:	000d5f77 	.word	0x000d5f77
   d60c0:	000d5a03 	.word	0x000d5a03

000d60c4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d60c4:	2200      	movs	r2, #0
   d60c6:	6840      	ldr	r0, [r0, #4]
   d60c8:	4611      	mov	r1, r2
   d60ca:	f7ff bc3f 	b.w	d594c <network_listening>

000d60ce <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d60ce:	2200      	movs	r2, #0
   d60d0:	6840      	ldr	r0, [r0, #4]
   d60d2:	4611      	mov	r1, r2
   d60d4:	f7ff bc4a 	b.w	d596c <network_get_listen_timeout>

000d60d8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d60d8:	6840      	ldr	r0, [r0, #4]
   d60da:	2200      	movs	r2, #0
   d60dc:	f7ff bc3e 	b.w	d595c <network_set_listen_timeout>

000d60e0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d60e0:	6840      	ldr	r0, [r0, #4]
   d60e2:	2200      	movs	r2, #0
   d60e4:	f081 0101 	eor.w	r1, r1, #1
   d60e8:	f7ff bc28 	b.w	d593c <network_listen>

000d60ec <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d60ec:	2300      	movs	r3, #0
   d60ee:	6840      	ldr	r0, [r0, #4]
   d60f0:	461a      	mov	r2, r3
   d60f2:	4619      	mov	r1, r3
   d60f4:	f7ff bc1a 	b.w	d592c <network_off>

000d60f8 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d60f8:	2300      	movs	r3, #0
   d60fa:	6840      	ldr	r0, [r0, #4]
   d60fc:	461a      	mov	r2, r3
   d60fe:	4619      	mov	r1, r3
   d6100:	f7ff bc0c 	b.w	d591c <network_on>

000d6104 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6104:	2200      	movs	r2, #0
   d6106:	6840      	ldr	r0, [r0, #4]
   d6108:	4611      	mov	r1, r2
   d610a:	f7ff bbff 	b.w	d590c <network_ready>

000d610e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d610e:	2200      	movs	r2, #0
   d6110:	6840      	ldr	r0, [r0, #4]
   d6112:	4611      	mov	r1, r2
   d6114:	f7ff bbea 	b.w	d58ec <network_connecting>

000d6118 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6118:	6840      	ldr	r0, [r0, #4]
   d611a:	2200      	movs	r2, #0
   d611c:	2102      	movs	r1, #2
   d611e:	f7ff bbed 	b.w	d58fc <network_disconnect>

000d6122 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d6122:	2300      	movs	r3, #0
   d6124:	6840      	ldr	r0, [r0, #4]
   d6126:	461a      	mov	r2, r3
   d6128:	f7ff bbd8 	b.w	d58dc <network_connect>

000d612c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d612c:	4b02      	ldr	r3, [pc, #8]	; (d6138 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d612e:	2203      	movs	r2, #3
   d6130:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6132:	4a02      	ldr	r2, [pc, #8]	; (d613c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6134:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d6136:	4770      	bx	lr
   d6138:	2003e60c 	.word	0x2003e60c
   d613c:	000d7d80 	.word	0x000d7d80

000d6140 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d6140:	4770      	bx	lr

000d6142 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6142:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6144:	4606      	mov	r6, r0
   d6146:	4615      	mov	r5, r2
   d6148:	460c      	mov	r4, r1
   d614a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d614c:	42bc      	cmp	r4, r7
   d614e:	d006      	beq.n	d615e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6150:	6833      	ldr	r3, [r6, #0]
   d6152:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6156:	689b      	ldr	r3, [r3, #8]
   d6158:	4630      	mov	r0, r6
   d615a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d615c:	e7f6      	b.n	d614c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d615e:	4628      	mov	r0, r5
   d6160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6162 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d6162:	7c00      	ldrb	r0, [r0, #16]
   d6164:	2200      	movs	r2, #0
   d6166:	f7ff ba07 	b.w	d5578 <hal_i2c_write>

000d616a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d616a:	7c00      	ldrb	r0, [r0, #16]
   d616c:	2100      	movs	r1, #0
   d616e:	f7ff ba0b 	b.w	d5588 <hal_i2c_available>

000d6172 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d6172:	7c00      	ldrb	r0, [r0, #16]
   d6174:	2100      	movs	r1, #0
   d6176:	f7ff ba0f 	b.w	d5598 <hal_i2c_read>

000d617a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d617a:	7c00      	ldrb	r0, [r0, #16]
   d617c:	2100      	movs	r1, #0
   d617e:	f7ff ba13 	b.w	d55a8 <hal_i2c_peek>

000d6182 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d6182:	7c00      	ldrb	r0, [r0, #16]
   d6184:	2100      	movs	r1, #0
   d6186:	f7ff ba17 	b.w	d55b8 <hal_i2c_flush>

000d618a <_ZN7TwoWireD0Ev>:
   d618a:	b510      	push	{r4, lr}
   d618c:	2114      	movs	r1, #20
   d618e:	4604      	mov	r4, r0
   d6190:	f000 fec5 	bl	d6f1e <_ZdlPvj>
   d6194:	4620      	mov	r0, r4
   d6196:	bd10      	pop	{r4, pc}

000d6198 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d6198:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d619a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d619e:	4604      	mov	r4, r0
   d61a0:	4608      	mov	r0, r1
   d61a2:	2100      	movs	r1, #0
   d61a4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d61a8:	4b03      	ldr	r3, [pc, #12]	; (d61b8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d61aa:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d61ac:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d61ae:	4611      	mov	r1, r2
   d61b0:	f7ff fa12 	bl	d55d8 <hal_i2c_init>
}
   d61b4:	4620      	mov	r0, r4
   d61b6:	bd10      	pop	{r4, pc}
   d61b8:	000d7db4 	.word	0x000d7db4

000d61bc <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d61bc:	2300      	movs	r3, #0
   d61be:	7c00      	ldrb	r0, [r0, #16]
   d61c0:	461a      	mov	r2, r3
   d61c2:	4619      	mov	r1, r3
   d61c4:	f7ff b9c0 	b.w	d5548 <hal_i2c_begin>

000d61c8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d61c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d61ca:	2200      	movs	r2, #0
   d61cc:	2314      	movs	r3, #20
   d61ce:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d61d2:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d61d6:	780b      	ldrb	r3, [r1, #0]
   d61d8:	f88d 3008 	strb.w	r3, [sp, #8]
   d61dc:	684b      	ldr	r3, [r1, #4]
   d61de:	9303      	str	r3, [sp, #12]
   d61e0:	68cb      	ldr	r3, [r1, #12]
   d61e2:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d61e4:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d61e6:	7a0b      	ldrb	r3, [r1, #8]
   d61e8:	9305      	str	r3, [sp, #20]
   d61ea:	a901      	add	r1, sp, #4
   d61ec:	f7ff f9fc 	bl	d55e8 <hal_i2c_request_ex>
}
   d61f0:	b007      	add	sp, #28
   d61f2:	f85d fb04 	ldr.w	pc, [sp], #4

000d61f6 <_ZN7TwoWire11requestFromEhjh>:
{
   d61f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d61f8:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d61fa:	f88d 1000 	strb.w	r1, [sp]
   d61fe:	f04f 0164 	mov.w	r1, #100	; 0x64
   d6202:	9103      	str	r1, [sp, #12]
   d6204:	bf18      	it	ne
   d6206:	2301      	movne	r3, #1
   d6208:	4669      	mov	r1, sp
    size_ = size;
   d620a:	9201      	str	r2, [sp, #4]
   d620c:	f88d 3008 	strb.w	r3, [sp, #8]
   d6210:	f7ff ffda 	bl	d61c8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d6214:	b005      	add	sp, #20
   d6216:	f85d fb04 	ldr.w	pc, [sp], #4

000d621a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d621a:	2301      	movs	r3, #1
   d621c:	f7ff bfeb 	b.w	d61f6 <_ZN7TwoWire11requestFromEhjh>

000d6220 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d6220:	7c00      	ldrb	r0, [r0, #16]
   d6222:	2200      	movs	r2, #0
   d6224:	f7ff b998 	b.w	d5558 <hal_i2c_begin_transmission>

000d6228 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d6228:	7c00      	ldrb	r0, [r0, #16]
   d622a:	2200      	movs	r2, #0
   d622c:	f7ff b99c 	b.w	d5568 <hal_i2c_end_transmission>

000d6230 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d6230:	2101      	movs	r1, #1
   d6232:	f7ff bff9 	b.w	d6228 <_ZN7TwoWire15endTransmissionEh>

000d6236 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6236:	4770      	bx	lr

000d6238 <_ZN9IPAddressD0Ev>:
   d6238:	b510      	push	{r4, lr}
   d623a:	2118      	movs	r1, #24
   d623c:	4604      	mov	r4, r0
   d623e:	f000 fe6e 	bl	d6f1e <_ZdlPvj>
   d6242:	4620      	mov	r0, r4
   d6244:	bd10      	pop	{r4, pc}

000d6246 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6246:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6248:	7d03      	ldrb	r3, [r0, #20]
   d624a:	2b06      	cmp	r3, #6
{
   d624c:	b08d      	sub	sp, #52	; 0x34
   d624e:	460e      	mov	r6, r1
   d6250:	f100 0704 	add.w	r7, r0, #4
   d6254:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6258:	d012      	beq.n	d6280 <_ZNK9IPAddress7printToER5Print+0x3a>
   d625a:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d625e:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6262:	220a      	movs	r2, #10
   d6264:	4630      	mov	r0, r6
   d6266:	f000 f94a 	bl	d64fe <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d626a:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d626c:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d626e:	d019      	beq.n	d62a4 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6270:	2c00      	cmp	r4, #0
   d6272:	d0f4      	beq.n	d625e <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6274:	212e      	movs	r1, #46	; 0x2e
   d6276:	4630      	mov	r0, r6
   d6278:	f000 f928 	bl	d64cc <_ZN5Print5printEc>
   d627c:	4404      	add	r4, r0
   d627e:	e7ee      	b.n	d625e <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6280:	232f      	movs	r3, #47	; 0x2f
   d6282:	466a      	mov	r2, sp
   d6284:	4639      	mov	r1, r7
   d6286:	200a      	movs	r0, #10
		buf[0] = 0;
   d6288:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d628c:	f7ff f9b4 	bl	d55f8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6290:	4668      	mov	r0, sp
   d6292:	f001 fae6 	bl	d7862 <strlen>
   d6296:	6833      	ldr	r3, [r6, #0]
   d6298:	4602      	mov	r2, r0
   d629a:	68db      	ldr	r3, [r3, #12]
   d629c:	4669      	mov	r1, sp
   d629e:	4630      	mov	r0, r6
   d62a0:	4798      	blx	r3
   d62a2:	4604      	mov	r4, r0
    }
    return n;
}
   d62a4:	4620      	mov	r0, r4
   d62a6:	b00d      	add	sp, #52	; 0x34
   d62a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d62ac <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d62ac:	b510      	push	{r4, lr}
   d62ae:	4b05      	ldr	r3, [pc, #20]	; (d62c4 <_ZN9IPAddressC1Ev+0x18>)
   d62b0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d62b2:	2211      	movs	r2, #17
   d62b4:	f840 3b04 	str.w	r3, [r0], #4
   d62b8:	2100      	movs	r1, #0
   d62ba:	f001 fa77 	bl	d77ac <memset>
}
   d62be:	4620      	mov	r0, r4
   d62c0:	bd10      	pop	{r4, pc}
   d62c2:	bf00      	nop
   d62c4:	000d7ddc 	.word	0x000d7ddc

000d62c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d62c8:	4603      	mov	r3, r0
   d62ca:	4a07      	ldr	r2, [pc, #28]	; (d62e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d62cc:	b510      	push	{r4, lr}
   d62ce:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d62d2:	f101 0210 	add.w	r2, r1, #16
   d62d6:	f851 4b04 	ldr.w	r4, [r1], #4
   d62da:	f843 4b04 	str.w	r4, [r3], #4
   d62de:	4291      	cmp	r1, r2
   d62e0:	d1f9      	bne.n	d62d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d62e2:	780a      	ldrb	r2, [r1, #0]
   d62e4:	701a      	strb	r2, [r3, #0]
}
   d62e6:	bd10      	pop	{r4, pc}
   d62e8:	000d7ddc 	.word	0x000d7ddc

000d62ec <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d62ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d62ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d62f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d62f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d62fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d62fe:	2304      	movs	r3, #4
   d6300:	6041      	str	r1, [r0, #4]
   d6302:	7503      	strb	r3, [r0, #20]
}
   d6304:	bd10      	pop	{r4, pc}

000d6306 <_ZN9IPAddressaSEPKh>:
{
   d6306:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6308:	78cb      	ldrb	r3, [r1, #3]
   d630a:	9300      	str	r3, [sp, #0]
   d630c:	788b      	ldrb	r3, [r1, #2]
   d630e:	784a      	ldrb	r2, [r1, #1]
   d6310:	7809      	ldrb	r1, [r1, #0]
   d6312:	f7ff ffeb 	bl	d62ec <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6316:	b002      	add	sp, #8
   d6318:	bd10      	pop	{r4, pc}
	...

000d631c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d631c:	4b01      	ldr	r3, [pc, #4]	; (d6324 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d631e:	4a02      	ldr	r2, [pc, #8]	; (d6328 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6320:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6322:	4770      	bx	lr
   d6324:	2003e614 	.word	0x2003e614
   d6328:	000d7de8 	.word	0x000d7de8

000d632c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d632c:	2300      	movs	r3, #0
   d632e:	6840      	ldr	r0, [r0, #4]
   d6330:	461a      	mov	r2, r3
   d6332:	f7ff bad3 	b.w	d58dc <network_connect>

000d6336 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6336:	6840      	ldr	r0, [r0, #4]
   d6338:	2200      	movs	r2, #0
   d633a:	2102      	movs	r1, #2
   d633c:	f7ff bade 	b.w	d58fc <network_disconnect>

000d6340 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6340:	2200      	movs	r2, #0
   d6342:	6840      	ldr	r0, [r0, #4]
   d6344:	4611      	mov	r1, r2
   d6346:	f7ff bad1 	b.w	d58ec <network_connecting>

000d634a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d634a:	2200      	movs	r2, #0
   d634c:	6840      	ldr	r0, [r0, #4]
   d634e:	4611      	mov	r1, r2
   d6350:	f7ff badc 	b.w	d590c <network_ready>

000d6354 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6354:	2300      	movs	r3, #0
   d6356:	6840      	ldr	r0, [r0, #4]
   d6358:	461a      	mov	r2, r3
   d635a:	4619      	mov	r1, r3
   d635c:	f7ff bade 	b.w	d591c <network_on>

000d6360 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6360:	2300      	movs	r3, #0
   d6362:	6840      	ldr	r0, [r0, #4]
   d6364:	461a      	mov	r2, r3
   d6366:	4619      	mov	r1, r3
   d6368:	f7ff bae0 	b.w	d592c <network_off>

000d636c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d636c:	6840      	ldr	r0, [r0, #4]
   d636e:	2200      	movs	r2, #0
   d6370:	f081 0101 	eor.w	r1, r1, #1
   d6374:	f7ff bae2 	b.w	d593c <network_listen>

000d6378 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6378:	6840      	ldr	r0, [r0, #4]
   d637a:	2200      	movs	r2, #0
   d637c:	f7ff baee 	b.w	d595c <network_set_listen_timeout>

000d6380 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6380:	2200      	movs	r2, #0
   d6382:	6840      	ldr	r0, [r0, #4]
   d6384:	4611      	mov	r1, r2
   d6386:	f7ff baf1 	b.w	d596c <network_get_listen_timeout>

000d638a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d638a:	2200      	movs	r2, #0
   d638c:	6840      	ldr	r0, [r0, #4]
   d638e:	4611      	mov	r1, r2
   d6390:	f7ff badc 	b.w	d594c <network_listening>

000d6394 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6394:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6398:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d639a:	b095      	sub	sp, #84	; 0x54
   d639c:	4616      	mov	r6, r2
   d639e:	460d      	mov	r5, r1
   d63a0:	4607      	mov	r7, r0
    IPAddress addr;
   d63a2:	f7ff ff83 	bl	d62ac <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d63a6:	4621      	mov	r1, r4
   d63a8:	2218      	movs	r2, #24
   d63aa:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d63ac:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d63ae:	f001 f9fd 	bl	d77ac <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d63b2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d63b4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d63b8:	4621      	mov	r1, r4
   d63ba:	466b      	mov	r3, sp
   d63bc:	aa0c      	add	r2, sp, #48	; 0x30
   d63be:	4630      	mov	r0, r6
   d63c0:	f7ff f92a 	bl	d5618 <netdb_getaddrinfo>
    if (!r) {
   d63c4:	4604      	mov	r4, r0
   d63c6:	2800      	cmp	r0, #0
   d63c8:	d146      	bne.n	d6458 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d63ca:	4602      	mov	r2, r0
   d63cc:	2101      	movs	r1, #1
   d63ce:	6868      	ldr	r0, [r5, #4]
   d63d0:	f7ff fa9c 	bl	d590c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63d4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d63d6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63d8:	4622      	mov	r2, r4
   d63da:	6868      	ldr	r0, [r5, #4]
   d63dc:	f7ff fa96 	bl	d590c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d63e0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d63e2:	4681      	mov	r9, r0
        bool ok = false;
   d63e4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d63e6:	2e00      	cmp	r6, #0
   d63e8:	d036      	beq.n	d6458 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d63ea:	2900      	cmp	r1, #0
   d63ec:	d134      	bne.n	d6458 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d63ee:	6873      	ldr	r3, [r6, #4]
   d63f0:	2b02      	cmp	r3, #2
   d63f2:	d003      	beq.n	d63fc <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d63f4:	2b0a      	cmp	r3, #10
   d63f6:	d00b      	beq.n	d6410 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d63f8:	69f6      	ldr	r6, [r6, #28]
   d63fa:	e7f4      	b.n	d63e6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d63fc:	f1b8 0f00 	cmp.w	r8, #0
   d6400:	d004      	beq.n	d640c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6402:	6971      	ldr	r1, [r6, #20]
   d6404:	4638      	mov	r0, r7
   d6406:	3104      	adds	r1, #4
   d6408:	f7ff ff7d 	bl	d6306 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d640c:	4641      	mov	r1, r8
   d640e:	e7f3      	b.n	d63f8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6410:	f1b9 0f00 	cmp.w	r9, #0
   d6414:	d101      	bne.n	d641a <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d6416:	4649      	mov	r1, r9
   d6418:	e7ee      	b.n	d63f8 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d641a:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d641c:	2210      	movs	r2, #16
   d641e:	a801      	add	r0, sp, #4
   d6420:	f001 f9c4 	bl	d77ac <memset>
                    a.v = 6;
   d6424:	2306      	movs	r3, #6
   d6426:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d642a:	ad01      	add	r5, sp, #4
   d642c:	f104 0308 	add.w	r3, r4, #8
   d6430:	3418      	adds	r4, #24
   d6432:	6818      	ldr	r0, [r3, #0]
   d6434:	6859      	ldr	r1, [r3, #4]
   d6436:	462a      	mov	r2, r5
   d6438:	c203      	stmia	r2!, {r0, r1}
   d643a:	3308      	adds	r3, #8
   d643c:	42a3      	cmp	r3, r4
   d643e:	4615      	mov	r5, r2
   d6440:	d1f7      	bne.n	d6432 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d6442:	a901      	add	r1, sp, #4
   d6444:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d6446:	ad07      	add	r5, sp, #28
   d6448:	f7ff ff3e 	bl	d62c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d644c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d644e:	1d3c      	adds	r4, r7, #4
   d6450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6452:	682b      	ldr	r3, [r5, #0]
   d6454:	7023      	strb	r3, [r4, #0]
   d6456:	e7de      	b.n	d6416 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6458:	9800      	ldr	r0, [sp, #0]
   d645a:	f7ff f8d5 	bl	d5608 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d645e:	4638      	mov	r0, r7
   d6460:	b015      	add	sp, #84	; 0x54
   d6462:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d6468 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6468:	4b02      	ldr	r3, [pc, #8]	; (d6474 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d646a:	4a03      	ldr	r2, [pc, #12]	; (d6478 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d646c:	601a      	str	r2, [r3, #0]
   d646e:	2200      	movs	r2, #0
   d6470:	605a      	str	r2, [r3, #4]

} // spark
   d6472:	4770      	bx	lr
   d6474:	2003e618 	.word	0x2003e618
   d6478:	000d7df4 	.word	0x000d7df4

000d647c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d647e:	4606      	mov	r6, r0
   d6480:	460d      	mov	r5, r1
  size_t n = 0;
   d6482:	188f      	adds	r7, r1, r2
   d6484:	2400      	movs	r4, #0
  while (size--) {
   d6486:	42bd      	cmp	r5, r7
   d6488:	d00c      	beq.n	d64a4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d648a:	6833      	ldr	r3, [r6, #0]
   d648c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6490:	689b      	ldr	r3, [r3, #8]
   d6492:	4630      	mov	r0, r6
   d6494:	4798      	blx	r3
     if (chunk>=0)
   d6496:	1e03      	subs	r3, r0, #0
   d6498:	db01      	blt.n	d649e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d649a:	441c      	add	r4, r3
  while (size--) {
   d649c:	e7f3      	b.n	d6486 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d649e:	2c00      	cmp	r4, #0
   d64a0:	bf08      	it	eq
   d64a2:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d64a4:	4620      	mov	r0, r4
   d64a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d64a8 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d64a8:	b513      	push	{r0, r1, r4, lr}
   d64aa:	4604      	mov	r4, r0
    }
   d64ac:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d64ae:	b159      	cbz	r1, d64c8 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d64b0:	9101      	str	r1, [sp, #4]
   d64b2:	f001 f9d6 	bl	d7862 <strlen>
   d64b6:	6823      	ldr	r3, [r4, #0]
   d64b8:	9901      	ldr	r1, [sp, #4]
   d64ba:	68db      	ldr	r3, [r3, #12]
   d64bc:	4602      	mov	r2, r0
   d64be:	4620      	mov	r0, r4
    }
   d64c0:	b002      	add	sp, #8
   d64c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d64c6:	4718      	bx	r3
    }
   d64c8:	b002      	add	sp, #8
   d64ca:	bd10      	pop	{r4, pc}

000d64cc <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d64cc:	6803      	ldr	r3, [r0, #0]
   d64ce:	689b      	ldr	r3, [r3, #8]
   d64d0:	4718      	bx	r3

000d64d2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d64d2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d64d4:	210d      	movs	r1, #13
{
   d64d6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d64d8:	f7ff fff8 	bl	d64cc <_ZN5Print5printEc>
  n += print('\n');
   d64dc:	210a      	movs	r1, #10
  size_t n = print('\r');
   d64de:	4604      	mov	r4, r0
  n += print('\n');
   d64e0:	4628      	mov	r0, r5
   d64e2:	f7ff fff3 	bl	d64cc <_ZN5Print5printEc>
  return n;
}
   d64e6:	4420      	add	r0, r4
   d64e8:	bd38      	pop	{r3, r4, r5, pc}

000d64ea <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d64ea:	b538      	push	{r3, r4, r5, lr}
   d64ec:	4605      	mov	r5, r0
  return write(str);
   d64ee:	f7ff ffdb 	bl	d64a8 <_ZN5Print5writeEPKc>
   d64f2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d64f4:	4628      	mov	r0, r5
   d64f6:	f7ff ffec 	bl	d64d2 <_ZN5Print7printlnEv>
  return n;
}
   d64fa:	4420      	add	r0, r4
   d64fc:	bd38      	pop	{r3, r4, r5, pc}

000d64fe <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d64fe:	b530      	push	{r4, r5, lr}
   d6500:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6502:	2300      	movs	r3, #0
   d6504:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6508:	2a01      	cmp	r2, #1
   d650a:	bf98      	it	ls
   d650c:	220a      	movls	r2, #10
   d650e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6510:	460d      	mov	r5, r1
   d6512:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6516:	fb01 5312 	mls	r3, r1, r2, r5
   d651a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d651e:	2b09      	cmp	r3, #9
   d6520:	bf94      	ite	ls
   d6522:	3330      	addls	r3, #48	; 0x30
   d6524:	3337      	addhi	r3, #55	; 0x37
   d6526:	b2db      	uxtb	r3, r3
  } while(n);
   d6528:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d652a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d652e:	d9ef      	bls.n	d6510 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6530:	4621      	mov	r1, r4
   d6532:	f7ff ffb9 	bl	d64a8 <_ZN5Print5writeEPKc>
}
   d6536:	b00b      	add	sp, #44	; 0x2c
   d6538:	bd30      	pop	{r4, r5, pc}

000d653a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d653a:	b510      	push	{r4, lr}
   d653c:	4604      	mov	r4, r0
   d653e:	f7ff faf1 	bl	d5b24 <_ZNSt14_Function_baseD1Ev>
   d6542:	4620      	mov	r0, r4
   d6544:	bd10      	pop	{r4, pc}
	...

000d6548 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6548:	4803      	ldr	r0, [pc, #12]	; (d6558 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d654a:	4a04      	ldr	r2, [pc, #16]	; (d655c <_GLOBAL__sub_I_RGB+0x14>)
   d654c:	4904      	ldr	r1, [pc, #16]	; (d6560 <_GLOBAL__sub_I_RGB+0x18>)
   d654e:	2300      	movs	r3, #0
   d6550:	6083      	str	r3, [r0, #8]
   d6552:	f000 bcdf 	b.w	d6f14 <__aeabi_atexit>
   d6556:	bf00      	nop
   d6558:	2003e620 	.word	0x2003e620
   d655c:	2003e490 	.word	0x2003e490
   d6560:	000d653b 	.word	0x000d653b

000d6564 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6564:	b510      	push	{r4, lr}
   d6566:	4604      	mov	r4, r0
   d6568:	4608      	mov	r0, r1
{
    _spi = spi;
   d656a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d656c:	f7ff f85c 	bl	d5628 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6570:	2300      	movs	r3, #0
   d6572:	6063      	str	r3, [r4, #4]
}
   d6574:	4620      	mov	r0, r4
   d6576:	bd10      	pop	{r4, pc}

000d6578 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6578:	b510      	push	{r4, lr}
   d657a:	4604      	mov	r4, r0
{
	free(buffer);
   d657c:	6800      	ldr	r0, [r0, #0]
   d657e:	f7ff fa05 	bl	d598c <free>
}
   d6582:	4620      	mov	r0, r4
   d6584:	bd10      	pop	{r4, pc}

000d6586 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6586:	b510      	push	{r4, lr}
   d6588:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d658a:	6800      	ldr	r0, [r0, #0]
   d658c:	b108      	cbz	r0, d6592 <_ZN6String10invalidateEv+0xc>
   d658e:	f7ff f9fd 	bl	d598c <free>
	buffer = NULL;
   d6592:	2300      	movs	r3, #0
	capacity = len = 0;
   d6594:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6598:	6023      	str	r3, [r4, #0]
}
   d659a:	bd10      	pop	{r4, pc}

000d659c <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d659c:	b538      	push	{r3, r4, r5, lr}
   d659e:	4604      	mov	r4, r0
   d65a0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d65a2:	6800      	ldr	r0, [r0, #0]
   d65a4:	3101      	adds	r1, #1
   d65a6:	f7ff f9f9 	bl	d599c <realloc>
	if (newbuffer) {
   d65aa:	b110      	cbz	r0, d65b2 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d65ac:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d65b0:	2001      	movs	r0, #1
	}
	return 0;
}
   d65b2:	bd38      	pop	{r3, r4, r5, pc}

000d65b4 <_ZN6String7reserveEj>:
{
   d65b4:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d65b6:	6803      	ldr	r3, [r0, #0]
{
   d65b8:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d65ba:	b123      	cbz	r3, d65c6 <_ZN6String7reserveEj+0x12>
   d65bc:	6843      	ldr	r3, [r0, #4]
   d65be:	428b      	cmp	r3, r1
   d65c0:	d301      	bcc.n	d65c6 <_ZN6String7reserveEj+0x12>
   d65c2:	2001      	movs	r0, #1
}
   d65c4:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d65c6:	4620      	mov	r0, r4
   d65c8:	f7ff ffe8 	bl	d659c <_ZN6String12changeBufferEj>
   d65cc:	2800      	cmp	r0, #0
   d65ce:	d0f9      	beq.n	d65c4 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d65d0:	68a3      	ldr	r3, [r4, #8]
   d65d2:	2b00      	cmp	r3, #0
   d65d4:	d1f5      	bne.n	d65c2 <_ZN6String7reserveEj+0xe>
   d65d6:	6822      	ldr	r2, [r4, #0]
   d65d8:	7013      	strb	r3, [r2, #0]
   d65da:	e7f2      	b.n	d65c2 <_ZN6String7reserveEj+0xe>

000d65dc <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d65dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d65de:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d65e0:	4611      	mov	r1, r2
   d65e2:	9201      	str	r2, [sp, #4]
{
   d65e4:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d65e6:	f7ff ffe5 	bl	d65b4 <_ZN6String7reserveEj>
   d65ea:	9a01      	ldr	r2, [sp, #4]
   d65ec:	b928      	cbnz	r0, d65fa <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d65ee:	4620      	mov	r0, r4
   d65f0:	f7ff ffc9 	bl	d6586 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d65f4:	4620      	mov	r0, r4
   d65f6:	b003      	add	sp, #12
   d65f8:	bd30      	pop	{r4, r5, pc}
	len = length;
   d65fa:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d65fc:	4629      	mov	r1, r5
   d65fe:	6820      	ldr	r0, [r4, #0]
   d6600:	f001 f8c6 	bl	d7790 <memcpy>
	buffer[len] = 0;
   d6604:	6822      	ldr	r2, [r4, #0]
   d6606:	68a3      	ldr	r3, [r4, #8]
   d6608:	2100      	movs	r1, #0
   d660a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d660c:	e7f2      	b.n	d65f4 <_ZN6String4copyEPKcj+0x18>

000d660e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d660e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6610:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6612:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6616:	4604      	mov	r4, r0
	len = 0;
   d6618:	6083      	str	r3, [r0, #8]
	flags = 0;
   d661a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d661c:	b141      	cbz	r1, d6630 <_ZN6StringC1EPKc+0x22>
   d661e:	4608      	mov	r0, r1
   d6620:	9101      	str	r1, [sp, #4]
   d6622:	f001 f91e 	bl	d7862 <strlen>
   d6626:	9901      	ldr	r1, [sp, #4]
   d6628:	4602      	mov	r2, r0
   d662a:	4620      	mov	r0, r4
   d662c:	f7ff ffd6 	bl	d65dc <_ZN6String4copyEPKcj>
}
   d6630:	4620      	mov	r0, r4
   d6632:	b002      	add	sp, #8
   d6634:	bd10      	pop	{r4, pc}

000d6636 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d6636:	4288      	cmp	r0, r1
{
   d6638:	b510      	push	{r4, lr}
   d663a:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d663c:	d005      	beq.n	d664a <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d663e:	680b      	ldr	r3, [r1, #0]
   d6640:	b12b      	cbz	r3, d664e <_ZN6StringaSERKS_+0x18>
   d6642:	688a      	ldr	r2, [r1, #8]
   d6644:	4619      	mov	r1, r3
   d6646:	f7ff ffc9 	bl	d65dc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d664a:	4620      	mov	r0, r4
   d664c:	bd10      	pop	{r4, pc}
	else invalidate();
   d664e:	f7ff ff9a 	bl	d6586 <_ZN6String10invalidateEv>
   d6652:	e7fa      	b.n	d664a <_ZN6StringaSERKS_+0x14>

000d6654 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d6654:	b510      	push	{r4, lr}
	buffer = NULL;
   d6656:	2300      	movs	r3, #0
String::String(const String &value)
   d6658:	4604      	mov	r4, r0
	capacity = 0;
   d665a:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d665e:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6660:	7303      	strb	r3, [r0, #12]
	*this = value;
   d6662:	f7ff ffe8 	bl	d6636 <_ZN6StringaSERKS_>
}
   d6666:	4620      	mov	r0, r4
   d6668:	bd10      	pop	{r4, pc}

000d666a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d666a:	b513      	push	{r0, r1, r4, lr}
   d666c:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d666e:	b159      	cbz	r1, d6688 <_ZN6StringaSEPKc+0x1e>
   d6670:	4608      	mov	r0, r1
   d6672:	9101      	str	r1, [sp, #4]
   d6674:	f001 f8f5 	bl	d7862 <strlen>
   d6678:	9901      	ldr	r1, [sp, #4]
   d667a:	4602      	mov	r2, r0
   d667c:	4620      	mov	r0, r4
   d667e:	f7ff ffad 	bl	d65dc <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6682:	4620      	mov	r0, r4
   d6684:	b002      	add	sp, #8
   d6686:	bd10      	pop	{r4, pc}
	else invalidate();
   d6688:	f7ff ff7d 	bl	d6586 <_ZN6String10invalidateEv>
   d668c:	e7f9      	b.n	d6682 <_ZN6StringaSEPKc+0x18>

000d668e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d668e:	b510      	push	{r4, lr}
   d6690:	4604      	mov	r4, r0
   d6692:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6694:	2300      	movs	r3, #0
	capacity = 0;
   d6696:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d669a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d669c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d669e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d66a0:	a901      	add	r1, sp, #4
   d66a2:	f000 fad1 	bl	d6c48 <itoa>
	*this = buf;
   d66a6:	a901      	add	r1, sp, #4
   d66a8:	4620      	mov	r0, r4
   d66aa:	f7ff ffde 	bl	d666a <_ZN6StringaSEPKc>
}
   d66ae:	4620      	mov	r0, r4
   d66b0:	b00a      	add	sp, #40	; 0x28
   d66b2:	bd10      	pop	{r4, pc}

000d66b4 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d66b4:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d66b6:	6882      	ldr	r2, [r0, #8]
   d66b8:	b93a      	cbnz	r2, d66ca <_ZNK6String6equalsEPKc+0x16>
   d66ba:	b121      	cbz	r1, d66c6 <_ZNK6String6equalsEPKc+0x12>
   d66bc:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d66be:	fab0 f080 	clz	r0, r0
   d66c2:	0940      	lsrs	r0, r0, #5
   d66c4:	e000      	b.n	d66c8 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d66c6:	2001      	movs	r0, #1
}
   d66c8:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d66ca:	6800      	ldr	r0, [r0, #0]
   d66cc:	b909      	cbnz	r1, d66d2 <_ZNK6String6equalsEPKc+0x1e>
   d66ce:	7800      	ldrb	r0, [r0, #0]
   d66d0:	e7f5      	b.n	d66be <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d66d2:	f001 f897 	bl	d7804 <strcmp>
   d66d6:	e7f2      	b.n	d66be <_ZNK6String6equalsEPKc+0xa>

000d66d8 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d66d8:	b558      	push	{r3, r4, r6, lr}
   d66da:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d66dc:	b12a      	cbz	r2, d66ea <_ZNK6String8getBytesEPhjj+0x12>
   d66de:	b121      	cbz	r1, d66ea <_ZNK6String8getBytesEPhjj+0x12>
	if (index >= len) {
   d66e0:	6884      	ldr	r4, [r0, #8]
   d66e2:	429c      	cmp	r4, r3
   d66e4:	d802      	bhi.n	d66ec <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d66e6:	2300      	movs	r3, #0
   d66e8:	700b      	strb	r3, [r1, #0]
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
   d66ea:	bd58      	pop	{r3, r4, r6, pc}
	if (n > len - index) n = len - index;
   d66ec:	1ae4      	subs	r4, r4, r3
	unsigned int n = bufsize - 1;
   d66ee:	3a01      	subs	r2, #1
	strncpy((char *)buf, buffer + index, n);
   d66f0:	6801      	ldr	r1, [r0, #0]
   d66f2:	4294      	cmp	r4, r2
   d66f4:	bf28      	it	cs
   d66f6:	4614      	movcs	r4, r2
   d66f8:	4419      	add	r1, r3
   d66fa:	4622      	mov	r2, r4
   d66fc:	4630      	mov	r0, r6
   d66fe:	f001 f8b8 	bl	d7872 <strncpy>
	buf[n] = 0;
   d6702:	2300      	movs	r3, #0
   d6704:	5533      	strb	r3, [r6, r4]
   d6706:	e7f0      	b.n	d66ea <_ZNK6String8getBytesEPhjj+0x12>

000d6708 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6708:	b510      	push	{r4, lr}
   d670a:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d670c:	6800      	ldr	r0, [r0, #0]
   d670e:	b118      	cbz	r0, d6718 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6710:	f7ff f93c 	bl	d598c <free>
            wakeupSource_ = nullptr;
   d6714:	2300      	movs	r3, #0
   d6716:	6023      	str	r3, [r4, #0]
        }
    }
   d6718:	bd10      	pop	{r4, pc}

000d671a <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d671a:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d671c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d6720:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d6722:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d6724:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d6726:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d672a:	f8c0 2006 	str.w	r2, [r0, #6]
   d672e:	889b      	ldrh	r3, [r3, #4]
   d6730:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d6732:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6734:	f7ff ffe8 	bl	d6708 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d6738:	682b      	ldr	r3, [r5, #0]
   d673a:	b113      	cbz	r3, d6742 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d673c:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d673e:	2300      	movs	r3, #0
   d6740:	602b      	str	r3, [r5, #0]
    }
   d6742:	4620      	mov	r0, r4
   d6744:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6748 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d6748:	b538      	push	{r3, r4, r5, lr}
   d674a:	460c      	mov	r4, r1
   d674c:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d674e:	f7ff ffdb 	bl	d6708 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d6752:	b144      	cbz	r4, d6766 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d6754:	8820      	ldrh	r0, [r4, #0]
   d6756:	f7ff f911 	bl	d597c <malloc>
   d675a:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d675c:	b128      	cbz	r0, d676a <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d675e:	8822      	ldrh	r2, [r4, #0]
   d6760:	4621      	mov	r1, r4
   d6762:	f001 f815 	bl	d7790 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d6766:	2000      	movs	r0, #0
    }
   d6768:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d676a:	4801      	ldr	r0, [pc, #4]	; (d6770 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d676c:	e7fc      	b.n	d6768 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d676e:	bf00      	nop
   d6770:	fffffefc 	.word	0xfffffefc

000d6774 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>:
{
    reset(0, flags);
}

void SystemClass::reset(uint32_t data, SystemResetFlags flags)
{
   d6774:	b507      	push	{r0, r1, r2, lr}
   d6776:	460b      	mov	r3, r1
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d6778:	2100      	movs	r1, #0
{
   d677a:	4602      	mov	r2, r0
    system_reset(SYSTEM_RESET_MODE_NORMAL, RESET_REASON_USER, data, flags.value(), nullptr);
   d677c:	9100      	str	r1, [sp, #0]
   d677e:	2001      	movs	r0, #1
   d6780:	218c      	movs	r1, #140	; 0x8c
   d6782:	f7ff f849 	bl	d5818 <system_reset>
}
   d6786:	b003      	add	sp, #12
   d6788:	f85d fb04 	ldr.w	pc, [sp], #4

000d678c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>:
{
   d678c:	4601      	mov	r1, r0
    reset(0, flags);
   d678e:	2000      	movs	r0, #0
   d6790:	f7ff bff0 	b.w	d6774 <_ZN11SystemClass5resetEmN8particle5FlagsI19SystemResetFlagTypemEE>

000d6794 <_ZN11SystemClass5resetEv>:
    reset(SystemResetFlags());
   d6794:	2000      	movs	r0, #0
   d6796:	f7ff bff9 	b.w	d678c <_ZN11SystemClass5resetEN8particle5FlagsI19SystemResetFlagTypemEE>
	...

000d679c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d679c:	b5f0      	push	{r4, r5, r6, r7, lr}
   d679e:	4d2d      	ldr	r5, [pc, #180]	; (d6854 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d67a0:	7d0b      	ldrb	r3, [r1, #20]
   d67a2:	4604      	mov	r4, r0
   d67a4:	b08b      	sub	sp, #44	; 0x2c
   d67a6:	4608      	mov	r0, r1
   d67a8:	1daf      	adds	r7, r5, #6
   d67aa:	2b00      	cmp	r3, #0
   d67ac:	d038      	beq.n	d6820 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d67ae:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d67b0:	791b      	ldrb	r3, [r3, #4]
   d67b2:	2b00      	cmp	r3, #0
   d67b4:	d034      	beq.n	d6820 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d67b6:	2200      	movs	r2, #0
    SleepResult() {}
   d67b8:	4b27      	ldr	r3, [pc, #156]	; (d6858 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d67ba:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d67bc:	a902      	add	r1, sp, #8
   d67be:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d67c0:	9202      	str	r2, [sp, #8]
   d67c2:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d67c6:	f88d 200e 	strb.w	r2, [sp, #14]
   d67ca:	f7ff f81b 	bl	d5804 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d67ce:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d67d2:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d67d6:	b200      	sxth	r0, r0
   d67d8:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d67dc:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d67e0:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d67e2:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d67e4:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d67e6:	4628      	mov	r0, r5
   d67e8:	f7ff ffae 	bl	d6748 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d67ec:	a802      	add	r0, sp, #8
   d67ee:	f7ff ff8b 	bl	d6708 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d67f2:	2300      	movs	r3, #0
   d67f4:	6023      	str	r3, [r4, #0]
   d67f6:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d67f8:	71a3      	strb	r3, [r4, #6]
   d67fa:	8123      	strh	r3, [r4, #8]
   d67fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6800:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d6802:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d6806:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d6808:	683b      	ldr	r3, [r7, #0]
   d680a:	f8c4 3006 	str.w	r3, [r4, #6]
   d680e:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d6810:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d6812:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d6814:	4620      	mov	r0, r4
   d6816:	f7ff ff97 	bl	d6748 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d681a:	4620      	mov	r0, r4
   d681c:	b00b      	add	sp, #44	; 0x2c
   d681e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d6820:	2600      	movs	r6, #0
   d6822:	2320      	movs	r3, #32
   d6824:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d6828:	4b0c      	ldr	r3, [pc, #48]	; (d685c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d682a:	9300      	str	r3, [sp, #0]
   d682c:	490c      	ldr	r1, [pc, #48]	; (d6860 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d682e:	4633      	mov	r3, r6
   d6830:	aa02      	add	r2, sp, #8
   d6832:	2032      	movs	r0, #50	; 0x32
   d6834:	f7fe ff88 	bl	d5748 <log_message>
    SleepResult() {}
   d6838:	4b07      	ldr	r3, [pc, #28]	; (d6858 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d683a:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d683c:	a902      	add	r1, sp, #8
        error_ = error;
   d683e:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d6842:	4804      	ldr	r0, [pc, #16]	; (d6854 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d6844:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d6846:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d684a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d684e:	f7ff ff64 	bl	d671a <_ZN17SystemSleepResultaSEOS_>
   d6852:	e7cb      	b.n	d67ec <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d6854:	2003e630 	.word	0x2003e630
   d6858:	ffff0000 	.word	0xffff0000
   d685c:	000d7e27 	.word	0x000d7e27
   d6860:	000d7e20 	.word	0x000d7e20

000d6864 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6864:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6866:	4b09      	ldr	r3, [pc, #36]	; (d688c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6868:	4c09      	ldr	r4, [pc, #36]	; (d6890 <_GLOBAL__sub_I_System+0x2c>)
   d686a:	2202      	movs	r2, #2
   d686c:	2000      	movs	r0, #0
   d686e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6870:	4b08      	ldr	r3, [pc, #32]	; (d6894 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6872:	6020      	str	r0, [r4, #0]
   d6874:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6876:	71a0      	strb	r0, [r4, #6]
   d6878:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d687a:	f7fe ff7f 	bl	d577c <set_system_mode>
SystemClass System;
   d687e:	4620      	mov	r0, r4
   d6880:	4a05      	ldr	r2, [pc, #20]	; (d6898 <_GLOBAL__sub_I_System+0x34>)
   d6882:	4906      	ldr	r1, [pc, #24]	; (d689c <_GLOBAL__sub_I_System+0x38>)
   d6884:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6888:	f000 bb44 	b.w	d6f14 <__aeabi_atexit>
   d688c:	2003e63c 	.word	0x2003e63c
   d6890:	2003e630 	.word	0x2003e630
   d6894:	ffff0000 	.word	0xffff0000
   d6898:	2003e490 	.word	0x2003e490
   d689c:	000d40f3 	.word	0x000d40f3

000d68a0 <_ZL22Refresh_UnixTime_Cachex>:
	return calendar_time;
}

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d68a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    unix_time += time_zone_cache;
   d68a4:	4a15      	ldr	r2, [pc, #84]	; (d68fc <_ZL22Refresh_UnixTime_Cachex+0x5c>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d68a6:	f8df 8060 	ldr.w	r8, [pc, #96]	; d6908 <_ZL22Refresh_UnixTime_Cachex+0x68>
    unix_time += time_zone_cache;
   d68aa:	e9d2 3200 	ldrd	r3, r2, [r2]
   d68ae:	18c0      	adds	r0, r0, r3
   d68b0:	eb42 0101 	adc.w	r1, r2, r1
    unix_time += dst_current_cache;
   d68b4:	4a12      	ldr	r2, [pc, #72]	; (d6900 <_ZL22Refresh_UnixTime_Cachex+0x60>)
   d68b6:	e9d2 3200 	ldrd	r3, r2, [r2]
   d68ba:	18c6      	adds	r6, r0, r3
   d68bc:	eb41 0702 	adc.w	r7, r1, r2
    if(unix_time != unix_time_cache)
   d68c0:	e9d8 2300 	ldrd	r2, r3, [r8]
   d68c4:	42bb      	cmp	r3, r7
   d68c6:	bf08      	it	eq
   d68c8:	42b2      	cmpeq	r2, r6
{
   d68ca:	b08c      	sub	sp, #48	; 0x30
    if(unix_time != unix_time_cache)
   d68cc:	d013      	beq.n	d68f6 <_ZL22Refresh_UnixTime_Cachex+0x56>
	localtime_r(&unix_time, &calendar_time);
   d68ce:	a903      	add	r1, sp, #12
   d68d0:	4668      	mov	r0, sp
   d68d2:	e9cd 6700 	strd	r6, r7, [sp]
   d68d6:	f7ff f889 	bl	d59ec <localtime_r>
	calendar_time.tm_year += 1900;
   d68da:	9b08      	ldr	r3, [sp, #32]
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d68dc:	4d09      	ldr	r5, [pc, #36]	; (d6904 <_ZL22Refresh_UnixTime_Cachex+0x64>)
	calendar_time.tm_year += 1900;
   d68de:	f203 736c 	addw	r3, r3, #1900	; 0x76c
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d68e2:	ac03      	add	r4, sp, #12
	calendar_time.tm_year += 1900;
   d68e4:	9308      	str	r3, [sp, #32]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d68e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d68e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d68ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d68ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d68ee:	e9c8 6700 	strd	r6, r7, [r8]
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d68f2:	6823      	ldr	r3, [r4, #0]
   d68f4:	602b      	str	r3, [r5, #0]
    }
}
   d68f6:	b00c      	add	sp, #48	; 0x30
   d68f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d68fc:	2003e670 	.word	0x2003e670
   d6900:	2003e668 	.word	0x2003e668
   d6904:	2003e644 	.word	0x2003e644
   d6908:	2003e678 	.word	0x2003e678

000d690c <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimeDone(void)
   d690c:	b508      	push	{r3, lr}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d690e:	2000      	movs	r0, #0
   d6910:	f7fe ffd4 	bl	d58bc <spark_sync_time_pending>
   d6914:	b128      	cbz	r0, d6922 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   d6916:	f7fe ffa9 	bl	d586c <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d691a:	f080 0001 	eor.w	r0, r0, #1
   d691e:	b2c0      	uxtb	r0, r0
    }
   d6920:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d6922:	2001      	movs	r0, #1
   d6924:	e7fc      	b.n	d6920 <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d6926 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d6926:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d6928:	2000      	movs	r0, #0
   d692a:	f7fe fded 	bl	d5508 <hal_rtc_time_is_valid>
    if (rtcstate)
   d692e:	4604      	mov	r4, r0
   d6930:	b9a0      	cbnz	r0, d695c <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d6932:	f7fe ff1b 	bl	d576c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d6936:	2801      	cmp	r0, #1
   d6938:	d110      	bne.n	d695c <_ZN9TimeClass7isValidEv+0x36>
   d693a:	4620      	mov	r0, r4
   d693c:	f7fe ff46 	bl	d57cc <system_thread_get_state>
   d6940:	b960      	cbnz	r0, d695c <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d6942:	f7ff ffe3 	bl	d690c <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d6946:	b910      	cbnz	r0, d694e <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d6948:	f7fe ff80 	bl	d584c <spark_process>
        while (_while() && !_condition()) {
   d694c:	e7f9      	b.n	d6942 <_ZN9TimeClass7isValidEv+0x1c>
   d694e:	f7ff ffdd 	bl	d690c <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d6952:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d6956:	2000      	movs	r0, #0
   d6958:	f7fe bdd6 	b.w	d5508 <hal_rtc_time_is_valid>
}
   d695c:	4620      	mov	r0, r4
   d695e:	bd10      	pop	{r4, pc}

000d6960 <_ZN9TimeClass3nowEv>:
{
   d6960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d6962:	f7ff ffe0 	bl	d6926 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d6966:	2210      	movs	r2, #16
   d6968:	2100      	movs	r1, #0
   d696a:	4668      	mov	r0, sp
   d696c:	f000 ff1e 	bl	d77ac <memset>
    hal_rtc_get_time(&tv, nullptr);
   d6970:	2100      	movs	r1, #0
   d6972:	4668      	mov	r0, sp
   d6974:	f7fe fdd8 	bl	d5528 <hal_rtc_get_time>
}
   d6978:	9800      	ldr	r0, [sp, #0]
   d697a:	b005      	add	sp, #20
   d697c:	f85d fb04 	ldr.w	pc, [sp], #4

000d6980 <_ZN9TimeClass4hourEv>:
{
   d6980:	b508      	push	{r3, lr}
	return hour(now());
   d6982:	f7ff ffed 	bl	d6960 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d6986:	17c1      	asrs	r1, r0, #31
   d6988:	f7ff ff8a 	bl	d68a0 <_ZL22Refresh_UnixTime_Cachex>
}
   d698c:	4b01      	ldr	r3, [pc, #4]	; (d6994 <_ZN9TimeClass4hourEv+0x14>)
   d698e:	6898      	ldr	r0, [r3, #8]
   d6990:	bd08      	pop	{r3, pc}
   d6992:	bf00      	nop
   d6994:	2003e644 	.word	0x2003e644

000d6998 <_ZN9TimeClass6minuteEv>:
{
   d6998:	b508      	push	{r3, lr}
	return minute(now());
   d699a:	f7ff ffe1 	bl	d6960 <_ZN9TimeClass3nowEv>
	Refresh_UnixTime_Cache(t);
   d699e:	17c1      	asrs	r1, r0, #31
   d69a0:	f7ff ff7e 	bl	d68a0 <_ZL22Refresh_UnixTime_Cachex>
}
   d69a4:	4b01      	ldr	r3, [pc, #4]	; (d69ac <_ZN9TimeClass6minuteEv+0x14>)
   d69a6:	6858      	ldr	r0, [r3, #4]
   d69a8:	bd08      	pop	{r3, pc}
   d69aa:	bf00      	nop
   d69ac:	2003e644 	.word	0x2003e644

000d69b0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d69b0:	4b02      	ldr	r3, [pc, #8]	; (d69bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d69b2:	681a      	ldr	r2, [r3, #0]
   d69b4:	4b02      	ldr	r3, [pc, #8]	; (d69c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d69b6:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d69b8:	4770      	bx	lr
   d69ba:	bf00      	nop
   d69bc:	2003e428 	.word	0x2003e428
   d69c0:	2003e640 	.word	0x2003e640

000d69c4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d69c4:	4770      	bx	lr

000d69c6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d69c6:	7441      	strb	r1, [r0, #17]
}
   d69c8:	4770      	bx	lr

000d69ca <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d69ca:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d69cc:	7c00      	ldrb	r0, [r0, #16]
   d69ce:	f7fe fe73 	bl	d56b8 <hal_usart_available_data_for_write>
}
   d69d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69d6:	bd08      	pop	{r3, pc}

000d69d8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d69d8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d69da:	7c00      	ldrb	r0, [r0, #16]
   d69dc:	f7fe fe44 	bl	d5668 <hal_usart_available>
}
   d69e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d69e4:	bd08      	pop	{r3, pc}

000d69e6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d69e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d69e8:	7c00      	ldrb	r0, [r0, #16]
   d69ea:	f7fe fe4d 	bl	d5688 <hal_usart_peek>
}
   d69ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d69f2:	bd08      	pop	{r3, pc}

000d69f4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d69f4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d69f6:	7c00      	ldrb	r0, [r0, #16]
   d69f8:	f7fe fe3e 	bl	d5678 <hal_usart_read>
}
   d69fc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6a00:	bd08      	pop	{r3, pc}

000d6a02 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d6a02:	7c00      	ldrb	r0, [r0, #16]
   d6a04:	f7fe be48 	b.w	d5698 <hal_usart_flush>

000d6a08 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d6a08:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6a0a:	7c45      	ldrb	r5, [r0, #17]
{
   d6a0c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6a0e:	b12d      	cbz	r5, d6a1c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d6a10:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6a12:	b003      	add	sp, #12
   d6a14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d6a18:	f7fe be1e 	b.w	d5658 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d6a1c:	7c00      	ldrb	r0, [r0, #16]
   d6a1e:	9101      	str	r1, [sp, #4]
   d6a20:	f7fe fe4a 	bl	d56b8 <hal_usart_available_data_for_write>
   d6a24:	2800      	cmp	r0, #0
   d6a26:	9901      	ldr	r1, [sp, #4]
   d6a28:	dcf2      	bgt.n	d6a10 <_ZN11USARTSerial5writeEh+0x8>
}
   d6a2a:	4628      	mov	r0, r5
   d6a2c:	b003      	add	sp, #12
   d6a2e:	bd30      	pop	{r4, r5, pc}

000d6a30 <_ZN11USARTSerialD0Ev>:
   d6a30:	b510      	push	{r4, lr}
   d6a32:	2114      	movs	r1, #20
   d6a34:	4604      	mov	r4, r0
   d6a36:	f000 fa72 	bl	d6f1e <_ZdlPvj>
   d6a3a:	4620      	mov	r0, r4
   d6a3c:	bd10      	pop	{r4, pc}
	...

000d6a40 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d6a40:	b510      	push	{r4, lr}
   d6a42:	f04f 0c00 	mov.w	ip, #0
   d6a46:	4604      	mov	r4, r0
   d6a48:	4608      	mov	r0, r1
   d6a4a:	4611      	mov	r1, r2
   d6a4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6a50:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d6a54:	4a04      	ldr	r2, [pc, #16]	; (d6a68 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d6a56:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d6a58:	2201      	movs	r2, #1
  _serial = serial;
   d6a5a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6a5c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d6a5e:	461a      	mov	r2, r3
   d6a60:	f7fe fdf2 	bl	d5648 <hal_usart_init>
}
   d6a64:	4620      	mov	r0, r4
   d6a66:	bd10      	pop	{r4, pc}
   d6a68:	000d7e74 	.word	0x000d7e74

000d6a6c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6a6c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6a6e:	4c0e      	ldr	r4, [pc, #56]	; (d6aa8 <_Z22__fetch_global_Serial1v+0x3c>)
   d6a70:	7821      	ldrb	r1, [r4, #0]
   d6a72:	f3bf 8f5b 	dmb	ish
   d6a76:	f011 0101 	ands.w	r1, r1, #1
   d6a7a:	d112      	bne.n	d6aa2 <_Z22__fetch_global_Serial1v+0x36>
   d6a7c:	4620      	mov	r0, r4
   d6a7e:	9101      	str	r1, [sp, #4]
   d6a80:	f7fd fb0f 	bl	d40a2 <__cxa_guard_acquire>
   d6a84:	9901      	ldr	r1, [sp, #4]
   d6a86:	b160      	cbz	r0, d6aa2 <_Z22__fetch_global_Serial1v+0x36>
   d6a88:	4a08      	ldr	r2, [pc, #32]	; (d6aac <_Z22__fetch_global_Serial1v+0x40>)
   d6a8a:	4b09      	ldr	r3, [pc, #36]	; (d6ab0 <_Z22__fetch_global_Serial1v+0x44>)
   d6a8c:	4809      	ldr	r0, [pc, #36]	; (d6ab4 <_Z22__fetch_global_Serial1v+0x48>)
   d6a8e:	f7ff ffd7 	bl	d6a40 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d6a92:	4620      	mov	r0, r4
   d6a94:	f7fd fb0a 	bl	d40ac <__cxa_guard_release>
   d6a98:	4a07      	ldr	r2, [pc, #28]	; (d6ab8 <_Z22__fetch_global_Serial1v+0x4c>)
   d6a9a:	4908      	ldr	r1, [pc, #32]	; (d6abc <_Z22__fetch_global_Serial1v+0x50>)
   d6a9c:	4805      	ldr	r0, [pc, #20]	; (d6ab4 <_Z22__fetch_global_Serial1v+0x48>)
   d6a9e:	f000 fa39 	bl	d6f14 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6aa2:	4804      	ldr	r0, [pc, #16]	; (d6ab4 <_Z22__fetch_global_Serial1v+0x48>)
   d6aa4:	b002      	add	sp, #8
   d6aa6:	bd10      	pop	{r4, pc}
   d6aa8:	2003e680 	.word	0x2003e680
   d6aac:	2003e684 	.word	0x2003e684
   d6ab0:	2003e708 	.word	0x2003e708
   d6ab4:	2003e78c 	.word	0x2003e78c
   d6ab8:	2003e490 	.word	0x2003e490
   d6abc:	000d69c5 	.word	0x000d69c5

000d6ac0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6ac0:	7441      	strb	r1, [r0, #17]
}
   d6ac2:	4770      	bx	lr

000d6ac4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6ac4:	4770      	bx	lr

000d6ac6 <_ZN9USBSerial4readEv>:
{
   d6ac6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6ac8:	2100      	movs	r1, #0
   d6aca:	7c00      	ldrb	r0, [r0, #16]
   d6acc:	f7fe fe1c 	bl	d5708 <HAL_USB_USART_Receive_Data>
}
   d6ad0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6ad4:	bd08      	pop	{r3, pc}

000d6ad6 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6ad6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6ad8:	2101      	movs	r1, #1
   d6ada:	7c00      	ldrb	r0, [r0, #16]
   d6adc:	f7fe fe14 	bl	d5708 <HAL_USB_USART_Receive_Data>
}
   d6ae0:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6ae4:	bd08      	pop	{r3, pc}

000d6ae6 <_ZN9USBSerial17availableForWriteEv>:
{
   d6ae6:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6ae8:	7c00      	ldrb	r0, [r0, #16]
   d6aea:	f7fe fe05 	bl	d56f8 <HAL_USB_USART_Available_Data_For_Write>
}
   d6aee:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6af2:	bd08      	pop	{r3, pc}

000d6af4 <_ZN9USBSerial9availableEv>:
{
   d6af4:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6af6:	7c00      	ldrb	r0, [r0, #16]
   d6af8:	f7fe fdf6 	bl	d56e8 <HAL_USB_USART_Available_Data>
}
   d6afc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6b00:	bd08      	pop	{r3, pc}

000d6b02 <_ZN9USBSerial5writeEh>:
{
   d6b02:	b513      	push	{r0, r1, r4, lr}
   d6b04:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6b06:	7c00      	ldrb	r0, [r0, #16]
{
   d6b08:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6b0a:	f7fe fdf5 	bl	d56f8 <HAL_USB_USART_Available_Data_For_Write>
   d6b0e:	2800      	cmp	r0, #0
   d6b10:	9901      	ldr	r1, [sp, #4]
   d6b12:	dc01      	bgt.n	d6b18 <_ZN9USBSerial5writeEh+0x16>
   d6b14:	7c60      	ldrb	r0, [r4, #17]
   d6b16:	b120      	cbz	r0, d6b22 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6b18:	7c20      	ldrb	r0, [r4, #16]
   d6b1a:	f7fe fdfd 	bl	d5718 <HAL_USB_USART_Send_Data>
   d6b1e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6b22:	b002      	add	sp, #8
   d6b24:	bd10      	pop	{r4, pc}

000d6b26 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6b26:	7c00      	ldrb	r0, [r0, #16]
   d6b28:	f7fe bdfe 	b.w	d5728 <HAL_USB_USART_Flush_Data>

000d6b2c <_ZN9USBSerialD0Ev>:
   d6b2c:	b510      	push	{r4, lr}
   d6b2e:	2114      	movs	r1, #20
   d6b30:	4604      	mov	r4, r0
   d6b32:	f000 f9f4 	bl	d6f1e <_ZdlPvj>
   d6b36:	4620      	mov	r0, r4
   d6b38:	bd10      	pop	{r4, pc}
	...

000d6b3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6b3c:	b510      	push	{r4, lr}
   d6b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6b42:	4604      	mov	r4, r0
   d6b44:	4608      	mov	r0, r1
   d6b46:	2100      	movs	r1, #0
   d6b48:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d6b4c:	4b04      	ldr	r3, [pc, #16]	; (d6b60 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d6b4e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d6b50:	2301      	movs	r3, #1
  _serial = serial;
   d6b52:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d6b54:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d6b56:	4611      	mov	r1, r2
   d6b58:	f7fe fdb6 	bl	d56c8 <HAL_USB_USART_Init>
}
   d6b5c:	4620      	mov	r0, r4
   d6b5e:	bd10      	pop	{r4, pc}
   d6b60:	000d7ea4 	.word	0x000d7ea4

000d6b64 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d6b64:	7c00      	ldrb	r0, [r0, #16]
   d6b66:	2200      	movs	r2, #0
   d6b68:	f7fe bdb6 	b.w	d56d8 <HAL_USB_USART_Begin>

000d6b6c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6b6c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d6b6e:	2214      	movs	r2, #20
{
   d6b70:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6b72:	2100      	movs	r1, #0
   d6b74:	f000 fe1a 	bl	d77ac <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6b78:	4620      	mov	r0, r4
   d6b7a:	bd10      	pop	{r4, pc}

000d6b7c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d6b7c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6b7e:	4c10      	ldr	r4, [pc, #64]	; (d6bc0 <_Z16_fetch_usbserialv+0x44>)
{
   d6b80:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6b82:	a803      	add	r0, sp, #12
   d6b84:	f7ff fff2 	bl	d6b6c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6b88:	7821      	ldrb	r1, [r4, #0]
   d6b8a:	f3bf 8f5b 	dmb	ish
   d6b8e:	f011 0101 	ands.w	r1, r1, #1
   d6b92:	d111      	bne.n	d6bb8 <_Z16_fetch_usbserialv+0x3c>
   d6b94:	4620      	mov	r0, r4
   d6b96:	9101      	str	r1, [sp, #4]
   d6b98:	f7fd fa83 	bl	d40a2 <__cxa_guard_acquire>
   d6b9c:	9901      	ldr	r1, [sp, #4]
   d6b9e:	b158      	cbz	r0, d6bb8 <_Z16_fetch_usbserialv+0x3c>
   d6ba0:	aa03      	add	r2, sp, #12
   d6ba2:	4808      	ldr	r0, [pc, #32]	; (d6bc4 <_Z16_fetch_usbserialv+0x48>)
   d6ba4:	f7ff ffca 	bl	d6b3c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6ba8:	4620      	mov	r0, r4
   d6baa:	f7fd fa7f 	bl	d40ac <__cxa_guard_release>
   d6bae:	4a06      	ldr	r2, [pc, #24]	; (d6bc8 <_Z16_fetch_usbserialv+0x4c>)
   d6bb0:	4906      	ldr	r1, [pc, #24]	; (d6bcc <_Z16_fetch_usbserialv+0x50>)
   d6bb2:	4804      	ldr	r0, [pc, #16]	; (d6bc4 <_Z16_fetch_usbserialv+0x48>)
   d6bb4:	f000 f9ae 	bl	d6f14 <__aeabi_atexit>
	return _usbserial;
}
   d6bb8:	4802      	ldr	r0, [pc, #8]	; (d6bc4 <_Z16_fetch_usbserialv+0x48>)
   d6bba:	b008      	add	sp, #32
   d6bbc:	bd10      	pop	{r4, pc}
   d6bbe:	bf00      	nop
   d6bc0:	2003e7a0 	.word	0x2003e7a0
   d6bc4:	2003e7a4 	.word	0x2003e7a4
   d6bc8:	2003e490 	.word	0x2003e490
   d6bcc:	000d6ac5 	.word	0x000d6ac5

000d6bd0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6bd0:	b510      	push	{r4, lr}
   d6bd2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d6bd4:	f000 fe45 	bl	d7862 <strlen>
   d6bd8:	3801      	subs	r0, #1
   d6bda:	1823      	adds	r3, r4, r0
   d6bdc:	4620      	mov	r0, r4
	while(i<j){
   d6bde:	4283      	cmp	r3, r0
   d6be0:	d906      	bls.n	d6bf0 <_Z11str_reversePc+0x20>
		c = *i;
   d6be2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d6be4:	7819      	ldrb	r1, [r3, #0]
   d6be6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d6bea:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d6bee:	e7f6      	b.n	d6bde <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d6bf0:	bd10      	pop	{r4, pc}

000d6bf2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6bf2:	b570      	push	{r4, r5, r6, lr}
   d6bf4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d6bf6:	1e91      	subs	r1, r2, #2
   d6bf8:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d6bfa:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d6bfc:	d822      	bhi.n	d6c44 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d6bfe:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d6c00:	b16d      	cbz	r5, d6c1e <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d6c02:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d6c06:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d6c0a:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d6c0c:	2d09      	cmp	r5, #9
                *ptr += '0';
   d6c0e:	bf94      	ite	ls
   d6c10:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d6c12:	3157      	addhi	r1, #87	; 0x57
   d6c14:	b2c9      	uxtb	r1, r1
   d6c16:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d6c1a:	4635      	mov	r5, r6
	while(a){
   d6c1c:	e7f0      	b.n	d6c00 <ultoa+0xe>
   d6c1e:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6c20:	4423      	add	r3, r4
            *ptr++ = '0';
   d6c22:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6c24:	4293      	cmp	r3, r2
   d6c26:	d902      	bls.n	d6c2e <ultoa+0x3c>
            *ptr++ = '0';
   d6c28:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d6c2c:	e7fa      	b.n	d6c24 <ultoa+0x32>
   d6c2e:	1a1a      	subs	r2, r3, r0
   d6c30:	4283      	cmp	r3, r0
   d6c32:	bf38      	it	cc
   d6c34:	2200      	movcc	r2, #0

	*ptr = '\0';
   d6c36:	2300      	movs	r3, #0
   d6c38:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d6c3a:	4620      	mov	r0, r4
   d6c3c:	f7ff ffc8 	bl	d6bd0 <_Z11str_reversePc>
	return buffer;
   d6c40:	4620      	mov	r0, r4
}
   d6c42:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6c44:	2000      	movs	r0, #0
   d6c46:	e7fc      	b.n	d6c42 <ultoa+0x50>

000d6c48 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6c48:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d6c4a:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d6c4c:	460c      	mov	r4, r1
   d6c4e:	4615      	mov	r5, r2
	if(a<0){
   d6c50:	da0e      	bge.n	d6c70 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6c52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d6c56:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d6c5a:	bf14      	ite	ne
   d6c5c:	4258      	negne	r0, r3
   d6c5e:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d6c60:	2301      	movs	r3, #1
		*buffer = '-';
   d6c62:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d6c64:	462a      	mov	r2, r5
   d6c66:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d6c68:	f7ff ffc3 	bl	d6bf2 <ultoa>
	}
	return buffer;
}
   d6c6c:	4620      	mov	r0, r4
   d6c6e:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d6c70:	2301      	movs	r3, #1
   d6c72:	e7f9      	b.n	d6c68 <itoa+0x20>

000d6c74 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6c74:	4b01      	ldr	r3, [pc, #4]	; (d6c7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6c76:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6c78:	4770      	bx	lr
   d6c7a:	bf00      	nop
   d6c7c:	2003e42c 	.word	0x2003e42c

000d6c80 <serialEventRun>:
{
   d6c80:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6c82:	4b0b      	ldr	r3, [pc, #44]	; (d6cb0 <serialEventRun+0x30>)
   d6c84:	b143      	cbz	r3, d6c98 <serialEventRun+0x18>
   d6c86:	f7ff ff79 	bl	d6b7c <_Z16_fetch_usbserialv>
   d6c8a:	6803      	ldr	r3, [r0, #0]
   d6c8c:	691b      	ldr	r3, [r3, #16]
   d6c8e:	4798      	blx	r3
   d6c90:	2800      	cmp	r0, #0
   d6c92:	dd01      	ble.n	d6c98 <serialEventRun+0x18>
        serialEvent();
   d6c94:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6c98:	4b06      	ldr	r3, [pc, #24]	; (d6cb4 <serialEventRun+0x34>)
   d6c9a:	b143      	cbz	r3, d6cae <serialEventRun+0x2e>
   d6c9c:	f7ff fee6 	bl	d6a6c <_Z22__fetch_global_Serial1v>
   d6ca0:	6803      	ldr	r3, [r0, #0]
   d6ca2:	691b      	ldr	r3, [r3, #16]
   d6ca4:	4798      	blx	r3
   d6ca6:	2800      	cmp	r0, #0
   d6ca8:	dd01      	ble.n	d6cae <serialEventRun+0x2e>
        serialEvent1();
   d6caa:	f3af 8000 	nop.w
}
   d6cae:	bd08      	pop	{r3, pc}
	...

000d6cb8 <_post_loop>:
{
   d6cb8:	b508      	push	{r3, lr}
	serialEventRun();
   d6cba:	f7ff ffe1 	bl	d6c80 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6cbe:	f7fe fbfb 	bl	d54b8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6cc2:	4b01      	ldr	r3, [pc, #4]	; (d6cc8 <_post_loop+0x10>)
   d6cc4:	6018      	str	r0, [r3, #0]
}
   d6cc6:	bd08      	pop	{r3, pc}
   d6cc8:	2003e7cc 	.word	0x2003e7cc

000d6ccc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6ccc:	4802      	ldr	r0, [pc, #8]	; (d6cd8 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6cce:	4a03      	ldr	r2, [pc, #12]	; (d6cdc <_Z33system_initialize_user_backup_ramv+0x10>)
   d6cd0:	4903      	ldr	r1, [pc, #12]	; (d6ce0 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6cd2:	1a12      	subs	r2, r2, r0
   d6cd4:	f000 bd5c 	b.w	d7790 <memcpy>
   d6cd8:	2003f400 	.word	0x2003f400
   d6cdc:	2003f404 	.word	0x2003f404
   d6ce0:	000d8000 	.word	0x000d8000

000d6ce4 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6ce4:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6ce6:	2300      	movs	r3, #0
   d6ce8:	9300      	str	r3, [sp, #0]
   d6cea:	461a      	mov	r2, r3
   d6cec:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6cf0:	f7fe fd7e 	bl	d57f0 <system_ctrl_set_result>
}
   d6cf4:	b003      	add	sp, #12
   d6cf6:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6cfc <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6cfc:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6cfe:	8843      	ldrh	r3, [r0, #2]
   d6d00:	2b0a      	cmp	r3, #10
   d6d02:	d008      	beq.n	d6d16 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6d04:	2b50      	cmp	r3, #80	; 0x50
   d6d06:	d10b      	bne.n	d6d20 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6d08:	4b09      	ldr	r3, [pc, #36]	; (d6d30 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6d0a:	681b      	ldr	r3, [r3, #0]
   d6d0c:	b14b      	cbz	r3, d6d22 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6d0e:	b003      	add	sp, #12
   d6d10:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6d14:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6d16:	f7ff ffe5 	bl	d6ce4 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6d1a:	b003      	add	sp, #12
   d6d1c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6d20:	2300      	movs	r3, #0
   d6d22:	9300      	str	r3, [sp, #0]
   d6d24:	461a      	mov	r2, r3
   d6d26:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6d2a:	f7fe fd61 	bl	d57f0 <system_ctrl_set_result>
}
   d6d2e:	e7f4      	b.n	d6d1a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6d30:	2003e7bc 	.word	0x2003e7bc

000d6d34 <module_user_init_hook>:
{
   d6d34:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6d36:	4c12      	ldr	r4, [pc, #72]	; (d6d80 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6d38:	4812      	ldr	r0, [pc, #72]	; (d6d84 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6d3a:	4d13      	ldr	r5, [pc, #76]	; (d6d88 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6d3c:	2100      	movs	r1, #0
   d6d3e:	f7fe fe4d 	bl	d59dc <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6d42:	6823      	ldr	r3, [r4, #0]
   d6d44:	42ab      	cmp	r3, r5
   d6d46:	4b11      	ldr	r3, [pc, #68]	; (d6d8c <module_user_init_hook+0x58>)
   d6d48:	bf0c      	ite	eq
   d6d4a:	2201      	moveq	r2, #1
   d6d4c:	2200      	movne	r2, #0
   d6d4e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6d50:	d002      	beq.n	d6d58 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6d52:	f7ff ffbb 	bl	d6ccc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6d56:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6d58:	f7fe fb9e 	bl	d5498 <HAL_RNG_GetRandomNumber>
   d6d5c:	4604      	mov	r4, r0
    srand(seed);
   d6d5e:	f000 fd2d 	bl	d77bc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6d62:	4b0b      	ldr	r3, [pc, #44]	; (d6d90 <module_user_init_hook+0x5c>)
   d6d64:	b113      	cbz	r3, d6d6c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6d66:	4620      	mov	r0, r4
   d6d68:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6d6c:	2100      	movs	r1, #0
   d6d6e:	4808      	ldr	r0, [pc, #32]	; (d6d90 <module_user_init_hook+0x5c>)
   d6d70:	f7fe fdac 	bl	d58cc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6d74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6d78:	4806      	ldr	r0, [pc, #24]	; (d6d94 <module_user_init_hook+0x60>)
   d6d7a:	2100      	movs	r1, #0
   d6d7c:	f7fe bd2e 	b.w	d57dc <system_ctrl_set_app_request_handler>
   d6d80:	2003f400 	.word	0x2003f400
   d6d84:	000d6c75 	.word	0x000d6c75
   d6d88:	9a271c1e 	.word	0x9a271c1e
   d6d8c:	2003e7b8 	.word	0x2003e7b8
   d6d90:	00000000 	.word	0x00000000
   d6d94:	000d6cfd 	.word	0x000d6cfd

000d6d98 <spark_protocol_instance>:
extern "C" {
#endif

DYNALIB_BEGIN(communication)

DYNALIB_FN(0, communication, spark_protocol_instance, ProtocolFacade*(void))
   d6d98:	b508      	push	{r3, lr}
   d6d9a:	4b02      	ldr	r3, [pc, #8]	; (d6da4 <spark_protocol_instance+0xc>)
   d6d9c:	681b      	ldr	r3, [r3, #0]
   d6d9e:	681b      	ldr	r3, [r3, #0]
   d6da0:	9301      	str	r3, [sp, #4]
   d6da2:	bd08      	pop	{r3, pc}
   d6da4:	0003025c 	.word	0x0003025c

000d6da8 <spark_protocol_set_product_id>:
DYNALIB_FN(1, communication, spark_protocol_set_product_id, void(ProtocolFacade*, product_id_t, unsigned, void*))
   d6da8:	b508      	push	{r3, lr}
   d6daa:	4b02      	ldr	r3, [pc, #8]	; (d6db4 <spark_protocol_set_product_id+0xc>)
   d6dac:	681b      	ldr	r3, [r3, #0]
   d6dae:	685b      	ldr	r3, [r3, #4]
   d6db0:	9301      	str	r3, [sp, #4]
   d6db2:	bd08      	pop	{r3, pc}
   d6db4:	0003025c 	.word	0x0003025c

000d6db8 <spark_protocol_set_product_firmware_version>:
DYNALIB_FN(2, communication, spark_protocol_set_product_firmware_version, void(ProtocolFacade*, product_firmware_version_t, unsigned, void*))
   d6db8:	b508      	push	{r3, lr}
   d6dba:	4b02      	ldr	r3, [pc, #8]	; (d6dc4 <spark_protocol_set_product_firmware_version+0xc>)
   d6dbc:	681b      	ldr	r3, [r3, #0]
   d6dbe:	689b      	ldr	r3, [r3, #8]
   d6dc0:	9301      	str	r3, [sp, #4]
   d6dc2:	bd08      	pop	{r3, pc}
   d6dc4:	0003025c 	.word	0x0003025c

000d6dc8 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d6dc8:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d6dca:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d6dcc:	d902      	bls.n	d6dd4 <pinAvailable+0xc>
    return false;
   d6dce:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d6dd0:	b002      	add	sp, #8
   d6dd2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d6dd4:	f1a0 030b 	sub.w	r3, r0, #11
   d6dd8:	2b02      	cmp	r3, #2
   d6dda:	d81a      	bhi.n	d6e12 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d6ddc:	4c17      	ldr	r4, [pc, #92]	; (d6e3c <pinAvailable+0x74>)
   d6dde:	7821      	ldrb	r1, [r4, #0]
   d6de0:	f3bf 8f5b 	dmb	ish
   d6de4:	f011 0101 	ands.w	r1, r1, #1
   d6de8:	d10b      	bne.n	d6e02 <pinAvailable+0x3a>
   d6dea:	4620      	mov	r0, r4
   d6dec:	9101      	str	r1, [sp, #4]
   d6dee:	f7fd f958 	bl	d40a2 <__cxa_guard_acquire>
   d6df2:	9901      	ldr	r1, [sp, #4]
   d6df4:	b128      	cbz	r0, d6e02 <pinAvailable+0x3a>
   d6df6:	4812      	ldr	r0, [pc, #72]	; (d6e40 <pinAvailable+0x78>)
   d6df8:	f7ff fbb4 	bl	d6564 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d6dfc:	4620      	mov	r0, r4
   d6dfe:	f7fd f955 	bl	d40ac <__cxa_guard_release>
   d6e02:	4b0f      	ldr	r3, [pc, #60]	; (d6e40 <pinAvailable+0x78>)
   d6e04:	7818      	ldrb	r0, [r3, #0]
   d6e06:	f7fe fc17 	bl	d5638 <hal_spi_is_enabled>
   d6e0a:	2800      	cmp	r0, #0
   d6e0c:	d1df      	bne.n	d6dce <pinAvailable+0x6>
  return true; // 'pin' is available
   d6e0e:	2001      	movs	r0, #1
   d6e10:	e7de      	b.n	d6dd0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d6e12:	2801      	cmp	r0, #1
   d6e14:	d809      	bhi.n	d6e2a <pinAvailable+0x62>
   d6e16:	f000 f855 	bl	d6ec4 <_Z19__fetch_global_Wirev>
   d6e1a:	2100      	movs	r1, #0
   d6e1c:	7c00      	ldrb	r0, [r0, #16]
   d6e1e:	f7fe fbd3 	bl	d55c8 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d6e22:	f080 0001 	eor.w	r0, r0, #1
   d6e26:	b2c0      	uxtb	r0, r0
   d6e28:	e7d2      	b.n	d6dd0 <pinAvailable+0x8>
   d6e2a:	3809      	subs	r0, #9
   d6e2c:	2801      	cmp	r0, #1
   d6e2e:	d8ee      	bhi.n	d6e0e <pinAvailable+0x46>
   d6e30:	f7ff fe1c 	bl	d6a6c <_Z22__fetch_global_Serial1v>
   d6e34:	7c00      	ldrb	r0, [r0, #16]
   d6e36:	f7fe fc37 	bl	d56a8 <hal_usart_is_enabled>
   d6e3a:	e7f2      	b.n	d6e22 <pinAvailable+0x5a>
   d6e3c:	2003e7c0 	.word	0x2003e7c0
   d6e40:	2003e7c4 	.word	0x2003e7c4

000d6e44 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6e44:	2823      	cmp	r0, #35	; 0x23
{
   d6e46:	b538      	push	{r3, r4, r5, lr}
   d6e48:	4604      	mov	r4, r0
   d6e4a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d6e4c:	d80a      	bhi.n	d6e64 <pinMode+0x20>
   d6e4e:	29ff      	cmp	r1, #255	; 0xff
   d6e50:	d008      	beq.n	d6e64 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d6e52:	f7ff ffb9 	bl	d6dc8 <pinAvailable>
   d6e56:	b128      	cbz	r0, d6e64 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d6e58:	4629      	mov	r1, r5
   d6e5a:	4620      	mov	r0, r4
}
   d6e5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d6e60:	f7fe bb6a 	b.w	d5538 <HAL_Pin_Mode>
}
   d6e64:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6e68 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
   d6e68:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
   d6e6a:	4c08      	ldr	r4, [pc, #32]	; (d6e8c <_Z21__fetch_global_EEPROMv+0x24>)
   d6e6c:	7823      	ldrb	r3, [r4, #0]
   d6e6e:	f3bf 8f5b 	dmb	ish
   d6e72:	07db      	lsls	r3, r3, #31
   d6e74:	d408      	bmi.n	d6e88 <_Z21__fetch_global_EEPROMv+0x20>
   d6e76:	4620      	mov	r0, r4
   d6e78:	f7fd f913 	bl	d40a2 <__cxa_guard_acquire>
   d6e7c:	b120      	cbz	r0, d6e88 <_Z21__fetch_global_EEPROMv+0x20>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
   d6e7e:	f7fe fb23 	bl	d54c8 <HAL_EEPROM_Init>
   d6e82:	4620      	mov	r0, r4
   d6e84:	f7fd f912 	bl	d40ac <__cxa_guard_release>
	return eeprom;
}
   d6e88:	4801      	ldr	r0, [pc, #4]	; (d6e90 <_Z21__fetch_global_EEPROMv+0x28>)
   d6e8a:	bd10      	pop	{r4, pc}
   d6e8c:	2003e7d0 	.word	0x2003e7d0
   d6e90:	2003e7d4 	.word	0x2003e7d4

000d6e94 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d6e94:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d6e96:	2300      	movs	r3, #0
   d6e98:	2520      	movs	r5, #32
   d6e9a:	8043      	strh	r3, [r0, #2]
   d6e9c:	2314      	movs	r3, #20
{
   d6e9e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d6ea0:	8003      	strh	r3, [r0, #0]
   d6ea2:	6085      	str	r5, [r0, #8]
   d6ea4:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6ea6:	4906      	ldr	r1, [pc, #24]	; (d6ec0 <_Z17acquireWireBufferv+0x2c>)
   d6ea8:	4628      	mov	r0, r5
   d6eaa:	f000 f83c 	bl	d6f26 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6eae:	4904      	ldr	r1, [pc, #16]	; (d6ec0 <_Z17acquireWireBufferv+0x2c>)
	};
   d6eb0:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d6eb2:	4628      	mov	r0, r5
   d6eb4:	f000 f837 	bl	d6f26 <_ZnajRKSt9nothrow_t>
	};
   d6eb8:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d6eba:	4620      	mov	r0, r4
   d6ebc:	bd38      	pop	{r3, r4, r5, pc}
   d6ebe:	bf00      	nop
   d6ec0:	000d7ecc 	.word	0x000d7ecc

000d6ec4 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d6ec4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6ec6:	4d0f      	ldr	r5, [pc, #60]	; (d6f04 <_Z19__fetch_global_Wirev+0x40>)
   d6ec8:	7829      	ldrb	r1, [r5, #0]
   d6eca:	f3bf 8f5b 	dmb	ish
   d6ece:	f011 0401 	ands.w	r4, r1, #1
{
   d6ed2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d6ed4:	d113      	bne.n	d6efe <_Z19__fetch_global_Wirev+0x3a>
   d6ed6:	4628      	mov	r0, r5
   d6ed8:	f7fd f8e3 	bl	d40a2 <__cxa_guard_acquire>
   d6edc:	b178      	cbz	r0, d6efe <_Z19__fetch_global_Wirev+0x3a>
   d6ede:	a801      	add	r0, sp, #4
   d6ee0:	f7ff ffd8 	bl	d6e94 <_Z17acquireWireBufferv>
   d6ee4:	aa01      	add	r2, sp, #4
   d6ee6:	4621      	mov	r1, r4
   d6ee8:	4807      	ldr	r0, [pc, #28]	; (d6f08 <_Z19__fetch_global_Wirev+0x44>)
   d6eea:	f7ff f955 	bl	d6198 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d6eee:	4628      	mov	r0, r5
   d6ef0:	f7fd f8dc 	bl	d40ac <__cxa_guard_release>
   d6ef4:	4a05      	ldr	r2, [pc, #20]	; (d6f0c <_Z19__fetch_global_Wirev+0x48>)
   d6ef6:	4906      	ldr	r1, [pc, #24]	; (d6f10 <_Z19__fetch_global_Wirev+0x4c>)
   d6ef8:	4803      	ldr	r0, [pc, #12]	; (d6f08 <_Z19__fetch_global_Wirev+0x44>)
   d6efa:	f000 f80b 	bl	d6f14 <__aeabi_atexit>
	return wire;
}
   d6efe:	4802      	ldr	r0, [pc, #8]	; (d6f08 <_Z19__fetch_global_Wirev+0x44>)
   d6f00:	b007      	add	sp, #28
   d6f02:	bd30      	pop	{r4, r5, pc}
   d6f04:	2003e7d8 	.word	0x2003e7d8
   d6f08:	2003e7dc 	.word	0x2003e7dc
   d6f0c:	2003e490 	.word	0x2003e490
   d6f10:	000d6141 	.word	0x000d6141

000d6f14 <__aeabi_atexit>:
   d6f14:	460b      	mov	r3, r1
   d6f16:	4601      	mov	r1, r0
   d6f18:	4618      	mov	r0, r3
   d6f1a:	f000 bc2b 	b.w	d7774 <__cxa_atexit>

000d6f1e <_ZdlPvj>:
   d6f1e:	f7fd b8be 	b.w	d409e <_ZdlPv>

000d6f22 <_ZnwjRKSt9nothrow_t>:
   d6f22:	f7fd b8b8 	b.w	d4096 <_Znwj>

000d6f26 <_ZnajRKSt9nothrow_t>:
   d6f26:	f7fd b8b8 	b.w	d409a <_Znaj>

000d6f2a <_ZSt25__throw_bad_function_callv>:
   d6f2a:	b508      	push	{r3, lr}
   d6f2c:	f7fe fd46 	bl	d59bc <abort>

000d6f30 <__aeabi_drsub>:
   d6f30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6f34:	e002      	b.n	d6f3c <__adddf3>
   d6f36:	bf00      	nop

000d6f38 <__aeabi_dsub>:
   d6f38:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6f3c <__adddf3>:
   d6f3c:	b530      	push	{r4, r5, lr}
   d6f3e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6f42:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6f46:	ea94 0f05 	teq	r4, r5
   d6f4a:	bf08      	it	eq
   d6f4c:	ea90 0f02 	teqeq	r0, r2
   d6f50:	bf1f      	itttt	ne
   d6f52:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6f56:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6f5a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6f5e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6f62:	f000 80e2 	beq.w	d712a <__adddf3+0x1ee>
   d6f66:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6f6a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6f6e:	bfb8      	it	lt
   d6f70:	426d      	neglt	r5, r5
   d6f72:	dd0c      	ble.n	d6f8e <__adddf3+0x52>
   d6f74:	442c      	add	r4, r5
   d6f76:	ea80 0202 	eor.w	r2, r0, r2
   d6f7a:	ea81 0303 	eor.w	r3, r1, r3
   d6f7e:	ea82 0000 	eor.w	r0, r2, r0
   d6f82:	ea83 0101 	eor.w	r1, r3, r1
   d6f86:	ea80 0202 	eor.w	r2, r0, r2
   d6f8a:	ea81 0303 	eor.w	r3, r1, r3
   d6f8e:	2d36      	cmp	r5, #54	; 0x36
   d6f90:	bf88      	it	hi
   d6f92:	bd30      	pophi	{r4, r5, pc}
   d6f94:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6f98:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6f9c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6fa0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6fa4:	d002      	beq.n	d6fac <__adddf3+0x70>
   d6fa6:	4240      	negs	r0, r0
   d6fa8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6fac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6fb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6fb4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6fb8:	d002      	beq.n	d6fc0 <__adddf3+0x84>
   d6fba:	4252      	negs	r2, r2
   d6fbc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6fc0:	ea94 0f05 	teq	r4, r5
   d6fc4:	f000 80a7 	beq.w	d7116 <__adddf3+0x1da>
   d6fc8:	f1a4 0401 	sub.w	r4, r4, #1
   d6fcc:	f1d5 0e20 	rsbs	lr, r5, #32
   d6fd0:	db0d      	blt.n	d6fee <__adddf3+0xb2>
   d6fd2:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6fd6:	fa22 f205 	lsr.w	r2, r2, r5
   d6fda:	1880      	adds	r0, r0, r2
   d6fdc:	f141 0100 	adc.w	r1, r1, #0
   d6fe0:	fa03 f20e 	lsl.w	r2, r3, lr
   d6fe4:	1880      	adds	r0, r0, r2
   d6fe6:	fa43 f305 	asr.w	r3, r3, r5
   d6fea:	4159      	adcs	r1, r3
   d6fec:	e00e      	b.n	d700c <__adddf3+0xd0>
   d6fee:	f1a5 0520 	sub.w	r5, r5, #32
   d6ff2:	f10e 0e20 	add.w	lr, lr, #32
   d6ff6:	2a01      	cmp	r2, #1
   d6ff8:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6ffc:	bf28      	it	cs
   d6ffe:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7002:	fa43 f305 	asr.w	r3, r3, r5
   d7006:	18c0      	adds	r0, r0, r3
   d7008:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d700c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7010:	d507      	bpl.n	d7022 <__adddf3+0xe6>
   d7012:	f04f 0e00 	mov.w	lr, #0
   d7016:	f1dc 0c00 	rsbs	ip, ip, #0
   d701a:	eb7e 0000 	sbcs.w	r0, lr, r0
   d701e:	eb6e 0101 	sbc.w	r1, lr, r1
   d7022:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7026:	d31b      	bcc.n	d7060 <__adddf3+0x124>
   d7028:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d702c:	d30c      	bcc.n	d7048 <__adddf3+0x10c>
   d702e:	0849      	lsrs	r1, r1, #1
   d7030:	ea5f 0030 	movs.w	r0, r0, rrx
   d7034:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7038:	f104 0401 	add.w	r4, r4, #1
   d703c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7040:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7044:	f080 809a 	bcs.w	d717c <__adddf3+0x240>
   d7048:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d704c:	bf08      	it	eq
   d704e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7052:	f150 0000 	adcs.w	r0, r0, #0
   d7056:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d705a:	ea41 0105 	orr.w	r1, r1, r5
   d705e:	bd30      	pop	{r4, r5, pc}
   d7060:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7064:	4140      	adcs	r0, r0
   d7066:	eb41 0101 	adc.w	r1, r1, r1
   d706a:	3c01      	subs	r4, #1
   d706c:	bf28      	it	cs
   d706e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d7072:	d2e9      	bcs.n	d7048 <__adddf3+0x10c>
   d7074:	f091 0f00 	teq	r1, #0
   d7078:	bf04      	itt	eq
   d707a:	4601      	moveq	r1, r0
   d707c:	2000      	moveq	r0, #0
   d707e:	fab1 f381 	clz	r3, r1
   d7082:	bf08      	it	eq
   d7084:	3320      	addeq	r3, #32
   d7086:	f1a3 030b 	sub.w	r3, r3, #11
   d708a:	f1b3 0220 	subs.w	r2, r3, #32
   d708e:	da0c      	bge.n	d70aa <__adddf3+0x16e>
   d7090:	320c      	adds	r2, #12
   d7092:	dd08      	ble.n	d70a6 <__adddf3+0x16a>
   d7094:	f102 0c14 	add.w	ip, r2, #20
   d7098:	f1c2 020c 	rsb	r2, r2, #12
   d709c:	fa01 f00c 	lsl.w	r0, r1, ip
   d70a0:	fa21 f102 	lsr.w	r1, r1, r2
   d70a4:	e00c      	b.n	d70c0 <__adddf3+0x184>
   d70a6:	f102 0214 	add.w	r2, r2, #20
   d70aa:	bfd8      	it	le
   d70ac:	f1c2 0c20 	rsble	ip, r2, #32
   d70b0:	fa01 f102 	lsl.w	r1, r1, r2
   d70b4:	fa20 fc0c 	lsr.w	ip, r0, ip
   d70b8:	bfdc      	itt	le
   d70ba:	ea41 010c 	orrle.w	r1, r1, ip
   d70be:	4090      	lslle	r0, r2
   d70c0:	1ae4      	subs	r4, r4, r3
   d70c2:	bfa2      	ittt	ge
   d70c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d70c8:	4329      	orrge	r1, r5
   d70ca:	bd30      	popge	{r4, r5, pc}
   d70cc:	ea6f 0404 	mvn.w	r4, r4
   d70d0:	3c1f      	subs	r4, #31
   d70d2:	da1c      	bge.n	d710e <__adddf3+0x1d2>
   d70d4:	340c      	adds	r4, #12
   d70d6:	dc0e      	bgt.n	d70f6 <__adddf3+0x1ba>
   d70d8:	f104 0414 	add.w	r4, r4, #20
   d70dc:	f1c4 0220 	rsb	r2, r4, #32
   d70e0:	fa20 f004 	lsr.w	r0, r0, r4
   d70e4:	fa01 f302 	lsl.w	r3, r1, r2
   d70e8:	ea40 0003 	orr.w	r0, r0, r3
   d70ec:	fa21 f304 	lsr.w	r3, r1, r4
   d70f0:	ea45 0103 	orr.w	r1, r5, r3
   d70f4:	bd30      	pop	{r4, r5, pc}
   d70f6:	f1c4 040c 	rsb	r4, r4, #12
   d70fa:	f1c4 0220 	rsb	r2, r4, #32
   d70fe:	fa20 f002 	lsr.w	r0, r0, r2
   d7102:	fa01 f304 	lsl.w	r3, r1, r4
   d7106:	ea40 0003 	orr.w	r0, r0, r3
   d710a:	4629      	mov	r1, r5
   d710c:	bd30      	pop	{r4, r5, pc}
   d710e:	fa21 f004 	lsr.w	r0, r1, r4
   d7112:	4629      	mov	r1, r5
   d7114:	bd30      	pop	{r4, r5, pc}
   d7116:	f094 0f00 	teq	r4, #0
   d711a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d711e:	bf06      	itte	eq
   d7120:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7124:	3401      	addeq	r4, #1
   d7126:	3d01      	subne	r5, #1
   d7128:	e74e      	b.n	d6fc8 <__adddf3+0x8c>
   d712a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d712e:	bf18      	it	ne
   d7130:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7134:	d029      	beq.n	d718a <__adddf3+0x24e>
   d7136:	ea94 0f05 	teq	r4, r5
   d713a:	bf08      	it	eq
   d713c:	ea90 0f02 	teqeq	r0, r2
   d7140:	d005      	beq.n	d714e <__adddf3+0x212>
   d7142:	ea54 0c00 	orrs.w	ip, r4, r0
   d7146:	bf04      	itt	eq
   d7148:	4619      	moveq	r1, r3
   d714a:	4610      	moveq	r0, r2
   d714c:	bd30      	pop	{r4, r5, pc}
   d714e:	ea91 0f03 	teq	r1, r3
   d7152:	bf1e      	ittt	ne
   d7154:	2100      	movne	r1, #0
   d7156:	2000      	movne	r0, #0
   d7158:	bd30      	popne	{r4, r5, pc}
   d715a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d715e:	d105      	bne.n	d716c <__adddf3+0x230>
   d7160:	0040      	lsls	r0, r0, #1
   d7162:	4149      	adcs	r1, r1
   d7164:	bf28      	it	cs
   d7166:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d716a:	bd30      	pop	{r4, r5, pc}
   d716c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7170:	bf3c      	itt	cc
   d7172:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7176:	bd30      	popcc	{r4, r5, pc}
   d7178:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d717c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7180:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7184:	f04f 0000 	mov.w	r0, #0
   d7188:	bd30      	pop	{r4, r5, pc}
   d718a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d718e:	bf1a      	itte	ne
   d7190:	4619      	movne	r1, r3
   d7192:	4610      	movne	r0, r2
   d7194:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7198:	bf1c      	itt	ne
   d719a:	460b      	movne	r3, r1
   d719c:	4602      	movne	r2, r0
   d719e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d71a2:	bf06      	itte	eq
   d71a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d71a8:	ea91 0f03 	teqeq	r1, r3
   d71ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d71b0:	bd30      	pop	{r4, r5, pc}
   d71b2:	bf00      	nop

000d71b4 <__aeabi_ui2d>:
   d71b4:	f090 0f00 	teq	r0, #0
   d71b8:	bf04      	itt	eq
   d71ba:	2100      	moveq	r1, #0
   d71bc:	4770      	bxeq	lr
   d71be:	b530      	push	{r4, r5, lr}
   d71c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d71c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d71c8:	f04f 0500 	mov.w	r5, #0
   d71cc:	f04f 0100 	mov.w	r1, #0
   d71d0:	e750      	b.n	d7074 <__adddf3+0x138>
   d71d2:	bf00      	nop

000d71d4 <__aeabi_i2d>:
   d71d4:	f090 0f00 	teq	r0, #0
   d71d8:	bf04      	itt	eq
   d71da:	2100      	moveq	r1, #0
   d71dc:	4770      	bxeq	lr
   d71de:	b530      	push	{r4, r5, lr}
   d71e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d71e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d71e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d71ec:	bf48      	it	mi
   d71ee:	4240      	negmi	r0, r0
   d71f0:	f04f 0100 	mov.w	r1, #0
   d71f4:	e73e      	b.n	d7074 <__adddf3+0x138>
   d71f6:	bf00      	nop

000d71f8 <__aeabi_f2d>:
   d71f8:	0042      	lsls	r2, r0, #1
   d71fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d71fe:	ea4f 0131 	mov.w	r1, r1, rrx
   d7202:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7206:	bf1f      	itttt	ne
   d7208:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d720c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7210:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7214:	4770      	bxne	lr
   d7216:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d721a:	bf08      	it	eq
   d721c:	4770      	bxeq	lr
   d721e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d7222:	bf04      	itt	eq
   d7224:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d7228:	4770      	bxeq	lr
   d722a:	b530      	push	{r4, r5, lr}
   d722c:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7230:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7234:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7238:	e71c      	b.n	d7074 <__adddf3+0x138>
   d723a:	bf00      	nop

000d723c <__aeabi_ul2d>:
   d723c:	ea50 0201 	orrs.w	r2, r0, r1
   d7240:	bf08      	it	eq
   d7242:	4770      	bxeq	lr
   d7244:	b530      	push	{r4, r5, lr}
   d7246:	f04f 0500 	mov.w	r5, #0
   d724a:	e00a      	b.n	d7262 <__aeabi_l2d+0x16>

000d724c <__aeabi_l2d>:
   d724c:	ea50 0201 	orrs.w	r2, r0, r1
   d7250:	bf08      	it	eq
   d7252:	4770      	bxeq	lr
   d7254:	b530      	push	{r4, r5, lr}
   d7256:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d725a:	d502      	bpl.n	d7262 <__aeabi_l2d+0x16>
   d725c:	4240      	negs	r0, r0
   d725e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7262:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7266:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d726a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d726e:	f43f aed8 	beq.w	d7022 <__adddf3+0xe6>
   d7272:	f04f 0203 	mov.w	r2, #3
   d7276:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d727a:	bf18      	it	ne
   d727c:	3203      	addne	r2, #3
   d727e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7282:	bf18      	it	ne
   d7284:	3203      	addne	r2, #3
   d7286:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d728a:	f1c2 0320 	rsb	r3, r2, #32
   d728e:	fa00 fc03 	lsl.w	ip, r0, r3
   d7292:	fa20 f002 	lsr.w	r0, r0, r2
   d7296:	fa01 fe03 	lsl.w	lr, r1, r3
   d729a:	ea40 000e 	orr.w	r0, r0, lr
   d729e:	fa21 f102 	lsr.w	r1, r1, r2
   d72a2:	4414      	add	r4, r2
   d72a4:	e6bd      	b.n	d7022 <__adddf3+0xe6>
   d72a6:	bf00      	nop

000d72a8 <__aeabi_dmul>:
   d72a8:	b570      	push	{r4, r5, r6, lr}
   d72aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d72ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d72b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d72b6:	bf1d      	ittte	ne
   d72b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d72bc:	ea94 0f0c 	teqne	r4, ip
   d72c0:	ea95 0f0c 	teqne	r5, ip
   d72c4:	f000 f8de 	bleq	d7484 <__aeabi_dmul+0x1dc>
   d72c8:	442c      	add	r4, r5
   d72ca:	ea81 0603 	eor.w	r6, r1, r3
   d72ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d72d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d72d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d72da:	bf18      	it	ne
   d72dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d72e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d72e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d72e8:	d038      	beq.n	d735c <__aeabi_dmul+0xb4>
   d72ea:	fba0 ce02 	umull	ip, lr, r0, r2
   d72ee:	f04f 0500 	mov.w	r5, #0
   d72f2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d72f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d72fa:	fbe0 e503 	umlal	lr, r5, r0, r3
   d72fe:	f04f 0600 	mov.w	r6, #0
   d7302:	fbe1 5603 	umlal	r5, r6, r1, r3
   d7306:	f09c 0f00 	teq	ip, #0
   d730a:	bf18      	it	ne
   d730c:	f04e 0e01 	orrne.w	lr, lr, #1
   d7310:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d7314:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d7318:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d731c:	d204      	bcs.n	d7328 <__aeabi_dmul+0x80>
   d731e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d7322:	416d      	adcs	r5, r5
   d7324:	eb46 0606 	adc.w	r6, r6, r6
   d7328:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d732c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d7330:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d7334:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d7338:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d733c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d7340:	bf88      	it	hi
   d7342:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7346:	d81e      	bhi.n	d7386 <__aeabi_dmul+0xde>
   d7348:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d734c:	bf08      	it	eq
   d734e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7352:	f150 0000 	adcs.w	r0, r0, #0
   d7356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d735a:	bd70      	pop	{r4, r5, r6, pc}
   d735c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7360:	ea46 0101 	orr.w	r1, r6, r1
   d7364:	ea40 0002 	orr.w	r0, r0, r2
   d7368:	ea81 0103 	eor.w	r1, r1, r3
   d736c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7370:	bfc2      	ittt	gt
   d7372:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7376:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d737a:	bd70      	popgt	{r4, r5, r6, pc}
   d737c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7380:	f04f 0e00 	mov.w	lr, #0
   d7384:	3c01      	subs	r4, #1
   d7386:	f300 80ab 	bgt.w	d74e0 <__aeabi_dmul+0x238>
   d738a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d738e:	bfde      	ittt	le
   d7390:	2000      	movle	r0, #0
   d7392:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7396:	bd70      	pople	{r4, r5, r6, pc}
   d7398:	f1c4 0400 	rsb	r4, r4, #0
   d739c:	3c20      	subs	r4, #32
   d739e:	da35      	bge.n	d740c <__aeabi_dmul+0x164>
   d73a0:	340c      	adds	r4, #12
   d73a2:	dc1b      	bgt.n	d73dc <__aeabi_dmul+0x134>
   d73a4:	f104 0414 	add.w	r4, r4, #20
   d73a8:	f1c4 0520 	rsb	r5, r4, #32
   d73ac:	fa00 f305 	lsl.w	r3, r0, r5
   d73b0:	fa20 f004 	lsr.w	r0, r0, r4
   d73b4:	fa01 f205 	lsl.w	r2, r1, r5
   d73b8:	ea40 0002 	orr.w	r0, r0, r2
   d73bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d73c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d73c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d73c8:	fa21 f604 	lsr.w	r6, r1, r4
   d73cc:	eb42 0106 	adc.w	r1, r2, r6
   d73d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d73d4:	bf08      	it	eq
   d73d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d73da:	bd70      	pop	{r4, r5, r6, pc}
   d73dc:	f1c4 040c 	rsb	r4, r4, #12
   d73e0:	f1c4 0520 	rsb	r5, r4, #32
   d73e4:	fa00 f304 	lsl.w	r3, r0, r4
   d73e8:	fa20 f005 	lsr.w	r0, r0, r5
   d73ec:	fa01 f204 	lsl.w	r2, r1, r4
   d73f0:	ea40 0002 	orr.w	r0, r0, r2
   d73f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d73f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d73fc:	f141 0100 	adc.w	r1, r1, #0
   d7400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7404:	bf08      	it	eq
   d7406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d740a:	bd70      	pop	{r4, r5, r6, pc}
   d740c:	f1c4 0520 	rsb	r5, r4, #32
   d7410:	fa00 f205 	lsl.w	r2, r0, r5
   d7414:	ea4e 0e02 	orr.w	lr, lr, r2
   d7418:	fa20 f304 	lsr.w	r3, r0, r4
   d741c:	fa01 f205 	lsl.w	r2, r1, r5
   d7420:	ea43 0302 	orr.w	r3, r3, r2
   d7424:	fa21 f004 	lsr.w	r0, r1, r4
   d7428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d742c:	fa21 f204 	lsr.w	r2, r1, r4
   d7430:	ea20 0002 	bic.w	r0, r0, r2
   d7434:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d7438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d743c:	bf08      	it	eq
   d743e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d7442:	bd70      	pop	{r4, r5, r6, pc}
   d7444:	f094 0f00 	teq	r4, #0
   d7448:	d10f      	bne.n	d746a <__aeabi_dmul+0x1c2>
   d744a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d744e:	0040      	lsls	r0, r0, #1
   d7450:	eb41 0101 	adc.w	r1, r1, r1
   d7454:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7458:	bf08      	it	eq
   d745a:	3c01      	subeq	r4, #1
   d745c:	d0f7      	beq.n	d744e <__aeabi_dmul+0x1a6>
   d745e:	ea41 0106 	orr.w	r1, r1, r6
   d7462:	f095 0f00 	teq	r5, #0
   d7466:	bf18      	it	ne
   d7468:	4770      	bxne	lr
   d746a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d746e:	0052      	lsls	r2, r2, #1
   d7470:	eb43 0303 	adc.w	r3, r3, r3
   d7474:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7478:	bf08      	it	eq
   d747a:	3d01      	subeq	r5, #1
   d747c:	d0f7      	beq.n	d746e <__aeabi_dmul+0x1c6>
   d747e:	ea43 0306 	orr.w	r3, r3, r6
   d7482:	4770      	bx	lr
   d7484:	ea94 0f0c 	teq	r4, ip
   d7488:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d748c:	bf18      	it	ne
   d748e:	ea95 0f0c 	teqne	r5, ip
   d7492:	d00c      	beq.n	d74ae <__aeabi_dmul+0x206>
   d7494:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7498:	bf18      	it	ne
   d749a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d749e:	d1d1      	bne.n	d7444 <__aeabi_dmul+0x19c>
   d74a0:	ea81 0103 	eor.w	r1, r1, r3
   d74a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d74a8:	f04f 0000 	mov.w	r0, #0
   d74ac:	bd70      	pop	{r4, r5, r6, pc}
   d74ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d74b2:	bf06      	itte	eq
   d74b4:	4610      	moveq	r0, r2
   d74b6:	4619      	moveq	r1, r3
   d74b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d74bc:	d019      	beq.n	d74f2 <__aeabi_dmul+0x24a>
   d74be:	ea94 0f0c 	teq	r4, ip
   d74c2:	d102      	bne.n	d74ca <__aeabi_dmul+0x222>
   d74c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d74c8:	d113      	bne.n	d74f2 <__aeabi_dmul+0x24a>
   d74ca:	ea95 0f0c 	teq	r5, ip
   d74ce:	d105      	bne.n	d74dc <__aeabi_dmul+0x234>
   d74d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d74d4:	bf1c      	itt	ne
   d74d6:	4610      	movne	r0, r2
   d74d8:	4619      	movne	r1, r3
   d74da:	d10a      	bne.n	d74f2 <__aeabi_dmul+0x24a>
   d74dc:	ea81 0103 	eor.w	r1, r1, r3
   d74e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d74e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d74e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d74ec:	f04f 0000 	mov.w	r0, #0
   d74f0:	bd70      	pop	{r4, r5, r6, pc}
   d74f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d74f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d74fa:	bd70      	pop	{r4, r5, r6, pc}

000d74fc <__aeabi_ddiv>:
   d74fc:	b570      	push	{r4, r5, r6, lr}
   d74fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d7502:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d7506:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d750a:	bf1d      	ittte	ne
   d750c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d7510:	ea94 0f0c 	teqne	r4, ip
   d7514:	ea95 0f0c 	teqne	r5, ip
   d7518:	f000 f8a7 	bleq	d766a <__aeabi_ddiv+0x16e>
   d751c:	eba4 0405 	sub.w	r4, r4, r5
   d7520:	ea81 0e03 	eor.w	lr, r1, r3
   d7524:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7528:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d752c:	f000 8088 	beq.w	d7640 <__aeabi_ddiv+0x144>
   d7530:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7534:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d7538:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d753c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d7540:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d7544:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d7548:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d754c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7550:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7554:	429d      	cmp	r5, r3
   d7556:	bf08      	it	eq
   d7558:	4296      	cmpeq	r6, r2
   d755a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d755e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7562:	d202      	bcs.n	d756a <__aeabi_ddiv+0x6e>
   d7564:	085b      	lsrs	r3, r3, #1
   d7566:	ea4f 0232 	mov.w	r2, r2, rrx
   d756a:	1ab6      	subs	r6, r6, r2
   d756c:	eb65 0503 	sbc.w	r5, r5, r3
   d7570:	085b      	lsrs	r3, r3, #1
   d7572:	ea4f 0232 	mov.w	r2, r2, rrx
   d7576:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d757a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d757e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7582:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7586:	bf22      	ittt	cs
   d7588:	1ab6      	subcs	r6, r6, r2
   d758a:	4675      	movcs	r5, lr
   d758c:	ea40 000c 	orrcs.w	r0, r0, ip
   d7590:	085b      	lsrs	r3, r3, #1
   d7592:	ea4f 0232 	mov.w	r2, r2, rrx
   d7596:	ebb6 0e02 	subs.w	lr, r6, r2
   d759a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d759e:	bf22      	ittt	cs
   d75a0:	1ab6      	subcs	r6, r6, r2
   d75a2:	4675      	movcs	r5, lr
   d75a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d75a8:	085b      	lsrs	r3, r3, #1
   d75aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d75ae:	ebb6 0e02 	subs.w	lr, r6, r2
   d75b2:	eb75 0e03 	sbcs.w	lr, r5, r3
   d75b6:	bf22      	ittt	cs
   d75b8:	1ab6      	subcs	r6, r6, r2
   d75ba:	4675      	movcs	r5, lr
   d75bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d75c0:	085b      	lsrs	r3, r3, #1
   d75c2:	ea4f 0232 	mov.w	r2, r2, rrx
   d75c6:	ebb6 0e02 	subs.w	lr, r6, r2
   d75ca:	eb75 0e03 	sbcs.w	lr, r5, r3
   d75ce:	bf22      	ittt	cs
   d75d0:	1ab6      	subcs	r6, r6, r2
   d75d2:	4675      	movcs	r5, lr
   d75d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d75d8:	ea55 0e06 	orrs.w	lr, r5, r6
   d75dc:	d018      	beq.n	d7610 <__aeabi_ddiv+0x114>
   d75de:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d75e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d75e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d75ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d75ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d75f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d75f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d75fa:	d1c0      	bne.n	d757e <__aeabi_ddiv+0x82>
   d75fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7600:	d10b      	bne.n	d761a <__aeabi_ddiv+0x11e>
   d7602:	ea41 0100 	orr.w	r1, r1, r0
   d7606:	f04f 0000 	mov.w	r0, #0
   d760a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d760e:	e7b6      	b.n	d757e <__aeabi_ddiv+0x82>
   d7610:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7614:	bf04      	itt	eq
   d7616:	4301      	orreq	r1, r0
   d7618:	2000      	moveq	r0, #0
   d761a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d761e:	bf88      	it	hi
   d7620:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d7624:	f63f aeaf 	bhi.w	d7386 <__aeabi_dmul+0xde>
   d7628:	ebb5 0c03 	subs.w	ip, r5, r3
   d762c:	bf04      	itt	eq
   d762e:	ebb6 0c02 	subseq.w	ip, r6, r2
   d7632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7636:	f150 0000 	adcs.w	r0, r0, #0
   d763a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d763e:	bd70      	pop	{r4, r5, r6, pc}
   d7640:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d7644:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d7648:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d764c:	bfc2      	ittt	gt
   d764e:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7652:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7656:	bd70      	popgt	{r4, r5, r6, pc}
   d7658:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d765c:	f04f 0e00 	mov.w	lr, #0
   d7660:	3c01      	subs	r4, #1
   d7662:	e690      	b.n	d7386 <__aeabi_dmul+0xde>
   d7664:	ea45 0e06 	orr.w	lr, r5, r6
   d7668:	e68d      	b.n	d7386 <__aeabi_dmul+0xde>
   d766a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d766e:	ea94 0f0c 	teq	r4, ip
   d7672:	bf08      	it	eq
   d7674:	ea95 0f0c 	teqeq	r5, ip
   d7678:	f43f af3b 	beq.w	d74f2 <__aeabi_dmul+0x24a>
   d767c:	ea94 0f0c 	teq	r4, ip
   d7680:	d10a      	bne.n	d7698 <__aeabi_ddiv+0x19c>
   d7682:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7686:	f47f af34 	bne.w	d74f2 <__aeabi_dmul+0x24a>
   d768a:	ea95 0f0c 	teq	r5, ip
   d768e:	f47f af25 	bne.w	d74dc <__aeabi_dmul+0x234>
   d7692:	4610      	mov	r0, r2
   d7694:	4619      	mov	r1, r3
   d7696:	e72c      	b.n	d74f2 <__aeabi_dmul+0x24a>
   d7698:	ea95 0f0c 	teq	r5, ip
   d769c:	d106      	bne.n	d76ac <__aeabi_ddiv+0x1b0>
   d769e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d76a2:	f43f aefd 	beq.w	d74a0 <__aeabi_dmul+0x1f8>
   d76a6:	4610      	mov	r0, r2
   d76a8:	4619      	mov	r1, r3
   d76aa:	e722      	b.n	d74f2 <__aeabi_dmul+0x24a>
   d76ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d76b0:	bf18      	it	ne
   d76b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d76b6:	f47f aec5 	bne.w	d7444 <__aeabi_dmul+0x19c>
   d76ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d76be:	f47f af0d 	bne.w	d74dc <__aeabi_dmul+0x234>
   d76c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d76c6:	f47f aeeb 	bne.w	d74a0 <__aeabi_dmul+0x1f8>
   d76ca:	e712      	b.n	d74f2 <__aeabi_dmul+0x24a>

000d76cc <__aeabi_d2f>:
   d76cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d76d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d76d4:	bf24      	itt	cs
   d76d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d76da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d76de:	d90d      	bls.n	d76fc <__aeabi_d2f+0x30>
   d76e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d76e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d76e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d76ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d76f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d76f4:	bf08      	it	eq
   d76f6:	f020 0001 	biceq.w	r0, r0, #1
   d76fa:	4770      	bx	lr
   d76fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d7700:	d121      	bne.n	d7746 <__aeabi_d2f+0x7a>
   d7702:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d7706:	bfbc      	itt	lt
   d7708:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d770c:	4770      	bxlt	lr
   d770e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7712:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d7716:	f1c2 0218 	rsb	r2, r2, #24
   d771a:	f1c2 0c20 	rsb	ip, r2, #32
   d771e:	fa10 f30c 	lsls.w	r3, r0, ip
   d7722:	fa20 f002 	lsr.w	r0, r0, r2
   d7726:	bf18      	it	ne
   d7728:	f040 0001 	orrne.w	r0, r0, #1
   d772c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d7730:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d7734:	fa03 fc0c 	lsl.w	ip, r3, ip
   d7738:	ea40 000c 	orr.w	r0, r0, ip
   d773c:	fa23 f302 	lsr.w	r3, r3, r2
   d7740:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d7744:	e7cc      	b.n	d76e0 <__aeabi_d2f+0x14>
   d7746:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d774a:	d107      	bne.n	d775c <__aeabi_d2f+0x90>
   d774c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d7750:	bf1e      	ittt	ne
   d7752:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d7756:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d775a:	4770      	bxne	lr
   d775c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d7760:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d7764:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d7768:	4770      	bx	lr
   d776a:	bf00      	nop

000d776c <atoi>:
   d776c:	220a      	movs	r2, #10
   d776e:	2100      	movs	r1, #0
   d7770:	f000 b90c 	b.w	d798c <strtol>

000d7774 <__cxa_atexit>:
   d7774:	b510      	push	{r4, lr}
   d7776:	4c05      	ldr	r4, [pc, #20]	; (d778c <__cxa_atexit+0x18>)
   d7778:	4613      	mov	r3, r2
   d777a:	b12c      	cbz	r4, d7788 <__cxa_atexit+0x14>
   d777c:	460a      	mov	r2, r1
   d777e:	4601      	mov	r1, r0
   d7780:	2002      	movs	r0, #2
   d7782:	f3af 8000 	nop.w
   d7786:	bd10      	pop	{r4, pc}
   d7788:	4620      	mov	r0, r4
   d778a:	e7fc      	b.n	d7786 <__cxa_atexit+0x12>
   d778c:	00000000 	.word	0x00000000

000d7790 <memcpy>:
   d7790:	440a      	add	r2, r1
   d7792:	4291      	cmp	r1, r2
   d7794:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7798:	d100      	bne.n	d779c <memcpy+0xc>
   d779a:	4770      	bx	lr
   d779c:	b510      	push	{r4, lr}
   d779e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d77a2:	f803 4f01 	strb.w	r4, [r3, #1]!
   d77a6:	4291      	cmp	r1, r2
   d77a8:	d1f9      	bne.n	d779e <memcpy+0xe>
   d77aa:	bd10      	pop	{r4, pc}

000d77ac <memset>:
   d77ac:	4402      	add	r2, r0
   d77ae:	4603      	mov	r3, r0
   d77b0:	4293      	cmp	r3, r2
   d77b2:	d100      	bne.n	d77b6 <memset+0xa>
   d77b4:	4770      	bx	lr
   d77b6:	f803 1b01 	strb.w	r1, [r3], #1
   d77ba:	e7f9      	b.n	d77b0 <memset+0x4>

000d77bc <srand>:
   d77bc:	b538      	push	{r3, r4, r5, lr}
   d77be:	4b0d      	ldr	r3, [pc, #52]	; (d77f4 <srand+0x38>)
   d77c0:	681d      	ldr	r5, [r3, #0]
   d77c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d77c4:	4604      	mov	r4, r0
   d77c6:	b97b      	cbnz	r3, d77e8 <srand+0x2c>
   d77c8:	2018      	movs	r0, #24
   d77ca:	f7fe f8d7 	bl	d597c <malloc>
   d77ce:	4a0a      	ldr	r2, [pc, #40]	; (d77f8 <srand+0x3c>)
   d77d0:	4b0a      	ldr	r3, [pc, #40]	; (d77fc <srand+0x40>)
   d77d2:	63a8      	str	r0, [r5, #56]	; 0x38
   d77d4:	e9c0 2300 	strd	r2, r3, [r0]
   d77d8:	4b09      	ldr	r3, [pc, #36]	; (d7800 <srand+0x44>)
   d77da:	6083      	str	r3, [r0, #8]
   d77dc:	230b      	movs	r3, #11
   d77de:	8183      	strh	r3, [r0, #12]
   d77e0:	2201      	movs	r2, #1
   d77e2:	2300      	movs	r3, #0
   d77e4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d77e8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d77ea:	2200      	movs	r2, #0
   d77ec:	611c      	str	r4, [r3, #16]
   d77ee:	615a      	str	r2, [r3, #20]
   d77f0:	bd38      	pop	{r3, r4, r5, pc}
   d77f2:	bf00      	nop
   d77f4:	2003e42c 	.word	0x2003e42c
   d77f8:	abcd330e 	.word	0xabcd330e
   d77fc:	e66d1234 	.word	0xe66d1234
   d7800:	0005deec 	.word	0x0005deec

000d7804 <strcmp>:
   d7804:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7808:	f811 3b01 	ldrb.w	r3, [r1], #1
   d780c:	2a01      	cmp	r2, #1
   d780e:	bf28      	it	cs
   d7810:	429a      	cmpcs	r2, r3
   d7812:	d0f7      	beq.n	d7804 <strcmp>
   d7814:	1ad0      	subs	r0, r2, r3
   d7816:	4770      	bx	lr

000d7818 <strcpy>:
   d7818:	4603      	mov	r3, r0
   d781a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d781e:	f803 2b01 	strb.w	r2, [r3], #1
   d7822:	2a00      	cmp	r2, #0
   d7824:	d1f9      	bne.n	d781a <strcpy+0x2>
   d7826:	4770      	bx	lr

000d7828 <strdup>:
   d7828:	4b02      	ldr	r3, [pc, #8]	; (d7834 <strdup+0xc>)
   d782a:	4601      	mov	r1, r0
   d782c:	6818      	ldr	r0, [r3, #0]
   d782e:	f000 b803 	b.w	d7838 <_strdup_r>
   d7832:	bf00      	nop
   d7834:	2003e42c 	.word	0x2003e42c

000d7838 <_strdup_r>:
   d7838:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d783a:	4604      	mov	r4, r0
   d783c:	4608      	mov	r0, r1
   d783e:	460d      	mov	r5, r1
   d7840:	f000 f80f 	bl	d7862 <strlen>
   d7844:	1c42      	adds	r2, r0, #1
   d7846:	4611      	mov	r1, r2
   d7848:	4620      	mov	r0, r4
   d784a:	9201      	str	r2, [sp, #4]
   d784c:	f7fe f8be 	bl	d59cc <_malloc_r>
   d7850:	4604      	mov	r4, r0
   d7852:	b118      	cbz	r0, d785c <_strdup_r+0x24>
   d7854:	9a01      	ldr	r2, [sp, #4]
   d7856:	4629      	mov	r1, r5
   d7858:	f7ff ff9a 	bl	d7790 <memcpy>
   d785c:	4620      	mov	r0, r4
   d785e:	b003      	add	sp, #12
   d7860:	bd30      	pop	{r4, r5, pc}

000d7862 <strlen>:
   d7862:	4603      	mov	r3, r0
   d7864:	f813 2b01 	ldrb.w	r2, [r3], #1
   d7868:	2a00      	cmp	r2, #0
   d786a:	d1fb      	bne.n	d7864 <strlen+0x2>
   d786c:	1a18      	subs	r0, r3, r0
   d786e:	3801      	subs	r0, #1
   d7870:	4770      	bx	lr

000d7872 <strncpy>:
   d7872:	b510      	push	{r4, lr}
   d7874:	3901      	subs	r1, #1
   d7876:	4603      	mov	r3, r0
   d7878:	b132      	cbz	r2, d7888 <strncpy+0x16>
   d787a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d787e:	f803 4b01 	strb.w	r4, [r3], #1
   d7882:	3a01      	subs	r2, #1
   d7884:	2c00      	cmp	r4, #0
   d7886:	d1f7      	bne.n	d7878 <strncpy+0x6>
   d7888:	441a      	add	r2, r3
   d788a:	2100      	movs	r1, #0
   d788c:	4293      	cmp	r3, r2
   d788e:	d100      	bne.n	d7892 <strncpy+0x20>
   d7890:	bd10      	pop	{r4, pc}
   d7892:	f803 1b01 	strb.w	r1, [r3], #1
   d7896:	e7f9      	b.n	d788c <strncpy+0x1a>

000d7898 <_strtol_l.isra.0>:
   d7898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d789c:	4e3a      	ldr	r6, [pc, #232]	; (d7988 <_strtol_l.isra.0+0xf0>)
   d789e:	4686      	mov	lr, r0
   d78a0:	468c      	mov	ip, r1
   d78a2:	4660      	mov	r0, ip
   d78a4:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d78a8:	5da5      	ldrb	r5, [r4, r6]
   d78aa:	f015 0508 	ands.w	r5, r5, #8
   d78ae:	d1f8      	bne.n	d78a2 <_strtol_l.isra.0+0xa>
   d78b0:	2c2d      	cmp	r4, #45	; 0x2d
   d78b2:	d133      	bne.n	d791c <_strtol_l.isra.0+0x84>
   d78b4:	f89c 4000 	ldrb.w	r4, [ip]
   d78b8:	f04f 0801 	mov.w	r8, #1
   d78bc:	f100 0c02 	add.w	ip, r0, #2
   d78c0:	2b00      	cmp	r3, #0
   d78c2:	d05c      	beq.n	d797e <_strtol_l.isra.0+0xe6>
   d78c4:	2b10      	cmp	r3, #16
   d78c6:	d10c      	bne.n	d78e2 <_strtol_l.isra.0+0x4a>
   d78c8:	2c30      	cmp	r4, #48	; 0x30
   d78ca:	d10a      	bne.n	d78e2 <_strtol_l.isra.0+0x4a>
   d78cc:	f89c 0000 	ldrb.w	r0, [ip]
   d78d0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d78d4:	2858      	cmp	r0, #88	; 0x58
   d78d6:	d14d      	bne.n	d7974 <_strtol_l.isra.0+0xdc>
   d78d8:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d78dc:	2310      	movs	r3, #16
   d78de:	f10c 0c02 	add.w	ip, ip, #2
   d78e2:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d78e6:	3f01      	subs	r7, #1
   d78e8:	2600      	movs	r6, #0
   d78ea:	fbb7 f9f3 	udiv	r9, r7, r3
   d78ee:	4630      	mov	r0, r6
   d78f0:	fb03 7a19 	mls	sl, r3, r9, r7
   d78f4:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d78f8:	2d09      	cmp	r5, #9
   d78fa:	d818      	bhi.n	d792e <_strtol_l.isra.0+0x96>
   d78fc:	462c      	mov	r4, r5
   d78fe:	42a3      	cmp	r3, r4
   d7900:	dd24      	ble.n	d794c <_strtol_l.isra.0+0xb4>
   d7902:	1c75      	adds	r5, r6, #1
   d7904:	d007      	beq.n	d7916 <_strtol_l.isra.0+0x7e>
   d7906:	4581      	cmp	r9, r0
   d7908:	d31d      	bcc.n	d7946 <_strtol_l.isra.0+0xae>
   d790a:	d101      	bne.n	d7910 <_strtol_l.isra.0+0x78>
   d790c:	45a2      	cmp	sl, r4
   d790e:	db1a      	blt.n	d7946 <_strtol_l.isra.0+0xae>
   d7910:	fb00 4003 	mla	r0, r0, r3, r4
   d7914:	2601      	movs	r6, #1
   d7916:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d791a:	e7eb      	b.n	d78f4 <_strtol_l.isra.0+0x5c>
   d791c:	2c2b      	cmp	r4, #43	; 0x2b
   d791e:	bf08      	it	eq
   d7920:	f89c 4000 	ldrbeq.w	r4, [ip]
   d7924:	46a8      	mov	r8, r5
   d7926:	bf08      	it	eq
   d7928:	f100 0c02 	addeq.w	ip, r0, #2
   d792c:	e7c8      	b.n	d78c0 <_strtol_l.isra.0+0x28>
   d792e:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d7932:	2d19      	cmp	r5, #25
   d7934:	d801      	bhi.n	d793a <_strtol_l.isra.0+0xa2>
   d7936:	3c37      	subs	r4, #55	; 0x37
   d7938:	e7e1      	b.n	d78fe <_strtol_l.isra.0+0x66>
   d793a:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d793e:	2d19      	cmp	r5, #25
   d7940:	d804      	bhi.n	d794c <_strtol_l.isra.0+0xb4>
   d7942:	3c57      	subs	r4, #87	; 0x57
   d7944:	e7db      	b.n	d78fe <_strtol_l.isra.0+0x66>
   d7946:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d794a:	e7e4      	b.n	d7916 <_strtol_l.isra.0+0x7e>
   d794c:	1c73      	adds	r3, r6, #1
   d794e:	d106      	bne.n	d795e <_strtol_l.isra.0+0xc6>
   d7950:	2322      	movs	r3, #34	; 0x22
   d7952:	f8ce 3000 	str.w	r3, [lr]
   d7956:	4638      	mov	r0, r7
   d7958:	b942      	cbnz	r2, d796c <_strtol_l.isra.0+0xd4>
   d795a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d795e:	f1b8 0f00 	cmp.w	r8, #0
   d7962:	d000      	beq.n	d7966 <_strtol_l.isra.0+0xce>
   d7964:	4240      	negs	r0, r0
   d7966:	2a00      	cmp	r2, #0
   d7968:	d0f7      	beq.n	d795a <_strtol_l.isra.0+0xc2>
   d796a:	b10e      	cbz	r6, d7970 <_strtol_l.isra.0+0xd8>
   d796c:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d7970:	6011      	str	r1, [r2, #0]
   d7972:	e7f2      	b.n	d795a <_strtol_l.isra.0+0xc2>
   d7974:	2430      	movs	r4, #48	; 0x30
   d7976:	2b00      	cmp	r3, #0
   d7978:	d1b3      	bne.n	d78e2 <_strtol_l.isra.0+0x4a>
   d797a:	2308      	movs	r3, #8
   d797c:	e7b1      	b.n	d78e2 <_strtol_l.isra.0+0x4a>
   d797e:	2c30      	cmp	r4, #48	; 0x30
   d7980:	d0a4      	beq.n	d78cc <_strtol_l.isra.0+0x34>
   d7982:	230a      	movs	r3, #10
   d7984:	e7ad      	b.n	d78e2 <_strtol_l.isra.0+0x4a>
   d7986:	bf00      	nop
   d7988:	000d7ece 	.word	0x000d7ece

000d798c <strtol>:
   d798c:	4613      	mov	r3, r2
   d798e:	460a      	mov	r2, r1
   d7990:	4601      	mov	r1, r0
   d7992:	4802      	ldr	r0, [pc, #8]	; (d799c <strtol+0x10>)
   d7994:	6800      	ldr	r0, [r0, #0]
   d7996:	f7ff bf7f 	b.w	d7898 <_strtol_l.isra.0>
   d799a:	bf00      	nop
   d799c:	2003e42c 	.word	0x2003e42c

000d79a0 <dynalib_user>:
   d79a0:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d79b0:	00000000 6e6b6e55 006e776f 20746f4e     ....Unknown.Not 
   d79c0:	72616843 676e6967 61684300 64656772     Charging.Charged
   d79d0:	73694400 72616863 676e6967 75614600     .Discharging.Fau
   d79e0:	4400746c 6e6f6369 7463656e 36006465     lt.Diconnected.6
   d79f0:	0030302e 6554227b 7265706d 72757461     .00.{"Temperatur
   d7a00:	253a2265 66312e34 4822202c 64696d75     e":%4.1f, "Humid
   d7a10:	22797469 2e34253a 202c6631 754c2220     ity":%4.1f,  "Lu
   d7a20:	253a2278 66312e34 2220202c 74696857     x":%4.1f,  "Whit
   d7a30:	253a2265 66312e34 2220202c 22534c41     e":%4.1f,  "ALS"
   d7a40:	2e34253a 222c6631 74746142 22797265     :%4.1f,"Battery"
   d7a50:	7d69253a 454c4700 4f4f485f 6f4e004b     :%i}.GLE_HOOK.No
   d7a60:	74614420 62550061 746f6469 6f482073      Data.Ubidots Ho
   d7a70:	52006b6f 6f707365 2065736e 65636552     ok.Response Rece
   d7a80:	64657669 61745300 25006574 66312e34     ived.State.%4.1f
   d7a90:	2500432a 66312e34 4c002525 3a207875     *C.%4.1f%%.Lux :
   d7aa0:	2e342520 57006631 65746968 25203a20      %4.1f.White : %
   d7ab0:	66312e34 534c4100 25203a20 66312e34     4.1f.ALS : %4.1f
   d7ac0:	20692500 46002525 656c6961 6f742064     .%i %%.Failed to
   d7ad0:	72657020 6d726f66 61657220 676e6964      perform reading
   d7ae0:	00283a20 00676f4c 6c696146 74206465      :(.Log.Failed t
   d7af0:	6174206f 7220656b 69646165 0021676e     o take reading!.
   d7b00:	33544853 65742031 52007473 61656c65     SHT31 test.Relea
   d7b10:	74006573 65706d65 75746172 68006572     se.temperature.h
   d7b20:	64696d75 00797469 0078754c 74696857     umidity.Lux.Whit
   d7b30:	61520065 4c412077 61420053 72657474     e.Raw ALS.Batter
   d7b40:	61420079 72657474 6e6f4379 74786574     y.BatteryContext
   d7b50:	776f5000 6f537265 65637275 61654d00     .PowerSource.Mea
   d7b60:	65727573 776f4e2d 72655600 65736f62     sure-Now.Verbose
   d7b70:	646f4d2d 72450065 20726f72 4853202d     -Mode.Error - SH
   d7b80:	20313354 74696e49 696c6169 6974617a     T31 Initializati
   d7b90:	43006e6f 646c756f 2074276e 646e6966     on.Couldn't find
   d7ba0:	54485320 45003133 726f7272 56202d20      SHT31.Error - V
   d7bb0:	204c4d45 74696e49 696c6169 6974617a     EML Initializati
   d7bc0:	43006e6f 646c756f 2074276e 646e6966     on.Couldn't find
   d7bd0:	4d455620 6147004c 49006e69 6765746e      VEML.Gain.Integ
   d7be0:	69746172 54206e6f 00656d69 6c696146     ration Time.Fail
   d7bf0:	74206465 6f63206f 63656e6e 74530074     ed to connect.St
   d7c00:	75747261 65530070 65562074 736f6272     artup.Set Verbos
   d7c10:	6f4d2065 43006564 7261656c 56206465     e Mode.Cleared V
   d7c20:	6f627265 4d206573 0065646f 6d6f7246     erbose Mode.From
   d7c30:	20732520 25206f74 74530073 20657461      %s to %s.State 
   d7c40:	6e617254 69746973 45006e6f 726f7272     Transition.Error
   d7c50:	6b617420 20676e69 7361654d 6d657275      taking Measurem
   d7c60:	73746e65 61707300 642f6b72 63697665     ents.spark/devic
   d7c70:	65732f65 6f697373 6e652f6e 72450064     e/session/end.Er
   d7c80:	20726f72 74617453 202d2065 65736552     ror State - Rese
   d7c90:	6f470074 20676e69 74206f74 20656b61     t.Going to take 
   d7ca0:	20392061 756e696d 20736574 0070616e     a 9 minutes nap.
   d7cb0:	7070614e 00676e69 6d6f7246 656c5320     Napping.From Sle
   d7cc0:	57007065 55656b6f 00000070 000d79b4     ep.WokeUp....y..
   d7cd0:	000d79bc 000d79c0 000d79c9 000d79d1     .y...y...y...y..
   d7ce0:	000d79dd 000d79e3 72617453 20707574     .y...y..Startup 
   d7cf0:	63637553 66737365 00006c75 00000000     Successful......
	...

000d7d28 <_ZTVN5spark13CellularClassE>:
	...
   d7d30:	000d5acf 000d5ac5 000d5abb 000d5a71     .Z...Z...Z..qZ..
   d7d40:	000d5aaf 000d5aa3 000d5a97 000d5a8f     .Z...Z...Z...Z..
   d7d50:	000d5a85 000d5a7b 000d6395              .Z..{Z...c..

000d7d5c <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7d64:	000d5b09 000d5b0f 000d5b5f 000d5b1d     .[...[.._[...[..
   d7d74:	000d5b0b                                .[..

000d7d78 <_ZTVN5spark13EthernetClassE>:
	...
   d7d80:	000d6123 000d6119 000d610f 000d6105     #a...a...a...a..
   d7d90:	000d60f9 000d60ed 000d60e1 000d60d9     .`...`...`...`..
   d7da0:	000d60cf 000d60c5 000d6395              .`...`...c..

000d7dac <_ZTV7TwoWire>:
	...
   d7db4:	000d6141 000d618b 000d6163 000d6143     Aa...a..ca..Ca..
   d7dc4:	000d616b 000d6173 000d617b 000d6183     ka..sa..{a...a..

000d7dd4 <_ZTV9IPAddress>:
	...
   d7ddc:	000d6247 000d6237 000d6239 00707061     Gb..7b..9b..app.

000d7dec <_ZTVN5spark12NetworkClassE>:
	...
   d7df4:	000d632d 000d6337 000d6341 000d634b     -c..7c..Ac..Kc..
   d7e04:	000d6355 000d6361 000d636d 000d6379     Uc..ac..mc..yc..
   d7e14:	000d6381 000d638b 000d6395 69726977     .c...c...c..wiri
   d7e24:	5300676e 65747379 6c73206d 20706565     ng.System sleep 
   d7e34:	666e6f63 72756769 6f697461 7369206e     configuration is
   d7e44:	766e6920 64696c61 5925002e 2d6d252d      invalid..%Y-%m-
   d7e54:	25546425 4d253a48 2553253a 7361007a     %dT%H:%M:%S%z.as
   d7e64:	6d697463 00000065                       ctime...

000d7e6c <_ZTV11USARTSerial>:
	...
   d7e74:	000d69c5 000d6a31 000d6a09 000d647d     .i..1j...j..}d..
   d7e84:	000d69d9 000d69f5 000d69e7 000d6a03     .i...i...i...j..
   d7e94:	000d69c7 000d69cb                       .i...i..

000d7e9c <_ZTV9USBSerial>:
	...
   d7ea4:	000d6ac5 000d6b2d 000d6b03 000d647d     .j..-k...k..}d..
   d7eb4:	000d6af5 000d6ac7 000d6ad7 000d6b27     .j...j...j..'k..
   d7ec4:	000d6ae7 000d6ac1                       .j...j..

000d7ecc <_ZSt7nothrow>:
	...

000d7ecd <_ctype_>:
   d7ecd:	20202000 20202020 28282020 20282828     .         ((((( 
   d7edd:	20202020 20202020 20202020 20202020                     
   d7eed:	10108820 10101010 10101010 10101010      ...............
   d7efd:	04040410 04040404 10040404 10101010     ................
   d7f0d:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d7f1d:	01010101 01010101 01010101 10101010     ................
   d7f2d:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d7f3d:	02020202 02020202 02020202 10101010     ................
   d7f4d:	00000020 00000000 00000000 00000000      ...............
	...

000d7fce <link_const_variable_data_end>:
	...

000d7fd0 <link_constructors_location>:
   d7fd0:	000d4cdd 	.word	0x000d4cdd
   d7fd4:	000d5a49 	.word	0x000d5a49
   d7fd8:	000d5ad9 	.word	0x000d5ad9
   d7fdc:	000d612d 	.word	0x000d612d
   d7fe0:	000d631d 	.word	0x000d631d
   d7fe4:	000d6469 	.word	0x000d6469
   d7fe8:	000d6549 	.word	0x000d6549
   d7fec:	000d6865 	.word	0x000d6865
   d7ff0:	000d69b1 	.word	0x000d69b1

000d7ff4 <link_constructors_end>:
	...
